schema {
  query: RootQueryType
  mutation: RootMutationType
}

"Data found for one application instance's loaded modules.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentAccountApplicationLoadedModules {
  "List of Guids of the APM Applications this instance belongs to.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationGuids: [EntityGuid!]!

  "Information of the application instance, such as host and language.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  details: AgentEnvironmentApplicationInstanceDetails

  "A list of loaded modules of the application instance.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  loadedModules: [AgentEnvironmentApplicationLoadedModule!]
}

"The input object representing parameters for the name filter\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityGroupNameInput {
  "Part of a group name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  contains: String

  "A group name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Filter incidents\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
input AiIssuesFilterIncidents {
  "entityGuids\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: [EntityGuid!]

  "entityTypes\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: [String!]

  "ids\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  ids: [ID!]

  "priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: [String!]

  "states\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  states: [AiIssuesIncidentState!]
}

"Connect\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsConnectIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Provides all the available filters on the organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationRoleOrganizationIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"A third party service entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ThirdPartyServiceEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"An entity relationship\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityRelationship {
  "The source entity of the relationship.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  source: EntityRelationshipNode @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  "The target entity of the relationship.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  target: EntityRelationshipNode @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  "The type of the relationship. For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: EntityRelationshipType
}

"Webhook notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsWebhookNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "Webhook channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsWebhookNotificationChannelConfig!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"Blueprint for a search operation\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsSearchBlueprint {
  "Expression to use to compare incidents.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  expression: AiDecisionsRuleExpressionInput!

  "Maximum number of incidents to query for each available incident selector\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  limit: Int

  "Duration to consider resources for.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  retentionWindowLength: Milliseconds
}

"The source generating the event data\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n\n"
type DataDictionaryDataSource {
  "Name of the source\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  name: String!
}

"container for authentication domains enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementAuthenticationDomainSearch {
  "containers of users and groups\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  authenticationDomains: [AuthorizationManagementAuthenticationDomain!]!

  "an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Successfully created trace observers, or one or more error responses if there were issues.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeCreateTraceObserverResponse {
  "Errors that may occur when creating a `TraceObserver`. Defaults to `null` in case of success.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  errors: [EdgeCreateTraceObserverResponseError]

  "The trace observer defined in `CreateTraceObserverInput`. Defaults to `null` in case of failure.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  traceObserver: EdgeTraceObserver
}

"Input type used when updating widgets.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardUpdateWidgetInput {
  "Typed widgets are area, bar, billboard, line, markdown, pie, and table. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-typed) for more info.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  configuration: DashboardWidgetConfigurationInput

  "ID of the widget to be updated.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  id: ID!

  "The widget's position and size in the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  layout: DashboardWidgetLayoutInput

  "Entities related to the widget. Currently only supports one Dashboard entity guid, but may allow other cases in the future.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  linkedEntityGuids: [EntityGuid!]

  "Untyped widgets are all other widgets, such as bullet, histogram, inventory, etc. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-untyped) for more info.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  rawConfiguration: DashboardWidgetRawConfiguration

  "A title for the widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "Specifies how this widget will be visualized. If null, the WidgetConfigurationInput will be used to determine the visualization.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  visualization: DashboardWidgetVisualizationInput
}

"Environment configuration object\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesEnvironmentConfiguration {
  "Flapping interval in seconds\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  flappingInterval: Seconds

  "Grace periods per priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  gracePeriod: [AiIssuesGracePeriodConfig!]

  "Inactive period in seconds\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  inactivePeriod: Seconds

  "Incident timeout in seconds\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentTimeout: Seconds

  "Issue TTL in seconds\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  issueTtl: Seconds

  "Max incidents in the issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  maxIssueSize: Int
}

"Indicates where a variable's possible values may come from.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardVariableType {
  """Value comes from an enumerated list of possible values."""
  ENUM

  """Value comes from the results of a NRQL query."""
  NRQL

  """Dashboard user can supply an arbitrary string value to variable."""
  STRING
}

"Metadata associated with the alert condition template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAlertConditionTemplateMetadata {
  "A short form description for the alert condition template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the alert condition template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "Determines the type of alert condition template that will be created\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  type: Nr1CatalogAlertConditionType!
}

"The result of deleting a key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type KeyTransactionDeleteResult {
  "If the delete request succeeded.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  success: Boolean
}

"Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionExpirationInput {
  "Whether to close all open violations when the signal expires. Defaults to true.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  closeViolationsOnExpiration: Boolean

  "The amount of time (in seconds) to wait before considering if the signal has been lost. Max value of 172800 (48 hours).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expirationDuration: Seconds

  "Whether to create a new \"lost signal\" violation to capture that the signal expired. Defaults to false.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  openViolationOnExpiration: Boolean
}

"An entity user-defined relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipUserDefinedEdge implements EntityRelationshipEdge {
  "The time the relationship was created.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "The user that created the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdByUser: UserReference

  "The source entity of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  source: EntityRelationshipVertex!

  "The target entity of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  target: EntityRelationshipVertex!

  "The type of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  type: EntityRelationshipEdgeType!
}

"Input type for Or expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsOrInput {
  "Left child expression.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsRuleExpressionInput!

  "Right child expression.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsRuleExpressionInput!
}

"Period of time from which the data to be displayed on the dashboard will be obtained.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardSnapshotUrlTimeWindowInput {
  "The starting time of the time window. If specified, an endTime or a duration must also be specified.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  beginTime: EpochMilliseconds

  "The duration of the time window.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  duration: Milliseconds

  "The end time of the time window. If specified, a beginTime or a duration must also be specified.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  endTime: EpochMilliseconds
}

"An single issue in JIRA\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxJiraIssue implements ErrorsInboxResource {
  "Unique resource identifier\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  id: ID!

  "Issue Id in JIRA\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  issueId: ID!

  "Url to access the issue in JIRA\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  url: String!
}

"Obfuscation level for SQL queries reported in transaction trace nodes.\n\nWhen turned on, the New Relic agent will attempt to remove values from SQL qeries.\n\nFor example:\n\n```\nSELECT * FROM Table WHERE ssn='123-45-6789'\n```\n\nmight become:\n\n```\nSELECT * FROM Table WHERE ssn=?\n```\n\nThis can behave differently for differnet applications and frameworks. Please test for your specific case.\nNote: RAW collection is not campatible with High Security mode and cannot be set if your agent is running in that mode.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSettingsRecordSqlEnum {
  """
  This is the default value. This setting strips string literals and numeric sequences from your queries and replaces them with the ? character. For example: the query select * from table where ssn='123-45-6789' would become select * from table where ssn=?.
  """
  OBFUSCATED

  """Query collection is turned off entirely."""
  OFF

  """
  If you are confident that full query data collection will not impact your data security or your users' privacy, you can change the setting to RAW, which will record all query values. NOTE: 'RAW' is not permitted when 'High security mode' is enabled.
  """
  RAW
}

"Metadata associated with the alert in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartAlertMetadata implements Nr1CatalogQuickstartComponentMetadata {
  "A short form description for the alert.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")

  "The human-readable name for the alert.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")
}

"The result of a Simple Browser monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsSimpleBrowserMonitorUpdateMutationResult {
  "Errors that occurred during Simple Browser monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorUpdateError]!

  "The resulting Simple Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsSimpleBrowserMonitor
}

"The result after upserting pipeline configuration for an account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n\n"
type LogConfigurationsUpsertPipelineConfigurationResponse {
  "The updated pipeline configuration.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  pipelineConfiguration: LogConfigurationsPipelineConfiguration
}

"Information about an install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogInstallPlanDirective {
  "The mode of the install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogInstallPlanDirectiveMode!
}

"Expected errors that can be returned by update operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUpdateError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardUpdateErrorType!
}

"The error for updating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelUpdateError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String!

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  errorType: AlertsNotificationChannelUpdateErrorType!

  "Notification channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannelId: ID!
}

"The pipeline configuration for an account, with metadata.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n\n"
type LogConfigurationsPipelineConfiguration {
  "The account id.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  accountId: Int!

  "Whether or not enrichment is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  enrichmentDisabled: Boolean!

  "Whether or not JSON parsing is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  jsonParsingDisabled: Boolean!

  "Whether or not obfuscation is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  obfuscationDisabled: Boolean!

  "Whether or not parsing is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  parsingDisabled: Boolean!

  "Whether or not patterns are enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  patternsEnabled: Boolean!

  "Whether or not recursive JSON parsing is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  recursiveJsonParsingDisabled: Boolean!

  "Whether or not transformation is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  transformationDisabled: Boolean!

  "Identifies the date and time when the configuration was last updated, or null if this has never been changed from the defaults.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  updatedAt: DateTime

  "Identifies the user who has updated the configuration, or null if this has never been changed from the defaults.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  updatedBy: UserReference
}

"Provides the operations available on the organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationIdInput {
  "An organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"The input object used to represent the entity search query to be created.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadEntitySearchQueryInput {
  "The entity search query that is used to perform the search of a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  query: String!
}

"Basic external resource\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
interface ErrorsInboxResource {
  "Unique resource identifier\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  id: ID!

  "External resource url\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  url: String!
}

"The input for creating a new Email notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsEmailNotificationChannelCreateInput {
  "List of email recipients.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  emails: [String!]!

  "Include details about the violation as a JSON attachment.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  includeJson: Boolean!

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"Input for getting details about an entity type\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input DomainTypeInput {
  "The domain of the entity.\n\nThe domain must be a value matching /[A-Z][A-Z0-9_]{2,14}/.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String!

  "The type of the entity.\n\nThe type must be a value matching /[A-Z][A-Z0-9_]{2,49}/.\n\nSome examples are APPLICATION, HOST or CONTAINER.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String!
}

"The error type for updating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNotificationChannelUpdateErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"Monitor downtime object returned to the customer for a downtime run monthly\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsMonthlyMonitorDowntimeMutationResult {
  "The account ID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  accountId: Int

  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endRepeat: SyntheticsDateWindowEndOutput

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "Configuration options for which days of the month a monitor downtime will occur\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  frequency: SyntheticsMonitorDowntimeMonthlyFrequencyOutput

  "The entity GUID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  guid: EntityGuid

  "The monitor GUIDs associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  monitorGuids: [EntityGuid]

  "The name of the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  name: String

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"Single NRQL query for a widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardWidgetNrqlQuery {
  "New Relic account ID to issue the query against.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "NRQL formatted query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  query: Nrql!
}

"Description of errors that may occur while attempting to create a span attribute trace filter rule.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeCreateSpanAttributeRuleResponseError {
  "Error message, with further detail to help resolve the issue.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  message: String!

  "Error that may occur while attempting to create a trace filter rule.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  type: EdgeCreateSpanAttributeRuleResponseErrorType!
}

"Configuration for VictorOps notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsVictorOpsNotificationChannelConfig {
  "Key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  key: SecureValue!

  "Route key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  routeKey: String!
}

"Filters on grants group id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantGroupIdInputFilter {
  "Performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: ID

  "Performs an in operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  in: [ID!]
}

"container for users enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementGroupUsers {
  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!

  "container for users enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  users: [UserManagementGroupUser!]!
}

"The `ApmBrowserApplicationEntityOutline` interface provides detailed information for the Browser App injected by an APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface ApmBrowserApplicationEntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apmBrowserSummary: ApmBrowserApplicationSummaryData
}

"A New Relic user\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityUser {
  "The authentication domain the user belongs to.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: ID!

  "Email address of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: String

  "If the user has verified their email address or not.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  emailVerificationState: MultiTenantIdentityEmailVerificationState!

  "container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String
  ): MultiTenantIdentityUserGroups

  "The user id.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The last active date of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  lastActive: DateTime

  "The full name of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String

  "The pending upgrade request for the user (if any).\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  pendingUpgradeRequest: MultiTenantIdentityPendingUpgradeRequest

  "Time zone of the user in IANA Time Zone database format, also known as the \"Olson\" time zone database format (for exmaple, \"America/Los_Angeles\").\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  timeZone: String

  "A \"user type\" is what determines the set of New Relic capabilities a user can theoretically access.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  type: MultiTenantIdentityUserType!
}

"Dataflow\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpDataflowIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Vertex AI Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpAiplatformIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The `Actor` object contains fields that are scoped to the API user's access level.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type Actor {
  "The `account` field is the entry point into data that is scoped to a single account.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account(
    """The New Relic account ID you want to query."""
    id: Int!
  ): Account

  "The `accounts` field returns all accounts that the Actor is authorized to view.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accounts(scope: RegionScope = IN_REGION): [AccountOutline]

  "This field provides access to ApiAccess data.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  apiAccess: ApiAccessActorStitchedFields

  "The `cloud` field provides access to cloud integrations configuration data scoped to the Actor.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloud: CloudActorFields

  "This field provides access to Dashboard data.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboard: DashboardActorStitchedFields

  "This field provides access to DistributedTracing data.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  distributedTracing: DistributedTracingActorStitchedFields

  "Fetch a list of entities.\n\nYou can fetch a max of 25 entities in one query.\n\nFor more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entities(
    """A list of unique entity identifiers."""
    guids: [EntityGuid]!
  ): [Entity]

  "Fetch a single entity.\n\nFor more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity(
    """A unique entity identifier."""
    guid: EntityGuid!
  ): Entity

  "Search for entities using a custom query.\n\nFor more details on how to create a custom query\nand what entity data you can request, visit our\n[entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).\n\nNote: you must supply either a `query` OR a `queryBuilder` argument, not both.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entitySearch(
    """Additional options to apply to the entity search."""
    options: EntitySearchOptions

    """
    Entity search query string.
    The query string can search for an exact or fuzzy match on name, as well as searching several other attributes.
    
    Note: you must supply either a `query` OR a `queryBuilder` argument, not both.
    
    Operators available: `=`, `AND`, `IN`, `LIKE`
    
    Special characters (`.,;:*-_`) are treated as whitespace. For example, name LIKE ':aws:' will match `-aws.` or `foo aws.`
    
    Tags can be referenced in multiple ways with or without backticks.
    
    Examples:
    - `"name = 'MyApp (Staging)'`
    - `"name LIKE 'MyApp' AND type IN ('APPLICATION')"`
    - `"reporting = 'false' AND type IN ('HOST')"`
    - `"domain IN ('INFRA', 'APM')"`
    - `tags.Environment = 'staging' AND type IN ('APPLICATION')`
    """
    query: String

    """
    The query builder object can be used to discover and create the entity search query argument.
    
    This should be used as a means to discover, but it has limited functionality. For example, it can only search for one entity `type` at a time.
    
    The `queryBuilder` parameters do not include all possible entity `type`s, entity `domain`s, or `infrastructureIntegrationType`s.
    
    To see the query string that is generated by your `queryBuilder` search, ask for the `query` field in the result object. You can then use this to build a more complex query supplied to the `query` argument and remove your `queryBuilder`.
    
    Note: you must supply either a `query` OR a `queryBuilder` argument, not both.
    """
    queryBuilder: EntitySearchQueryBuilder

    """
    The criteria used to sort your entity search results. If both are provided, `sortByWithDirection` will take precedence over `sortBy`.
    """
    sortBy: [EntitySearchSortCriteria] = [NAME]

    """
    Sort by criteria and direction. If both are provided, `sortByWithDirection` will take precedence over `sortBy`.
    """
    sortByWithDirection: [SortCriterionWithDirection]
  ): EntitySearch

  "This field provides access to ErrorsInbox data.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errorsInbox: ErrorsInboxActorStitchedFields

  "This field provides access to IncidentIntelligenceEnvironment data.\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceEnvironment: IncidentIntelligenceEnvironmentActorStitchedFields

  "This field provides access to MobilePushNotification data.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  mobilePushNotification: MobilePushNotificationActorStitchedFields

  "NerdStorage is a document database that is accessible within the New Relic One interface.\nThis allows for persistence of Nerdpack data including users' configuration settings and preferences\n(like favorites), or any other small data sets.\n\nConceptually, you can imagine NerdStorage as a nested key-value map.\n\nFor information on New Relic NerdStorage, visit [our docs](https://developer.newrelic.com/build-tools/new-relic-one-applications/nerdstorage).\n\nTo use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageActorScope

  "This field provides access to NerdStorageVault data.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  nerdStorageVault: NerdStorageVaultActorStitchedFields

  "Nerdpacks registry. Provides queries for nerdpacks by different conditions\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpacks: NerdpackNerdpacks

  "This field provides access to Nr1Catalog data.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nr1Catalog: Nr1CatalogActorStitchedFields

  "Make a query to NRDB with a NRQL string.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\nExample NRQL query:\n```\nSELECT count(*) FROM Transaction TIMESERIES\n```\n\nFor more details on how to use NRQL in the GraphQL API, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api)\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql(
    """
    List of account IDs to return NRDB results from. Max of 5 can be supplied.
    """
    accounts: [Int!]!

    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrqlQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    query: Nrql!

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): CrossAccountNrdbResultContainer

  "A historical log of NRQL queries executed by you.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrqlQueryHistory: [NrqlHistoricalQuery] @deprecated(reason: "This field is deprecated. Please use `queryHistory`.\n")

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrqlQueryProgress(
    """
    List of account IDs associated with `queryId`. Must match the account IDs of the original asynchronous query. Max of 5 can be supplied.
    """
    accounts: [Int!]!

    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): CrossAccountNrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The `organization` field is the entry point into data that is scoped to the user's organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  organization: Organization

  "This field provides access to Pixie data.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pixie: PixieActorStitchedFields

  "This field provides access to QueryHistory data.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n"
  queryHistory: QueryHistoryActorStitchedFields

  "The authenticated `User` who made this request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  user: User

  "This field provides access to Users data.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  users: UsersActorStitchedFields
}

"A Key Transaction entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type KeyTransactionEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apdexTarget: Float!

  "The application associated with this key transaction\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  application: KeyTransactionApplication!

  "The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  browserApdexTarget: Float

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of the metric underlying this key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metricName: String!

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Filter Object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsFilter {
  "Account Id of this Filter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  accountId: Int!

  "Filter Id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID!

  "Name of the Filter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!

  "Expressions that determine which issues will be handled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  predicates: [AiWorkflowsPredicate!]!

  "The type of the Filter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsFilterType!
}

"The input object used to represent a rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadUpdateRegularRuleInput {
  "A list of entity GUIDs composing the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entityGuids: [EntityGuid!]

  "A list of entity search queries used to retrieve the groups of entities that compose the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [WorkloadUpdateCollectionEntitySearchQueryInput!]

  "The unique identifier of the rule to be updated. If not provided, a new rule is created.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int

  "The input object used to represent a roll-up strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rollup: WorkloadRollupInput!
}

"AWS Billing\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudBillingIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Filter object by property\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsPropertyFilter {
  "key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  key: String!

  "value\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  value: String!
}

"The response of the create keys mutation.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessCreateKeyResponse {
  "Lists all successfully created keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  createdKeys: [ApiAccessKey]

  "Lists all errors for keys that could not be created. Each error maps to a single key input.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  errors: [ApiAccessKeyError]
}

"Expected error types that can be returned by delete operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardDeleteErrorType {
  """Dashboard not found in the system."""
  DASHBOARD_NOT_FOUND

  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION
}

"An async organization creation result organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationCreateAsyncOrganizationResult {
  "Organization ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID

  "Organization name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String
}

"The resulting allow list after the modifications have been made.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSegmentsBrowserSegmentAllowListResult {
  "The NR1 entity guid.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "The aggregate result of the segments in the modified list or lists.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n"
  segments: [String]
}

"The deleted key response of the key delete mutation.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessDeletedKey {
  "The `id` of the deleted key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  id: String
}

"Configuration per environment\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesConfigurationByEnvironment {
  "Configuration\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  config: AiIssuesEnvironmentConfiguration
}

"Known error codes and messages for `CreateSpanAttributeRuleResponseError`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeCreateSpanAttributeRuleResponseErrorType {
  """Duplicate span attribute trace filter rules found"""
  DUPLICATE_RULES

  """
  The trace filter rule creation exceeds the number of allowed span attribute rules for a trace observer
  """
  EXCEEDS_SPAN_ATTRIBUTE_RULE_LIMITS

  """Invalid trace filter rule input provided."""
  INVALID_INPUT

  """No trace observer was found with the id given."""
  NOT_FOUND

  """
  Span attribute trace filter rules found that would cancel each other out
  """
  OPPOSING_RULES
}

"Attributes belonging to the organization to create.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationCreateOrganizationInput {
  "The name for the new organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String!
}

"A structured representation of a stack trace for an APM application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceApmStackTrace {
  "Stack trace frames.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  frames: [StackTraceApmStackTraceFrame]
}

"Reason details union\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
union IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails = IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable | IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount | IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount

"A deployment.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n\n"
type ChangeTrackingDeployment {
  "A URL to the changelog or, if not linkable, a list of changes.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  changelog: String

  "The commit identifier, for example, a Git commit SHA.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  commit: String

  "A link to the system that generated the deployment.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deepLink: String

  "A unique deployment identifier.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentId: String

  "The type of deployment, for example, ‘Blue green’ or ‘Rolling’.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentType: ChangeTrackingDeploymentType

  "A description of the deployment.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  description: String

  "The NR entity that was deployed.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  entityGuid: EntityGuid!

  "An identifier used to correlate two or more events.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  groupId: String

  "The start time of the deployment as the number of milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  timestamp: EpochMilliseconds!

  "The username of the deployer or bot.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  user: String

  "The version of the deployed software, for example, something like v1.1.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  version: String!
}

"Create error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsCreateResponseError implements AiWorkflowsResponseError {
  "The error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  description: String!

  "The error type\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsCreateErrorType!
}

"Amazon ElastiCache\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudElasticacheIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"The details that were submitted when updating an events to metrics conversion rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsUpdateRuleSubmission {
  "A submitted account id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "Changes the state of the rule as being enabled or disabled.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "A submitted rule id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleId: ID!
}

"A Team entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type TeamEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Possible values for a field by its key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsSuggestionsResponse {
  "List of Suggestion objects\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  entities: [AiNotificationsSuggestion!]!

  "Error while fetching suggestions\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsSuggestionError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "Cursor to get the next batch of results\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  nextCursor: String

  "Suggestions request result\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  result: AiNotificationsResult!

  "Count of all suggestion entities, -1 if unavailable\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  totalCount: Int!
}

"PredicateInput input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsPredicateInput {
  "attribute\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  attribute: String!

  "operator\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  operator: AiWorkflowsOperator!

  "values\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  values: [String!]!
}

"A user key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessUserKey implements ApiAccessKey {
  "The account this key is in.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference

  "The account ID of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  accountId: Int

  "The UNIX epoch when the key was created, in seconds.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds

  "The ID of the user key. This can be used to identify a key without revealing the key itself (used to update and delete).\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  id: ID

  "The keystring of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  key: String

  "The name of the key. Limited to 120 characters.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  name: String

  "Any notes can be attached to a key. Limited to 120 characters.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  notes: String

  "The obfuscated key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  obfuscatedKey: String

  "The type of key, indicating what New Relic APIs it can be used to access.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  type: ApiAccessKeyType

  "The user this key belongs to.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  user: UserReference

  "The user ID of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  userId: Int
}

"\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsAccountStitchedFields {
  "Fetch a decision by ID.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  decision(
    """Decision ID."""
    decisionId: ID!
  ): AiDecisionsDecision

  "Returns a paginated list of decisions.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  decisions(
    """Cursor to paginate forwards."""
    after: String

    """Cursor to paginate backwards."""
    before: String

    """List of decision states."""
    decisionStates: [AiDecisionsDecisionState!]

    """List of decision types."""
    decisionTypes: [AiDecisionsDecisionType!]

    """Number of elements in page."""
    pageSize: Int

    """Sorting method."""
    sortMethod: AiDecisionsDecisionSortMethod
  ): AiDecisionsDecisionListing!
}

"Possible destinations for the install plan target\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogInstallPlanDestination {
  """Application (APM) install"""
  APPLICATION

  """Cloud provider install"""
  CLOUD

  """Host install"""
  HOST

  """Kubernetes install"""
  KUBERNETES

  """
  Unknown install - special case when the target where the install takes place is unknown (such as guided install)
  """
  UNKNOWN
}

"Live URL error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardLiveUrlErrorType {
  """General operation failure."""
  OPERATION_FAILURE

  """Unauthorized error."""
  UNAUTHORIZED

  """Not supported error."""
  UNSUPPORTED

  """URL not found in the system."""
  URL_NOT_FOUND
}

"Azure App Service\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureAppserviceIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Input type for WholeJaccardSimilarity expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsWholeJaccardSimilarityInput {
  "Threshold for comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  threshold: Float!
}

"Webhook header\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsWebhookCustomHeaderInput {
  "Header name\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Header value\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  value: SecureValue!
}

"Event Hub\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureEventhubIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"How many data points must be in violation for a NrqlCondition term's threshold duration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNrqlConditionThresholdOccurrences {
  """All points must be in violation during a term's threshold duration."""
  ALL

  """
  At least one data point must be in violation during a term's threshold duration.
  """
  AT_LEAST_ONCE
}

"Details needed to create an events to metrics conversion rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input EventsToMetricsCreateRuleInput {
  "The account where the events exist and the metrics will be put.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "Provides additional information about the rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The name of the rule. This must be unique within a given account.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Explains how to create one or more metrics from events.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: String!
}

"Cloud SQL Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpSqlIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Identifying information about the events to metrics rule you want to delete.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input EventsToMetricsDeleteRuleInput {
  "A submitted account id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "A submitted rule id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleId: ID!
}

"Transit Gateway\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsTransitgatewayIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"FSx\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsFsxIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Listing of vertices in a graph.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyVertexListing {
  "Number of vertices returned by this query.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "Next cursor.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cursor: String

  "List of vertices.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  vertices: [AiTopologyVertex!]!
}

"Information about a link install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogLinkInstallPlanDirective implements Nr1CatalogInstallPlanDirective {
  "The mode of the install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogInstallPlanDirectiveMode!

  "The URL of the external link used to guide the user through installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"OAuth2 based authentication\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsOAuth2Auth {
  "OAuth2 access token url\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  accessTokenUrl: String!

  "Authentication Type - Token or Oauth2\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  authType: AiNotificationsAuthType!

  "OAuth2 authorization url\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  authorizationUrl: String!

  "OAuth2 clientId\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  clientId: String!

  "Token prefix\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  prefix: String!

  "Interval of how often should the access token be refreshed\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  refreshInterval: Int

  "Is the OAuth2 access token refreshable\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  refreshable: Boolean!

  "OAuth2 token's scope\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  scope: String
}

"Input type for FixedLongestCommonSubsequenceDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedLongestCommonSubsequenceDistanceInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"How metrics will be collected.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
enum CloudMetricCollectionMode {
  """Metrics will be pulled by NewRelic"""
  PULL

  """Metrics will be pushed by the provider"""
  PUSH
}

"Unit for a limit value\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
enum DataManagementUnit {
  """Value is in bytes"""
  BYTES

  """Value is a count"""
  COUNT

  """Value is in gigabytes"""
  GIGABYTES
}

"The possible fields a grant can be sorted on\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantAuthorizationGrantSortEnum {
  """Id of the grant"""
  ID
}

"An APM Application entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmApplicationEntity implements AlertableEntity & ApmBrowserApplicationEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Summary statistics about the Browser App injected by an APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apmBrowserSummary: ApmBrowserApplicationSummaryData

  "Settings that are common across APM applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apmSettings: AgentApplicationSettingsApmBase

  "Summary statistics about the APM App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apmSummary: ApmApplicationSummaryData

  "The ID of the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationId: Int

  "List of APM application instances.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationInstances(
    """
    Time window start time in milliseconds since the unix epoch on which the agent reported data. Defaults to current time.
    """
    endTime: EpochMilliseconds

    """Use this field to filter application instances by host name."""
    host: String

    """
    Time window start time in milliseconds since the unix epoch on which the agent reported data. Defaults to 5 minutes before the current time.
    """
    startTime: EpochMilliseconds
  ): [AgentEnvironmentApplicationInstance!]

  "Paginated list of APM application instances.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationInstancesV2(
    """Use this field for application instance pagination"""
    cursor: String
  ): AgentEnvironmentApplicationInstancesResult!

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "Deployments of the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  deployments(
    """Time range to fetch deployments for. Defaults to the last day."""
    timeWindow: TimeWindowInput
  ): [ApmApplicationDeployment] @deprecated(reason: "This field is deprecated and no longer returns data. Please use `deploymentSearch`.")

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "An Exception that occurred in your Application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  exception(
    """A unique exception identifier."""
    occurrenceId: String!
  ): StackTraceApmException

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "Retrieves a flamegraph for the specific entity over the time period specified.\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  flamegraph(
    """The JVM host to get flamegraph stack trace events for"""
    hostName: String!

    """
    The start and end of the flamegraph events. Defaults to last 30 minutes
    """
    timeWindow: TimeWindowInput
  ): JavaFlightRecorderFlamegraph

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The programming language of the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  language: String

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "Retrieves the entity metric grouping issues.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricGroupingIssues(
    """End time."""
    endTime: EpochMilliseconds

    """Metric normalization rule ids"""
    metricNormalizationRuleIds: [Int]

    """Start time."""
    startTime: EpochMilliseconds
  ): [MetricNormalizationRuleMetricGroupingIssue!]

  "Retrieves a rule.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  "Retrieves the rules for the application.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The running versions of the language agent in the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  runningAgentVersions: ApmApplicationRunningAgentVersions

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "Configuration settings for the APM Application\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  settings: ApmApplicationSettings

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Health Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudHealthIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Return type for queries given an account ID.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
type MetricNormalizationAccountStitchedFields {
  "Retrieves a rule.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  "Retrieves the rules for the account.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]
}

"For users on our New Relic One user model, a \"group\" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementGroup {
  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  displayName: String!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "container for roles enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roles(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]

    """a list of ids to filter returned objects by"""
    roleId: [ID!]
  ): AuthorizationManagementGrantedRoleSearch!
}

"Filter on relationship types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
input EntityRelationshipEdgeTypeFilter {
  "Filter the relationships to those that are not of specific relationship types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  exclude: [EntityRelationshipEdgeType!]

  "Filter the relationships to those of specific relationship types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  include: [EntityRelationshipEdgeType!]
}

"The reponse returned when record the acceptance of the Pixie terms of service on a given account\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixieRecordPixieTosAcceptanceResult {
  "An array containings errors, if any.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errors: [PixieRecordPixieTosAcceptanceError]

  "Whether the Pixie terms of service acceptance was successfully recorded or not.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  success: Boolean!
}

"Span attribute value operator types\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeSpanAttributeValueOperator {
  """Matches on an exact value"""
  EQUALS

  """Matches on any value"""
  IS_NOT_NULL

  """
  Matches on a value that starts-with and/or ends-with the provided value
  """
  LIKE
}

"Composer Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpComposerIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"This is the root of all GraphQL mutations. Unlike queries, mutations\nrepresent actions that have a side effects, like `create` or `update`.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(product)\n\n\n"
type RootMutationType {
  "Creates an organization-scoped account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  accountManagementCreateAccount(
    """The attributes for the account being created."""
    managedAccount: AccountManagementCreateInput!
  ): AccountManagementCreateResponse

  "Updates an account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  accountManagementUpdateAccount(
    """The attributes for updating an account."""
    managedAccount: AccountManagementUpdateInput!
  ): AccountManagementUpdateResponse

  "If you aren't using an auto-instrumenting agent on the backend, use this to set up browser monitoring for an application. For more information on enabling copy/paste, [see our docs](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#copy-paste-app)\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentApplicationCreateBrowser(
    """The account ID."""
    accountId: Int!

    """The application's name."""
    name: String!

    """Browser settings input object."""
    settings: AgentApplicationBrowserSettingsInput
  ): AgentApplicationCreateBrowserResult

  "Create a new mobile application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentApplicationCreateMobile(
    """The application's account ID."""
    accountId: Int!

    """The application's name.."""
    name: String!
  ): AgentApplicationCreateMobileResult

  "Deletes a browser, mobile, or APM application. This isn't allowed if an application is actively reporting data.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentApplicationDelete(
    """An application's GUID."""
    guid: EntityGuid!
  ): AgentApplicationDeleteResult

  "Enable browser monitoring for an application monitored by APM. For information about specific APM agents, [see our docs](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-instrumentation)\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentApplicationEnableApmBrowser(
    """The affected entity's GUID."""
    guid: EntityGuid!

    """Browsers settings input object."""
    settings: AgentApplicationBrowserSettingsInput
  ): AgentApplicationEnableBrowserResult

  "Replaces the entity's allow list with the provided segments.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n"
  agentApplicationSegmentsReplaceAllBrowserSegmentAllowList(
    """
    The list of url segments to replace the current allow list with. The list cannot be Empty.
    """
    allowList: AgentApplicationSegmentsBrowserSegmentAllowListInput!

    """The NR1 entity guid"""
    entityGuid: EntityGuid!
  ): AgentApplicationSegmentsBrowserSegmentAllowListResult

  "Update configuration for APM applications. Includes thresholds for how often to record Transaction traces, SQL traces, enabling Distributed traces, ignoring certain error classes. This is the main mutation that powers the Application > Settings page in APM.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  agentApplicationSettingsUpdate(
    """The GUID for the affected entity."""
    guid: EntityGuid!

    """
    Input data about the entities you want to update and the settings to use. Any unspecified fields will retain their original values.
    """
    settings: AgentApplicationSettingsUpdateInput!
  ): AgentApplicationSettingsUpdateResult

  "Accept and deploy an existing suggested rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsAcceptSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsRule!

  "Create and deploy a new implicit rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsCreateImplicitRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!
  ): AiDecisionsRule!

  "Create and deploy a new rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsCreateRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!
  ): AiDecisionsRule!

  "Create a new suggested rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsCreateSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion blueprint to be created."""
    suggestion: AiDecisionsSuggestionBlueprint!
  ): AiDecisionsSuggestion!

  "Decline an existing suggested rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsDeclineSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsOperationResult!

  "Delete existing feedback for a merge.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsDeleteMergeFeedback(
    """Account ID."""
    accountId: Int!

    """Child issue ID."""
    childIssueId: ID!

    """Parent issue ID."""
    parentIssueId: ID!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  "Delete an existing rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsDeleteRule(
    """Account ID."""
    accountId: Int!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  "Delete an existing suggested rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsDeleteSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsOperationResult!

  "Disable an existing enabled rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsDisableRule(
    """Account ID."""
    accountId: Int!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  "Enable an existing disabled rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsEnableRule(
    """Account ID."""
    accountId: Int!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  "Create a search operation to fetch applicable incidents for a rule expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsFindApplicableIncidents(
    """Account ID."""
    accountId: Int!

    """Search operation blueprint to be created."""
    search: AiDecisionsSearchBlueprint!
  ): AiDecisionsApplicableIncidentSearch!

  "Postpone an existing suggested rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsPostponeSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsRule!

  "Record feedback for a merge\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsRecordMergeFeedback(
    """Account ID."""
    accountId: Int!

    """Child issue ID."""
    childIssueId: ID!

    """Opinion type."""
    opinion: AiDecisionsOpinion!

    """Parent issue ID."""
    parentIssueId: ID!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsMergeFeedback!

  "Create an arbitrary expression simulation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsSimulate(
    """Account ID."""
    accountId: Int!

    """Simulation blueprint to be created."""
    simulation: AiDecisionsSimulationBlueprint!
  ): AiDecisionsSimulation!

  "Update an existing implicit rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsUpdateImplicitRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsRule!

  "Update an existing rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisionsUpdateRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsRule!

  "Acknowledge issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aiIssuesAckIssue(
    """account id"""
    accountId: Int!

    """issue id"""
    issueId: ID!
  ): AiIssuesIssueUserActionResponse!

  "Close incident\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aiIssuesCloseIncident(
    """account id"""
    accountId: Int!

    """Incident id"""
    incidentId: ID!
  ): AiIssuesIncidentUserActionResponse

  "Resolve issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aiIssuesResolveIssue(
    """account id"""
    accountId: Int!

    """issue id"""
    issueId: ID!
  ): AiIssuesIssueUserActionResponse!

  "Unacknowledge issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aiIssuesUnackIssue(
    """account id"""
    accountId: Int!

    """issue id"""
    issueId: ID!
  ): AiIssuesIssueUserActionResponse!

  "Set interval between issue being created and being activated (and user being notified)\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aiIssuesUpdateGracePeriod(
    """Account id"""
    accountId: Int!

    """Grace period configuration"""
    gracePeriod: AiIssuesGracePeriodConfigurationInput!
  ): AiIssuesConfigurationOverrideResponse!

  "Update issue TTL\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aiIssuesUpdateIssueTtl(
    """Account id"""
    accountId: Int!

    """Issue TTL"""
    issueTtl: Seconds!
  ): AiIssuesConfigurationOverrideResponse!

  "Create a Channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsCreateChannel(
    """Account Id"""
    accountId: Int!

    """Channel object"""
    channel: AiNotificationsChannelInput!
  ): AiNotificationsChannelResponse!

  "Create a Destination\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsCreateDestination(
    """Account Id"""
    accountId: Int!

    """Destination object"""
    destination: AiNotificationsDestinationInput!
  ): AiNotificationsDestinationResponse!

  "Delete a Channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsDeleteChannel(
    """Account Id"""
    accountId: Int!

    """Id of the deleted channel"""
    channelId: ID!
  ): AiNotificationsDeleteResponse!

  "Delete a Destination\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsDeleteDestination(
    """Account Id"""
    accountId: Int!

    """Id of the deleted destination"""
    destinationId: ID!
  ): AiNotificationsDeleteResponse!

  "Test notifications\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsTestChannel(
    """Account Id"""
    accountId: Int!

    """Channel to test notification for"""
    channel: AiNotificationsChannelInput!

    """Dynamic variables"""
    variables: [AiNotificationsDynamicVariable!]
  ): AiNotificationsChannelTestResponse!

  "Test channel by channelId\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsTestChannelById(
    """Account Id"""
    accountId: Int!

    """Channel ID to test notification for"""
    channelId: ID!

    """Dynamic variables"""
    variables: [AiNotificationsDynamicVariable!]
  ): AiNotificationsChannelTestResponse!

  "Test connection\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsTestDestination(
    """Account Id"""
    accountId: Int!

    """Destination to test connection for"""
    destination: AiNotificationsDestinationInput!
  ): AiNotificationsDestinationTestResponse!

  "Test connection by destination id\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsTestDestinationById(
    """Account Id"""
    accountId: Int!

    """Destination ID to test"""
    destinationId: ID!

    """Update that will override existing properties"""
    update: AiNotificationsDestinationUpdate
  ): AiNotificationsDestinationTestResponse!

  "Update a Channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsUpdateChannel(
    """Account Id"""
    accountId: Int!

    """Channel object"""
    channel: AiNotificationsChannelUpdate!

    """Channel to update"""
    channelId: ID!
  ): AiNotificationsChannelResponse!

  "Update a Destination\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotificationsUpdateDestination(
    """Account Id"""
    accountId: Int!

    """Update Destination fields"""
    destination: AiNotificationsDestinationUpdate!

    """Destination to update"""
    destinationId: ID!
  ): AiNotificationsDestinationResponse!

  "Create a list of new edges.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiTopologyCollectorCreateEdges(
    """Account ID."""
    accountId: Int!

    """List of edge blueprints to be created."""
    edges: [AiTopologyCollectorEdgeBlueprint!]!
  ): AiTopologyCollectorOperationResult!

  "Create a list of new vertices.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiTopologyCollectorCreateVertices(
    """Account ID."""
    accountId: Int!

    """List of vertex blueprints to be created."""
    vertices: [AiTopologyCollectorVertexBlueprint!]!
  ): AiTopologyCollectorOperationResult!

  "Delete an existing list of edges.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiTopologyCollectorDeleteEdges(
    """Account ID."""
    accountId: Int!

    """List of edge IDs."""
    edgeIds: [ID!]!
  ): AiTopologyCollectorOperationResult!

  "Delete an existing list of vertices.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiTopologyCollectorDeleteVertices(
    """Account ID."""
    accountId: Int!

    """List of vertex names."""
    vertexNames: [ID!]!
  ): AiTopologyCollectorOperationResult!

  "Create a new Workflow with issues filter, enrichments and destinations\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  aiWorkflowsCreateWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """Create Workflow input object"""
    createWorkflowData: AiWorkflowsCreateWorkflowInput!
  ): AiWorkflowsCreateWorkflowResponse!

  "Delete a workflow and all it's sub entities: filter, enrichments and destinations\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  aiWorkflowsDeleteWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """If true, workflow channel will be deleted along with the workflow"""
    deleteChannels: Boolean! = true

    """Workflow's id for deletion"""
    id: ID!
  ): AiWorkflowsDeleteWorkflowResponse!

  "test a workflow and all it's sub entities: filter, enrichments and destinations\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  aiWorkflowsTestWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """Test Workflow input object"""
    testWorkflowData: AiWorkflowsTestWorkflowInput!
  ): AiWorkflowsTestWorkflowResponse!

  "Update Workflow with issues filter, enrichments and destinations\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  aiWorkflowsUpdateWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """
    If true, the channels that are no longer used by the update workflow will be deleted
    """
    deleteUnusedChannels: Boolean! = true

    """Update Workflow input object"""
    updateWorkflowData: AiWorkflowsUpdateWorkflowInput!
  ): AiWorkflowsUpdateWorkflowResponse!

  "Delete an Alerts condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsConditionDelete(
    """Account ID."""
    accountId: Int!

    """Alerts condition ID."""
    id: ID!
  ): AlertsConditionDeleteResponse

  "Create a muting rule for New Relic Alerts violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsMutingRuleCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the muting rule."""
    rule: AlertsMutingRuleInput!
  ): AlertsMutingRule

  "Delete a muting rule for New Relic Alerts violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsMutingRuleDelete(
    """Account ID."""
    accountId: Int!

    """Muting rule."""
    id: ID!
  ): AlertsMutingRuleDeleteResponse

  "Update a muting rule for New Relic Alerts violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsMutingRuleUpdate(
    """Account ID."""
    accountId: Int!

    """Muting rule ID."""
    id: ID!

    """The input options for updating a muting rule."""
    rule: AlertsMutingRuleUpdateInput!
  ): AlertsMutingRule

  "Creates a notification channel\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNotificationChannelCreate(
    """Account ID."""
    accountId: Int!

    """Notification channel to create."""
    notificationChannel: AlertsNotificationChannelCreateConfiguration!
  ): AlertsNotificationChannelCreateResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiNotificationsCreateDestination` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/#create-destination) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  "Deletes a notification channel\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNotificationChannelDelete(
    """Account ID."""
    accountId: Int!

    """Notification channel ID."""
    id: ID!
  ): AlertsNotificationChannelDeleteResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiNotificationsDeleteDestination` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/#delete-destination) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  "Updates an existing notification channel\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNotificationChannelUpdate(
    """Account ID."""
    accountId: Int!

    """Notification channel ID."""
    id: ID!

    """Notification channel fields to update."""
    notificationChannel: AlertsNotificationChannelUpdateConfiguration!
  ): AlertsNotificationChannelUpdateResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiNotificationsUpdateDestination` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/#update-destination) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  "Associates notification channels with a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNotificationChannelsAddToPolicy(
    """Account ID."""
    accountId: Int!

    """Notification channel IDs."""
    notificationChannelIds: [ID!]!

    """Policy ID."""
    policyId: ID!
  ): AlertsNotificationChannelsAddToPolicyResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiWorkflowsCreateWorkflow` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-workflows/#create-workflow) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  "Dissociates notification channels from a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNotificationChannelsRemoveFromPolicy(
    """Account ID."""
    accountId: Int!

    """Notification channel IDs."""
    notificationChannelIds: [ID!]!

    """Policy ID."""
    policyId: ID!
  ): AlertsNotificationChannelsRemoveFromPolicyResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiWorkflowsDeleteWorkflow` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-workflows/#delete-workflow) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  "Create a baseline NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNrqlConditionBaselineCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the baseline NRQL condition."""
    condition: AlertsNrqlConditionBaselineInput!

    """Policy ID for the condition."""
    policyId: ID!
  ): AlertsNrqlBaselineCondition

  "Update a baseline NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNrqlConditionBaselineUpdate(
    """Account ID."""
    accountId: Int!

    """Input settings for the baseline NRQL condition."""
    condition: AlertsNrqlConditionUpdateBaselineInput!

    """Alerts condition ID."""
    id: ID!
  ): AlertsNrqlBaselineCondition

  "Create an outlier NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNrqlConditionOutlierCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the outlier NRQL condition."""
    condition: AlertsNrqlConditionOutlierInput!

    """Policy ID for the condition."""
    policyId: ID!
  ): AlertsNrqlOutlierCondition @deprecated(reason: "Outlier condition creation stops Dec 8th, 2021. All outlier conditions will be removed Mar 31, 2022.")

  "Update an outlier NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNrqlConditionOutlierUpdate(
    """Account ID."""
    accountId: Int!

    """Input settings for the outlier NRQL condition."""
    condition: AlertsNrqlConditionUpdateOutlierInput!

    """Alerts condition ID."""
    id: ID!
  ): AlertsNrqlOutlierCondition @deprecated(reason: "We’re removing outlier conditions on Mar 31, 2022.")

  "Create a static NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNrqlConditionStaticCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the static NRQL condition."""
    condition: AlertsNrqlConditionStaticInput!

    """Policy ID for the condition."""
    policyId: ID!
  ): AlertsNrqlStaticCondition

  "Update a static NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsNrqlConditionStaticUpdate(
    """Account ID."""
    accountId: Int!

    """Input settings for the static NRQL condition."""
    condition: AlertsNrqlConditionUpdateStaticInput!

    """Alerts condition ID."""
    id: ID!
  ): AlertsNrqlStaticCondition

  "Create an Alerts policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsPolicyCreate(
    """Account ID."""
    accountId: Int!

    """Policy to be created."""
    policy: AlertsPolicyInput!
  ): AlertsPolicy

  "Delete an Alerts policy. This archives all conditions associated to the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsPolicyDelete(
    """Account ID."""
    accountId: Int!

    """Policy ID."""
    id: ID!
  ): AlertsPolicyDeleteResponse

  "Update an Alerts policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alertsPolicyUpdate(
    """Account ID."""
    accountId: Int!

    """Policy ID."""
    id: ID!

    """Fields on the policy to be updated."""
    policy: AlertsPolicyUpdateInput!
  ): AlertsPolicy

  "Create keys. You can create keys for multiple accounts at once. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  apiAccessCreateKeys(
    """A list of the configurations for each key you want to create."""
    keys: ApiAccessCreateInput!
  ): ApiAccessCreateKeyResponse

  "A mutation to delete keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  apiAccessDeleteKeys(
    """
    A list of each key `id` that you want to delete. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).
    """
    keys: ApiAccessDeleteInput!
  ): ApiAccessDeleteKeyResponse

  "Update keys. You can update keys for multiple accounts at once. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  apiAccessUpdateKeys(
    """The configurations of each key you want to update."""
    keys: ApiAccessUpdateInput!
  ): ApiAccessUpdateKeyResponse

  "Change the settings of an ApmApplicationEntity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apmApplicationEntityChangeSettings(
    """The guid of the ApmApplicationEntity to update."""
    guid: EntityGuid!

    """The desired settings of the ApmApplicationEntity."""
    settings: ApmApplicationEntitySettings!
  ): ApmApplicationEntitySettingsResult @deprecated(reason: "This mutation is deprecated. Use `agentApplicationSettingsUpdate` instead.")

  "Grant access for a group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  authorizationManagementGrantAccess(
    """The object representing the group and the access to add"""
    grantAccessOptions: AuthorizationManagementGrantAccess
  ): AuthorizationManagementGrantAccessPayload

  "Revoke access for a group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  authorizationManagementRevokeAccess(
    """The object representing the group and the access to remove"""
    revokeAccessOptions: AuthorizationManagementRevokeAccess
  ): AuthorizationManagementRevokeAccessPayload

  "Creates a new deployment record in NRDB and its associated deployment marker.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  changeTrackingCreateDeployment(
    """
    Specify how you would like the API to handle validation failures.
    Currently, the following validations should be considered:
    - Text fields must be less than 4,096 characters and encoded as UTF-8. By default, they will be trimmed with an UTF-8 ellipses character (…) placed at the end.
    - Failures to update the legacy REST API for APM entities can be used to determine whether the mutation should proceed.
    """
    dataHandlingRules: ChangeTrackingDataHandlingRules

    """The deployment to create."""
    deployment: ChangeTrackingDeploymentInput!
  ): ChangeTrackingDeployment

  "Create or modify a cloud integration.\n\nFor details and mutation examples visit\n[our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloudConfigureIntegration(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud integrations you want to configure."""
    integrations: CloudIntegrationsInput!
  ): CloudConfigureIntegrationPayload

  "Disable a cloud integration. Stops collecting data for the specified integration.\n\nFor details and mutation examples visit\n[our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloudDisableIntegration(
    """Your New Relic account ID"""
    accountId: Int!

    """The integrations you want to disable"""
    integrations: CloudDisableIntegrationsInput
  ): CloudDisableIntegrationPayload

  "Link a cloud provider account to a New Relic Account.\n\nFor details and mutation examples visit\n[our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloudLinkAccount(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud provider account you want to link to your New Relic account."""
    accounts: CloudLinkCloudAccountsInput
  ): CloudLinkAccountPayload

  "Migrate one or more existing AWS GovCloud Accounts to use AssumeRole authentication.\n\nFor details and mutation examples visit\n[our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloudMigrateAwsGovCloudToAssumeRole(
    """Your New Relic account ID"""
    accountId: Int!

    """One or multiple ARNs for the IAM Role for the different accounts."""
    accounts: [CloudAwsGovCloudMigrateToAssumeroleInput!]!
  ): CloudMigrateAwsGovCloudToAssumeRolePayload

  "Rename one or more linked cloud provider accounts.\n\nFor details and mutation examples visit\n[our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloudRenameAccount(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud provider account you want to rename."""
    accounts: [CloudRenameAccountsInput]
  ): CloudRenameAccountPayload

  "Unlink one or more cloud provider accounts.\nStops collecting data for all the associated integrations.\n\nFor details and mutation examples visit\n[our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloudUnlinkAccount(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud provider accounts you want to unlink."""
    accounts: [CloudUnlinkAccountsInput]
  ): CloudUnlinkAccountPayload

  "Add widgets to a `DashboardPage`\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardAddWidgetsToPage(
    """
    Unique entity identifier of the `DashboardPage` where widgets will be added.
    """
    guid: EntityGuid!

    """Widgets input holding all required widgets data."""
    widgets: [DashboardWidgetInput!]!
  ): DashboardAddWidgetsToPageResult

  "Create a `DashboardEntity`\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardCreate(
    """Account ID where the `DashboardEntity` will be created."""
    accountId: Int!

    """Dashboard input holding all required `DashboardEntity` data."""
    dashboard: DashboardInput!
  ): DashboardCreateResult

  "Creates a public URL where a `DashboardPage` can be accessed in the form of a static snapshot.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardCreateSnapshotUrl(
    """
    Unique entity identifier of the `DashboardPage` to be accessed as a snapshot through a public URL.
    """
    guid: EntityGuid!

    """Optional input parameters for the generated snapshot."""
    params: DashboardSnapshotUrlInput
  ): String

  "Delete an existing `DashboardEntity`\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardDelete(
    """
    Unique entity identifier of the `DashboardEntity` to be deleted. A dashboard guid must be specified. Dashboard page guids are not supported.
    """
    guid: EntityGuid!
  ): DashboardDeleteResult

  "Undelete a `DashboardEntity` that was previously deleted.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardUndelete(
    """
    Unique entity identifier of the `DashboardEntity` to be undeleted. A dashboard guid must be specified. Dashboard page guids are not supported.
    """
    guid: EntityGuid!
  ): DashboardUndeleteResult

  "Update an existing `DashboardEntity`\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardUpdate(
    """
    Dashboard input holding all required data from an existing `DashboardEntity`.
    """
    dashboard: DashboardInput!

    """Unique entity identifier of the `DashboardEntity` to be updated."""
    guid: EntityGuid!
  ): DashboardUpdateResult

  "Update a page in a dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardUpdatePage(
    """Unique entity identifier of the Page to be updated."""
    guid: EntityGuid!

    """Page input holding all required data to update a page."""
    page: DashboardUpdatePageInput!
  ): DashboardUpdatePageResult

  "Update an existing set of `Widget`s in a `DashboardPage`\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardUpdateWidgetsInPage(
    """
    Unique entity identifier of the `DashboardPage` where widgets will be updated.
    """
    guid: EntityGuid!

    """Widgets input holding all required widgets data."""
    widgets: [DashboardUpdateWidgetInput!]!
  ): DashboardUpdateWidgetsInPageResult

  "Revokes a `DashboardWidget` public live URL that was created in advance.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  dashboardWidgetRevokeLiveUrl(
    """The unique identifier of the public live URL to be revoked."""
    uuid: ID!
  ): DashboardRevokeLiveUrlResult

  "Bulk copy account rules to list of accounts\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  dataManagementCopyRetentions(
    """
    A list of IDs for the accounts that should have the source account retentions applied.
    """
    destinationAccountIds: [Int]!

    """The ID of the source account"""
    sourceAccountId: Int!
  ): DataManagementBulkCopyResult

  "Create a new event retention rule for a namespace on an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  dataManagementCreateEventRetentionRule(
    """The ID of the account the event retention rule applies to"""
    accountId: Int!

    """The namespace the event retention rule applies to"""
    namespace: String!

    """Length of time for event data retention (in days)"""
    retentionInDays: Int!
  ): DataManagementRule

  "Create event retention rules for namespaces\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  dataManagementCreateRetentionRules(
    """The ID of the account the new retention rules will apply to"""
    accountId: Int!

    """
    List of rule_input params (:namespace, :retention_in_days) for new rules to be created
    """
    retentionRules: [DataManagementRuleInput]
  ): [DataManagementRule]

  "Delete the event retention rule for a namespace on an account, if it exists\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  dataManagementDeleteEventRetentionRule(
    """The ID of the event retention rule's account"""
    accountId: Int!

    """The event retention rule's namespace"""
    namespace: String!
  ): DataManagementRule

  "Mutation to add and change a feature setting toggle for an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  dataManagementUpdateFeatureSettings(
    """The ID of the account to apply this feature setting"""
    accountId: Int!

    """Arguments to update the feature setting on an account"""
    setting: DataManagementAccountFeatureSettingInput
  ): DataManagementFeatureSetting

  "Create one or more trace filter rules, as defined by the `CreateTraceFilterRulesInput`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  edgeCreateTraceFilterRules(
    """ID of the account in the account family the trace observer belongs to."""
    accountId: Int!

    """A grouping of trace filter rule configurations"""
    rules: EdgeCreateTraceFilterRulesInput!

    """ID of the trace observer to apply the trace filter(s) to."""
    traceObserverId: Int!
  ): EdgeCreateTraceFilterRuleResponses!

  "Create one or more trace observers, as defined by the `CreateTraceObserverInput`. Currently, only one trace observer can be created per provider region.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  edgeCreateTraceObserver(
    """
    ID of the account in the account family the trace observer(s) belong to.
    """
    accountId: Int!

    """
    One or more `CreateTraceObserverInput` that describe the trace observer to be created.
    """
    traceObserverConfigs: [EdgeCreateTraceObserverInput!]!
  ): EdgeCreateTraceObserverResponses!

  "Delete one or more trace filter rules, as defined by the `DeleteTraceFilterRulesInput`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  edgeDeleteTraceFilterRules(
    """ID of the account in the account family the trace observer belongs to."""
    accountId: Int!

    """A grouping of trace filter rule configurations"""
    rules: EdgeDeleteTraceFilterRulesInput!

    """ID of the trace observer to remove the provided trace filter(s) from."""
    traceObserverId: Int!
  ): EdgeDeleteTraceFilterRuleResponses!

  "\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  edgeDeleteTraceObservers(
    """
    ID of the account in the account family the trace observer(s) belong to.
    """
    accountId: Int!

    """
    One or more `DeleteTraceObserverInput` that describe the trace observer to be deleted.
    """
    traceObserverConfigs: [EdgeDeleteTraceObserverInput!]!
  ): EdgeDeleteTraceObserverResponses!

  "Update one or more trace observers, as defined by the `UpdateTraceObserverInput`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  edgeUpdateTraceObservers(
    """
    ID of the account in the account family the trace observer(s) belong to.
    """
    accountId: Int!

    """
    One or more `UpdateTraceObserverInput` that describe the trace observer to be updated.
    """
    traceObserverConfigs: [EdgeUpdateTraceObserverInput!]!
  ): EdgeUpdateTraceObserverResponses!

  "Delete an entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityDelete(
    """Set to true to skip safety checks and force-delete the entity"""
    forceDelete: Boolean! = false

    """List of guids to be deleted"""
    guids: [EntityGuid!]!
  ): EntityDeleteResult

  "Override the default golden metrics given an account or a collection guid. Only use one context\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  entityGoldenMetricsOverride(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to override the golden metrics"""
    domainType: DomainTypeInput!

    """The new golden metrics by the entity domain type and the context"""
    metrics: [EntityGoldenMetricInput!]!
  ): EntityGoldenMetricsDomainTypeScopedResponse!

  "Reset the default golden metrics given an account or a collection guid. Only use one context\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  entityGoldenMetricsReset(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to reset the golden metrics"""
    domainType: DomainTypeInput!
  ): EntityGoldenMetricsDomainTypeScopedResponse!

  "Override the default tags given an account or a collection guid. Only use one context\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  entityGoldenTagsOverride(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to override the golden tags"""
    domainType: DomainTypeInput!

    """The new golden tags by the entity domain type and the tags"""
    tags: [EntityGoldenTagInput!]!
  ): EntityGoldenTagsDomainTypeScopedResponse!

  "Reset the default tags given an account or a collection guid. Only use one context\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  entityGoldenTagsReset(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to reset the golden tags"""
    domainType: DomainTypeInput!
  ): EntityGoldenTagsDomainTypeScopedResponse!

  "Create a relationship between entities.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  entityRelationshipUserDefinedCreateOrReplace(
    """The source entity guid of the relationship."""
    sourceEntityGuid: EntityGuid!

    """The target entity guid of the relationship."""
    targetEntityGuid: EntityGuid!

    """The type of the relationship."""
    type: EntityRelationshipEdgeType!
  ): EntityRelationshipUserDefinedCreateOrReplaceResult!

  "Delete a relationship between entities. If no type is provided, it will delete all relationships between source and target.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  entityRelationshipUserDefinedDelete(
    """The source entity guid of the relationship."""
    sourceEntityGuid: EntityGuid!

    """The target entity guid of the relationship."""
    targetEntityGuid: EntityGuid!

    """
    The type of the relationship. If none provided, it will delete all relationships between source and target.
    """
    type: EntityRelationshipEdgeType
  ): EntityRelationshipUserDefinedDeleteResult!

  "Assigns a user to an error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errorsInboxAssignErrorGroup(
    """An input object that represents the new assignment."""
    assignment: ErrorsInboxAssignErrorGroupInput!

    """The id of the error group."""
    id: ID!
  ): ErrorsInboxAssignErrorGroupResponse

  "Removes a resource from an error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errorsInboxDeleteErrorGroupResource(
    """The id of the error group."""
    id: ID!

    """Id of the resource"""
    resourceId: ID!
  ): ErrorsInboxDeleteErrorGroupResourceResponse

  "Updates the states of error groups.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errorsInboxUpdateErrorGroupState(
    """DEPRECATED. Use `ids` field instead."""
    id: ID

    """The ids of the error groups."""
    ids: [ID!]

    """State that the error groups should transition to."""
    state: ErrorsInboxErrorGroupState!
  ): ErrorsInboxUpdateErrorGroupStateResponse

  "Create a new rule which will make metrics from event data.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eventsToMetricsCreateRule(
    """List of events to metrics rules to create."""
    rules: [EventsToMetricsCreateRuleInput]!
  ): EventsToMetricsCreateRuleResult

  "Delete an event-to-metric rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eventsToMetricsDeleteRule(
    """List of events to metrics rules to delete."""
    deletes: [EventsToMetricsDeleteRuleInput]!
  ): EventsToMetricsDeleteRuleResult

  "Enable or disable an event-to-metric rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eventsToMetricsUpdateRule(
    """List of events to metrics rules to update."""
    updates: [EventsToMetricsUpdateRuleInput]!
  ): EventsToMetricsUpdateRuleResult

  "Cancel a historic export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  historicalDataExportCancelExport(
    """The account id which created the export"""
    accountId: Int!

    """The id of the export to cancel"""
    id: String!
  ): HistoricalDataExportCustomerExportResponse

  "Create a historic export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  historicalDataExportCreateExport(
    """The account id to run the Export against"""
    accountId: Int!

    """The NRQL string to use for this Export"""
    nrql: Nrql
  ): HistoricalDataExportCustomerExportResponse

  "Consent accounts to usage of the Incident Intelligence product in the EU or FedRAMP\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceEnvironmentConsentAccounts(
    """The account ids to mark with consent, will consent the parent accounts"""
    accountIds: [Int]!
  ): IncidentIntelligenceEnvironmentConsentAccounts

  "Consent all of the user's authorized accounts\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceEnvironmentConsentAuthorizedAccounts: IncidentIntelligenceEnvironmentConsentAuthorizedAccounts

  "Creates a new environment, each environment is attached to a parent account and an account. Note that only one environment per parent account is supported.\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceEnvironmentCreateEnvironment(
    """
    The account ids of the accounts that should be manually associated with the environment, if empty or null then the accounts are determinted automatically
    """
    associatedAccountIds: [Int]

    """The account id to attach to the environment"""
    incidentIntelligenceAccountId: Int!

    """The environment name"""
    name: String
  ): IncidentIntelligenceEnvironmentCreateEnvironment @deprecated(reason: "Deprecated. Please concat support for existing cross-account environment changes")

  "Deletes an existing environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceEnvironmentDeleteEnvironment(
    """The account id to delete"""
    accountId: Int!
  ): IncidentIntelligenceEnvironmentDeleteEnvironment

  "Dissent accounts to usage of the Incident Intelligence product in the EU or FedRAMP (removes the consent marking)\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceEnvironmentDissentAccounts(
    """
    The account ids to dissent, empty list will mark all of the current user parent-accounts
    """
    accountIds: [Int]!
  ): IncidentIntelligenceEnvironmentDissentAccounts

  "Creates a new install status.\nAn install status is created on behalf of the newrelic-cli whenever the CLI has started an installation and completed an installation.\n\nGuided install: https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/\nnewrelic-cli: https://github.com/newrelic/newrelic-cli\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installationCreateInstallStatus(
    """The accountId associated with the install status."""
    accountId: Int!

    """The installation status."""
    installStatus: InstallationInstallStatusInput!
  ): InstallationInstallStatus!

  "Creates a new recipe event.\n- A recipe event is created on behalf of the newrelic-cli whenever the CLI attempts to install the infrastructure-agent, for example.\n- A recipe event is appended to any existing recipe events, if there are any present in the cache.\n\nGuided install: https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/\nnewrelic-cli: https://github.com/newrelic/newrelic-cli\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installationCreateRecipeEvent(
    """The accountId associated with the recipe event."""
    accountId: Int!

    """The installation status associated with the recipe event."""
    status: InstallationRecipeStatus!
  ): InstallationRecipeEvent!

  "Deletes an installation status and all recipe statuses given the accountId.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installationDeleteInstall(
    """The accountId associated with the installation."""
    accountId: Int!
  ): Boolean!

  "Creates a key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  keyTransactionCreate(
    """
    The acceptable amount of the time spent in the backend before customers get frustrated (Apdex target).
    """
    apdexTarget: Float!

    """The GUID of the application."""
    applicationGuid: EntityGuid!

    """
    The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
    """
    browserApdexTarget: Float!

    """The name of the metric underlying this key transaction."""
    metricName: String!

    """The name of the key transaction."""
    name: String!
  ): KeyTransactionCreateResult

  "Deletes a key transaction (historical data is not removed).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  keyTransactionDelete(
    """The GUID of the key transaction to delete."""
    guid: EntityGuid!
  ): KeyTransactionDeleteResult

  "Update a key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  keyTransactionUpdate(
    """
    The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).
    """
    apdexTarget: Float

    """
    The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
    """
    browserApdexTarget: Float

    """The GUID for the affected key transaction."""
    guid: EntityGuid!

    """The name of the key transaction."""
    name: String
  ): KeyTransactionUpdateResult

  "Create a new data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  logConfigurationsCreateDataPartitionRule(
    """The account id associated with the data partition rule."""
    accountId: Int!

    """The data partition rule to be created."""
    rule: LogConfigurationsCreateDataPartitionRuleInput!
  ): LogConfigurationsCreateDataPartitionRuleResponse

  "Create an obfuscation expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  logConfigurationsCreateObfuscationExpression(
    """The account id associated with the obfuscation expression."""
    accountId: Int!

    """The obfuscation expression you want to create."""
    expression: LogConfigurationsCreateObfuscationExpressionInput!
  ): LogConfigurationsObfuscationExpression

  "Create an obfuscation rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  logConfigurationsCreateObfuscationRule(
    """The account id associated with the obfuscation rule."""
    accountId: Int!

    """The obfuscation rule you want to create."""
    rule: LogConfigurationsCreateObfuscationRuleInput!
  ): LogConfigurationsObfuscationRule

  "Create a new parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  logConfigurationsCreateParsingRule(
    """The account id associated with the rule."""
    accountId: Int!

    """The rule to be created."""
    rule: LogConfigurationsParsingRuleConfiguration!
  ): LogConfigurationsCreateParsingRuleResponse

  "Delete an existing data partition rule.\nThis operation will result in data to be allocated in the main NRDB storage (Log) if no other data partition rule exists intercepting the logs matching this rule.\nA deleted data partition rule can be recreated using the same name.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  logConfigurationsDeleteDataPartitionRule(
    """The account id associated with the data partition rule."""
    accountId: Int!

    """The id of the data partition rule you want to mark as deleted."""
    id: ID!
  ): LogConfigurationsDeleteDataPartitionRuleResponse

  "Delete an obfuscation expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  logConfigurationsDeleteObfuscationExpression(
    """The account id associated with the obfuscation expression."""
    accountId: Int!

    """The id of the obfuscation expression to mark as deleted."""
    id: ID!
  ): LogConfigurationsObfuscationExpression

  "Delete an obfuscation rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  logConfigurationsDeleteObfuscationRule(
    """The account id associated with the obfuscation rule."""
    accountId: Int!

    """The id of the obfuscation rule to mark as deleted."""
    id: ID!
  ): LogConfigurationsObfuscationRule

  "Delete an existing parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  logConfigurationsDeleteParsingRule(
    """The account id associated with the rule."""
    accountId: Int!

    """The id of the rule you want to mark as deleted."""
    id: ID!
  ): LogConfigurationsDeleteParsingRuleResponse

  "Update an existing data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  logConfigurationsUpdateDataPartitionRule(
    """The account id associated with the data partition rule."""
    accountId: Int!

    """
    The data partition rule to be updated. Only the rule description or Matching criteria fields are allowed to be updated.
    """
    rule: LogConfigurationsUpdateDataPartitionRuleInput
  ): LogConfigurationsUpdateDataPartitionRuleResponse

  "Update an existing data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  logConfigurationsUpdateObfuscationExpression(
    """The account id associated with the obfuscation expression."""
    accountId: Int!

    """The obfuscation expression to be updated."""
    expression: LogConfigurationsUpdateObfuscationExpressionInput!
  ): LogConfigurationsObfuscationExpression

  "Update an existing data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  logConfigurationsUpdateObfuscationRule(
    """The account id associated with the obfuscation rule."""
    accountId: Int!

    """The obfuscation rule to be updated."""
    rule: LogConfigurationsUpdateObfuscationRuleInput!
  ): LogConfigurationsObfuscationRule

  "Update an existing parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  logConfigurationsUpdateParsingRule(
    """The account id associated with the rule."""
    accountId: Int!

    """The identifier of the rule to update."""
    id: ID!

    """The updated rule."""
    rule: LogConfigurationsParsingRuleConfiguration!
  ): LogConfigurationsUpdateParsingRuleResponse

  "Upsert pipeline configuration for an account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  logConfigurationsUpsertPipelineConfiguration(
    """The account id associated with the rule."""
    accountId: Int!

    """The updated pipeline configuration."""
    pipelineConfiguration: LogConfigurationsPipelineConfigurationInput!
  ): LogConfigurationsUpsertPipelineConfigurationResponse

  "Creates a metric normalization rule\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationCreateRule(
    """Account Id"""
    accountId: Int!

    """An input object that represents the rule to be created."""
    rule: MetricNormalizationCreateRuleInput!
  ): MetricNormalizationRuleMutationResponse

  "Disables a metric normalization rule\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationDisableRule(
    """Account Id"""
    accountId: Int!

    """Rule id"""
    ruleId: Int!
  ): MetricNormalizationRuleMutationResponse

  "edit a metric normalization rule\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationEditRule(
    """Account Id"""
    accountId: Int!

    """An input object that represents the rule to be created."""
    rule: MetricNormalizationEditRuleInput!
  ): MetricNormalizationRuleMutationResponse

  "Enables a metric normalization rule\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationEnableRule(
    """Account Id"""
    accountId: Int!

    """Rule id"""
    ruleId: Int!
  ): MetricNormalizationRuleMutationResponse

  "Remove a mobile device from the users list of devices\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  mobilePushNotificationRemoveDevice(
    """The uuid of the device."""
    deviceId: String!
  ): MobilePushNotificationRemoveDeviceResult!

  "Send a test push notification to a users specific mobile device\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  mobilePushNotificationSendTestPush(
    """The uuid of the device."""
    deviceId: String!
  ): MobilePushNotificationSendPushResult!

  "Send a test push notification to all of a users mobile devices\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  mobilePushNotificationSendTestPushToAll: MobilePushNotificationSendPushResult!

  "Delete a NerdStorage collection.\n\nTo use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorageDeleteCollection(
    """The collection to be deleted."""
    collection: String!

    """The data access level and ID for the selected scope."""
    scope: NerdStorageScopeInput!
    scopeByActor: Boolean
  ): NerdStorageDeleteResult

  "Delete a NerdStorage document.\n\nTo use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorageDeleteDocument(
    """The NerdStorage collection that the document being deleted belongs to."""
    collection: String!

    """The documentId of the document to be deleted."""
    documentId: String!

    """The data access level and ID for the selected scope."""
    scope: NerdStorageScopeInput!
    scopeByActor: Boolean
  ): NerdStorageDeleteResult

  "Delete an existing secret for the selected scope.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  nerdStorageVaultDeleteSecret(
    """The unique identifier of the secret."""
    key: String!

    """The NerdStorageVault data access level of the secret."""
    scope: NerdStorageVaultScope!
  ): NerdStorageVaultDeleteSecretResult!

  "Store or modify a secret.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  nerdStorageVaultWriteSecret(
    """
    The type of scope the secret will be associated with.
    The mutation allows for only one scope type at a time to add a secret.
    """
    scope: NerdStorageVaultScope!

    """The secrets data"""
    secret: NerdStorageVaultWriteSecretInput!
  ): NerdStorageVaultWriteSecretResult!

  "Create a new NerdStorage document.\n\nTo use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorageWriteDocument(
    """The NerdStorage collection to which the new document will be written."""
    collection: String!

    """The new NerdStorage document to be written."""
    document: NerdStorageDocument!

    """The documentId for the newly created NerdStorage document."""
    documentId: String!

    """The data access level and ID for the selected scope."""
    scope: NerdStorageScopeInput!
    scopeByActor: Boolean
  ): NerdStorageDocument

  "Adds accounts to the Nerdpack allow list. The accounts must belong to the user's authorized account list.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackAddAllowedAccounts(
    """Data of accounts to be added to the allow list."""
    allowList: NerdpackAllowListInput!

    """Nerdpack id."""
    nerdpackId: ID!
  ): NerdpackAllowListResult

  "Creates a Nerdpack with a unique and random uuid V5.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackCreate(
    """Nerdpack input data."""
    nerdpackData: NerdpackCreationInput
  ): NerdpackData!

  "Removes accounts from the Nerdpack allow list. The accounts must belong to the user's authorized account list.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackRemoveAllowedAccounts(
    """Data of accounts to be removed from the allow list."""
    allowList: NerdpackAllowListInput!

    """Nerdpack id."""
    nerdpackId: ID!
  ): NerdpackAllowListResult

  "Remove a specific nerdpack version tag. This operation can only be performed if:\n- User has untagging capabilities.\n- User has accepted the terms and conditions.\n- User's account is the Nerdpack owner, or is an authorized account, or is an admin account for the Nerdpack owner account.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackRemoveVersionTag(
    """Nerdpack id."""
    nerdpackId: ID!

    """Input data for nerdpack version tagging."""
    versionTag: NerdpackRemoveVersionTagInput!
  ): NerdpackRemovedTagResponse

  "Make a Nerdpack publication available to a list of accounts. Providing partial results.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackSubscribeAccounts(
    """Nerdpack id."""
    nerdpackId: ID!

    """Subscription data."""
    subscription: NerdpackSubscribeAccountsInput!
  ): NerdpackSubscribeResult

  "Tag a Nerdpack version. This operation can only be performed if:\n- User has tagging capabilities.\n- User has accepted the terms and conditions.\n- User's account is the Nerdpack owner, or is an authorized account, or is an admin account for the Nerdpack owner account.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackTagVersion(
    """Nerdpack id."""
    nerdpackId: ID!

    """Input data for nerdpack version tagging."""
    versionTag: NerdpackTagVersionInput!
  ): NerdpackVersion

  "Make a Nerdpack publication unavailable to a list of accounts. Providing partial results.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackUnsubscribeAccounts(
    """Nerdpack id."""
    nerdpackId: ID!

    """Subscription data."""
    subscription: NerdpackUnsubscribeAccountsInput!
  ): NerdpackUnsubscribeResult

  "Install an alert policy template on a given account for use in it\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nr1CatalogInstallAlertPolicyTemplate(
    """The id of the account to install the alert policy template on"""
    accountId: Int!

    """The id of the alert policy template to install on the account"""
    alertPolicyTemplateId: ID!
  ): Nr1CatalogInstallAlertPolicyTemplateResult

  "Install a dashboard template on a given account for use in it\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nr1CatalogInstallDashboardTemplate(
    """The id of the account to install the dashboard template on"""
    accountId: Int!

    """The id of the dashboard template to install on the account"""
    dashboardTemplateId: ID!
  ): Nr1CatalogInstallDashboardTemplateResult

  "Submit metadata for a Nerdpack that will be available in the New Relic One Catalog\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nr1CatalogSubmitMetadata(
    """The Nerdpack's ID that will be associated with the metadata"""
    id: ID!

    """
    The metadata for the Nerdpack that will be available in the New Relic One Catalog
    """
    nerdpackMetadata: Nr1CatalogSubmitMetadataInput!
  ): Nr1CatalogSubmitMetadataResult

  "Create new drop rule(s).\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  nrqlDropRulesCreate(
    """The account the targeted data report to."""
    accountId: Int!

    """The list of drop rules you want to create."""
    rules: [NrqlDropRulesCreateDropRuleInput]!
  ): NrqlDropRulesCreateDropRuleResult

  "Delete drop rule(s) by id.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  nrqlDropRulesDelete(
    """Account the rule was created on."""
    accountId: Int!

    """The list of drop rules Ids you want to delete."""
    ruleIds: [ID]!
  ): NrqlDropRulesDeleteDropRuleResult

  "The new organization to create.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationCreate(
    """The customer id in which the new organization will be created."""
    customerId: ID

    """
    The attributes of managed account to create. This is only required if sharedAccount field is not provided.
    """
    newManagedAccount: OrganizationNewManagedAccountInput

    """The attributes of organization to create."""
    organization: OrganizationCreateOrganizationInput!

    """
    The attributes of the account that will be shared with the new organization. This is only required if newManagedAccount field is not provided
    """
    sharedAccount: OrganizationSharedAccountInput
  ): OrganizationCreateOrganizationResponse

  "The shared account to create\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationCreateSharedAccount(
    """The attributes for the account share."""
    sharedAccount: OrganizationCreateSharedAccountInput!
  ): OrganizationCreateSharedAccountResponse

  "The shared account to revoke\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationRevokeSharedAccount(
    """The attributes for the revoked account share."""
    sharedAccount: OrganizationRevokeSharedAccountInput!
  ): OrganizationRevokeSharedAccountResponse

  "The organization to update\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationUpdate(
    """The new attributes for the organization."""
    organization: OrganizationUpdateInput!

    """The id of the organization to update"""
    organizationId: ID
  ): OrganizationUpdateResponse

  "The shared account to update\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationUpdateSharedAccount(
    """The new attributes for the account share."""
    sharedAccount: OrganizationUpdateSharedAccountInput!
  ): OrganizationUpdateSharedAccountResponse

  "Link a Pixie project to a New Relic account using a Pixie API key\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pixieLinkPixieProject(
    """The New Relic account to link with Pixie"""
    accountId: Int!

    """The Pixie API key"""
    apiKey: SecureValue
  ): PixieLinkPixieProjectResult

  "Record the Pixie terms of service acceptance for a given account\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pixieRecordPixieTosAcceptance(
    """The New Relic account to link with Pixie"""
    accountId: Int!
  ): PixieRecordPixieTosAcceptanceResult

  "Unlink a Pixie project to a New Relic account\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pixieUnlinkPixieProject(
    """The New Relic account to link with Pixie"""
    accountId: Int!
  ): PixieLinkPixieProjectResult

  "Creates or updates repository entities.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  referenceEntityCreateOrUpdateRepository(
    """The list of repositories to create or update."""
    repositories: [ReferenceEntityCreateRepositoryInput!]!

    """
    Flag to force a synchronous execution of the mutation, which means that the entity has been stored once the mutation returns. Default is 'false', which means the entity is queued for storage.
    """
    sync: Boolean
  ): ReferenceEntityCreateRepositoryResult

  "Creates a new SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevelCreate(
    """The entity GUID which the SLI will be attached to."""
    entityGuid: EntityGuid!

    """The input object that represents the SLI that will be created."""
    indicator: ServiceLevelIndicatorCreateInput!
  ): ServiceLevelIndicator

  "Deletes an existing SLI by the GUID.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevelDelete(
    """The unique entity identifier of the SLI."""
    guid: EntityGuid

    """[DEPRECATED] Please, use the GUID input field to delete the SLI."""
    id: ID
  ): ServiceLevelIndicator

  "Updates an existing SLI by the GUID.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevelUpdate(
    """The unique entity identifier of the SLI."""
    guid: EntityGuid

    """[DEPRECATED] Please, use the GUID input field to update the SLI."""
    id: ID

    """The input object that represents the SLI that will be updated."""
    indicator: ServiceLevelIndicatorUpdateInput!
  ): ServiceLevelIndicator

  "Create new streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingExportCreateRule(
    """The New Relic account to export data from"""
    accountId: Int!

    """AWS information needed for the data to be exported"""
    awsParameters: StreamingExportAwsInput

    """Azure information needed for the data to be exported"""
    azureParameters: StreamingExportAzureInput

    """Information about the data to be exported"""
    ruleParameters: StreamingExportRuleInput!
  ): StreamingExportRule

  "Delete a streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingExportDeleteRule(
    """The id of the streaming rule to delete"""
    id: ID!
  ): StreamingExportRule

  "Disable an existing streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingExportDisableRule(
    """The id of the streaming rule to disable"""
    id: ID!
  ): StreamingExportRule

  "Enable an existing streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingExportEnableRule(
    """The id of the streaming rule to enable"""
    id: ID!
  ): StreamingExportRule

  "Update an existing streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingExportUpdateRule(
    """AWS information needed for the streaming rule to be updated"""
    awsParameters: StreamingExportAwsInput

    """Azure information needed for the streaming rule to be updated"""
    azureParameters: StreamingExportAzureInput

    """The id of the streaming rule to update"""
    id: ID!

    """The information needed for the streaming rule to be updated"""
    ruleParameters: StreamingExportRuleInput!
  ): StreamingExportRule

  "Create a Synthetic Broken Links monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreateBrokenLinksMonitor(
    """
    The account in which the Synthetics Broken Links monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Broken Links monitor
    """
    monitor: SyntheticsCreateBrokenLinksMonitorInput!
  ): SyntheticsBrokenLinksMonitorCreateMutationResult

  "Create a Synthetic Cert Check (Certificate check) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreateCertCheckMonitor(
    """The account in which the Synthetics Cert Check monitor will be created"""
    accountId: Int!

    """The input arguments required to create a Synthetics Cert Check monitor"""
    monitor: SyntheticsCreateCertCheckMonitorInput!
  ): SyntheticsCertCheckMonitorCreateMutationResult

  "Create a monitor downtime that runs daily\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  syntheticsCreateDailyMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """
    Configuration options if the customer wants the monitor to end at a specific date
    """
    endRepeat: SyntheticsDateWindowEndConfig

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsDailyMonitorDowntimeMutationResult

  "Create a monitor downtime that runs monthly\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  syntheticsCreateMonthlyMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """
    Configuration options if the customer wants the monitor to end at a specific date
    """
    endRepeat: SyntheticsDateWindowEndConfig

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """
    Configuration options for which days of the month a monitor downtime will occur
    """
    frequency: SyntheticsMonitorDowntimeMonthlyFrequency!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsMonthlyMonitorDowntimeMutationResult

  "Create a monitor downtime that runs once\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  syntheticsCreateOnceMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsOnceMonitorDowntimeMutationResult

  "Create a Synthetics Private Location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreatePrivateLocation(
    """The account that will be associated with the created private location"""
    accountId: Int!

    """The private location description"""
    description: String

    """The name of the private location"""
    name: String!

    """The private location requires a password to edit if value is true"""
    verifiedScriptExecution: Boolean!
  ): SyntheticsPrivateLocationMutationResult

  "Create a Synthetic Script Api monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreateScriptApiMonitor(
    """The account in which the Synthetics Script Api monitor will be created"""
    accountId: Int!

    """The input arguments required to create a Synthetics Script Api monitor"""
    monitor: SyntheticsCreateScriptApiMonitorInput!
  ): SyntheticsScriptApiMonitorCreateMutationResult

  "Create a Synthetic Script Browser Monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreateScriptBrowserMonitor(
    """
    The account in which the Synthetics Script Browser monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Script Browser monitor
    """
    monitor: SyntheticsCreateScriptBrowserMonitorInput!
  ): SyntheticsScriptBrowserMonitorCreateMutationResult

  "Queues a request to create a secure credential\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  syntheticsCreateSecureCredential(
    """The account that will be associated with the created secure credential"""
    accountId: Int!

    """
    The description identifier for the Synthetics Secure Credential in New Relic
    """
    description: String

    """
    The unique key identifier for the Synthetics Secure Credential in New Relic
    """
    key: String!

    """The value identifier for the Synthetics Secure Credential in New Relic"""
    value: SecureValue!
  ): SyntheticsSecureCredentialMutationResult

  "Create a Synthetic Simple (Ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreateSimpleBrowserMonitor(
    """
    The account in which the Synthetics Simple Browser monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Simple Browser monitor
    """
    monitor: SyntheticsCreateSimpleBrowserMonitorInput!
  ): SyntheticsSimpleBrowserMonitorCreateMutationResult

  "Create a Synthetic Simple (Ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreateSimpleMonitor(
    """
    The account in which the Synthetics Simple (Ping) monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Simple (Ping) monitor
    """
    monitor: SyntheticsCreateSimpleMonitorInput!
  ): SyntheticsSimpleBrowserMonitorCreateMutationResult

  "Create a Synthetic Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsCreateStepMonitor(
    """The account in which the Synthetics Step monitor will be created"""
    accountId: Int!

    """The input arguments required to create a Synthetics Step Monitor"""
    monitor: SyntheticsCreateStepMonitorInput!
  ): SyntheticsStepMonitorCreateMutationResult

  "Create a monitor downtime that runs weekly\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  syntheticsCreateWeeklyMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """
    Configuration options if the customer wants the monitor to end at a specific date
    """
    endRepeat: SyntheticsDateWindowEndConfig

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """Days of the week the monitor downtime will run"""
    maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsWeeklyMonitorDowntimeMutationResult

  "Delete a Synthetic Monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsDeleteMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!
  ): SyntheticsMonitorDeleteMutationResult

  "Delete a monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  syntheticsDeleteMonitorDowntime(
    """The client identifier of the monitor downtime to be deleted"""
    guid: EntityGuid!
  ): SyntheticsMonitorDowntimeDeleteResult

  "Delete a Synthetics Private Location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsDeletePrivateLocation(
    """The client identifier of the private location to be deleted"""
    guid: EntityGuid!
  ): SyntheticsPrivateLocationDeleteResult

  "Queues a request to delete an existing secure credential\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  syntheticsDeleteSecureCredential(
    """
    The account that is associated with the secure credential to be deleted
    """
    accountId: Int!

    """
    The unique key identifier for the Synthetics Secure Credential in New Relic
    """
    key: String!
  ): SyntheticsSecureCredentialMutationResult

  "Edit a monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  syntheticsEditMonitorDowntime(
    """
    Configuration options for a monitor downtime that runs daily (only 1 of these can be selected)
    """
    daily: SyntheticsMonitorDowntimeDailyConfig

    """The unique identifier for the Synthetic Monitor Downtime in New Relic"""
    guid: EntityGuid!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """
    Configuration options for a monitor downtime that runs monthly (only 1 of these can be selected)
    """
    monthly: SyntheticsMonitorDowntimeMonthlyConfig

    """The name for the monitor downtime"""
    name: String

    """
    Configuration options for a monitor downtime that runs once (only 1 of these can be selected)
    """
    once: SyntheticsMonitorDowntimeOnceConfig

    """
    Configuration options for a monitor downtime that runs weekly (only 1 of these can be selected)
    """
    weekly: SyntheticsMonitorDowntimeWeeklyConfig
  ): SyntheticsMonitorDowntimeMutationResult

  "Purge the job queue for a specified private location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsPurgePrivateLocationQueue(
    """
    The unique client identifier for the Synthetics Private Location in New Relic
    """
    guid: EntityGuid!
  ): SyntheticsPrivateLocationPurgeQueueResult

  "Update a Synthetic Broken Links monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdateBrokenLinksMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Broken Links monitor
    """
    monitor: SyntheticsUpdateBrokenLinksMonitorInput!
  ): SyntheticsBrokenLinksMonitorUpdateMutationResult

  "Update a Synthetic Cert Check (Certificate check) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdateCertCheckMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """The input arguments required to update a Synthetics Cert Check monitor"""
    monitor: SyntheticsUpdateCertCheckMonitorInput!
  ): SyntheticsCertCheckMonitorUpdateMutationResult

  "Update a Synthetics Private Location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdatePrivateLocation(
    """The private location description"""
    description: String

    """
    The unique client identifier for a Synthetics Private Location in New Relic
    """
    guid: EntityGuid!

    """Requires password to run scripts on this private location"""
    verifiedScriptExecution: Boolean
  ): SyntheticsPrivateLocationMutationResult

  "Update a Synthetic Script Api monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdateScriptApiMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """The input arguments required to update a Synthetics Script Api Monitor"""
    monitor: SyntheticsUpdateScriptApiMonitorInput!
  ): SyntheticsScriptApiMonitorUpdateMutationResult

  "Update a Synthetic Script Browser Monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdateScriptBrowserMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Script Browser monitor
    """
    monitor: SyntheticsUpdateScriptBrowserMonitorInput!
  ): SyntheticsScriptBrowserMonitorUpdateMutationResult

  "Queues a request to update an existing secure credential\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  syntheticsUpdateSecureCredential(
    """
    The account that is associated with the secure credential to be updated
    """
    accountId: Int!

    """
    The description identifier for the Synthetics Secure Credential in New Relic
    """
    description: String

    """
    The unique key identifier for the Synthetics Secure Credential in New Relic
    """
    key: String!

    """The value identifier for the Synthetics Secure Credential in New Relic"""
    value: SecureValue
  ): SyntheticsSecureCredentialMutationResult

  "Update a Synthetic Simple Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdateSimpleBrowserMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Simple Browser monitor
    """
    monitor: SyntheticsUpdateSimpleBrowserMonitorInput!
  ): SyntheticsSimpleBrowserMonitorUpdateMutationResult

  "Update a Synthetic Simple (Ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdateSimpleMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Simple (ping) Monitor
    """
    monitor: SyntheticsUpdateSimpleMonitorInput!
  ): SyntheticsSimpleMonitorUpdateMutationResult

  "Update a Synthetic Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  syntheticsUpdateStepMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """The input arguments required to update a Synthetics Step Monitor"""
    monitor: SyntheticsUpdateStepMonitorInput!
  ): SyntheticsStepMonitorUpdateMutationResult

  "Adds the provided tags to your specified entity, without deleting existing ones.\nThe maximum number of tag-values per entity is 100; if the sum of existing and new tag-values if over the limit this mutation will fail.\n\nFor details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  taggingAddTagsToEntity(
    """The guid of the new entity."""
    guid: EntityGuid!

    """
    An array of key-values pairs to represent a tag. For example:  Team:TeamName.
    """
    tags: [TaggingTagInput!]!
  ): TaggingMutationResult

  "Delete specific tag keys from the entity.\n\nFor details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  taggingDeleteTagFromEntity(
    """The guid of the existing entity."""
    guid: EntityGuid!

    """An array of keys that have to be deleted. For example: ['Team']."""
    tagKeys: [String!]!
  ): TaggingMutationResult

  "Delete specific tag key-values from the entity.\n\nFor details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  taggingDeleteTagValuesFromEntity(
    """The guid of the existing entity."""
    guid: EntityGuid!

    """
    An array of key-values pairs to represent a tag. For example: Team:TeamName.
    """
    tagValues: [TaggingTagValueInput!]!
  ): TaggingMutationResult

  "Replaces the entity's entire set of tags with the provided tag set.\nThe maximum number of tag-values per entity is 100; if more than 100 tag-values are provided this mutation will fail.\n\nFor details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  taggingReplaceTagsOnEntity(
    """The guid of the existing entity."""
    guid: EntityGuid!

    """
    An array of key-values pairs to represent a tag. For example:  Team:TeamName.
    """
    tags: [TaggingTagInput!]!
  ): TaggingMutationResult

  "A mutation for adding user(s) to group(s).\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementAddUsersToGroups(
    """The input object representing the group(s) and user(s) to update."""
    addUsersToGroupsOptions: UserManagementUsersGroupsInput
  ): UserManagementAddUsersToGroupsPayload

  "A mutation for creating a group in an authentication domain.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementCreateGroup(
    """The input object representing the group to create"""
    createGroupOptions: UserManagementCreateGroup
  ): UserManagementCreateGroupPayload

  "A mutation for creating a user in an authentication domain.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementCreateUser(
    """The input object representing the user to be created."""
    createUserOptions: UserManagementCreateUser!
  ): UserManagementCreateUserPayload

  "A mutation for deleting a group.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementDeleteGroup(
    """The input object representing the group to remove"""
    groupOptions: UserManagementDeleteGroup
  ): UserManagementDeleteGroupPayload

  "A mutation for deleting a user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementDeleteUser(
    """The input object containing the id of the user to be deleted."""
    deleteUserOptions: UserManagementDeleteUser!
  ): UserManagementDeleteUserPayload

  "A mutation for removing user(s) from group(s).\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementRemoveUsersFromGroups(
    """
    The input object representing the users to remove and the groups to remove them from.
    """
    removeUsersFromGroupsOptions: UserManagementUsersGroupsInput!
  ): UserManagementRemoveUsersFromGroupsPayload

  "A mutation for updating an existing group.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementUpdateGroup(
    """The input object representing the group to update"""
    updateGroupOptions: UserManagementUpdateGroup
  ): UserManagementUpdateGroupPayload

  "A mutation for updating an existing user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagementUpdateUser(
    """The input object representing the user to be updated."""
    updateUserOptions: UserManagementUpdateUser!
  ): UserManagementUpdateUserPayload

  "Updates the date the current user last read the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  whatsNewSetLastReadDate(
    """
    The date, represented since the epoch in milliseconds, the current user last read the news.
    """
    date: EpochMilliseconds!
  ): EpochMilliseconds

  "Creates a new workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  workloadCreate(
    """The New Relic account ID where you want to create the workload."""
    accountId: Int!

    """An input object that represents the workload to be created."""
    workload: WorkloadCreateInput!
  ): WorkloadCollection

  "Deletes an existing workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  workloadDelete(
    """The GUID of the workload to delete."""
    guid: EntityGuid!
  ): WorkloadCollection

  "Duplicates an existing workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  workloadDuplicate(
    """The New Relic Account ID where you want to create the new workload."""
    accountId: Int!

    """The GUID of the workload you want to duplicate."""
    sourceGuid: EntityGuid!

    """An input object with information about the new workload."""
    workload: WorkloadDuplicateInput
  ): WorkloadCollection

  "Updates an existing workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  workloadUpdate(
    """The GUID of the workload you want to update."""
    guid: EntityGuid!

    """
    An input object with information to identify the workload to be updated and its new changes.
    """
    workload: WorkloadUpdateInput!
  ): WorkloadCollection
}

"Information about an icon\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogIcon {
  "The publicly accessible URL for the icon\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"Route53 Resolver Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsRoute53resolverIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The location(s) from which a non-scripted monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsLocationsInput {
  "Existing private location(s) in which the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  private: [String]

  "Publicly available location(s) in which the monitor will run. For formatting tips, see [this link](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-synthetics-tutorial/#location-field)\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  public: [String]
}

"The events that define the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelEventsUpdateInput {
  "The definition of bad events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  badEvents: ServiceLevelEventsQueryUpdateInput

  "The definition of good events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  goodEvents: ServiceLevelEventsQueryUpdateInput

  "The definition of valid events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  validEvents: ServiceLevelEventsQueryUpdateInput!
}

"Agent Release Filter\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AgentReleasesFilter {
  ANDROID
  BROWSER
  DOTNET
  ELIXIR
  GO
  INFRASTRUCTURE
  IOS
  JAVA
  NODEJS
  PHP
  PYTHON
  RUBY
  SDK
}

"Category of a limit\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
enum DataManagementCategory {
  """Limits on Alerting"""
  ALERTING

  """Limits on Ingest"""
  INGEST

  """Limits on Query"""
  QUERY
}

"The input object representing the group being updated\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementUpdateGroup {
  "The name of the group\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  displayName: String!

  "The id of the group to update\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"The `NaiveDateTime` scalar represents a date and time without a Time Zone. The `NaiveDateTime` appears as an ISO8601 formatted string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar NaiveDateTime

"Input type for FixedFuzzyWuzzyTokenSetRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedFuzzyWuzzyTokenSetRatioInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Set of streaming rules states\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
enum StreamingExportStatus {
  """
  Status set for a streaming rule that could not be created due to an error
  """
  CREATION_FAILED

  """Status set for a streaming rule being set up"""
  CREATION_IN_PROGRESS

  """Status set for a streaming rule when it is deleted"""
  DELETED

  """Status set for a streaming rule when it is disabled"""
  DISABLED

  """Status set for a streaming rule when it is enabled"""
  ENABLED
}

"\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
type NerdStorageVaultActorStitchedFields {
  "Fetch a single secret by key.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  secret(
    """The unique identifier used to look up the secret value"""
    key: String!
  ): NerdStorageVaultSecret

  "List the keys and values of all secrets\nyou have access to for the current scope and nerdpack.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  secrets: [NerdStorageVaultSecret!]!
}

"The advanced options inputs available for a Simple (ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsSimpleMonitorAdvancedOptionsInput {
  "Custom headers to use in monitor job\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  customHeaders: [SyntheticsCustomHeaderInput]

  "Categorize redirects during a monitor job as a failure\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  redirectIsFailure: Boolean

  "Validation text for monitor to search for at given URI\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  responseValidationText: String

  "Monitor should skip default HEAD request and instead use GET verb in check\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  shouldBypassHeadRequest: Boolean

  "Monitor should validate SSL certificate chain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  useTlsValidation: Boolean
}

"Information required to link a Azure account to a NewRelic account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureLinkAccountInput {
  "The Azure account application identifier (used to fetch data).\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  applicationId: String!

  "The Azure account application secret key.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  clientSecret: SecureValue!

  "The linked account name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "The Azure account subscription identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  subscriptionId: String!

  "The Azure account tenant identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tenantId: String!
}

"An external service seen by an APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmExternalServiceEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  externalSummary: ApmExternalServiceSummaryData @deprecated(reason: "This field is deprecated.")

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The host of the external service.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  host: String

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Virtual Network Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureVirtualnetworksIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The result of deleting an application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentApplicationDeleteResult {
  "Did the delete succeed?\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  success: Boolean!
}

"A \"user type\" is what determines the set of New Relic capabilities a user can theoretically access.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementOrganizationUserType {
  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  displayName: String!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Filters on the grants role id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantRoleIdInputFilter {
  "Performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: Int

  "Performs an in operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  in: [Int!]
}

"Azure Cosmos DB\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureCosmosdbIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Input type for FixedNumericalEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedNumericalEqualInput {
  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  compared: Float!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!
}

"Sorting method for decisions.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsDecisionSortMethod {
  """Sort decisions by id"""
  ID

  """Sort decisions by latest_created"""
  LATEST_CREATED

  """Sort decisions by state_last_modified"""
  STATE_LAST_MODIFIED
}

"The result of a Script Api monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsScriptApiMonitorUpdateMutationResult {
  "Errors that occurred during Script Api monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorUpdateError]!

  "The resulting Script Api monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsScriptApiMonitor
}

"A filter for Sharing Mode\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountSharingModeFilterInput {
  "A Sharing Mode for the account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: OrganizationSharingMode!
}

"Azure Virtual Machines\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureVmsIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Response type for create operations over entities.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ReferenceEntityCreateRepositoryResult {
  "The list of entities guids that have been created correctly.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  created: [EntityGuid!]!

  "List of failures for the create operation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  failures: [ReferenceEntityCreateRepositoryError!]!

  "The list of entities guids that have been updated correctly.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updated: [EntityGuid!]!
}

"The input object used to represent the configuration of a static status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadUpdateStaticStatusInput {
  "A description that provides additional details about the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the static status configuration is enabled or not.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The unique identifier of the static status to be updated. If not provided, a new static status is created.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int

  "The status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  status: WorkloadStatusValueInput!

  "A short description of the static status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  summary: String
}

"Information about a nerdlet install directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogNerdletInstallDirective {
  "The nerdlet ID used to guide the user through installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdletId: ID!

  "The nerdlet state used to intialize the nerdlet\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdletState: Nr1CatalogRawNerdletState

  "Determines if an account selection needs to be made prior to installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  requiresAccount: Boolean!
}

"This object exposes contextual information about an API request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type RequestContext {
  "The API key used to make this request\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apiKey: String

  "The id of the user making this request\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  userId: ID
}

"Input type for WholeCosineDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsWholeCosineDistanceInput {
  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Float!
}

"Amazon Elastic Compute Cloud (EC2)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudEc2IntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  duplicateEc2Tags: Boolean

  "Specify if IP addresses of ec2 instance should be collected\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchIpAddresses: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"The monitor input values needed to create a Script Api monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCreateScriptApiMonitorInput {
  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsScriptedMonitorLocationsInput!

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod!

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntimeInput

  "The script that the monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  script: String!

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus!

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"Available filtering types for user type\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementTypeInput {
  "A user type\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: UserManagementTypeEnum!
}

"The input for updating an existing xMatters notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsXMattersNotificationChannelUpdateInput {
  "Integration URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  integrationUrl: SecureValue

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String
}

"Configuration for overriding properties of issues created by merges.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsOverrideConfigurationInput {
  "Description merged issues should take.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "Priority merged issues should take.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  priority: AiDecisionsIssuePriority

  "Title merged issues should take.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  title: String
}

"VPN Gateways Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureVpngatewaysIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface InfrastructureIntegrationEntity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  integrationTypeCode: String
}

"A group of entities defined by entity search queries and specific GUIDs\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface CollectionEntity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  collection(
    """The name of the collection to fetch."""
    name: String!
  ): EntityCollection

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid
}

"Represents a possible value for a variable of type ENUM.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardVariableEnumItem {
  "A human-friendly display string for this value.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "A possible variable value.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  value: String
}

"Delete workflow mutation response including errors\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsDeleteWorkflowResponse {
  "A list of errors that occurred while performing the delete workflow action\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  errors: [AiWorkflowsDeleteResponseError!]!

  "Id of the successfully deleted workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID
}

"Input type for RelativeHammingDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeHammingDistanceInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Int!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Input type for FixedStartsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedStartsWithInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"RDS Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudRdsIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"An external service seen by an APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmExternalServiceEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  externalSummary: ApmExternalServiceSummaryData @deprecated(reason: "This field is deprecated.")

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The host of the external service.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  host: String

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"The input object used to represent the workload to be created.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadCreateInput {
  "Relevant information about the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "A list of entity GUIDs composing the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entityGuids: [EntityGuid!]

  "A list of entity search queries used to retrieve the entities that compose the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [WorkloadEntitySearchQueryInput!]

  "The name of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  name: String!

  "Accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  scopeAccounts: WorkloadScopeAccountsInput

  "The configuration that defines how the status of the workload is calculated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  statusConfig: WorkloadStatusConfigInput
}

"Information about the result of the write secret mutation\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
type NerdStorageVaultWriteSecretResult {
  "Any errors that happend during the mutation.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  errors: [NerdStorageVaultResultError!]

  "The status of the mutation.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  status: NerdStorageVaultResultStatus!
}

"A filter for OrganizationID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountOrganizationIdFilterInput {
  "An Organization ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"Channel statuses\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsChannelStatus {
  """Configuration Error channel status"""
  CONFIGURATION_ERROR

  """Configuration Warning channel status"""
  CONFIGURATION_WARNING

  """Default channel status"""
  DEFAULT

  """Draft channel status"""
  DRAFT @deprecated(reason: "unused status")

  """Error channel status"""
  ERROR @deprecated(reason: "unused status")

  """Tested channel status"""
  TESTED @deprecated(reason: "unused status")

  """Throttled channel status"""
  THROTTLED @deprecated(reason: "unused status")

  """Unknown Error channel status"""
  UNKNOWN_ERROR
}

"The input parameters for a new streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
input StreamingExportRuleInput {
  "Additional information about the rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  description: String

  "The name of this export rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  name: String!

  "NRQL to select the telemetry data to export\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  nrql: Nrql!

  "Whether to compress payloads before sending them out, and what compression format to use if enabled\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  payloadCompression: StreamingExportPayloadCompression
}

"Filters by user name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityUserNameInput {
  "Part of a user name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  contains: String

  "A user name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureDisableIntegrationsInput {
  "Api Management integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureApimanagement: [CloudDisableAccountIntegrationInput]

  "App Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureAppgateway: [CloudDisableAccountIntegrationInput]

  "App Service integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureAppservice: [CloudDisableAccountIntegrationInput]

  "Containers integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureContainers: [CloudDisableAccountIntegrationInput]

  "Cosmos DB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureCosmosdb: [CloudDisableAccountIntegrationInput]

  "Cost Management integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureCostmanagement: [CloudDisableAccountIntegrationInput]

  "Data Factory integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureDatafactory: [CloudDisableAccountIntegrationInput]

  "Event Hub integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureEventhub: [CloudDisableAccountIntegrationInput]

  "Express Route integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureExpressroute: [CloudDisableAccountIntegrationInput]

  "Firewalls integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureFirewalls: [CloudDisableAccountIntegrationInput]

  "Front Door integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureFrontdoor: [CloudDisableAccountIntegrationInput]

  "Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureFunctions: [CloudDisableAccountIntegrationInput]

  "Key Vault integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureKeyvault: [CloudDisableAccountIntegrationInput]

  "Load Balancer integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureLoadbalancer: [CloudDisableAccountIntegrationInput]

  "Logic Apps integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureLogicapps: [CloudDisableAccountIntegrationInput]

  "Machine Learning integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMachinelearning: [CloudDisableAccountIntegrationInput]

  "Database for MariaDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMariadb: [CloudDisableAccountIntegrationInput]

  "Azure Monitor metrics integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMonitor: [CloudDisableAccountIntegrationInput]

  "Database for MySQL integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMysql: [CloudDisableAccountIntegrationInput]

  "MySQL Flexible Server integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMysqlflexible: [CloudDisableAccountIntegrationInput]

  "Database for PostgreSQL integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azurePostgresql: [CloudDisableAccountIntegrationInput]

  "PostgreSQL Flexible Server integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azurePostgresqlflexible: [CloudDisableAccountIntegrationInput]

  "Power BI Dedicated integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azurePowerbidedicated: [CloudDisableAccountIntegrationInput]

  "Redis Cache integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureRediscache: [CloudDisableAccountIntegrationInput]

  "Service Bus integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureServicebus: [CloudDisableAccountIntegrationInput]

  "SQL Database integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureSql: [CloudDisableAccountIntegrationInput]

  "SQL Managed Instances integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureSqlmanaged: [CloudDisableAccountIntegrationInput]

  "Storage integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureStorage: [CloudDisableAccountIntegrationInput]

  "Virtual machine scale sets integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVirtualmachine: [CloudDisableAccountIntegrationInput]

  "Virtual Network integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVirtualnetworks: [CloudDisableAccountIntegrationInput]

  "Virtual Machines integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVms: [CloudDisableAccountIntegrationInput]

  "VPN Gateways integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVpngateways: [CloudDisableAccountIntegrationInput]
}

"Information about a targeted install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogNerdletInstallPlanDirective implements Nr1CatalogInstallPlanDirective {
  "The mode of the install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogInstallPlanDirectiveMode!

  "The nerdlet ID used to guide the user through installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdletId: ID!

  "The nerdlet state used to intialize the nerdlet\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdletState: Nr1CatalogRawNerdletState
}

"Configuration options for a monthly monitor downtime that runs on days of the week\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
input SyntheticsDaysOfWeek {
  "Which occurrence of the day selected within the month\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  ordinalDayOfMonth: SyntheticsMonitorDowntimeDayOfMonthOrdinal!

  "Which day of the week the monitor downtime runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  weekDay: SyntheticsMonitorDowntimeWeekDays!
}

"Redis Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpRedisIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Campfire notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsCampfireNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet! @deprecated(reason: "This channel type is deprecated")

  "Campfire channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsCampfireNotificationChannelConfig! @deprecated(reason: "This channel type is deprecated")

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID! @deprecated(reason: "This channel type is deprecated")

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String! @deprecated(reason: "This channel type is deprecated")

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType! @deprecated(reason: "This channel type is deprecated")
}

"Load Balancer Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureLoadbalancerIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Mutation result.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum NerdpackMutationResult {
  """Error executing mutation."""
  ERROR

  """Successful mutation execution."""
  OK
}

"The input for creating a new PagerDuty notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsPagerDutyNotificationChannelCreateInput {
  "API key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  apiKey: SecureValue!

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"Provides the directions data can be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantAuthorizationSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"The monitor values that can be updated on a simple (ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsUpdateSimpleMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsSimpleMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String
}

"Filters for the suggestions object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsSuggestionFilterType {
  """Contains specific string"""
  CONTAINS

  """Starts with a specific string"""
  STARTSWITH
}

"Firebase Storage Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpFirebasestorageIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Result from sending a test push notification.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n\n"
type MobilePushNotificationSendPushResult {
  "The success or failure message from the attempted test push.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  message: String
}

"Elemental MediaConvert Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsMediaconvertIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A static NRQL condition is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlStaticCondition implements AlertsNrqlCondition {
  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The Entity associated with the NRQL Condition\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: EntityOutline

  "The condition's entity GUID\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpiration!

  "Condition ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Name of the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionQuery!

  "Alerts policy ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policyId: ID!

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Settings that determine how the NRQL results are evaluated\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignal!

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlConditionTerms!]!

  "Type of NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNrqlConditionType!

  "Deprecated - use `signal.slideBy` instead.\n\nFunction used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation is opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  valueFunction: AlertsNrqlStaticConditionValueFunction! @deprecated(reason: "Replaced by `signal.slideBy`.")

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  "Duration after which a violation automatically closes in seconds.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"Types of NrqlConditions.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNrqlConditionType {
  """Baseline NrqlCondition."""
  BASELINE

  """Outlier NrqlCondition."""
  OUTLIER

  """Static NrqlCondition."""
  STATIC
}

"AWS Elastic Beanstalk\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudElasticbeanstalkIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"An object representing a stack trace segment\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceApmStackTraceFrame {
  "Frame filepath\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  filepath: String

  "Formatted frame\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  formatted: String!

  "Frame line number\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  line: Int

  "Frame name\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"enum of weekdays customers can select monitor downtimes to run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
enum SyntheticsMonitorDowntimeWeekDays {
  """Select monitor downtime to run on Friday"""
  FRIDAY

  """Select monitor downtime to run on Monday"""
  MONDAY

  """Select monitor downtime to run on Saturday"""
  SATURDAY

  """Select monitor downtime to run on Sunday"""
  SUNDAY

  """Select monitor downtime to run on Thursday"""
  THURSDAY

  """Select monitor downtime to run on Tuesday"""
  TUESDAY

  """Select monitor downtime to run on Wednesday"""
  WEDNESDAY
}

"The rolling time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelObjectiveRollingTimeWindow {
  "The count of time units.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "The time unit.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  unit: ServiceLevelObjectiveRollingTimeWindowUnit!
}

"Autogenerated return type of RenameAccount\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudRenameAccountPayload {
  "The list of errors.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  errors: [CloudAccountMutationError!]!

  "The updated linked accounts.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccounts: [CloudLinkedAccount!]!
}

"Amazon Redshift\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudRedshiftIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Possible creation sources for rules.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsRuleSource {
  """Created by ADMIN"""
  ADMIN

  """Created by GENERATED"""
  GENERATED

  """Created by SYSTEM"""
  SYSTEM

  """Created by USER"""
  USER
}

"Sort key and direction for account shares\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountShareSortInput {
  "Direction to sort in\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  direction: OrganizationAccountShareSortDirectionEnum

  "Account share attribute to sort on\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  key: OrganizationAccountShareSortKeyEnum
}

"The result of a Cert Check monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsCertCheckMonitorUpdateMutationResult {
  "Errors that occurred during Cert Check monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorUpdateError]!

  "The resulting Cert Check monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsCertCheckMonitor
}

"The input object representing parameters for the Members filter\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityGroupMemberIdInput {
  "A list of user IDs. A group will be returned if all listed users are members.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  contains: [ID!]!
}

"General settings related to APM applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsApmConfig {
  "The desired target for the APDEX measurement of this APM application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apdexTarget: Float

  "Sets if agents for this APM application should get some of their configuration from the server.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  useServerSideConfig: Boolean
}

"The script that a monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsMonitorScriptQueryResponse {
  "The script associated with the specified monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  text: String
}

"The primary building block of a distributed trace.  An individual unit of work.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
type DistributedTracingSpan {
  "All attributes for this span. This field is a map of string keys to attributes values.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  attributes: DistributedTracingSpanAttributes

  "When the span represents a call to another entity, clientType indicates the type of the entity that was called.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  clientType: DistributedTracingSpanClientType

  "The duration of this span in milliseconds.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  durationMs: Milliseconds

  "Unique identifier for the entity that created this span. This value has a corresponding entry in the entities field of the trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  entityGuid: String

  "Unique identifier for this span.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  id: String!

  "The name of this span.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  name: String

  "The identifier of the caller of this span (null if this is the root span).\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  parentId: String

  "The position of a span with respect to the boundaries between processes in the trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  processBoundary: DistributedTracingSpanProcessBoundary!

  "Anomalies detected for this span, compared to similar spans that occurred over the previous hours before this span occurred.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  spanAnomalies: [DistributedTracingSpanAnomaly]

  "Epoch milliseconds timestamp represents this span's start time.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  timestamp: EpochMilliseconds!

  "Unique identifier shared by all spans within a single trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  traceId: String!
}

"A key for accessing New Relic APIs.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
interface ApiAccessKey {
  "The UNIX epoch when the key was created, in seconds.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds

  "The ID of the key. This can be used to identify a key without revealing the key itself (used to update and delete).\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  id: ID

  "The keystring of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  key: String

  "The name of the key. This can be used as a short identifier for easy reference.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  name: String

  "Any notes can be attached to a key. This is intended for more a more detailed description of the key use if desired.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  notes: String

  "The obfuscated key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  obfuscatedKey: String

  "The type of key, indicating what New Relic APIs it can be used to access.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  type: ApiAccessKeyType
}

"Information about a data source install\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogDataSourceInstall {
  "Provides context about how the fallback install should proceed\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  fallback: Nr1CatalogDataSourceInstallDirective

  "Provides context about how the primary install should proceed\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  primary: Nr1CatalogDataSourceInstallDirective!
}

"Result options for environment creation\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum IncidentIntelligenceEnvironmentCreateEnvironmentResult {
  """The account is not marked with consent for environment creation"""
  ACCOUNT_NOT_CONSENTED

  """The account is not entitled to incident intelligence"""
  ACCOUNT_NOT_ENTITLED

  """
  The specified associated accounts are already associated to other environments
  """
  ACCOUNTS_ALREADY_ASSOCIATED

  """Action not allowed, please contact support"""
  ACTION_UNAUTHORIZED

  """
  The environment already exists and cannot be created again for the same parent account id tree
  """
  ALREADY_EXISTS

  """The specified associated accounts are not authorized to the user"""
  ASSOCIATED_ACCOUNTS_NOT_AUTHORIZED

  """The environment was created successfully"""
  CREATED

  """The user is not authorized to create an environment"""
  USER_NOT_AUTHORIZED

  """
  The user is not authorized to create the environment due to a missing capability
  """
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"Autogenerated return type of LinkAccount\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudLinkAccountPayload {
  "The list of errors.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  errors: [CloudAccountMutationError!]!

  "The created Linked accounts.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccounts: [CloudLinkedAccount!]!
}

"Data Factory Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureDatafactoryIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Expected error types that can be returned by undelete operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardUndeleteErrorType {
  """Dashboard not found in the system."""
  DASHBOARD_NOT_FOUND

  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION
}

"The input object representing the filter parameters for users\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementUserFilterInput {
  "Filter users by email address\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: UserManagementEmailInput

  "Filter users by email verification state\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  emailVerificationState: UserManagementEmailVerificationStateInput

  "Filter users by user ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: UserManagementUserIdInput

  "Filter users by name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: UserManagementNameInput

  "Filter users by pending upgrade request\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  pendingUpgradeRequest: UserManagementPendingUpgradeRequestInput

  "Filter users by type\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  type: UserManagementTypeInput
}

"Test Enrichment input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsTestEnrichmentsInput {
  "nrql\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  nrql: [AiWorkflowsNrqlTestEnrichmentInput!]!
}

"Configure notification policy error\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxUpdateErrorGroupStateError implements ErrorsInboxResponseError {
  "The description of the error\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  description: String!

  "The error type\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  type: ErrorsInboxUpdateErrorGroupStateErrorType!
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsDisableIntegrationsInput {
  "ALB/NLB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  alb: [CloudDisableAccountIntegrationInput]

  "API Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  apigateway: [CloudDisableAccountIntegrationInput]

  "AutoScaling integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  autoscaling: [CloudDisableAccountIntegrationInput]

  "AppSync integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsAppsync: [CloudDisableAccountIntegrationInput]

  "Athena integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsAthena: [CloudDisableAccountIntegrationInput]

  "Cognito integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsCognito: [CloudDisableAccountIntegrationInput]

  "Connect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsConnect: [CloudDisableAccountIntegrationInput]

  "Direct Connect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsDirectconnect: [CloudDisableAccountIntegrationInput]

  "DocumentDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsDocdb: [CloudDisableAccountIntegrationInput]

  "FSx integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsFsx: [CloudDisableAccountIntegrationInput]

  "Glue integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsGlue: [CloudDisableAccountIntegrationInput]

  "Kinesis Data Analytics integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsKinesisanalytics: [CloudDisableAccountIntegrationInput]

  "Elemental MediaConvert integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMediaconvert: [CloudDisableAccountIntegrationInput]

  "MediaPackage VOD integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMediapackagevod: [CloudDisableAccountIntegrationInput]

  "Fetch Metadata for AWS integrations integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMetadata: [CloudDisableAccountIntegrationInput]

  "MQ integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMq: [CloudDisableAccountIntegrationInput]

  "Managed Kafka integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMsk: [CloudDisableAccountIntegrationInput]

  "Neptune integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsNeptune: [CloudDisableAccountIntegrationInput]

  "QLDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsQldb: [CloudDisableAccountIntegrationInput]

  "Route53 Resolver integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRoute53resolver: [CloudDisableAccountIntegrationInput]

  "Step Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsStates: [CloudDisableAccountIntegrationInput]

  "Fetch tags for all integrations integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsTagsGlobal: [CloudDisableAccountIntegrationInput]

  "Transit Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsTransitgateway: [CloudDisableAccountIntegrationInput]

  "WAF integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsWaf: [CloudDisableAccountIntegrationInput]

  "WAFV2 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsWafv2: [CloudDisableAccountIntegrationInput]

  "X-Ray integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsXray: [CloudDisableAccountIntegrationInput]

  "Billing integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  billing: [CloudDisableAccountIntegrationInput]

  "CloudFront integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  cloudfront: [CloudDisableAccountIntegrationInput]

  "CloudTrail integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  cloudtrail: [CloudDisableAccountIntegrationInput]

  "DynamoDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  dynamodb: [CloudDisableAccountIntegrationInput]

  "EBS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ebs: [CloudDisableAccountIntegrationInput]

  "EC2 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ec2: [CloudDisableAccountIntegrationInput]

  "ECS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ecs: [CloudDisableAccountIntegrationInput]

  "EFS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  efs: [CloudDisableAccountIntegrationInput]

  "ElastiCache integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticache: [CloudDisableAccountIntegrationInput]

  "Elastic Beanstalk integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticbeanstalk: [CloudDisableAccountIntegrationInput]

  "Elasticsearch Service integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticsearch: [CloudDisableAccountIntegrationInput]

  "ELB (Classic) integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elb: [CloudDisableAccountIntegrationInput]

  "EMR integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  emr: [CloudDisableAccountIntegrationInput]

  "Health integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  health: [CloudDisableAccountIntegrationInput]

  "IAM integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  iam: [CloudDisableAccountIntegrationInput]

  "IoT integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  iot: [CloudDisableAccountIntegrationInput]

  "Kinesis Streams integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  kinesis: [CloudDisableAccountIntegrationInput]

  "Kinesis Firehose integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  kinesisFirehose: [CloudDisableAccountIntegrationInput]

  "Lambda integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  lambda: [CloudDisableAccountIntegrationInput]

  "RDS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  rds: [CloudDisableAccountIntegrationInput]

  "Redshift integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  redshift: [CloudDisableAccountIntegrationInput]

  "Route 53 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  route53: [CloudDisableAccountIntegrationInput]

  "S3 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  s3: [CloudDisableAccountIntegrationInput]

  "SES integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ses: [CloudDisableAccountIntegrationInput]

  "SNS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sns: [CloudDisableAccountIntegrationInput]

  "SQS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sqs: [CloudDisableAccountIntegrationInput]

  "Trusted Advisor integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  trustedadvisor: [CloudDisableAccountIntegrationInput]

  "VPC integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  vpc: [CloudDisableAccountIntegrationInput]
}

"Delete error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsDeleteResponseError implements AiWorkflowsResponseError {
  "The error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  description: String!

  "The error type\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsDeleteErrorType!
}

"Data required to change the data source group.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeDataSourceGroupInput {
  "The entity guids representing the entities you would like to update.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  guids: [EntityGuid!]

  "The type of update that should be performed with the supplied entity guids.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  updateType: EdgeDataSourceGroupUpdateType!
}

"Power BI Dedicated Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzurePowerbidedicatedIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The types of Synthetic Monitors.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum SyntheticMonitorType {
  BROKEN_LINKS
  BROWSER
  CERT_CHECK
  SCRIPT_API
  SCRIPT_BROWSER
  SIMPLE
  STEP_MONITOR
}

"Input type for RelativeLevenshtein expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeLevenshteinInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Int!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"The input object representing the user being deleted\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementDeleteUser {
  "The ID of the user to be deleted\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Expected error types that can be returned by update operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardUpdateErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT
}

"CloudTrail Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudCloudtrailIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Enumerated list of text output\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n\n"
enum DataDictionaryTextFormat {
  """Text as HTML output"""
  HTML

  """Text as markdown output"""
  MARKDOWN

  """Text as plain output, stripped of markup"""
  PLAIN
}

"Makes it possible to augment the notification with additional data from the New Relic platform\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsEnrichment {
  "Account Id of the Enrichment\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  accountId: Int!

  "List of configurations for the enrichment\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  configurations: [AiWorkflowsConfiguration!]!

  "The time the Enrichment was created\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  createdAt: DateTime!

  "Enrichment Id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID!

  "Name of the Enrichment\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!

  "Type of the Enrichment\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsEnrichmentType!

  "The time the Enrichment was last updated\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  updatedAt: DateTime!
}

"Information about the changes made to the metadata for a version of the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogReleaseNote {
  "The description of changes made for this version of the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  changes: String!

  "The version of the Nerdpack the changes correspond with\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  version: SemVer!
}

"An object that represents the golden tags scoped by context\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenContextScopedGoldenTags {
  "Context for the golden tags\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  context: EntityGoldenContext!

  "Tags for the domain and type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  tags: [EntityGoldenTag!]!
}

"The result of a Step monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsStepMonitorCreateMutationResult {
  "Errors that occurred during Step monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorCreateError]!

  "The resulting Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsStepMonitor
}

"Organization create async result collection\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationCreateAsyncResultCollection {
  "Organization create async results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  items: [OrganizationOrganizationCreateAsyncResult!]!

  "an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"The result of a Script Browser monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsScriptBrowserMonitorUpdateMutationResult {
  "Errors that occurred during Script Browser monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorUpdateError]!

  "The resulting script browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsScriptBrowserMonitor
}

"Fetch tags for all integrations Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsTagsGlobalIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Machine Learning Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureMachinelearningIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Authentication interface\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
union AiNotificationsAuth = AiNotificationsBasicAuth | AiNotificationsOAuth2Auth | AiNotificationsTokenAuth

"Metadata information for a Nerdlet\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogNerdletMetadata implements Nr1CatalogNerdpackItemMetadata {
  "A short form description for the Nerdlet.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the Nerdlet.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "A list of previews for the Nerdlet, such as screenshots.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  previews: [Nr1CatalogPreview!]!

  "The supported entity types by the Nerdlet.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  supportedEntityTypes: Nr1CatalogSupportedEntityTypes
}

"Represents JSON nerdlet state data\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
scalar Nr1CatalogRawNerdletState

"Example subset of incidents applicable for a selector\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsSelectorExamples {
  "IDs of incidents that can be applied to this selector\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidents: [ID!]!

  "Incident selector\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  select: AiDecisionsIncidentSelect!
}

"Logic Apps\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureLogicappsIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The `Minutes` scalar represents a duration in minutes\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar Minutes

"Summary statistics about the Infra Host.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InfrastructureHostSummaryData {
  "Total CPU utilization as a percentage.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cpuUtilizationPercent: Float

  "The cumulative disk fullness percentage.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  diskUsedPercent: Float

  "Total memory utilization as a percentage.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  memoryUsedPercent: Float

  "The number of bytes per second received during the sampling period.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  networkReceiveRate: Float

  "The number of bytes sent per second during the sampling period.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  networkTransmitRate: Float

  "Number of services running on the host.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  servicesCount: Int
}

"Measures wall clock time, CPU time, and method call counts in your application's threads as they run.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsThreadProfiler {
  "Whether or not the Thread Profiler is enabled for your application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean
}

"In APM, when transaction traces are collected, there may be additional Slow query data available.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsSlowSql {
  "If true, the agent collects slow SQL queries.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean
}

"Configuration for overriding properties of issues created by merges.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsOverrideConfiguration {
  "Description merged issues should take.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "Priority merged issues should take.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  priority: AiDecisionsIssuePriority

  "Title merged issues should take.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  title: String
}

"The input for updating an existing PagerDuty notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsPagerDutyNotificationChannelUpdateInput {
  "API key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  apiKey: SecureValue

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface AlertableEntity {
  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the timewindow or look at fewer entities.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int = 10
  ): [EntityAlertViolation]
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type DocumentationFields {
  "View a list of all features for a chosen Agent\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentFeatures(
    """The Agent to view data for"""
    agentName: AgentFeaturesFilter!
  ): [AgentFeatures] @deprecated(reason: "This field is deprecated and does not return results.")

  "View a list of all releases for a chosen Agent\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentReleases(
    """The Agent to view data for"""
    agentName: AgentReleasesFilter!
  ): [AgentRelease]

  "This field provides access to DataDictionary data.\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  dataDictionary: DataDictionaryDocsStitchedFields

  "A list of all the Time Zones from the IANA tz database\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timeZones: [TimeZoneInfo]

  "This field provides access to WhatsNew data.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  whatsNew: WhatsNewDocsStitchedFields
}

"The alert violation for an entity\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityAlertViolation {
  "A link to the agent in the time window in which the violation occurred.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentUrl: String

  "The severity of the violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Timestamp of when the violation was closed.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  closedAt: EpochMilliseconds

  "The description of the violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  label: String

  "The priority of the violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  level: String

  "Timestamp of when the violation was opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  openedAt: EpochMilliseconds

  "The id of the violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  violationId: EntityAlertViolationInt

  "A link to the violation if it is connected to an incident.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  violationUrl: String
}

"An object that represents a tag key-value pair\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n\n"
input TaggingTagValueInput {
  "The tag key.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  key: String!

  "The tag value.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  value: String!
}

"The result after deleting a parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
type LogConfigurationsDeleteParsingRuleResponse {
  "List of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  errors: [LogConfigurationsParsingRuleMutationError]
}

"Filter the allow lists by fields specified in this object.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSegmentsSegmentAllowListFilters {
  "INTERNAL or USER. Defaults to USER\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n"
  listType: AgentApplicationSegmentsListType
}

"Provides the operations available on the target id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationTargetIdInput {
  "An organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"Expected errors as a result of mutating a parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
type LogConfigurationsParsingRuleMutationError {
  "The message with the error cause.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  message: String

  "Type of error.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  type: LogConfigurationsParsingRuleMutationErrorType
}

"Monitor downtime object returned to the customer for an edit mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsMonitorDowntimeMutationResult {
  "The account ID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  accountId: Int

  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endRepeat: SyntheticsDateWindowEndOutput

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "Configuration options for which days of the month a monitor downtime will occur\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  frequency: SyntheticsMonitorDowntimeMonthlyFrequencyOutput

  "The entity GUID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  guid: EntityGuid

  "Days of the week the monitor downtime will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]

  "The monitor GUIDs associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  monitorGuids: [EntityGuid]

  "The name of the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  name: String

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"Channel schema object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsSchema {
  "Possible fields for the channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  fields: [AiNotificationsSchemaField!]!
}

"Values for relationship direction filter.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
enum EntityRelationshipEdgeDirection {
  """Traverse both inbound and outbound connections."""
  BOTH

  """Traverse inbound connections to the source of the relationship."""
  INBOUND

  """Traverse outbound connections to the target of the relationship."""
  OUTBOUND
}

"Information about a component in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogQuickstartComponent {
  "Metadata associated with the quickstart component\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogQuickstartComponentMetadata!
}

"Provides all the available filters on the organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"Cloud Load Balancing Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpLoadbalancingIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input type for RelativeNumericalEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeNumericalEqualInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"The error for creating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelCreateError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String!

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  errorType: AlertsNotificationChannelCreateErrorType!
}

"Configuration for visualization type 'viz.bar'. Learn more about [bar](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#bar) widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardBarWidgetConfigurationInput {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"Expected errors that can be returned by updatePage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUpdatePageError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardUpdatePageErrorType!
}

"Version details for first and last seen versions.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/provide_first_last_versions_from_api`)\n\n\n"
type ErrorsInboxVersion {
  "Version name\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/provide_first_last_versions_from_api`)\n\n"
  name: String
}

"A Mobile Application entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type MobileApplicationEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The ID of the Mobile App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationId: Int

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "Summary statistics about the Mobile App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  mobileSummary: MobileAppSummaryData

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Input type for assignment search filter\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
input ErrorsInboxAssignmentSearchFilterInput {
  "Filter by assigned user email.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  userEmail: String

  "Filter by assigned user id\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  userId: Int
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsIntegrationsInput {
  "ALB/NLB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  alb: [CloudAlbIntegrationInput]

  "API Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  apigateway: [CloudApigatewayIntegrationInput]

  "AutoScaling integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  autoscaling: [CloudAutoscalingIntegrationInput]

  "AppSync integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsAppsync: [CloudAwsAppsyncIntegrationInput]

  "Athena integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsAthena: [CloudAwsAthenaIntegrationInput]

  "Cognito integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsCognito: [CloudAwsCognitoIntegrationInput]

  "Connect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsConnect: [CloudAwsConnectIntegrationInput]

  "Direct Connect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsDirectconnect: [CloudAwsDirectconnectIntegrationInput]

  "DocumentDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsDocdb: [CloudAwsDocdbIntegrationInput]

  "FSx integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsFsx: [CloudAwsFsxIntegrationInput]

  "Glue integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsGlue: [CloudAwsGlueIntegrationInput]

  "Kinesis Data Analytics integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsKinesisanalytics: [CloudAwsKinesisanalyticsIntegrationInput]

  "Elemental MediaConvert integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMediaconvert: [CloudAwsMediaconvertIntegrationInput]

  "MediaPackage VOD integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMediapackagevod: [CloudAwsMediapackagevodIntegrationInput]

  "Fetch Metadata for AWS integrations integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMetadata: [CloudAwsMetadataIntegrationInput]

  "MQ integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMq: [CloudAwsMqIntegrationInput]

  "Managed Kafka integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsMsk: [CloudAwsMskIntegrationInput]

  "Neptune integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsNeptune: [CloudAwsNeptuneIntegrationInput]

  "QLDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsQldb: [CloudAwsQldbIntegrationInput]

  "Route53 Resolver integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRoute53resolver: [CloudAwsRoute53resolverIntegrationInput]

  "Step Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsStates: [CloudAwsStatesIntegrationInput]

  "Fetch tags for all integrations integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsTagsGlobal: [CloudAwsTagsGlobalIntegrationInput]

  "Transit Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsTransitgateway: [CloudAwsTransitgatewayIntegrationInput]

  "WAF integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsWaf: [CloudAwsWafIntegrationInput]

  "WAFV2 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsWafv2: [CloudAwsWafv2IntegrationInput]

  "X-Ray integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsXray: [CloudAwsXrayIntegrationInput]

  "Billing integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  billing: [CloudBillingIntegrationInput]

  "CloudFront integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  cloudfront: [CloudCloudfrontIntegrationInput]

  "CloudTrail integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  cloudtrail: [CloudCloudtrailIntegrationInput]

  "DynamoDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  dynamodb: [CloudDynamodbIntegrationInput]

  "EBS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ebs: [CloudEbsIntegrationInput]

  "EC2 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ec2: [CloudEc2IntegrationInput]

  "ECS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ecs: [CloudEcsIntegrationInput]

  "EFS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  efs: [CloudEfsIntegrationInput]

  "ElastiCache integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticache: [CloudElasticacheIntegrationInput]

  "Elastic Beanstalk integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticbeanstalk: [CloudElasticbeanstalkIntegrationInput]

  "Elasticsearch Service integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticsearch: [CloudElasticsearchIntegrationInput]

  "ELB (Classic) integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elb: [CloudElbIntegrationInput]

  "EMR integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  emr: [CloudEmrIntegrationInput]

  "Health integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  health: [CloudHealthIntegrationInput]

  "IAM integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  iam: [CloudIamIntegrationInput]

  "IoT integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  iot: [CloudIotIntegrationInput]

  "Kinesis Streams integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  kinesis: [CloudKinesisIntegrationInput]

  "Kinesis Firehose integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  kinesisFirehose: [CloudKinesisFirehoseIntegrationInput]

  "Lambda integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  lambda: [CloudLambdaIntegrationInput]

  "RDS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  rds: [CloudRdsIntegrationInput]

  "Redshift integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  redshift: [CloudRedshiftIntegrationInput]

  "Route 53 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  route53: [CloudRoute53IntegrationInput]

  "S3 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  s3: [CloudS3IntegrationInput]

  "SES integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ses: [CloudSesIntegrationInput]

  "SNS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sns: [CloudSnsIntegrationInput]

  "SQS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sqs: [CloudSqsIntegrationInput]

  "Trusted Advisor integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  trustedadvisor: [CloudTrustedadvisorIntegrationInput]

  "VPC integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  vpc: [CloudVpcIntegrationInput]
}

"Email notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsEmailNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "Email channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsEmailNotificationChannelConfig!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"Information required to link a GCP account to a NewRelic account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpLinkAccountInput {
  "The linked account name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "The GCP project identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  projectId: String!
}

"A group of MutingRuleConditions combined by an operator.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsMutingRuleConditionGroup {
  "The individual MutingRuleConditions within the group.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  conditions: [AlertsMutingRuleCondition!]!

  "The operator used to combine all the MutingRuleConditions within the group.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  operator: AlertsMutingRuleConditionGroupOperator!
}

"The input for updating an existing Email notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsEmailNotificationChannelUpdateInput {
  "List of email recipients.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  emails: [String!]

  "Include details about the violation as a JSON attachment.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  includeJson: Boolean

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String
}

"The input object used to represent the entity search query to be updated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadUpdateCollectionEntitySearchQueryInput {
  "The unique identifier of the entity search query to be updated. If not provided, a new entity search query is created.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int

  "The entity search query that is used to perform the search of a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  query: String!
}

"An APM Application entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmApplicationEntityOutline implements AlertableEntityOutline & ApmBrowserApplicationEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Summary statistics about the Browser App injected by an APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apmBrowserSummary: ApmBrowserApplicationSummaryData

  "Summary statistics about the APM App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apmSummary: ApmApplicationSummaryData

  "The ID of the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationId: Int

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The programming language of the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  language: String

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The running versions of the language agent in the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  runningAgentVersions: ApmApplicationRunningAgentVersions

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "Configuration settings for the APM Application\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  settings: ApmApplicationSettings

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"A string representing a nerdpack tag.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar NerdpackTagName

"Error details when processing events to metrics rule requests.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsError {
  "A detailed error message.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The category of error that occurred.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reason: EventsToMetricsErrorReason
}

"Neptune Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsNeptuneIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementOrganizationStitchedFields {
  "An \"authentication domain\" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomains(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]
  ): UserManagementAuthenticationDomains

  "User Types available for this organization\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  types: [UserManagementOrganizationUserType!]
}

"A grant within the system\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type MultiTenantAuthorizationGrant {
  "The group associated to the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  group: MultiTenantAuthorizationGrantGroup!

  "The id of the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: Int!

  "The role associated to the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  role: MultiTenantAuthorizationGrantRole!

  "The scope associated to the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  scope: MultiTenantAuthorizationGrantScope!
}

"Webhook basic auth\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsWebhookBasicAuthInput {
  "Password\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  password: SecureValue!

  "Username\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  username: String!
}

"ALB/NLB Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAlbIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  loadBalancerPrefixes: [String]

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Error object for Synthetic Private Location mutation request\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsPrivateLocationMutationError {
  "String description of error\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  description: String!

  "Enum type of error response\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  type: SyntheticsPrivateLocationMutationErrorType!
}

"An objective definition.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelObjective {
  "The description of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The name of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The resulting NRQL queries that help consume the metrics of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  resultQueries: ServiceLevelObjectiveResultQueries

  "The target percentage of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  target: Float!

  "The time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timeWindow: ServiceLevelObjectiveTimeWindow!
}

"The input object used to represent the workload duplicate.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadDuplicateInput {
  "The name of the workload duplicate. If the name isn't specified, the name + ' copy' of the source workload is used to compose the new name.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  name: String
}

"A suggested correlation rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsSuggestion {
  "Length of the window in which incidents are compared.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  correlationWindowLength: Milliseconds

  "Time suggestion was created.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "Description of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "External hash of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hash: String!

  "ID of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "Number of correlations within a window required to merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minCorrelationThreshold: Int!

  "Name of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Configuration to allow rule to override issue properties.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  overrideConfiguration: AiDecisionsOverrideConfiguration

  "Expression to use to compare incidents.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleExpression: AiDecisionsRuleExpression!

  "Acceptance state of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  state: AiDecisionsSuggestionState!

  "Service/user that created this suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  suggester: String!

  "External support for suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  support: String
}

"The status of whether data is being sent to the trace observer for a particular data source.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeDataSourceStatusType {
  """The data source telemetry is being sent to this trace observer."""
  ACTIVE

  """The data source telemetry is *not* being sent to this trace observer."""
  INACTIVE
}

"Definition of a variable that is local to this dashboard. Variables are placeholders for dynamic values in widget NRQLs.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardVariableInput {
  "[DEPRECATED] Default value for this variable. The actual value to be used will depend on the type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  defaultValue: DashboardVariableDefaultValueInput

  "Default values for this variable. The actual value to be used will depend on the type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  defaultValues: [DashboardVariableDefaultItemInput!]

  "Indicates whether this variable supports multiple selection or not. Only applies to variables of type NRQL or ENUM.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  isMultiSelection: Boolean

  "List of possible values for variables of type ENUM\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  items: [DashboardVariableEnumItemInput]

  "Variable identifier.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  name: String!

  "Configuration for variables of type NRQL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQuery: DashboardVariableNrqlQueryInput

  "Indicates the strategy to apply when replacing a variable in a NRQL query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  replacementStrategy: DashboardVariableReplacementStrategy

  "Human-friendly display string for this variable.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "Specifies the data type of the variable and where its possible values may come from.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardVariableType!
}

"Input data for nerdpack version tagging.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackTagVersionInput {
  "Tag to be added to the version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName

  "Nerdpack version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  version: SemVer
}

"The data to be stored in NerdStorageVault.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
input NerdStorageVaultWriteSecretInput {
  "The unique identifier of the secret.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  key: String!

  "The value of the secret.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  value: SecureValue!
}

"AWS input parameters for a new streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
input StreamingExportAwsInput {
  "The AWS account to which the target firehose belongs\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  awsAccountId: ID!

  "The name of the delivery stream to write events to\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  deliveryStreamName: String!

  "The AWS region the delivery stream is located in\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  region: String!

  "The role configured for New Relic to assume\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  role: String!
}

"Mobile application summary data\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type MobileAppSummaryData {
  "The number of times the app has been launched.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  appLaunchCount: Int

  "The number of crashes.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  crashCount: Int

  "Crash rate is percentage of crashes per sessions.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  crashRate: Float

  "Error rate is the percentage of http errors per successful requests.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  httpErrorRate: Float

  "The number of http requests.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  httpRequestCount: Int

  "The rate of http requests per minute.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  httpRequestRate: Float

  "The average response time for all http calls.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  httpResponseTimeAverage: Seconds

  "The number of mobile sessions.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  mobileSessionCount: Int

  "Network failure rate is the percentage of network failures per successful requests.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  networkFailureRate: Float

  "The number of users affected by crashes.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  usersAffectedCount: Int
}

"Error object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
union AiNotificationsError = AiNotificationsConstraintsError | AiNotificationsDataValidationError | AiNotificationsResponseError | AiNotificationsSuggestionError

"DocumentDB\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsDocdbIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"A structured representation of a handled exception in a mobile application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceMobileExceptionStackTrace {
  "Stack trace frames.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  frames: [StackTraceMobileExceptionStackTraceFrame]
}

"Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlConditionExpiration {
  "Whether to close all open violations when the signal expires. Defaults to true.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  closeViolationsOnExpiration: Boolean

  "The amount of time (in seconds) to wait before considering if the signal has been lost. Max value of 172800 (48 hours).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expirationDuration: Seconds

  "Whether to create a new \"lost signal\" violation to capture that the signal expired. Defaults to false.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  openViolationOnExpiration: Boolean
}

"Filter issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
input AiIssuesFilterIssues {
  "A list of condition ids associated with an issue.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  conditionIds: [Int!]

  "A string to filter results that includes this string on key issue attributes (examples: condition, entity, ...). Case sensitive.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  contains: String

  "Entity guids associated with an issue.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: [EntityGuid!]

  "Entity types associated with an issue.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: [String!]

  "A list of unique issue identifiers.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  ids: [ID!]

  "For acknowledged issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  isAcknowledged: Boolean

  "For correlated issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  isCorrelated: Boolean

  "Filtering for muting states\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  mutingStates: [AiIssuesIssueMutingState!]

  "A list of policy ids associated with an issue.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  policyIds: [Int!]

  "A list of priorities associated with an issue. Can be: 'CRITICAL', 'HIGH', 'MEDIUM' or 'LOW'\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: [String!]

  "A list of sources associated with an issue.\nSources can be:\n- 'newrelic' (indicating data originating from the NewRelic platform)\n- 'rest' (indicating data originating from external sources via api)\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  sources: [String!]

  "A list of states associated with an issue.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  states: [AiIssuesIssueState!]
}

"Represents the details in common between all types of news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n\n"
interface WhatsNewContent {
  "The type of the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  contentType: WhatsNewContentType!

  "Contains information about the context of the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  context: [String!]

  "The ID of the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  id: ID!

  "The date the news was published.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  publishDate: EpochMilliseconds

  "The summary of the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  summary: String

  "The title of the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  title: String
}

"A list of HTTP status codes, such as \"404\" or \"500.\"\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
scalar AgentApplicationSettingsErrorCollectorHttpStatus

"The different rule actions.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
enum MetricNormalizationRuleAction {
  """Deny new metrics."""
  DENY_NEW_METRICS

  """Ignore matching metrics."""
  IGNORE

  """Replace metrics."""
  REPLACE
}

"Type of rule\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsRuleType {
  """Rule type is explicit"""
  EXPLICIT

  """Rule type is global"""
  GLOBAL

  """Rule type is implicit"""
  IMPLICIT
}

"Number of incidents applicable for a selector\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsSelectorApplicability {
  "Applicable number of incidents\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "Incident selector\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  select: AiDecisionsIncidentSelect!
}

"Consent all the user's authorized accounts for the Incident Intelligence product for EU or FedRAMP\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentConsentAuthorizedAccounts {
  "The list of accounts marked with consent\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  consentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  "The outcome of the consent marking\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: IncidentIntelligenceEnvironmentConsentAccountsResult!
}

"The return object for an update-account mutation.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n\n"
type AccountManagementUpdateResponse {
  "Information about an updated account\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  managedAccount: AccountManagementManagedAccount
}

"An account share\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAccountShare {
  "The ID of the account being shared\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The account share ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The limiting role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  limitingRole: OrganizationAccountShareLimitingRoleWrapper!

  "The name of the account share\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The organization sending the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  source: OrganizationAccountShareOrganizationWrapper!

  "The organization receiving the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  target: OrganizationAccountShareOrganizationWrapper!
}

"Type defined so its fields will be merged directly into NerdGraph's actor type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n\n"
type QueryHistoryActorStitchedFields {
  "List of records of the query history for the current user.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n"
  nrql(
    """Input options to select query records."""
    options: QueryHistoryQueryHistoryOptionsInput
  ): [QueryHistoryNrqlHistoryResult!]
}

"Rest incident\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesRestIncident implements AiIssuesIIncident {
  "account\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`III/api_access`)\n\n"
  account: AccountReference

  "An account id this incident is stored in\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  accountIds: String!

  "Aggregation of tags related to this incident\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aggregationTags: [AiIssuesKeyValue!]

  "The time the incident was closed\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  closedAt: EpochMilliseconds

  "The time the incident was created\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  createdAt: EpochMilliseconds!

  "The description provided through API\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  description: [String!]!

  "A list of unique entity identifiers\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: EntityGuid

  "A list of entity names\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityNames: String

  "A list of entity types\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: String

  "See our documentation to learn about environments\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  environmentId: Int! @deprecated(reason: "Use account")

  "Incident identifier\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentId: ID!

  "Incident priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: AiIssuesPriority!

  "Incident state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  state: AiIssuesIncidentState!

  "Incident event timestamp\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  timestamp: EpochMilliseconds!

  "The description the user gave the condition if provided. Otherwise the incident description\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  title: String!

  "The time the incident was last updated\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  updatedAt: EpochMilliseconds!
}

"Service Bus Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureServicebusIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Metadata associated with the quickstart that is available in New Relic I/O\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartMetadata {
  "Authors for the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  authors: [Nr1CatalogAuthor!]!

  "The list of categories for filtering, searching, and grouping associated with the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [Nr1CatalogCategory!]!

  "The list of category terms associated with the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categoryTerms: [String!]!

  "The list of data sources associated with the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  dataSources: [Nr1CatalogDataSource!]!

  "A short form description for the quickstart. Used throughout the platform when displaying the quickstart.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the quickstart. Used throughout the New Relic One platform when displaying the quickstart.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "The corresponding icon for the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  icon: Nr1CatalogIcon

  "Information about how a quickstart is installed\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  installer: Nr1CatalogInstaller @deprecated(reason: "This field is in a deprecation period. Please refer to `dataSources` for how a quickstart is installed.")

  "A list of keywords for filtering and searching\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  keywords: [String!]!

  "List of components in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  quickstartComponents: [Nr1CatalogQuickstartComponent!]!

  "The URL friendly name of the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  slug: String!

  "A short summary detailing the functionality of the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  summary: String
}

"An object containing metadata about the execution of an asynchronous NRQL query.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NrdbQueryProgress {
  "Whether the query has finished executing.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  completed: Boolean

  "A token for retrieving the results of a previously executed asynchronous query.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  queryId: ID

  "Results of the completed query will expire permanently after this long.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  resultExpiration: Seconds

  "Wait at least this long before querying for completed results with the `queryId`.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  retryAfter: Seconds

  "The server may cancel the NRDB query after this long if no GraphQL queries have been made to check the `queryId`'s status.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  retryDeadline: Seconds
}

"Available filtering types for group display names\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementDisplayNameInput {
  "Part of a display name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  contains: String

  "A display name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Represents the resulting details from a search of news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n\n"
type WhatsNewSearchResult {
  "The next cursor, used for pagination. If a cursor is present, it means more content can be fetched.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  nextCursor: String

  "A list of news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  results: [WhatsNewContent!]

  "The total amount of news available that satisfies the search criteria.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  totalCount: Int!
}

"Channel type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsChannelType {
  """Email channel type"""
  EMAIL

  """Event Bridge channel type"""
  EVENT_BRIDGE

  """Jira Classic channel type"""
  JIRA_CLASSIC

  """Jira Nextgen channel type"""
  JIRA_NEXTGEN

  """Mobile push channel type"""
  MOBILE_PUSH

  """PagerDuty channel type"""
  PAGERDUTY_ACCOUNT_INTEGRATION

  """Pager Duty channel type"""
  PAGERDUTY_SERVICE_INTEGRATION

  """ServiceNow app channel type"""
  SERVICE_NOW_APP

  """Servicenow events channel type"""
  SERVICENOW_EVENTS

  """Servicenow incidents channel type"""
  SERVICENOW_INCIDENTS

  """Slack channel type"""
  SLACK

  """Slack Collaboration channel type"""
  SLACK_COLLABORATION

  """Legacy Slack channel type based on Incoming Webhooks"""
  SLACK_LEGACY

  """Webhook channel type"""
  WEBHOOK
}

"Autogenerated return type of CreateGroup.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementCreateGroupPayload {
  "The group that was created\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  group: UserManagementGroup
}

"Create workflow mutation response including errors\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsCreateWorkflowResponse {
  "A list of errors that occurred while performing the create workflow action\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  errors: [AiWorkflowsCreateResponseError!]!

  "Successfully created workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  workflow: AiWorkflowsWorkflow
}

"Input type for RelativeSoundEx expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeSoundExInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Minimum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minDistance: Int!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"The type of the relationship.\n\nFor details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntityRelationshipType {
  """The source repository containing the code for the target"""
  BUILT_FROM @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source entity calls the target entity."""
  CALLS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source establishes TCP connections to the target"""
  CONNECTS_TO @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source entity contains the target entity"""
  CONTAINS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source entity hosts the target"""
  HOSTS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source and target entities are perspectives on the same thing"""
  IS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """
  The source is an Application that serves the target Browser application
  """
  SERVES @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """Type not known"""
  UNKNOWN @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")
}

"Configure mobile settings here.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsMobileSettingsInput {
  "Input arguments for network settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  networkSettings: AgentApplicationSettingsNetworkSettingsInput

  "Sets if application should use crash report or not for mobile settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  useCrashReports: Boolean
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsGovcloudIntegrationsInput {
  "ALB/NLB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  alb: [CloudAlbIntegrationInput]

  "API Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  apigateway: [CloudApigatewayIntegrationInput]

  "AutoScaling integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  autoscaling: [CloudAutoscalingIntegrationInput]

  "Direct Connect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsDirectconnect: [CloudAwsDirectconnectIntegrationInput]

  "Step Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsStates: [CloudAwsStatesIntegrationInput]

  "CloudTrail integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  cloudtrail: [CloudCloudtrailIntegrationInput]

  "DynamoDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  dynamodb: [CloudDynamodbIntegrationInput]

  "EBS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ebs: [CloudEbsIntegrationInput]

  "EC2 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ec2: [CloudEc2IntegrationInput]

  "Elasticsearch Service integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticsearch: [CloudElasticsearchIntegrationInput]

  "ELB (Classic) integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elb: [CloudElbIntegrationInput]

  "EMR integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  emr: [CloudEmrIntegrationInput]

  "IAM integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  iam: [CloudIamIntegrationInput]

  "Lambda integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  lambda: [CloudLambdaIntegrationInput]

  "RDS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  rds: [CloudRdsIntegrationInput]

  "Redshift integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  redshift: [CloudRedshiftIntegrationInput]

  "Route 53 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  route53: [CloudRoute53IntegrationInput]

  "S3 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  s3: [CloudS3IntegrationInput]

  "SNS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sns: [CloudSnsIntegrationInput]

  "SQS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sqs: [CloudSqsIntegrationInput]
}

"The status of the workload, which is derived from the static and the automatic statuses configured. Any static status always overrides any other status values calculated automatically.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
enum WorkloadStatusValue {
  """The status of the workload is degraded."""
  DEGRADED

  """The status of the workload is disrupted."""
  DISRUPTED

  """The status of the workload is operational."""
  OPERATIONAL

  """The status of the workload is unknown."""
  UNKNOWN
}

"Information required to migrate an existing AWS GovCloud account to use AssumeRole Authentication.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsGovCloudMigrateToAssumeroleInput {
  "The AWS role ARN (used to fetch data).\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  arn: String!

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!
}

"Dashboard input.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardInput {
  "Brief text describing the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "The name of the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  name: String!

  "A nested block of all pages belonging to the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  pages: [DashboardPageInput!]!

  "Permissions to set level of visibility & editing.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  permissions: DashboardPermissions!

  "Dashboard-local variable definitions.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  variables: [DashboardVariableInput!]
}

"Configure mobile network settings here.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsNetworkSettingsInput {
  "Input data that maps hosts to alias names for grouping and identification purposes.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  aliases: [AgentApplicationSettingsNetworkAliasesInput!]

  "Configuration setting to apply either the show or hide strategy for network filtering.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  filterMode: AgentApplicationSettingsNetworkFilterMode

  "A list of hostnames that would be applied to our filter settings when the filterMode is 'HIDE.'\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  hideList: [String!]

  "Input data that maps ignore status codes associated with different hosts.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ignoredStatusCodeRules: [AgentApplicationSettingsIgnoredStatusCodeRuleInput!]

  "A list of hostnames that would be applied to our filter settings when the filterMode is 'SHOW.'\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  showList: [String!]
}

"The `EpochSeconds` scalar represents the number of seconds since the Unix epoch\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar EpochSeconds

"Provides the available values for provisioning type\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationProvisioningTypeEnum {
  """Provisioning not configured"""
  DISABLED

  """Manual provisioning"""
  MANUAL

  """SCIM automated provisioning"""
  SCIM
}

"The input object used to represent a rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadRemainingEntitiesRuleRollupInput {
  "The grouping to be applied to the remaining entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  groupBy: WorkloadGroupRemainingEntitiesRuleBy!

  "The rollup strategy that is applied to a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  strategy: WorkloadRollupStrategy!

  "Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdType: WorkloadRuleThresholdType

  "Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdValue: Int
}

"Run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsMonitorStatus {
  """Monitor disabled runs status of a monitor"""
  DISABLED

  """Enabled status of a monitor"""
  ENABLED

  """Alerts muted status of a monitor"""
  MUTED
}

"Status of the trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeTraceObserverStatus {
  """The trace observer has been created and is available for use."""
  CREATED

  """
  The trace observer has been deleted and is no longer available for use.
  """
  DELETED
}

"The `Entity` interface allows fetching detailed entity information for a single entity.\n\nTo understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface Entity implements AlertableEntity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"xMatters notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsXMattersNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "xMatters channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsXMattersNotificationChannelConfig!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"A customer\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationCustomerContract {
  "The customer contract''s billing structure\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  billingStructure: OrganizationBillingStructure

  "The customers id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customerId: String!

  "The customer contracts ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The customer contracts organization groups\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationGroups(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationOrganizationGroupFilterInput
  ): OrganizationOrganizationGroupWrapper!

  "The customer contracts''s telemetry id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  telemetryId: String
}

"Channel object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsChannel {
  "The accountId of the creator of the channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  accountId: Int!

  "Is channel active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean!

  "Channel creation time\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  createdAt: DateTime!

  "Related destination type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  destinationId: ID!

  "Channel id\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  id: ID!

  "Channel name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String!

  "Related product type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  product: AiNotificationsProduct!

  "List of destination property types\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  properties: [AiNotificationsProperty!]!

  "Channel Status\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  status: AiNotificationsChannelStatus!

  "Channel type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsChannelType!

  "Channel last update time\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  updatedAt: DateTime!

  "Message template creator userId\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  updatedBy: Int!
}

"Attributes for updating an account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationUpdateSharedAccountInput {
  "The id of the account share to be updated\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: String!

  "The id of the limiting role to be updated\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  limitingRoleId: Int!
}

"AutoScaling Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAutoscalingIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"An object representing a stack trace segment\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceBrowserStackTraceFrame {
  "Frame column number\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  column: Int

  "Formatted frame\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  formatted: String!

  "Frame line number\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  line: Int

  "Frame name\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"The different error types for the entityRelationshipUserDefinedCreateOrReplace mutation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
enum EntityRelationshipUserDefinedCreateOrReplaceErrorType {
  """
  Number of user-defined relationships for a given entity has exceeded the limit (2000 relationships).
  """
  LIMIT_EXCEEDED

  """The operation is not allowed."""
  NOT_ALLOWED

  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"The group associated to the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type MultiTenantAuthorizationGrantGroup {
  "The id of the group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Input type for All expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsAllInput {
  "Children expressions.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  children: [AiDecisionsRuleExpressionInput!]!
}

"The alert severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntityAlertSeverity {
  """Indicates an entity has a critical violation in progress."""
  CRITICAL

  """Indicates an entity has no violations and therefore is not alerting."""
  NOT_ALERTING

  """Indicates an entity is not configured for alerting."""
  NOT_CONFIGURED

  """Indicates an entity  has a warning violation in progress."""
  WARNING
}

"An Infrastructure Host entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InfrastructureHostEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hostSummary: InfrastructureHostSummaryData

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Current state of the error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
enum ErrorsInboxErrorGroupState {
  """Error group is ignored."""
  IGNORED

  """Error group is resolved."""
  RESOLVED

  """Error group is unresolved."""
  UNRESOLVED
}

"Sort object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsChannelSorter {
  "direction\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  direction: AiNotificationsSortOrder!

  "field\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  field: AiNotificationsChannelFields!
}

"Provides the operations available on the id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationIdInput {
  "An authentication domain id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"Azure Monitor metrics\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureMonitorIntegrationInput {
  "Specify if integration is active\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Specify resource tags (in 'key:value' form) associated with the resources that you want to exclude from monitoring. Exclusion takes precedence over inclusion.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  excludeTags: [String]

  "Specify resource tags (in 'key:value' form) associated with the resources that you want to monitor. If empty, all resources will be monitored.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  includeTags: [String]

  "The polling interval for metadata and tags, in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The polling interval for metrics, in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "Specify each Azure resource type that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceTypes: [String]
}

"Information related to device browser emulation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsDeviceEmulationInput {
  "The device orientation the user would like to represent\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceOrientation: SyntheticsDeviceOrientation!

  "The device type that a user can select\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceType: SyntheticsDeviceType!
}

"Wrapper object for retention namespaces\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementRetention {
  "Is this field customizable?\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  customizable: Boolean

  "The name as displayed in the UI\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  displayName: String

  "The upper limit for the retention value\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  maxRetentionInDays: Int

  "The lower limit for the retention value\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  minRetentionInDays: Int

  "The name of a namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  namespace: String

  "The source of the namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  source: String
}

"Browser Ajax.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsBrowserAjax {
  "List of domains excluded from Ajax traces by the browser agent.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  denyList: [String!]
}

"The retention policy for the data partition data.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
enum LogConfigurationsDataPartitionRuleRetentionPolicyType {
  """
  The alternative data retention policy, 30 days of data retention since the log data is ingested.
  """
  SECONDARY

  """
  The maximum retention period associated with the account. This is determined by the customer’s subscription/contract with New Relic.
  """
  STANDARD
}

"Available directions for sorting\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantIdentitySortDirection {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"An outline of a created alert condition\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAlertConditionOutline {
  "The template id of the created alert condition\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  alertConditionTemplate: Nr1CatalogAlertConditionTemplate!

  "The id of the created alert condition\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!
}

"A Cert Check monitor resulting from a Cert Check monitor mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsCertCheckMonitor {
  "The creation time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  createdAt: EpochMilliseconds

  "The domain of the host that will have its certificate checked\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  domain: String

  "The unique client identifier for the Synthetics Monitor in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The unique identifier of the monitor within the Synthetics domain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  id: ID

  "The locations the monitor runs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocations

  "The last modification time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  modifiedAt: EpochMilliseconds

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The desired number of remaining days until the certificate expires to trigger a monitor failure\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  numberDaysToFailBeforeCertExpires: Int

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus
}

"Type of Filter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsFilterType {
  """Standard Filter type"""
  FILTER

  """View Filter type"""
  VIEW
}

"Configuration for visualization type 'viz.bar'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardBarWidgetConfiguration {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentActorStitchedFields {
  "A list of potential environments is returned based on the authorized accounts list\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  authorizedEnvironments(
    """Which environment kind to support when evaluating the query"""
    kind: IncidentIntelligenceEnvironmentSupportedEnvironmentKind
  ): [IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment!]

  "Retrieves a list of authorized accounts the user is authorized for that have been marked with consent by an admin of that account.\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  consentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  "Retrieves the incident intelligence environment based on the user's authentication and product entitlement, if an account id is not provided, the environment is detected based on the authorized accounts.In cases where a user have more then one potential environment, the account must be provided.\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  currentEnvironment(
    """Which environment kind to support when evaluating the query"""
    kind: IncidentIntelligenceEnvironmentSupportedEnvironmentKind
  ): IncidentIntelligenceEnvironmentCurrentEnvironmentResult
}

"Input type for FixedFuzzyScore expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedFuzzyScoreInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Minimum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minDistance: Int!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Represents the rollup strategy that is applied to a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
enum WorkloadRollupStrategy {
  """
  The group status matches the less critical status of all belonging entities.
  """
  BEST_STATUS_WINS

  """
  The group status matches the most critical status of all belonging entities.
  """
  WORST_STATUS_WINS
}

"The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsErrorCollector {
  "Enables error collector.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  expectedErrorClasses: [String!]

  "An array of individual HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  expectedErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]

  "Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ignoredErrorClasses: [String!]

  "An array of individual HTTP status codes that should not be treated as errors.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ignoredErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]
}

"NRQL query used by a widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardWidgetNrqlQueryInput {
  "New Relic account ID to issue the query against.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "NRQL formatted query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  query: Nrql!
}

"\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadAccountStitchedFields {
  "[DEPRECATED] Retrieves a workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  collection(
    """The GUID of the workload."""
    guid: EntityGuid!
  ): WorkloadCollection @deprecated(reason: "Use the entity-specific alternatives like entity(guid).")

  "[DEPRECATED] Retrieves a list of workloads.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  collections: [WorkloadCollectionWithoutStatus!] @deprecated(reason: "Use the entity-specific alternatives like entitySearch(query).")

  "[DEPRECATED] Status and breakdown preview.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  statusBreakdownPreview(
    """The entity search query that returns the full collection of entities."""
    entitySearchQuery: String!

    """Accounts that will be used to get entities from."""
    scopeAccounts: WorkloadScopeAccountsInput!

    """
    The configuration that defines how the status of the workload is calculated.
    """
    statusConfig: WorkloadStatusConfigInput!
  ): WorkloadWorkloadStatus @deprecated(reason: "This field is subject to breaking changes.")

  "[DEPRECATED] Retrieves all the accounts from the same organization that user has access to.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  validAccounts: WorkloadValidAccounts @deprecated(reason: "This field is subject to breaking changes.")
}

"Integration Mutation Error\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudIntegrationMutationError {
  "The passed integration slug.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  integrationSlug: String

  "The passed linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int

  "The error message.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  message: String!

  "The passed newrelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The error status.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  type: String!
}

"Sort fields\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
enum ErrorsInboxErrorGroupSortOrderField {
  """Order by last occurrence in the current time window."""
  LAST_OCCURRENCE_IN_WINDOW

  """Order by error group occurrences."""
  OCCURRENCES
}

"Represents all the format types available for static charts.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum ChartFormatType {
  PDF
  PNG
}

"A filter for organization groups\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationGroupFilterInput {
  "The id of the organization group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: OrganizationOrganizationGroupIdInputFilter

  "The name of the organization group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: OrganizationOrganizationGroupNameInputFilter

  "The ID of the organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationId: OrganizationOrganizationGroupOrganizationIdInputFilter
}

"An NRQL query executed in the past.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NrqlHistoricalQuery {
  "The Account ID queried.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The NRQL query executed.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: Nrql

  "The time the query was executed.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timestamp: EpochSeconds
}

"Response for delete resource mutation.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxDeleteErrorGroupResourceResponse {
  "Id of the deleted resource\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  resourceId: ID!
}

"Cost Management Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureCostmanagementIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify if additional cost data per tag should be collected. This field is case sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKeys: [String]

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A third party service entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ThirdPartyServiceEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"The `AccountReference` object provides basic identifying information about the account.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AccountReference {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: Int

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Configure additional browser settings here.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AgentApplicationBrowserSettingsInput {
  "Configure cookies. The default is enabled: true.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cookiesEnabled: Boolean

  "Configure distributed tracing in browser apps. The default is enabled: true.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  distributedTracingEnabled: Boolean

  "Determines which browser loader is configured. The default is \"SPA\".\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  loaderType: AgentApplicationBrowserLoader
}

"Filters on the grants scope id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantScopeIdInputFilter {
  "Performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: String

  "Performs an in operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  in: [String!]
}

"Test workflow mutation response including errors\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsTestWorkflowResponse {
  "A list of errors that occurred while performing the test workflow action\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  errors: [AiWorkflowsTestResponseError!]

  "List of responses by channel id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  notificationResponses: [AiWorkflowsTestNotificationResponse!]

  "Whether the test was a success or not\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  status: AiWorkflowsTestResponseStatus!
}

"Additional options for NRQL queries.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NrqlQueryOptions {
  "Limit the NRQL query to return results from the chosen Event Namespaces.\n\nYou must supply at least 1 valid event namespace when using this option.\nInvalid event namespaces will be filtered out.\n\nIf omitted, the default list will be `[\"Default\"]`\n\nFor more details about Event Namespaces, visit our [docs](https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/introduction-new-relic-subscription-usage-data/#namespace).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eventNamespaces: [String!]
}

"The input object representing the sort parameters for groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementGroupSortInput {
  "Sort groups in this direction\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  direction: UserManagementSortDirection

  "Sort groups by this key\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  key: UserManagementGroupSortKey
}

"The service level defined for a specific entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelDefinition {
  "The SLIs attached to the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indicators: [ServiceLevelIndicator!]
}

"container for users enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementUsers {
  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!

  "container for users enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  users: [UserManagementUser!]!
}

"Response containing entity relationships.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipRelatedEntitiesResult {
  "The next cursor for fetching additional paginated results.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "The list of  entity relationships.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  results: [EntityRelationshipEdge!]!
}

"An object that represents a status error whenever an recipe has failed to install.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input InstallationStatusErrorInput {
  "Error details, if any.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  details: String

  "The actual error message.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String
}

"Input type for RelativeFuzzyWuzzyTokenSetRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeFuzzyWuzzyTokenSetRatioInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"MySQL Flexible Server Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureMysqlflexibleIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface ApmBrowserApplicationEntity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apmBrowserSummary: ApmBrowserApplicationSummaryData
}

"Filter destination object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsDestinationFilter {
  "active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean

  "authType\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  authType: AiNotificationsAuthType

  "id\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  id: ID

  "ids\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  ids: [ID!]

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String

  "property\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  property: AiNotificationsPropertyFilter

  "type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsDestinationType

  "updatedAt\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  updatedAt: DateTime
}

"A node in an Entity relationship.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityRelationshipNode {
  "The Account ID for the relationship node.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: EntityOutline

  "The `EntityType` of the relationship node.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  "The Entity `guid` for the relationship node.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")
}

"A \"user type\" is what determines the set of New Relic capabilities a user can theoretically access.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityUserType {
  "The id of the user type.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The name of the user type.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!
}

"The rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadRemainingEntitiesRuleRollup {
  "The grouping to be applied to the remaining entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  groupBy: WorkloadGroupRemainingEntitiesRuleBy!

  "The rollup strategy that is applied to a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  strategy: WorkloadRollupStrategy!

  "Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdType: WorkloadRuleThresholdType

  "Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdValue: Int
}

"The list of valid job statuses to search for\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationOrganizationCreateJobStatusEnum {
  """All jobs regardless of status"""
  ALL

  """Jobs that have been created but not yet started running"""
  CREATED

  """Jobs that have failed and stopped running"""
  FAILED

  """Jobs that are still running"""
  RUNNING

  """Jobs that completed successfully"""
  SUCCEEDED
}

"The data partition rule for an account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsDataPartitionRule {
  "Identifies the date and time when the rule was created.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  createdAt: DateTime!

  "Identifies the user who has created the rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  createdBy: UserReference

  "Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  deleted: Boolean!

  "A description of what this data partition rule represents.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  description: String

  "Whether or not this data partition rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  enabled: Boolean!

  "Unique data partition rule identifier.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  id: ID!

  "The matching criteria for this data partition rule. Logs matching this criteria will be routed to the specified data partition once the rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  matchingCriteria: LogConfigurationsDataPartitionRuleMatchingCriteria @deprecated(reason: "matchingCriteria is deprecated and will eventually be replaced with a new field named nrql which will allow for greater flexibility in defining rules")

  "The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition once the rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/partitions_nrql_filter`)\n\n"
  nrql: Nrql

  "The retention policy of the data partition data.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  retentionPolicy: LogConfigurationsDataPartitionRuleRetentionPolicyType!

  "The name of the data partition.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  targetDataPartition: LogConfigurationsLogDataPartitionName!

  "Identifies the date and time when the rule was last updated.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  updatedAt: DateTime

  "Identifies the user who has last updated the rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  updatedBy: UserReference
}

"A collection of New Relic users\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityUserCollection {
  "Users\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  items: [MultiTenantIdentityUser!]!

  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "The total number of users found.\n Note: Not necessarily the same as number of users returned, due to pagination.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Specifies fields required for types that implement the ability to display a media preview in the New Relic One Catalog\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogPreview {
  "The publicly accessible URL for the preview\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"Configuration for PagerDuty notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsPagerDutyNotificationChannelConfig {
  "API key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  apiKey: SecureValue!
}

"The input for updating an existing Slack notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsSlackNotificationChannelUpdateInput {
  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "Slack channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  teamChannel: String

  "Slack channel URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  url: SecureValue
}

"The result of a Step monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsStepMonitorUpdateMutationResult {
  "Errors that occurred during Step monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorUpdateError]!

  "The resulting Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsStepMonitor
}

"The `Seconds` scalar represents a duration in seconds\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar Seconds

"Possible search result types used to filter search results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogSearchResultType {
  """Filter search results by alert policy templates"""
  ALERT_POLICY_TEMPLATE

  """Filter search results by dashboard templates"""
  DASHBOARD_TEMPLATE

  """Filter search results by data sources"""
  DATA_SOURCE

  """Filter search results by nerdpacks"""
  NERDPACK

  """Filter search results by quickstarts"""
  QUICKSTART
}

"Error reason for the mutation.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum NerdpackMutationErrorType {
  """
  The user does not have the required capability to execute the operation.
  """
  CAPABILITY_NOT_GRANTED

  """Downstream service error."""
  DOWNSTREAM_ERROR

  """Resource not found for given operation."""
  NOT_FOUND

  """Terms and conditions have not been accepted by the operation account."""
  TNC_NOT_ACCEPTED

  """Account is not authorized to execute the operation."""
  UNAUTHORIZED_ACCOUNT
}

"Information about a data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogDataSource {
  "The unique identifier for the data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogDataSourceMetadata!
}

"Information about a policy associated with a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelPolicy {
  "Policy ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Policy name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"Typed configuration for known visualizations. Only one (at most) will be populated for a given widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardWidgetConfiguration {
  "Configuration for visualization type 'viz.area'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  area: DashboardAreaWidgetConfiguration

  "Configuration for visualization type 'viz.bar'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  bar: DashboardBarWidgetConfiguration

  "Configuration for visualization type 'viz.billboard'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  billboard: DashboardBillboardWidgetConfiguration

  "Configuration for visualization type 'viz.line'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  line: DashboardLineWidgetConfiguration

  "Configuration for visualization type 'viz.markdown'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  markdown: DashboardMarkdownWidgetConfiguration

  "Configuration for visualization type 'viz.pie'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  pie: DashboardPieWidgetConfiguration

  "Configuration for visualization type 'viz.table'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  table: DashboardTableWidgetConfiguration
}

"A Synthetic Monitor entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SyntheticMonitorEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Assets produced during the execution of the check, such as screenshots\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  assets(
    """The unique identifer of the monitor check"""
    checkId: String!
  ): [SyntheticsSyntheticMonitorAsset]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The Synthetic Monitor ID\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitorId: ID

  "Summary statistics for the Synthetic Monitor.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitorSummary: SyntheticMonitorSummaryData

  "The Synthetic Monitor type\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitorType: SyntheticMonitorType

  "The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitoredUrl: String

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The duration in minutes between Synthetic Monitor runs.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  period: Minutes

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Configuration for visualization type 'viz.line'. Learn more about [line](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#line) widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardLineWidgetConfigurationInput {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"Expression used for comparing incidents as part of a correlation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar AiDecisionsRuleExpression

"The type of tracing being done.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSettingsTracer {
  """Cross-application tracing feature enabled."""
  CROSS_APPLICATION_TRACER

  """Distributed tracing feature enabled."""
  DISTRIBUTED_TRACING

  """Both cross-application and distributed tracing disabled."""
  NONE
}

"The settings of a browser application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentApplicationApmBrowserSettings {
  "Configure cookies. The default is enabled: true.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cookiesEnabled: Boolean!

  "Configure distributed tracing in browser apps. The default is enabled: true.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  distributedTracingEnabled: Boolean!

  "Determines which browser loader will be configured. The default is \"SPA\".\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  loaderType: AgentApplicationBrowserLoader!
}

"Available values for Type\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum UserManagementTypeEnum {
  """Basic type"""
  BASIC

  """Core type"""
  CORE

  """Full type"""
  FULL_PLATFORM
}

"Configuration for visualization type 'viz.markdown'. Learn more about [markdown](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#markdown) widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardMarkdownWidgetConfigurationInput {
  "Markdown content of the widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  text: String!
}

"Valid billing structure values\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationBillingStructure {
  """Account Hierarchy"""
  ACCOUNT_HIERARCHY

  """Customer Contract"""
  CUSTOMER_CONTRACT

  """Unstructured"""
  UNSTRUCTURED
}

"Destination Object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsDestination {
  "The accountId of the creator of the destination\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  accountId: Int!

  "Destination active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean!

  "Authentication for this destination\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  auth: AiNotificationsAuth

  "Destination created at\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  createdAt: DateTime!

  "Destination id\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  id: ID!

  "Indicates whether the user is authenticated with the destination\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  isUserAuthenticated: Boolean!

  "Last time a notification was sent\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  lastSent: DateTime

  "Destination name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String!

  "List of destination property types\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  properties: [AiNotificationsProperty!]!

  "Destination status\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  status: AiNotificationsDestinationStatus!

  "Destination type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsDestinationType!

  "Destination updated at\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  updatedAt: DateTime!

  "Destination updated by\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  updatedBy: Int!
}

"A grouping of similar error events with minimal fields.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxErrorGroupOutline implements ErrorsInboxErrorGroupBase {
  "User assigned to the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignedUser: UserReference @deprecated

  "User assigned to the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignment: ErrorsInboxAssignment

  "Source entity Guid\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  entityGuid: EntityGuid

  "NRQL formatted query for retrieving error events\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  eventsQuery: Nrql

  "Time of first occurrence\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/use_stored_timestamps`)\n\n"
  firstSeenAt: EpochMilliseconds

  "A unique identifier for the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  id: ID!

  "Indicates whether this error group was custom generated.\n- false = this is a system-generated error group\n- true = this is a custom error group, created and sent by the end user\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/custom_fingerprinting`)\n\n"
  isCustom: Boolean

  "Time of last occurrence\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/use_stored_timestamps`)\n\n"
  lastSeenAt: EpochMilliseconds

  "Error group message\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  message: String

  "Error group name\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  name: String

  "The occurrences of this error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  occurrences: ErrorsInboxOccurrences

  "Time of regression occurrence for regressed error groups\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  regressedAt: EpochMilliseconds

  "List of resources associated with this error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  resources(
    """Current query cursor"""
    cursor: String

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxResourceFilterInput
  ): ErrorsInboxResourcesResponse!

  "The source event of the error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  source: String

  "Value to indicate the current state of the group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  state: ErrorsInboxErrorGroupState

  "The public URL of the error group detail view.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  url: String
}

"Information about facets from a search\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogSearchFacets {
  "Facet counts for each category\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [Nr1CatalogCategoryFacet!]!

  "Facet counts for each component\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  components: [Nr1CatalogComponentFacet!]!

  "Count of the number of featured results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  featured: Int!

  "Facet counts for each search result type\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  types: [Nr1CatalogSearchResultTypeFacet!]!
}

"Set of filters for scoping error group searches\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
input ErrorsInboxErrorGroupSearchFilterInput {
  "Filter error groups by account ID\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  accountIds: [Int!]

  "Filter error groups by the version of the application\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  applicationVersions: [String!]

  "Filter error groups by assignment\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignment: [ErrorsInboxAssignmentSearchFilterInput!]

  "Filter error groups by id\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  ids: [ID!]

  "Filter error groups by assignment status\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  isAssigned: Boolean

  "Filter error groups by error group states\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  states: [ErrorsInboxErrorGroupState!]
}

"Customer-facing status of an export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n\n"
enum HistoricalDataExportStatus {
  """Export Canceled"""
  CANCELED

  """Export Failed"""
  COMPLETE_FAILED

  """Export Successful"""
  COMPLETE_SUCCESS

  """Export in progress"""
  IN_PROGRESS

  """Unknown Status of this Export"""
  UNKNOWN

  """Export waiting to start"""
  WAITING
}

"Bigtable\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpBigtableIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Features of the Agent\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentFeatures {
  "The minimum version available for the Agent on this entity\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minVersion: String

  "The name of the feature\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Details tracing summary data for the provided `EntityGuid` that occurred during the provided `startTime` and `endTime`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
type DistributedTracingEntityTracingSummary {
  "The number of traces where this entity produced an error\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  errorTraceCount: Int

  "The percentage of error traces produced by this entity compared to all error traces in the system\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  percentOfAllErrorTraces: Float
}

"Information about the error that occurred as a result of submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogSubmitMetadataError {
  "A human-readable description of the error when submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String!

  "The field that caused the error when submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  field: [String!]

  "The type of error that occurred when submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  type: Nr1CatalogSubmitMetadataErrorType!
}

"Amazon Simple Email Service (SES)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudSesIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Information related to the metadata attached to a quickstart component\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogQuickstartComponentMetadata {
  "A short form description for the quickstart component.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the quickstart component.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String
}

"Channel schema object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsChannelSchemaResult {
  "Error while querying channelSchema\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "Result of channelSchema query\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  result: AiNotificationsResult!

  "Possible fields for the channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  schema: AiNotificationsSchema
}

"Allow lists have two different types. They are either internal lists or user lists.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSegmentsListType {
  """INTERNAL refers to a list that has been generated by New Relic."""
  INTERNAL

  """USER refers to a list that has been generated by the customer."""
  USER
}

"Suggestion filter object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsSuggestionFilter {
  "type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsSuggestionFilterType!

  "value\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  value: String!
}

"Represents the details of a rollup rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadRollupRuleDetails {
  "A list of entity search queries defined in the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [String!]

  "Indicates if the rule has individual entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  hasIndividualEntities: Boolean!

  "The amount of not operational entities after evaluating the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  notOperationalEntities: Int!

  "The amount of operational entities after evaluating the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  operationalEntities: Int!

  "The resulting type of the rollup rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  resultingGroupType: WorkloadResultingGroupType!

  "Type of threshold defined for the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdType: WorkloadRuleThresholdType

  "The amount of entities the status of which is unknown.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  unknownStatusEntities: Int!
}

"Expected error types that can be returned by updateWidgetsInPage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardUpdateWidgetsInPageErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT

  """Page not found in the system."""
  PAGE_NOT_FOUND

  """Widget not found in the system."""
  WIDGET_NOT_FOUND
}

"The input object used to represent the configuration of a static status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadStaticStatusInput {
  "A description that provides additional details about the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the static status configuration is enabled or not.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  status: WorkloadStatusValueInput!

  "A short description of the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  summary: String
}

"Monitor downtime object returned to the customer for a downtime run weekly\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsWeeklyMonitorDowntimeMutationResult {
  "The account ID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  accountId: Int

  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endRepeat: SyntheticsDateWindowEndOutput

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "The entity GUID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  guid: EntityGuid

  "Days of the week the monitor downtime will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]

  "The monitor GUIDs associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  monitorGuids: [EntityGuid]

  "The name of the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  name: String

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"Error types\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsErrorType {
  """Unable to connect to external service to perform this action"""
  CONNECTION_ERROR

  """This operation could not be completed because the entity is in use"""
  ENTITY_IN_USE

  """An external server error has occurred"""
  EXTERNAL_SERVER_ERROR

  """Targeted account does not have access to this feature"""
  FEATURE_FLAG_DISABLED

  """The channel name doesn't exist"""
  INVALID_CHANNEL_NAME

  """The credentials provided were invalid, Please check them and try again"""
  INVALID_CREDENTIALS

  """Could not provide suggestions for this key"""
  INVALID_KEY

  """The parameter provided does not correspond to any valid entity"""
  INVALID_PARAMETER

  """Entities limit has been reached"""
  LIMIT_REACHED

  """User is missing capabilities"""
  MISSING_CAPABILITIES

  """This key requires additional constraints"""
  MISSING_CONSTRAINTS

  """At least one parameter is required to complete this action"""
  MISSING_PARAMETERS

  """This destination does not support OAuth authentication"""
  OAUTH_NOT_SUPPORTED

  """This destination does not provide any suggestions"""
  SUGGESTIONS_UNAVAILABLE

  """Request did not finish within time limit"""
  TIMEOUT_ERROR

  """The variable type is different from the example type"""
  TYPE_EXAMPLE_MISMATCH

  """This account is not allowed to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """Received one or more unexpected parameters"""
  UNEXPECTED_PARAMETER

  """The New Relic application was removed"""
  UNINSTALLED_DESTINATION

  """An unknown error has occurred"""
  UNKNOWN_ERROR
}

"enum of which day in the month a customer can have a monitor downtime run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
enum SyntheticsMonitorDowntimeDayOfMonthOrdinal {
  """First selected day of the month"""
  FIRST

  """Fourth selected day of the month"""
  FOURTH

  """Last selected day of the month"""
  LAST

  """Second selected day of the month"""
  SECOND

  """Third selected day of the month"""
  THIRD
}

"Available filtering types for pending upgrade requests\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityPendingUpgradeRequestInput {
  "Whether a request exists or not\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  exists: Boolean!
}

"Memcache Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpMemcacheIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"DynamoDB Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudDynamodbIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Possible visibilities for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogNerdpackVisibility {
  """Indicates the Nerdpack is available globally across all accounts"""
  GLOBAL

  """
  Indicates the Nerdpack is only available to the owning and allowed accounts
  """
  OWNER_AND_ALLOWED
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpIntegrationsInput {
  "Vertex AI integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpAiplatform: [CloudGcpAiplatformIntegrationInput]

  "AlloyDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpAlloydb: [CloudGcpAlloydbIntegrationInput]

  "App Engine integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpAppengine: [CloudGcpAppengineIntegrationInput]

  "BigQuery integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpBigquery: [CloudGcpBigqueryIntegrationInput]

  "Bigtable integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpBigtable: [CloudGcpBigtableIntegrationInput]

  "Composer integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpComposer: [CloudGcpComposerIntegrationInput]

  "Dataflow integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpDataflow: [CloudGcpDataflowIntegrationInput]

  "Dataproc integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpDataproc: [CloudGcpDataprocIntegrationInput]

  "Datastore integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpDatastore: [CloudGcpDatastoreIntegrationInput]

  "Firebase Database integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirebasedatabase: [CloudGcpFirebasedatabaseIntegrationInput]

  "Firebase Hosting integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirebasehosting: [CloudGcpFirebasehostingIntegrationInput]

  "Firebase Storage integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirebasestorage: [CloudGcpFirebasestorageIntegrationInput]

  "Firestore integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirestore: [CloudGcpFirestoreIntegrationInput]

  "Cloud Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFunctions: [CloudGcpFunctionsIntegrationInput]

  "Interconnect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpInterconnect: [CloudGcpInterconnectIntegrationInput]

  "Kubernetes Engine integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpKubernetes: [CloudGcpKubernetesIntegrationInput]

  "Cloud Load Balancing integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpLoadbalancing: [CloudGcpLoadbalancingIntegrationInput]

  "Memcache integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpMemcache: [CloudGcpMemcacheIntegrationInput]

  "Cloud Pub/Sub integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpPubsub: [CloudGcpPubsubIntegrationInput]

  "Redis integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpRedis: [CloudGcpRedisIntegrationInput]

  "Router integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpRouter: [CloudGcpRouterIntegrationInput]

  "Run integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpRun: [CloudGcpRunIntegrationInput]

  "Cloud Spanner integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpSpanner: [CloudGcpSpannerIntegrationInput]

  "Cloud SQL integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpSql: [CloudGcpSqlIntegrationInput]

  "Cloud Storage integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpStorage: [CloudGcpStorageIntegrationInput]

  "Compute Engine integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpVms: [CloudGcpVmsIntegrationInput]

  "VPC Access integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpVpcaccess: [CloudGcpVpcaccessIntegrationInput]
}

"User operations with issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
enum AiIssuesIssueUserAction {
  """Acknowledge issue"""
  ACK

  """Resolve issue"""
  RESOLVE

  """Unacknowledge issue"""
  UNACK
}

"The result of creating a mobile application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentApplicationCreateMobileResult {
  "The application's account ID.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The mobile application's token.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationToken: SecureValue!

  "Additional information about the mobile application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityOutline: EntityOutline

  "The new mobile application's GUID.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid!

  "The application's name.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!
}

"\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsAccountStitchedFields {
  "Fetch channel creation schema\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  channelSchema(
    """Query by channelType"""
    channelType: AiNotificationsChannelType!

    """Channel creation constraints"""
    constraints: [AiNotificationsConstraint!]

    """Query by destinationId"""
    destinationId: ID!

    """Product type for schema personalization"""
    product: AiNotificationsProduct
  ): AiNotificationsChannelSchemaResult

  "Fetch a field suggestions list for Channel creation\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  channelSuggestions(
    """Suggestions channel type"""
    channelType: AiNotificationsChannelType!

    """List of key/value pairs indicating field constraints"""
    constraints: [AiNotificationsConstraint!]

    """cursor to get the next batch of results"""
    cursor: String

    """Query by destinationId"""
    destinationId: ID!

    """Filter for the suggestions results"""
    filter: AiNotificationsSuggestionFilter

    """The field name for which the suggestions are"""
    key: String!
  ): AiNotificationsSuggestionsResponse

  "Fetch a Channel by product\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  channels(
    """cursor to get the next batch of results"""
    cursor: String

    """Query filters"""
    filters: AiNotificationsChannelFilter

    """Sort object for results"""
    sorter: AiNotificationsChannelSorter
  ): AiNotificationsChannelsResponse

  "Fetch a field suggestions list for Destination creation\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  destinationSuggestions(
    """List of key/value pairs indicating field constraints"""
    constraints: [AiNotificationsConstraint!]

    """cursor to get the next batch of results"""
    cursor: String

    """Suggestions destination type"""
    destinationType: AiNotificationsDestinationType!

    """Filter for the suggestions results"""
    filter: AiNotificationsSuggestionFilter

    """The field name for which the suggestions are"""
    key: String!
  ): AiNotificationsSuggestionsResponse

  "Fetch a Destinations by type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  destinations(
    """cursor to get the next batch of results"""
    cursor: String

    """Query filters"""
    filters: AiNotificationsDestinationFilter

    """Sort object for results"""
    sorter: AiNotificationsDestinationSorter
  ): AiNotificationsDestinationsResponse

  "Get an OAuth URL by destination type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  oAuthUrl(
    """Redirection URL"""
    redirectUrl: String

    """Destination type"""
    type: AiNotificationsDestinationType!
  ): AiNotificationsOAuthUrlResponse

  "Fetch a field suggestions list for Channel creation\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  suggestions(
    """Suggestions channel type"""
    channelType: AiNotificationsChannelType!

    """List of key/value pairs indicating field constraints"""
    constraints: [AiNotificationsConstraint!]

    """cursor to get the next batch of results"""
    cursor: String

    """Query by destinationId"""
    destinationId: ID!

    """Filter for the suggestions results"""
    filter: AiNotificationsSuggestionFilter

    """The field name for which the suggestions are"""
    key: String!
  ): AiNotificationsSuggestionsResponse @deprecated(reason: "API is being deprecated in favor of channelSuggestions API")

  "Fetch a Variables by product\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  variables(
    """cursor to get the next batch of results"""
    cursor: String

    """Query filters"""
    filters: AiNotificationsVariableFilter

    """Sort object for results"""
    sorter: AiNotificationsVariableSorter
  ): AiNotificationsVariableResult
}

"Input for creating MutingRules for New Relic Alerts Violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsMutingRuleInput {
  "The condition that defines which violations to target.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  condition: AlertsMutingRuleConditionGroupInput!

  "The description of the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the MutingRule is enabled\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The name of the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The time window when the MutingRule should actively mute violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  schedule: AlertsMutingRuleScheduleInput
}

"The time window when the MutingRule should actively mute violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsMutingRuleScheduleUpdateInput {
  "The datetime stamp when the MutingRule schedule should stop repeating.\nThis is in local ISO 8601 format without an offset.\n\nExample: `'2020-07-10T15:00:00'`\n\nNote: Either `endRepeat` or `repeatCount` should be used to end a MutingRule schedule.\nBoth fields should not be provided together.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  endRepeat: NaiveDateTime

  "The datetime stamp representing when the MutingRule should end.\nThis is in local ISO 8601 format without an offset.\n\nExample: `'2020-07-10T15:00:00'`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  endTime: NaiveDateTime

  "The frequency the MutingRule schedule repeats.\nIf the MutingRule repeats `WEEKLY`, be sure to set `weeklyRepeatDays`.\nIf the MutingRule does not repeat, use `null`.\n\nExample: `DAILY`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  repeat: AlertsMutingRuleScheduleRepeat

  "The number of times the MutingRule schedule should repeat.\n\nNote: Either `repeatCount` or `endRepeat` should be used to end a MutingRule schedule.\nBoth fields should not be provided together.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  repeatCount: Int

  "The datetime stamp representing when the MutingRule should start.\nThis is in local ISO 8601 format without an offset.\n\nExample: `'2020-07-08T14:30:00'`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  startTime: NaiveDateTime

  "The time zone that applies to the MutingRule schedule.\n\nExample: `'America/Los_Angeles'`\n\nSee https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  timeZone: String

  "The day(s) of the week that a MutingRule should repeat when the repeat field is set to `WEEKLY`.\n\nExample: `[MONDAY, WEDNESDAY]`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  weeklyRepeatDays: [AlertsDayOfWeek!]
}

"Categories of errors that could occur while attempting updates.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSettingsUpdateErrorClass {
  """You are not authorized to update this field."""
  ACCESS_DENIED

  """The given value for the field is not valid or out of range."""
  INVALID_INPUT

  """No record could be found using the given input value."""
  NOT_FOUND
}

"Results of the nerdpack versions query.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackVersionsResult {
  "Cursor that can be used to retrieve the next results page.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nextCursor: String

  "List of nerdpack version objects.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  results: [NerdpackVersion]

  "Total amount of available version objects for the given nerdpack (including the ones not showed in the current page)\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  totalCount: Int
}

"Represents all the visualization types available for static charts.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum ChartImageType {
  APDEX
  AREA
  BAR
  BASELINE
  BILLBOARD
  BULLET
  EVENT_FEED
  FUNNEL
  HEATMAP
  HISTOGRAM
  LINE
  PIE
  SCATTER
  STACKED_HORIZONTAL_BAR
  TABLE
  VERTICAL_BAR
}

"\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixieActorStitchedFields {
  "Details for the linked Pixie projects\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  linkedPixieProjects: [PixieLinkedPixieProject]!
}

"An entity that is unavailable.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type UnavailableEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Sort object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsVariableSorter {
  "direction\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  direction: AiNotificationsSortOrder!

  "field\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  field: AiNotificationsVariableFields!
}

"Input type for RelativeJaroWinkler expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeJaroWinklerInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Minimum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minDistance: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Billboard widget threshold.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardBillboardWidgetThreshold {
  "Alert severity.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  alertSeverity: DashboardAlertSeverity

  "Alert value.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  value: Float
}

"The response returned when linking a Pixie project to a New Relic account\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixieLinkPixieProjectResult {
  "An array containing errors, if any.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errors: [PixieLinkPixieProjectError]

  "The Pixie project details that were linked. This will be null for unlinkAccount.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  linkedPixieProject: PixiePixieProject

  "Whether the linking succeeded or not. Check the \"errors\" list for details\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  success: Boolean!
}

"A wrapper object that contains paginated recipe events along with counts and a pagination cursor\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InstallationRecipeEventResult {
  "Cursor for fetching next page of results.  Results are ordered by descending timestamp (most recent first)\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cursor: String

  "List of RecipeEvent objects\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recipeEvents: [InstallationRecipeEvent!]

  "Total number of RecipeEvent results across all pages for a given query\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  totalCount: Int
}

"Database for PostgreSQL\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzurePostgresqlIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"HipChat notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsHipChatNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet! @deprecated(reason: "This channel type is deprecated")

  "HipChat channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsHipChatNotificationChannelConfig! @deprecated(reason: "This channel type is deprecated")

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID! @deprecated(reason: "This channel type is deprecated")

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String! @deprecated(reason: "This channel type is deprecated")

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType! @deprecated(reason: "This channel type is deprecated")
}

"Summary statistics for the Synthetic Monitor Secure Credential.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SecureCredentialSummaryData {
  "The number of monitors that contain this secure credential and failed their last check.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  failingMonitorCount: Int @deprecated(reason: "This field is deprecated and will not return valid data.")

  "The number of monitors that contain this secure credential.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitorCount: Int @deprecated(reason: "This field is deprecated and will not return valid data.")
}

"Summary statistics for the Synthetic Monitor.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SyntheticMonitorSummaryData {
  "The number of locations that are currently failing.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  locationsFailing: Int

  "The number of locations that are currently running.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  locationsRunning: Int

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  status: SyntheticMonitorStatus

  "The percentage of successful synthetic monitor checks in the last 24 hours.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  successRate: Float
}

"The monitor values that can be updated on a Script Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsUpdateScriptBrowserMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsScriptBrowserMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsScriptedMonitorLocationsInput

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntimeInput

  "The script that the monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  script: String

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"Sort users\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityUserSortInput {
  "Direction to sort in\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  direction: MultiTenantIdentitySortDirection

  "User attribute to sort on\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  key: MultiTenantIdentityUserSortKey
}

"The error type for creating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNotificationChannelCreateErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"Attribute object that contains data about the attribute\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n\n"
type DataDictionaryAttribute {
  "Description of what this attribute represents, how it's measured, etc\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  definition(
    """Specify the text format for the definition"""
    format: DataDictionaryTextFormat = PLAIN
  ): String!

  "URL of this attribute on the New Relic docs site\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  docsUrl: String

  "List of events using this attribute\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  events: [String!]!

  "The official name of this attribute\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  name: String!

  "Unit this attribute is measuring (if applicable)\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  units: DataDictionaryUnit
}

"A rollup rule that was involved in the calculation of the workload status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadRollupRuleStatusResult implements WorkloadStatusResult {
  "Represents the details of a rollup rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rollupRuleDetails: WorkloadRollupRuleDetails

  "Indicates where the status value derives from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  source: WorkloadStatusSource!

  "The status of a rollup rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  value: WorkloadStatusValue!
}

"A user key error. Each error maps to a single key input.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessUserKeyError implements ApiAccessKeyError {
  "The account ID of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  accountId: Int

  "The error type of the error.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  errorType: ApiAccessUserKeyErrorType

  "The `id` of the key being updated.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  id: String

  "A message about why the key creation failed.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  message: String

  "The type of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  type: ApiAccessKeyType

  "The user ID of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  userId: Int
}

"Elastic Beanstalk Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudElasticbeanstalkIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The different types of errors the API can return.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n\n"
enum TaggingMutationErrorType {
  """
  Too many concurrent tasks for the same GUID are being sent and we cannot process. Please serialize your requests for the given GUID.
  """
  CONCURRENT_TASK_EXCEPTION

  """
  Domain Type invalid. The decoded domain type from the provided GUID is not valid. Please provide a correct GUID.
  """
  INVALID_DOMAIN_TYPE

  """
  We could not decode the provided GUID. Entity guid needs to be base64 encoded.
  """
  INVALID_ENTITY_GUID

  """
  The tag key is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
  """
  INVALID_KEY

  """
  The tag value is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
  """
  INVALID_VALUE

  """The given GUID or tag you're looking for does not exist."""
  NOT_FOUND

  """
  You've attempted to do something your Domain/EntityType is not permitted to do. Its also possible that an api key is required.
  """
  NOT_PERMITTED

  """One of the query filters exceeds the character limit."""
  TOO_MANY_CHARS_QUERY_FILTER

  """
  The given entity has reached its tag key count limit. You will need to delete existing tags for the given GUID before continuing.
  """
  TOO_MANY_TAG_KEYS

  """
  The given entity has reached its tag value count limit. You will need to delete existing values for the given GUID before continuing.
  """
  TOO_MANY_TAG_VALUES

  """The changes will be reflected in the entity with some delay"""
  UPDATE_WILL_BE_DELAYED
}

"A list of dynamic variables used by the Channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsDynamicVariable {
  "exampleValue\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  exampleValue: AiNotificationsExampleValue

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String!
}

"Possible types for the install plan target\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogInstallPlanTargetType {
  """Agent install"""
  AGENT

  """Integration install"""
  INTEGRATION

  """On host integration install"""
  ON_HOST_INTEGRATION

  """
  Unknown install - special case when the target where the install takes place is unknown (such as guided install)
  """
  UNKNOWN
}

"A structured representation of a crash occurring in a mobile application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceMobileCrash {
  "A structured representation of a stack trace for a crash that occurs on a mobile application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  stackTrace: StackTraceMobileCrashStackTrace
}

"Type of decision\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsDecisionType {
  """Decision type is explicit"""
  EXPLICIT

  """Decision type is global"""
  GLOBAL

  """Decision type is implicit"""
  IMPLICIT
}

"Type of test error\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsTestErrorType {
  """We couldn't find a channel with the given id"""
  CHANNEL_NOT_FOUND

  """Failed running test workflow"""
  FAILED_RUNNING_TEST

  """
  This account is missing the required entitlement(s) to perform this action
  """
  MISSING_ENTITLEMENT

  """This account is not allowed to preform this action"""
  UNAUTHORIZED_ACCOUNT

  """The given channel id represents an unsupported channel type"""
  UNSUPPORTED_CHANNEL_TYPE

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR

  """Failed to send a notification to the channel"""
  WARNING_FAILED_SENDING_NOTIFICATION

  """There are no issues that match this filter"""
  WARNING_NO_FILTERED_ISSUE_FOUND

  """There are no issues that match these dynamic variables"""
  WARNING_NO_MATCHING_DYNAMIC_VARIABLES_FOUND
}

"A `TraceObserver` handles a group of tracing services for an account family.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeTraceObserver {
  "Optional list of compliance types (e.g., FedRAMP) applied to this trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  complianceTypes: [EdgeComplianceTypeCode!]

  "The group of data sources if any have been assigned to this trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  dataSourceGroup: EdgeDataSourceGroup

  "List of endpoints associated with this trace observer. Currently, only one endpoint per trace observer is supported.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  endpoints: [EdgeEndpoint!]!

  "Globally unique identifier of this trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  id: Int!

  "Which account monitoring metrics are being written to for this trace observer (if specified)\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  monitoringAccountId: Int

  "Human-readable name of this trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  name: String!

  "Provider-specific region of this endpoint (for example, `AWS_US_EAST_1`). Currently, only AWS regions are supported.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  providerRegion: EdgeProviderRegion!

  "Status of the trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  status: EdgeTraceObserverStatus!

  "Trace filters applied to the trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  traceFilters: EdgeTraceFilters!
}

"The result of which submitted events to metrics rules were successfully and unsuccessfully deleted.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsDeleteRuleResult {
  "Information about the rules that could not be deleted.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  failures: [EventsToMetricsDeleteRuleFailure]

  "Rules that were successfully deleted.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  successes: [EventsToMetricsRule]
}

"Update Filter input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsUpdatedFilterInput {
  "filterInput\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  filterInput: AiWorkflowsFilterInput!

  "id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID
}

"Metadata associated with the Nerdpack that will be available in the New Relic One Catalog\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
input Nr1CatalogSubmitMetadataInput {
  "Additional information relevant for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  additionalInfo: String

  "A list of terms for category grouping when filtering and searching the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categoryTerms: [String!]

  "A long form description used in the catalog to detail the functionality of the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  details: String

  "Additional documentation relevant for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  documentation: String

  "A list of keywords for filtering and searching the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  keywords: [String!]

  "A URL that links to the repository where the source code for this Nerdpack can be found\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  repository: String

  "Support channels where users can contact you to get support for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  support: Nr1CatalogSupportInput

  "A tagline for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  tagline: String

  "The version of the Nerdpack that will be associated with this metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  version: SemVer!

  "A description of changes describing what changed for this version of the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  whatsNew: String
}

"Response for configuration override\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesConfigurationOverrideResponse {
  "Updated configuration\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  config: AiIssuesEnvironmentConfiguration

  "Error, if any\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  error: String
}

"Response for user action\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesIssueUserActionResponse {
  "Error, if any\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  error: String

  "User operation performed with an issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  result: AiIssuesIssueUserActionResult
}

"Event data definitions, where they come from, and information about the attributes they contain\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n\n"
type DataDictionaryDocsStitchedFields {
  "List of events\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  events(
    """The official name of this event"""
    names: [String]
  ): [DataDictionaryEvent!]
}

"WAF Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsWafIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Information about a facet count on a search result type\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogSearchResultTypeFacet {
  "The count of results for this search result type\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  count: Int!

  "The type of search result\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  type: Nr1CatalogSearchResultType!
}

"The function to use in the SELECT clause.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum ServiceLevelEventsQuerySelectFunction {
  """Use on events and unaggregated data."""
  COUNT

  """Use on distribution metric types."""
  GET_CDF_COUNT

  """Use in valid events combined with GET_CDF_COUNT."""
  GET_FIELD

  """Use on aggregated counts."""
  SUM
}

"Configuration options for a monitor downtime that runs monthly\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
input SyntheticsMonitorDowntimeMonthlyConfig {
  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endRepeat: SyntheticsDateWindowEndConfig

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "Configuration options for which days of the month a monitor downtime will occur\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  frequency: SyntheticsMonitorDowntimeMonthlyFrequency

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"QLDB\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsQldbIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"account-scope schemas\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentAccountStitchedFields {
  "Contains environment attributes regarding the reported setting of the reporting agent at account level.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentSettingsAttributes(
    """
    Cursor for fetching more results. Populate using result's nextCursor field.
    """
    cursor: String

    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): AgentEnvironmentAccountEnvironmentAttributesResults

  "Contains general environment attributes from the same environment where the application instance is running.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  environmentAttributes(
    """
    Cursor for fetching more results. Populate using result's nextCursor field.
    """
    cursor: String

    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): AgentEnvironmentAccountEnvironmentAttributesResults

  "Contains environment attributes regarding modules loaded by the application instance. Used only by the Java agent.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  modules(
    """
    Cursor for fetching more results. Populate using result's nextCursor field.
    """
    cursor: String

    """Filter to apply to results on module name field."""
    filter: AgentEnvironmentFilter
  ): AgentEnvironmentAccountApplicationLoadedModulesResults
}

"\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsAccountStitchedFields {
  "Look up for all data partition rules for a given account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  dataPartitionRules: [LogConfigurationsDataPartitionRule!]

  "Look up for all obfuscation expressions for a given account\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  obfuscationExpressions: [LogConfigurationsObfuscationExpression!]

  "Look up for all obfuscation rules for a given account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  obfuscationRules: [LogConfigurationsObfuscationRule!]

  "Look up for all parsing rules for a given account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  parsingRules: [LogConfigurationsParsingRule!]

  "Look up pipeline configuration for a given account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  pipelineConfiguration: LogConfigurationsPipelineConfiguration

  "Test a Grok pattern against a list of log lines.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  testGrok(
    """The Grok pattern to test."""
    grok: String!

    """The log lines to test the Grok pattern against."""
    logLines: [String!]!
  ): [LogConfigurationsGrokTestResult!]
}

"Machine Learning\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureMachinelearningIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Input rule type for bulk rule creation\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
input DataManagementRuleInput {
  "The namespace the event retention rule applies to\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  namespace: String

  "Length of time for event data retention (in days)\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  retentionInDays: Int
}

"An account share's limiting role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAccountShareLimitingRoleWrapper {
  "id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"The different error types in golden metrics\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenGoldenMetricsError {
  "The error description\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  message: String

  "An error type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  type: EntityGoldenGoldenMetricsErrorType!
}

"The time window when the MutingRule should actively mute violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsMutingRuleSchedule {
  "The datetime stamp when the MutingRule schedule should stop repeating.\nThis is in ISO 8601 format with offset.\n\nExample: `'2020-07-10T15:00:00-07:00'`\n\nNote: Either `endRepeat` or `repeatCount` should be used to end a MutingRule schedule.\nBoth fields should not be provided together.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  endRepeat: DateTime

  "The datetime stamp representing when the MutingRule should end.\nThis is in ISO 8601 format with offset.\n\nExample: `'2020-07-10T15:00:00-07:00'`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  endTime: DateTime

  "The datetime stamp representing the next scheduled end of a recurring MutingRule.\nThis is in ISO 8601 format with offset.\n\nExample: `'2020-07-08T14:30:00-07:00'`\n\nNote: If a MutingRule is not set to recur, this will match the `endTime` field.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nextEndTime: DateTime

  "The datetime stamp representing the next scheduled start of a recurring MutingRule.\nThis is in ISO 8601 format with offset.\n\nExample: `'2020-07-08T14:30:00-07:00'`\n\nNote: If a MutingRule is not set to recur, this will match the `startTime` field.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nextStartTime: DateTime

  "The frequency the MutingRule schedule repeats.\nIf the MutingRule repeats `WEEKLY`, be sure to set `weeklyRepeatDays`.\nIf the MutingRule does not repeat, use `null`.\n\nExample: `DAILY`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  repeat: AlertsMutingRuleScheduleRepeat

  "The number of times the MutingRule schedule should repeat.\n\nNote: Either `repeatCount` or `endRepeat` should be used to end a MutingRule schedule.\nBoth fields should not be provided together.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  repeatCount: Int

  "The datetime stamp representing when the MutingRule should start.\nThis is in ISO 8601 format with offset.\n\nExample: `'2020-07-08T14:30:00-07:00'`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  startTime: DateTime

  "The time zone that applies to the MutingRule schedule.\n\nExample: `'America/Los_Angeles'`\n\nSee https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  timeZone: String!

  "The day(s) of the week that a MutingRule should repeat when the repeat field is set to `WEEKLY`.\n\nExample: `[MONDAY, WEDNESDAY]`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  weeklyRepeatDays: [AlertsDayOfWeek!]
}

"A Dashboard entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type DashboardEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "The date and time the dashboard was created\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: DateTime

  "The parent entity `guid` of the dashboard.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  dashboardParentGuid: EntityGuid

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "Dashboard description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The owner information of the dashboard.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  owner: DashboardEntityOwnerInfo

  "A nested block of all pages belonging to the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  pages: [DashboardPage]

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The permissions of the dashboard.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permissions: DashboardEntityPermissions

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "The date and time the dashboard was updated\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: DateTime

  "Dashboard-local variable definitions.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  variables: [DashboardVariable]
}

"A data structure that contains the detailed response of an entity search.\n\nThe direct search result is available through `results`. Information about the\nquery itself is available through `query`, `types`, and `count`.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntitySearch {
  "The number of entities returned by the entity search.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int

  "A count of the Entity Search results faceted by a chosen set of criteria.\n\nNote: Unlike a NRQL facet, the facet results do not include entities where the facet value does not exist. Additionally, entities can be tagged with multiple tag values for one tag key. For these reasons, depending on the facet values chosen, the `counts` field will not always equal the `entitySearch.count` field.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  counts(
    """
    A list of criteria to facet entities by.
    
    This can be combined with the `facetTags` argument to facet by a combination of criteria and tags.
    """
    facet: [EntitySearchCountsFacet!]

    """
    A list of tags to facet entities by. For example: `"environment"`, `"region"`.
    
    This can be combined with the `facet` argument to facet by a combination of criteria and tags.
    
    Note: If a tag does not exist on an entity, the entity will not be counted in the facet results. If an entity tag has multiple values, it will be counted in all facets that apply.
    """
    facetTags: [String!]
  ): [EntitySearchCounts]

  "The entity search query string that was generated by the `query` argument or the `queryBuilder` argument.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  query: String

  "The paginated results of the entity search.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  results(
    """The cursor to fetch paginated entity search results."""
    cursor: String
  ): EntitySearchResult

  "The entity types returned by the entity search.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  types: [EntitySearchTypes]
}

"IAM Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudIamIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Information for generating the condition NRQL query.\nThe output of data from this NRQL query will be compared to the condition terms to detect violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionQueryInput {
  "Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.\n\nBy default, we evaluate the NRQL query in one-minute time windows. Start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.\n\nThis value is the number of time windows we look back at the aggregated.\n\nExample: With an `evaluationOffset` of 3, the NRQL time window applied to your query will be:\n\n`SINCE 3 minutes ago UNTIL 2 minutes ago`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  evaluationOffset: Int

  "NRQL syntax that defines the query.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  query: Nrql!
}

"Redis Cache Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureRediscacheIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input for creating multiple trace filter rules\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeCreateTraceFilterRulesInput {
  "One or more `CreateSpanAttributeRuleInput` that describe the span attribute trace filter rule(s) to be created.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  spanAttributeRules: [EdgeCreateSpanAttributeRuleInput!]
}

"A collection of NRQL conditions with pagination information.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlConditionsSearchResultSet {
  "Cursor pointing to the end of the current page of NrqlCondition records. Null if final page.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "A set of `NrqlConditions` for the supplied cursor and criteria.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrqlConditions: [AlertsNrqlCondition!]!

  "Total number of `NrqlConditions` for the given search criteria.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"A database instance seen by an APM Application\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmDatabaseInstanceEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The host the database instance is running on.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  host: String

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  portOrPath: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "The type of database. ex: `Postgres` | `Redis`\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  vendor: String
}

"The allow list that you would like to modify.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSegmentsBrowserSegmentAllowListInput {
  "A case sensitive list of url segments. The list cannot exceed 8192 characters in total. Each segment must be less than 100 characters.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n"
  segments: [String]!
}

"The runtime that a monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsRuntime {
  "The runtime type that the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtimeType: String

  "The specific version of the runtime type selected\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtimeTypeVersion: SemVer!

  "The programing language that should execute the script\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  scriptLanguage: String
}

"The resulting NRQL queries that help consume the metrics of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelIndicatorResultQueries {
  "The NRQL query that measures the good events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  goodEvents: ServiceLevelResultQuery!

  "The NRQL query that measures the value of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indicator: ServiceLevelResultQuery!

  "The NRQL query that measures the valid events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  validEvents: ServiceLevelResultQuery!
}

"Logic Apps Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureLogicappsIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The query that represents the events to fetch.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelEventsQueryUpdateInput {
  "The NRDB event to fetch the data from.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  from: Nrql!

  "The NRQL SELECT clause to aggregate events. Default is COUNT(*).\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  select: ServiceLevelEventsQuerySelectUpdateInput

  "The NRQL condition to filter the events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  where: Nrql
}

"Key Vault Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureKeyvaultIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Error object for Synthetics mutations\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n\n"
type SyntheticsError {
  "Description explaining the cause of the error\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  description: String
}

"Elasticsearch Service Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudElasticsearchIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchNodes: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Result of undelete operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUndeleteResult {
  "Expected errors while processing request. No errors means successful request.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardUndeleteError]
}

"Class of vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiTopologyVertexClass {
  """Vertex class is application"""
  APPLICATION

  """Vertex class is cloudservice"""
  CLOUDSERVICE

  """Vertex class is cluster"""
  CLUSTER

  """Vertex class is datastore"""
  DATASTORE

  """Vertex class is host"""
  HOST

  """Vertex class is team"""
  TEAM
}

"The return object for a create-account mutation.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n\n"
type AccountManagementCreateResponse {
  "Information about the newly created account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  managedAccount: AccountManagementManagedAccount
}

"Map of key value pairs for a span\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
scalar DistributedTracingSpanAttributes

"MediaPackage VOD\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsMediapackagevodIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Data required to create a span attribute trace filter rule.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeCreateSpanAttributeRuleInput {
  "The action that this trace filter rule takes if it matches the provided attribute name and value\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  action: EdgeTraceFilterAction!

  "Name of the attribute to match on\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  key: String!

  "Type of match to apply to the attribute name (EQUALS, LIKE). Key match type is required.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  keyOperator: EdgeSpanAttributeKeyOperator!

  "Value of the attribute to match on. Value is required unless the `SpanAttributeValueOperator` is set to `IS_NOT_NULL`\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  value: String

  "Type of match to apply to the attribute value (EQUALS, LIKE, IS_NOT_NULL).\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  valueOperator: EdgeSpanAttributeValueOperator!
}

"Array of responses, one for each trace observer creation request.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeCreateTraceObserverResponses {
  "Array of trace observer creation responses, one for each `CreateTraceObserverInput`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  responses: [EdgeCreateTraceObserverResponse!]!
}

"Secret key and value.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
type NerdStorageVaultSecret {
  "The unique identifier of the secret.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  key: String!

  "The value of the secret.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  value: SecureValue!
}

"Provides all the available filters on the role id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationRoleIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: Int!
}

"An account share's source or target organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAccountShareOrganizationWrapper {
  "id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID

  "name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String
}

"An async organization creation result customer\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationCreateAsyncCustomerResult {
  "The customer ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customerId: String
}

"The result of the deployment search query.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n\n"
type ChangeTrackingDeploymentSearchResult {
  "The list of deployment events in the given time window.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  results: [ChangeTrackingDeployment]
}

"Environment already exists detailed result\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentEnvironmentAlreadyExists {
  "The account id of the already exists environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The already exists environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment!

  "The parent account id of the already exists environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  masterAccountId: Int!
}

"container for authentication domains enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementAuthenticationDomains {
  "container for authentication_domains enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomains: [UserManagementAuthenticationDomain!]!

  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"This field provides access to Tracing data.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeTracing {
  "Lists the existing trace observers for this account family.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  traceObservers(
    """Optional IDs of trace observers to return."""
    ids: [Int!]
  ): [EdgeTraceObserver!]
}

"List of all potential error types that an entity create operation might return.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum ReferenceEntityCreateRepositoryErrorType {
  """Forbidden request"""
  FORBIDDEN

  """Invalid input"""
  INVALID_INPUT
}

"A deployment.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n\n"
input ChangeTrackingDeploymentInput {
  "A URL for the changelog or, if not linkable, a list of changes.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  changelog: String

  "The commit identifier, for example, a Git commit SHA.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  commit: String

  "A URL to the system that generated the deployment.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deepLink: String

  "The type of deployment, for example, ‘Blue green’ or ‘Rolling’.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentType: ChangeTrackingDeploymentType

  "A description of the deployment.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  description: String

  "The NR entity that was deployed.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  entityGuid: EntityGuid!

  "An identifier used to correlate two or more events.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  groupId: String

  "The start time of the deployment as the number of milliseconds since the Unix epoch. Should be within the boundary of the past or future 24 hours. Defaults to now.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  timestamp: EpochMilliseconds

  "The username of the deployer or bot.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  user: String

  "The version of the deployed software, for example, something like v1.1\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  version: String!
}

"Represents a possible default value item.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardVariableDefaultItemInput {
  "The value of this default item.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  value: DashboardVariableDefaultValueInput!
}

"A new parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
input LogConfigurationsParsingRuleConfiguration {
  "The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rule_attribute_field`)\n\n"
  attribute: String

  "A description of what this parsing rule represents.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  description: String!

  "Whether or not this rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  enabled: Boolean!

  "The Grok of what to parse.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  grok: String!

  "The Lucene to match events to the parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  lucene: String!

  "The NRQL to match events to the parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  nrql: Nrql!
}

"Specifies a default value for variables.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardVariableDefaultValue {
  "Default string value.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  string: String
}

"AWS Identity and Access Management (IAM)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudIamIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Response error interface\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
interface ErrorsInboxResponseError {
  "The description of the error\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  description: String!
}

"An object that represents a golden tag.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenTag {
  "The golden tag key.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  key: String!
}

"Information pertaining to a specific step in the installation plan\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogInstallPlanStep {
  "A short form description for the install plan step\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the install plan step\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String!

  "Provides context about how the fallback install plan step should proceed\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  fallback: Nr1CatalogInstallPlanDirective

  "Used as a heading for the install plan step\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  heading: String!

  "The unique identifier for the install plan step\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Provides context about how the primary install plan step should proceed\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  primary: Nr1CatalogInstallPlanDirective!

  "Provides context about where the install will occur\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  target: Nr1CatalogInstallPlanTarget!
}

"General settings related to APM applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsBrowserConfig {
  "The desired target for the APDEX measurement of this browser application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apdexTarget: Float
}

"Email verification validates that a user's email address exists and can receive email. One of: \"Not Verifiable\", \"Verified\", and \"Pending\".\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantIdentityEmailVerificationState {
  """The user's email does not require verification."""
  NOT_VERIFIABLE

  """The user's email requires verification and has not been verified."""
  PENDING

  """The user's email requires verification and has been verified."""
  VERIFIED
}

"Issue state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
enum AiIssuesIssueState {
  """Issue is activated"""
  ACTIVATED

  """Issue is closed"""
  CLOSED

  """Issue is created"""
  CREATED

  """Issue is deactivated"""
  DEACTIVATED
}

"The result after updating a parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
type LogConfigurationsUpdateParsingRuleResponse {
  "List of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  errors: [LogConfigurationsParsingRuleMutationError]

  "The updated parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  rule: LogConfigurationsParsingRule
}

"Asset produced during the execution of the check\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n\n"
type SyntheticsSyntheticMonitorAsset {
  "MIME type of asset\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  type: String

  "Temporary url at which the asset is available for download\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  url: String
}

"Memcache\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpMemcacheIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Autogenerated return type of AddUsersToGroups.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementAddUsersToGroupsPayload {
  "The group(s) updated.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups: [UserManagementGroup!]
}

"Wrapper object for namespace retention values\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementRetentionValues {
  "List of rules applied to a namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  appliedRules: [DataManagementAppliedRules]

  "The name of a namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  namespace: String

  "The retention value from the subscription (in days)\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  subscriptionRetentionInDays: Int
}

"a role grants access on an account or organization to groups of users\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementRole {
  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  displayName: String

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  name: String!

  "the scope of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  scope: String!

  "the type of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  type: ID!
}

"The input object used to represent a remaining entities rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadRemainingEntitiesRuleInput {
  "The input object used to represent a rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rollup: WorkloadRemainingEntitiesRuleRollupInput!
}

"Result options for account consent marking\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum IncidentIntelligenceEnvironmentConsentAccountsResult {
  """All of the accounts have been already marked with consent"""
  ALREADY_CONSENTED

  """Accounts were consented"""
  CONSENTED

  """The user is not authorized to consent due to a missing capability"""
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"A key error. Each error maps to a single key input.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
interface ApiAccessKeyError {
  "A message about why the key creation failed.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  message: String

  "The type of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  type: ApiAccessKeyType
}

"Managed Kafka Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsMskIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Channel update object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsChannelUpdate {
  "active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String

  "properties\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  properties: [AiNotificationsPropertyInput!]
}

"Information about an alert condition template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAlertConditionTemplate {
  "The unique identifier for the alert condition template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the alert condition template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogAlertConditionTemplateMetadata!
}

"A filter for an AccountID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountIdFilterInput {
  "An Account ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: Int!
}

"A list of rule details to be returned.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsListRuleResult {
  "Event-to-metric rules to be returned.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  rules: [EventsToMetricsRule]
}

"A Dashboard entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type DashboardEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The date and time the dashboard was created\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: DateTime

  "The parent entity `guid` of the dashboard.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  dashboardParentGuid: EntityGuid

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The owner information of the dashboard.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  owner: DashboardEntityOwnerInfo

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The permissions of the dashboard.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permissions: DashboardEntityPermissions

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "The date and time the dashboard was updated\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: DateTime
}

"The domain to search\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntitySearchQueryBuilderDomain {
  """Any APM entity"""
  APM

  """Any Browser entity"""
  BROWSER

  """Any External entity"""
  EXT

  """Any Infrastructure entity"""
  INFRA

  """Any Mobile entity"""
  MOBILE

  """Any Synthetics entity"""
  SYNTH
}

"Database for PostgreSQL Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzurePostgresqlIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Device info used for push notifications.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n\n"
type MobilePushNotificationDevice {
  "The version of the app.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  appVersion: SemVer!

  "The uuid of the device.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  deviceId: String!

  "The name of the device.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  deviceName: String!

  "The OS this device is running (android/ios).\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  operatingSystem: String!

  "The id of the user this device belongs to.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  userId: Int!
}

"Information required to disable a cloud service integration from a linked account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudDisableAccountIntegrationInput {
  "The linked account identifier\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!
}

"The value and metadata of a single entity tag.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityTagValueWithMetadata {
  "Whether or not the tag can be mutated by the user.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  mutable: Boolean

  "The tag value.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String
}

"Details of an application instance such as host and language.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentApplicationInstanceDetails {
  "Host of the application instance.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  host: String!

  "ID of the application instance.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "Language of the application instance.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  language: String!

  "Name of the application instance.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!
}

"Information about a launcher in a Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogLauncher implements Nr1CatalogNerdpackItem {
  "The unique identifier for the launcher.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the launcher\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogLauncherMetadata
}

"A suggested NRQL facet. Facet suggestions may be either a single attribute, or\na list of attributes in the case of multi-attribute facet suggestions.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NrqlFacetSuggestion {
  "A list of attribute names comprising the suggested facet.\n\nRaw attribute names will be returned here. Attribute names may need to be\nbacktick-quoted before inclusion in a NRQL query.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attributes: [String]

  "A modified version of the input NRQL, with a `FACET ...` clause appended.\nIf the original NRQL had a `FACET` clause already, it will be replaced.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: Nrql
}

"Array of responses, one for each trace observer deletion request.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDeleteTraceObserverResponses {
  "Array of trace observer deletion responses, one for each `DeleteTraceObserverInput`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  responses: [EdgeDeleteTraceObserverResponse!]!
}

"Description of errors that may occur while attempting to create a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeCreateTraceObserverResponseError {
  "Error message, with further detail to help resolve the issue.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  message: String!

  "Error that may occur while attempting to create a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  type: EdgeCreateTraceObserverResponseErrorType!
}

"A contact channel where users can get support via the repository issues page\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogIssuesContactChannel {
  "The URL linking to the repository issues page\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessCreateUserKeyInput {
  "The account ID indicating which account you want to make the key for. This cannot be updated once created.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The name of the key. This can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  name: String

  "Any notes about this ingest key. This can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  notes: String

  "The user ID indicating which user you want to make the key for. This cannot be updated once created.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  userId: Int!
}

"Containers\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureContainersIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Input type for RelativeEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeEqualInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"The day of the week used to configure a WEEKLY scheduled MutingRule\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsDayOfWeek {
  """Friday"""
  FRIDAY

  """Monday"""
  MONDAY

  """Saturday"""
  SATURDAY

  """Sunday"""
  SUNDAY

  """Thursday"""
  THURSDAY

  """Tuesday"""
  TUESDAY

  """Wednesday"""
  WEDNESDAY
}

"Glue\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsGlueIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Detailed information about the status of a workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type WorkloadStatus {
  "A description that provides additional details about the status of the workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "Indicates where the status value derives from.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  statusSource: WorkloadStatusSource

  "The status of the workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  statusValue: WorkloadStatusValue

  "A short description of the status of the workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  summary: String
}

"Input type for FixedFuzzyWuzzyRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedFuzzyWuzzyRatioInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Input for creating an obfuscation expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
input LogConfigurationsCreateObfuscationExpressionInput {
  "Description of expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  description: String

  "Name of expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  name: String!

  "Regex of expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  regex: String!
}

"The input object that represents the SLI that will be updated.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelIndicatorUpdateInput {
  "The description of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The events that define the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  events: ServiceLevelEventsUpdateInput

  "The name of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "A list of objective definitions.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  objectives: [ServiceLevelObjectiveUpdateInput!]
}

"The Amazon Web Services cloud provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsProvider implements CloudProvider {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud provider icon name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  icon: String!

  "The cloud provider identifier in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int!

  "The cloud provider name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "The New Relic AWS Account ID that will use the Role.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  roleAccountId: String!

  "The external ID required to assume the Role by the New Relic Account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  roleExternalId: String!

  "Get details of one cloud provider service.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  "Get details of all the cloud provider services available for integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  services: [CloudService!]!

  "The cloud provider short name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  slug: String!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A query that represents a criteria for searching news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n\n"
input WhatsNewContentSearchQuery {
  "Criteria to narrow the scope of the search to a specific type of news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  contentType: WhatsNewContentType

  "Criteria to narrow the scope of the search to only those news that are unread by the current user.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  unreadOnly: Boolean
}

"Dashboard owner\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type DashboardEntityOwnerInfo {
  "The email of the dashboard owner\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  email: String

  "The user ID of the dashboard owner\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  userId: Int
}

"A structured representation of an exception for a Browser application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceBrowserException {
  "The top level message associated to the stack trace.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String

  "The stack trace associated with the exception.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  stackTrace: StackTraceBrowserStackTrace
}

"Input object for setting the type of tracing performed.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsTracerTypeInput {
  "The type of tracing being done.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  value: AgentApplicationSettingsTracer
}

"Destination statuses\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsDestinationStatus {
  """Auth Error destination status"""
  AUTH_ERROR

  """Authentication Error destination status"""
  AUTHENTICATION_ERROR

  """Authorization Error destination status"""
  AUTHORIZATION_ERROR

  """Authorization Warning destination status"""
  AUTHORIZATION_WARNING

  """Configuration Error destination status"""
  CONFIGURATION_ERROR

  """Default destination status"""
  DEFAULT

  """Draft channel status"""
  DRAFT @deprecated(reason: "unused status")

  """Error channel status"""
  ERROR @deprecated(reason: "unused status")

  """External Server Error destination status"""
  EXTERNAL_SERVER_ERROR

  """Temporary Warning destination status"""
  TEMPORARY_WARNING

  """Tested channel status"""
  TESTED @deprecated(reason: "unused status")

  """Throttled channel status"""
  THROTTLED @deprecated(reason: "unused status")

  """Throttling Warning destination status"""
  THROTTLING_WARNING

  """Timeout Error destination status"""
  TIMEOUT_ERROR

  """Uninstalled destination status"""
  UNINSTALLED

  """Unknown Error destination status"""
  UNKNOWN_ERROR
}

"A Mobile Application entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type MobileApplicationEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "The ID of the Mobile App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationId: Int

  "A Crash that occurred in your Mobile Application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  crash(
    """A unique identifer for an occurrence of a Mobile Crash."""
    occurrenceId: String!

    """
    The time window (60 minutes maximum) in which to search for the mobile crash. Defaults to standard NRQL query window.
    """
    timeWindow: TimeWindowInput
  ): StackTraceMobileCrash

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "A Handled Exception that occurred in your Mobile Application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  exception(
    """
    The fingerprint of a Mobile Handled Exception. The first handled exception matching the fingerprint will be returned.
    """
    fingerprint: String

    """
    A unique identifier for an occurrence of a Mobile Handled Exception. This is the 'handledExceptionUuid' attribute on the MobileHandledException events.
    """
    occurrenceId: String

    """
    The time window (60 minutes maximum) in which to search for the handled exception. Defaults to standard NRQL query window.
    """
    timeWindow: TimeWindowInput
  ): StackTraceMobileException

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "Retrieves the entity metric grouping issues.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricGroupingIssues(
    """End time."""
    endTime: EpochMilliseconds

    """Metric normalization rule ids"""
    metricNormalizationRuleIds: [Int]

    """Start time."""
    startTime: EpochMilliseconds
  ): [MetricNormalizationRuleMetricGroupingIssue!]

  "Retrieves a rule.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  "Retrieves the rules for the application.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]

  "Access general properties for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  mobileProperties: AgentApplicationSettingsMobileProperties

  "Settings that are common across mobile applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  mobileSettings: AgentApplicationSettingsMobileBase

  "Summary statistics about the Mobile App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  mobileSummary: MobileAppSummaryData

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Information about the mutation result when submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogSubmitMetadataResult {
  "A list of errors that may have occurred as a result of submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  errors: [Nr1CatalogSubmitMetadataError!]

  "The Nerdpack with updated information as a result of running the mutation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdpack: Nr1CatalogNerdpack

  "The mutation result when submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  result: Nr1CatalogMutationResult!
}

"Provides all the available filters on the organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationContractOrganizationIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"Namespace level retention\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementNamespaceLevelRetention {
  "Length of time data will be retained (in days)\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  retentionInDays: Int
}

"\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdStorageActorScope {
  "Nerdpack documents are stored inside a collection.\nA collection can be thought of as a key-value storage where each document is one of these key-value pairs.\n\nTo use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  collection(
    """The collection from which documents will be retrieved."""
    collection: String!
  ): [NerdStorageCollectionMember]

  "A Nerdpack document is formed by an identifier (called documentId) and a set of data associated with it.\n\nTo use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  document(
    """The collection that the document belongs to."""
    collection: String!

    """The documentId to be retrieved."""
    documentId: String!
  ): NerdStorageDocument
}

"Input object used to represent the rule to be created\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
input MetricNormalizationCreateRuleInput {
  "Customer rule action.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  action: MetricNormalizationCustomerRuleAction!

  "Application GUID\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  applicationGuid: EntityGuid

  "Is rule enabled?\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  enabled: Boolean!

  "Rule evaluation order\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  evalOrder: Int

  "Metric Match Expression.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  matchExpression: String!

  "Notes.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  notes: String

  "Metric Replacement Expression.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  replacement: String

  "Whether it terminates the evaluation chain or not\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  terminateChain: Boolean
}

"The error for deleting a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelDeleteError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String!

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  errorType: AlertsNotificationChannelDeleteErrorType!

  "Notification channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannelId: ID!
}

"A container for all trace filter rule types\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeTraceFilters {
  "Random trace filter configuration applied to the trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  randomTraceFilter: EdgeRandomTraceFilter!

  "Span attribute trace filter configuration applied to the trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  spanAttributesTraceFilter: EdgeSpanAttributesTraceFilter!
}

"Parameters that affect the data and the rendering of the dashboards returned by the snapshot url mutation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardSnapshotUrlInput {
  "Period of time from which the data to be displayed on the dashboard will be obtained.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  timeWindow: DashboardSnapshotUrlTimeWindowInput
}

"Information about the anomaly upon which this analysis was based.\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SuggestedNrqlQueryAnomaly {
  "The approximate time window of the anomalous region\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timeWindow: TimeWindow!
}

"An account's current retention values for a namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementRenderedRetention {
  "The account id for the event retention\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  accountId: Int

  "The namespace for the event retention\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  namespace: String

  "Base retention value for an event namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  namespaceLevelRetention: DataManagementNamespaceLevelRetention

  "The UNIX timestamp when the retention was last updated\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds
}

"Credential input object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsCredentialsInput {
  "basic\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  basic: AiNotificationsBasicAuthInput

  "oauth2\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  oauth2: AiNotificationsOAuth2AuthInput

  "token\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  token: AiNotificationsTokenAuthInput

  "type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsAuthType!
}

"Class of vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiTopologyCollectorVertexClass {
  """Vertex class is application"""
  APPLICATION

  """Vertex class is cloudservice"""
  CLOUDSERVICE

  """Vertex class is cluster"""
  CLUSTER

  """Vertex class is datastore"""
  DATASTORE

  """Vertex class is host"""
  HOST

  """Vertex class is team"""
  TEAM
}

"Input type for Not expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsNotInput {
  "Child expression.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  child: AiDecisionsRuleExpressionInput!
}

"Possible entity search count facets.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntitySearchCountsFacet {
  """Facet by account id."""
  ACCOUNT_ID

  """Facet by alert severity."""
  ALERT_SEVERITY

  """Facet by entity domain."""
  DOMAIN

  """Facet by entity domain and entity type."""
  DOMAIN_TYPE

  """Facet by entity name"""
  NAME

  """Facet by reporting state."""
  REPORTING

  """Facet by entity type."""
  TYPE
}

"Input type for FixedLessThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedLessThanInput {
  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  compared: Float!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!
}

"Response for all destinations related mutation. Includes relevant destination and/or errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsDestinationResponse {
  "Successfully mutated destination\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  destination: AiNotificationsDestination

  "Error in destination mutation\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")
}

"Result details union\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
union IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails = IncidentIntelligenceEnvironmentEnvironmentAlreadyExists | IncidentIntelligenceEnvironmentEnvironmentCreated

"In APM, when transaction traces are collected, there may be additional Slow query data available.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsSlowSqlInput {
  "Whether or not slow_sql is enabled.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean
}

"Key Vault\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureKeyvaultIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The input object representing the group to remove\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementDeleteGroup {
  "The ID of the group being removed.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: String!
}

"Represents a possible default value item.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardVariableDefaultItem {
  "The value of this default item.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  value: DashboardVariableDefaultValue
}

"The new settings to use - leave blank any settings you do not wish to modify.\n\nWhile all settings can be specified here, some may not affect your installed agents, depending on the language agent and the current version installed. Note: not all settings of your agent are available to be set server-side. \n\nPlease see docs.newrelic.com for more information about the capabilities of individual agents.\n\n[Go agent configuration](https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/)\n\n[Java agent configuration](https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/)\n\n[.Net agent configuration](https://docs.newrelic.com/docs/agents/net-agent/configuration/net-agent-configuration/)\n\n[nodejs agent configuration](https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/)\n\n[PHP agent configuration](https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/)\n\n[Python agent configuration](https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/)\n\n[Ruby agent configuration](https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/)\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsUpdateInput {
  "The new name for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  alias: String

  "Provides fields to set general APM application settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apmConfig: AgentApplicationSettingsApmConfigInput

  "Provides fields to set general browser application settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserConfig: AgentApplicationSettingsBrowserConfigInput

  "Provides fields to set browser monitoring application settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserMonitoring: AgentApplicationSettingsBrowserMonitoringInput

  "Enable or disable the capture of memcache keys\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  captureMemcacheKeys: Boolean

  "Captures information about uncaught exceptions and sends them to New Relic for viewing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  errorCollector: AgentApplicationSettingsErrorCollectorInput

  "In the Java Agent (v8.0.0 or later), it can collect additional data with the Java Flight Recorder enabled.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  jfr: AgentApplicationSettingsJfrInput

  "Input object for mobile settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  mobileSettings: AgentApplicationSettingsMobileSettingsInput

  "DEPRECATED: Use `alias` to set a new name for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  name: String

  "In APM, when transaction traces are collected, there may be additional Slow query data available.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  slowSql: AgentApplicationSettingsSlowSqlInput

  "Settings for the thread profiler.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  threadProfiler: AgentApplicationSettingsThreadProfilerInput

  "Input object for setting the type of tracing performed.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  tracerType: AgentApplicationSettingsTracerTypeInput

  "Transaction tracer settings related to APM applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  transactionTracer: AgentApplicationSettingsTransactionTracerInput
}

"Input type for RelativeFuzzyWuzzyPartialRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeFuzzyWuzzyPartialRatioInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Dataflow Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpDataflowIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The application wrapper.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type KeyTransactionApplication {
  "The application outline.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: EntityOutline

  "The guid of the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid!
}

"An Infrastructure entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type GenericInfrastructureEntityOutline implements AlertableEntityOutline & EntityOutline & InfrastructureIntegrationEntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  integrationTypeCode: String

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"The result of which submitted events to metrics rules were successfully and unsuccessfully update.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsUpdateRuleResult {
  "Rules that failed to get updated.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  failures: [EventsToMetricsUpdateRuleFailure]

  "Rules that were successfully enabled or disabled.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  successes: [EventsToMetricsRule]
}

"The monitor values that can be updated on a Broken Links monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsUpdateBrokenLinksMonitorInput {
  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String
}

"Time range to apply to the golden metric NRQL query\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
input EntityGoldenNrqlTimeWindowInput {
  "Start time.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  since: Nrql

  "End time.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  until: Nrql
}

"Input for updating a baseline NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionUpdateBaselineInput {
  "Direction in which the baseline is set on condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  baselineDirection: AlertsNrqlBaselineDirection

  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the NRQL condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpirationInput

  "Name of the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionUpdateQueryInput

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignalInput

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlDynamicConditionTermsInput!]

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes. Default is THIRTY_DAYS.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit

  "Duration after which a violation automatically closes in seconds.\nAccepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).\n\nDefault is 3 days (259200 seconds).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"Type defined so its fields will be merged directly into NerdGraph's Actor type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardActorStitchedFields {
  "Fetch the list of live URLs created by the API user.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  liveUrls(
    """Filter the live URLs to fetch."""
    filter: DashboardLiveUrlsFilterInput
  ): DashboardLiveUrlResult
}

"Nerdpack subscription information.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackSubscription {
  "What type of access the user has over this subscription. Eg: direct or inherited.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accessType: [NerdpackSubscriptionAccessType]

  "Unique identifier of the account that has subscribed to the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "Nerdpack associated to the subscribed version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackVersion: NerdpackVersion

  "Tag associated with the version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName
}

"Access to the enabled state of the Java Flight Recorder. This feature only available on the Java language agent version 8.0.0 or later.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsJfr {
  "If true, the java agent collects Java Flight Recorder data. (Java Agent version 8.0.0 required.)\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean
}

"Configuration for xMatters notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsXMattersNotificationChannelConfig {
  "Integration URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  integrationUrl: SecureValue!
}

"Determines which browser loader will be configured. Some allowed return values are specified for backwards-compatability and do not represent currently allowed values for new applications.\nSee [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for further information.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSettingsBrowserLoader {
  """Use PRO instead"""
  FULL @deprecated(reason: "Browsers which historically had the FULL loader will now return PRO as the loader type.")

  """
  Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
  """
  LITE

  """Don't use an agent."""
  NONE

  """
  Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
  """
  PRO

  """This value is no longer in use."""
  RUM @deprecated(reason: "Browsers which historically had the RUM loader will now return LITE as the loader type.")

  """
  Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
  """
  SPA

  """This value is specified for backwards-compatability."""
  XHR
}

"Configuration for user notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsUserNotificationChannelConfig {
  "User ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  userId: String! @deprecated(reason: "This channel type is deprecated")
}

"An object representing details about a query's time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NrdbMetadataTimeWindow {
  "Timestamp marking the query begin time.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  begin: EpochMilliseconds

  "A clause representing the comparison time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  compareWith: String

  "Timestamp marking the query end time.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  end: EpochMilliseconds

  "SINCE clause resulting from the query\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  since: String

  "UNTIL clause resulting from the query\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  until: String
}

"Possible entity sorting criteria.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntitySearchSortCriteria {
  """Sort by alert severity."""
  ALERT_SEVERITY

  """Sort by entity domain."""
  DOMAIN

  """Sort by relevance. Note that these results can't be paginated."""
  MOST_RELEVANT

  """Sort by entity name."""
  NAME

  """Sort by reporting state."""
  REPORTING

  """Sort by entity type."""
  TYPE
}

"VPC Access Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpVpcaccessIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input type for FixedJaccardDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedJaccardDistanceInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Webhook header\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsWebhookCustomHeaderMutationInput {
  "Header name\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Header value\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  value: SecureValue!
}

"enum of Orientations that the user can select for their emulated device\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsDeviceOrientation {
  """This allows the screenshot to be taken in the landscape orientation"""
  LANDSCAPE

  """This will disable device emulation"""
  NONE

  """This allows the screenshot to be taken in the portrait orientation"""
  PORTRAIT
}

"Result of an operation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsOperationResult {
  "Status of the operation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: AiDecisionsResultType!
}

"An enum specifying the specific types of errors that may be returned.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationUpdateErrorType {
  """Returned when the attributes provided for an object are invalid."""
  INVALID_RECORD

  """
  Returned when the actor has insufficient capabilties to fulfill the request.
  """
  NOT_AUTHORIZED
}

"The attributes for updating an account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n\n"
input AccountManagementUpdateInput {
  "The ID for the account being updated.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  id: Int!

  "The new account name.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  name: String!
}

"The result of updating application settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsUpdateResult {
  "The name for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  alias: String

  "Access general settings for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apmSettings: AgentApplicationSettingsApmBase

  "Access general properties for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserProperties: AgentApplicationSettingsBrowserProperties

  "Access general settings for the browser application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserSettings: AgentApplicationSettingsBrowserBase

  "Information about any errors encountered while updating values.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  errors: [AgentApplicationSettingsUpdateError]

  "The GUID for the affected Entity.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  guid: EntityGuid!

  "Access mobile settings for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  mobileSettings: AgentApplicationSettingsMobileBase

  "The name for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  name: String @deprecated(reason: "Deprecated. Use `alias` instead!")
}

"Event source type (note: this list includes events currently supported by errors inbox)\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/custom_fingerprinting`)\n\n\n"
enum ErrorsInboxEventSource {
  """AwsLambdaInvocationError events"""
  AWS_LAMBDA_INVOCATION_ERROR

  """ErrorTrace events"""
  ERROR_TRACE

  """JavaScriptError events"""
  JAVA_SCRIPT_ERROR

  """MobileCrash events"""
  MOBILE_CRASH

  """MobileHandledException events"""
  MOBILE_HANDLED_EXCEPTION

  """MobileRequestError events"""
  MOBILE_REQUEST_ERROR

  """Span events"""
  SPAN

  """TransactionError events"""
  TRANSACTION_ERROR
}

"The input to delete keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessDeleteInput {
  "A list of the ingest key `id`s that you want to delete.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  ingestKeyIds: [String]

  "A list of the user key `id`s that you want to delete.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  userKeyIds: [String]
}

"Attributes for revoking an account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationRevokeSharedAccountInput {
  "The id of the account share to be revoked\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: String!
}

"Container for conditions with associated notifications channels.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsPolicyInput {
  "Determines how incidents are created for critical violations of the conditions contained in the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  incidentPreference: AlertsIncidentPreference!

  "Description of the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"Firewalls Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureFirewallsIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Configuration for visualization type 'viz.table'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardTableWidgetConfiguration {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"The possible status values for job results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationOrganizationCreateJobResultStatusEnum {
  """Jobs that have been created but not yet started running"""
  CREATED

  """Jobs that have failed and stopped running"""
  FAILED

  """Jobs that are still running"""
  RUNNING

  """Jobs that completed successfully"""
  SUCCEEDED
}

"Page input used when updating an individual page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardUpdatePageInput {
  "Page description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Page name.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  name: String!

  "Page widgets.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  widgets: [DashboardWidgetInput!]!
}

"An organization's shared accounts, both given and received.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAccountShareCollection {
  "An organization's shared accounts, both given and received.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  items: [OrganizationAccountShare!]

  "an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Configuration options for a monitor downtime that runs once\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
input SyntheticsMonitorDowntimeOnceConfig {
  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"The `CustomerAdministration` object contains fields for managing the configuration that defines the business relationships between New Relic, partners, and customers.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type CustomerAdministration {
  "Accessible account shares\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountShares(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationAccountShareFilterInput!

    """Sort account share results"""
    sort: [OrganizationAccountShareSortInput!]
  ): OrganizationAccountShareCollection

  "accounts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accounts(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationAccountFilterInput!

    """Sort Accounts"""
    sort: [OrganizationAccountSortInput!]
  ): OrganizationAccountCollection

  "Authentication domains\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  authenticationDomains(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """Filter authentication domain results"""
    filter: OrganizationAuthenticationDomainFilterInput!

    """Order authentication domain results"""
    sort: [OrganizationAuthenticationDomainSortInput!]
  ): OrganizationAuthenticationDomainCollection

  "The `consumption` field is the entry point into a customer's consumption data that is scoped to the ID of the customer.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  consumption(
    """The ID of the customer."""
    customerId: ID!
  ): Consumption

  "Accessible contracts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  contracts(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationCustomerContractFilterInput
  ): OrganizationCustomerContractWrapper

  "list of grants\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  grants(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """allows filtering of the data"""
    filter: MultiTenantAuthorizationGrantFilterInputExpression!

    """allows sorting of the data"""
    sort: [MultiTenantAuthorizationGrantSortInput!]
  ): MultiTenantAuthorizationGrantCollection

  "Named sets of New Relic users within an authentication domain\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter groups"""
    filter: MultiTenantIdentityGroupFilterInput!

    """Sort groups"""
    sort: [MultiTenantIdentityGroupSortInput!]
  ): MultiTenantIdentityGroupCollection

  "This provides access to fields you can use to check the status of asynchronous jobs related to customer administration.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  jobs: CustomerAdministrationJobs

  "Accessible organizations\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizations(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationCustomerOrganizationFilterInput
  ): OrganizationCustomerOrganizationWrapper

  "list of roles\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roles(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """allows filtering of the data"""
    filter: MultiTenantAuthorizationRoleFilterInputExpression!

    """allows sorting of the data"""
    sort: [MultiTenantAuthorizationRoleSortInput!]
  ): MultiTenantAuthorizationRoleCollection

  "The authenticated `User` who made this request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  user: User

  "A collection of New Relic users\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter users"""
    filter: MultiTenantIdentityUserFilterInput!

    """Sort users"""
    sort: [MultiTenantIdentityUserSortInput!]
  ): MultiTenantIdentityUserCollection
}

"A query suggestion based on historical query patterns.\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SuggestedHistoryBasedNrqlQuery implements SuggestedNrqlQuery {
  "The NRQL string to run for the suggested query\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: String!

  "A human-readable title describing what the query shows\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  title: String!
}

"The errors that can be returned when linking a New Relic account and Pixie project\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum PixieLinkPixieProjectErrorType {
  """There is already a linked Pixie project for this New Relic account."""
  ALREADY_LINKED

  """Automatic Pixie project creation not supported."""
  AUTO_CREATION_NOT_SUPPORTED

  """The provided account is not valid."""
  INVALID_NEWRELIC_ACCOUNT

  """The provided Pixie API key is not valid."""
  INVALID_PIXIE_API_KEY

  """Unlinking is not supported."""
  UNLINKING_NOT_SUPPORTED
}

"Amazon Elastic Block Store (EBS)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudEbsIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Information about a documentation component in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartDocumentation implements Nr1CatalogQuickstartComponent {
  "Metadata associated with the dashboard\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogQuickstartDocumentationMetadata!
}

"The query that represents the events to fetch.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelEventsQueryCreateInput {
  "The NRDB event to fetch the data from.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  from: Nrql!

  "The NRQL SELECT clause to aggregate events. Default is COUNT(*).\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  select: ServiceLevelEventsQuerySelectCreateInput

  "The NRQL condition to filter the events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  where: Nrql
}

"Basic auth input object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsBasicAuthInput {
  "password\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  password: SecureValue!

  "user\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  user: String!
}

"The type of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
enum EntityRelationshipEdgeType {
  """The target entity contains the code for the source entity."""
  BUILT_FROM

  """The source entity calls the target entity."""
  CALLS

  """The source entity has a connection to the target entity."""
  CONNECTS_TO

  """
  The source entity consumes messages from a target kafka topic or other queue systems.
  """
  CONSUMES

  """The source entity contains the target entity."""
  CONTAINS

  """The source entity hosts the target."""
  HOSTS

  """The source and target entities are perspectives on the same thing."""
  IS

  """
  The source entity manages the target, that represents a subsystem of the source.
  """
  MANAGES

  """The source entity is used to measure the target entity."""
  MEASURES

  """
  The source operates in the target entity, e.g. a region or a data center.
  """
  OPERATES_IN

  """The source entity owns the target entity."""
  OWNS

  """
  The source entity produces messages to a target kafka topic or other queue systems.
  """
  PRODUCES

  """
  The source is an Application that serves the target Browser application.
  """
  SERVES
}

"The object that's returned from successfully creating an organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationCreateOrganizationResponse {
  "The job id of the organization creation task; query this job id to get latest state\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  jobId: String!
}

"Type that wraps the errors from a entity create operation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ReferenceEntityCreateRepositoryError {
  "Guid related to the error.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "User-friendly message describing the error.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String!

  "Describes all potential error types that a create operation might return.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: ReferenceEntityCreateRepositoryErrorType!
}

"The input object representing parameters for the ID input filter\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityGroupIdInput {
  "A group ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"SES Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudSesIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The input object used to represent a rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadRegularRuleInput {
  "A list of entity GUIDs composing the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entityGuids: [EntityGuid!]

  "A list of entity search queries used to retrieve the entities that compose the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [WorkloadEntitySearchQueryInput!]

  "The input object used to represent a rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rollup: WorkloadRollupInput!
}

"Fitlers on grants id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantIdInputFilter {
  "Performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: Int!
}

"The pipeline configuration for an account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n\n"
input LogConfigurationsPipelineConfigurationInput {
  "Whether or not enrichment is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  enrichmentDisabled: Boolean

  "Whether or not JSON parsing is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  jsonParsingDisabled: Boolean

  "Whether or not obfuscation is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  obfuscationDisabled: Boolean

  "Whether or not parsing is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  parsingDisabled: Boolean

  "Whether or not patterns are enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  patternsEnabled: Boolean

  "Whether or not recursive JSON parsing is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  recursiveJsonParsingDisabled: Boolean

  "Whether or not transformation is disabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_pipeline_configuration_options`)\n\n"
  transformationDisabled: Boolean
}

"Definition of a variable that is local to this dashboard. Variables are placeholders for dynamic values in widget NRQLs.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardVariable {
  "[DEPRECATED] Default value for this variable. The actual value to be used will depend on the type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  defaultValue: DashboardVariableDefaultValue @deprecated(reason: "This field will always be null. Use defaultValues instead.")

  "Default values for this variable. The actual value to be used will depend on the type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  defaultValues: [DashboardVariableDefaultItem]

  "Indicates whether this variable supports multiple selection or not. Only applies to variables of type NRQL or ENUM.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  isMultiSelection: Boolean

  "List of possible values for variables of type ENUM.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  items: [DashboardVariableEnumItem]

  "Variable identifier.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  name: String

  "Configuration for variables of type NRQL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQuery: DashboardVariableNrqlQuery

  "Indicates the strategy to apply when replacing a variable in a NRQL query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  replacementStrategy: DashboardVariableReplacementStrategy

  "Human-friendly display string for this variable.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "Specifies the data type of the variable and where its possible values may come from.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardVariableType
}

"The definition of a collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityCollectionDefinition {
  "A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityGuids: [EntityGuid]

  "The Entity Search query that returns the full collection of entities.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entitySearchQuery: String

  "The Accounts that will be used to scope the collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  scopeAccounts: EntityCollectionScopeAccounts

  "A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  searchQueries: [String]
}

"Contains files and information associated with a specific version of a Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackVersion {
  "List of assets present on this Nerdpack version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  assets: [NerdpackAssetInfo]

  "Version of the CLI used to generate the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cliVersion: SemVer

  "Timestamp for the creation on the Nerdpack version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: DateTime!

  "Unique identifier of the user who created the version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdByUser: Int!

  "A brief description of the artifact.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "Human-readable Nerdpack's name.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  displayName: String

  "Icon URL of Package\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  icon: String

  "Unique uuid V5 that identifies the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackId: ID

  "URL to the repository with the Nerdpack source code.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  repositoryUrl: String

  "Version of the SDK used to generate the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  sdkVersion: String

  "Nerdpack subscription model to filter.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  subscriptionModel: NerdpackSubscriptionModel

  "List of tags associated with the Nerdpack version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [NerdpackTagName]!

  "Semver-compliant Nerdpack version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  version: SemVer!
}

"Filter users\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityUserFilterInput {
  "Filter users by authentication domain\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: MultiTenantIdentityAuthenticationDomainIdInput!

  "Filter users by email address\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: MultiTenantIdentityUserEmailInput

  "Filter users by id\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: MultiTenantIdentityUserIdInput

  "Filter users by name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: MultiTenantIdentityUserNameInput

  "Filter users by pending upgrade request\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  pendingUpgradeRequest: MultiTenantIdentityPendingUpgradeRequestInput
}

"The possible types why an error may have occurred.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
enum NerdStorageVaultErrorType {
  """
  Indicates the client performing the operation does not have sufficient
  permission.
  """
  ACCESS_DENIED

  """
  Indicates the mutation has malformed input and needs to be corrected before
  the mutation can be processed.
  """
  BAD_INPUT

  """Indicates that the resource does not exist."""
  NOT_FOUND

  """Indicates the mutation has failed validation."""
  VALIDATION_FAILED
}

"Represents an attribute of an incident.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsIncidentObjectInput {
  "Attribute to process of selected incident.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attribute: String!

  "Incident to select.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  select: AiDecisionsIncidentSelect!
}

"The monitor input values needed to create a Broken Links monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCreateBrokenLinksMonitorInput {
  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput!

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod!

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus!

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String!
}

"Live URL type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardLiveUrlType {
  """Dashboard."""
  DASHBOARD

  """Widget."""
  WIDGET
}

"The `SemVer` scalar represents a version designation conforming to the SemVer specification.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar SemVer

"Result of trying to remove the subscription.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackUnsubscribeResult {
  "Nerdpack to be unsubscribed from.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpack: NerdpackData!

  "Unsubscribe result per account.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  resultsPerAccount: [NerdpackMutationResultPerAccount]
}

"Custom header for monitor jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsCustomHeader {
  "Header name\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "Header value\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  value: String!
}

"Describes a role within the system\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type MultiTenantAuthorizationRole {
  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: Int!

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The scope the role applies to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  scope: String!

  "The type of role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  type: String!
}

"Input type for RelativeStartsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeStartsWithInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  contained: AiDecisionsIncidentObjectInput!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  container: AiDecisionsIncidentObjectInput!
}

"An operator used to combine MutingRuleConditions within a MutingRuleConditionGroup.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsMutingRuleConditionGroupOperator {
  """Match conditions by AND"""
  AND

  """Match conditions by OR"""
  OR
}

"Permissions that represent visibility & editing.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardPermissions {
  """Only you can see the dashboard. Everything but the metadata is hidden."""
  PRIVATE

  """
  All users are able to see the dashboard, but only you have full rights to work with the dashboard. Other users can access the dashboard but are not able to edit or delete it, although they can duplicate it.
  """
  PUBLIC_READ_ONLY

  """All users have full rights to the dashboard."""
  PUBLIC_READ_WRITE
}

"OpsGenie notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsOpsGenieNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "OpsGenie channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsOpsGenieNotificationChannelConfig!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"Base Provider Object\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudBaseProvider implements CloudProvider {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud provider icon name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  icon: String!

  "The cloud provider identifier in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int!

  "The cloud provider name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "Get details of one cloud provider service.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  "Get details of all the cloud provider services available for integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  services: [CloudService!]!

  "The cloud provider short name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  slug: String!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Attributes for updating an organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationUpdateInput {
  "The new name for the organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String
}

"The configuration of a cloud service integration for a linked account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
interface CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Variable types\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsVariableType {
  """Boolean variable type"""
  BOOLEAN

  """List variable type"""
  LIST

  """number variable type"""
  NUMBER

  """Object variable type"""
  OBJECT

  """String variable type"""
  STRING
}

"Represents a piece of user feedback for a merge.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsMergeFeedback {
  "ID of child issue.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  childIssueId: ID!

  "Opinion of the current user on this merge.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  opinion: AiDecisionsOpinion!

  "ID of parent issue.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  parentIssueId: ID!

  "ID of correlation rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleId: ID!

  "ID of user.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  userId: ID!
}

"Description of errors that may occur while attempting to delete a span attribute trace filter.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDeleteSpanAttributeRuleResponseError {
  "Error message, with further detail to help resolve the issue.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  message: String!

  "Error that may occur while attempting to delete a span attribute trace filter.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  type: EdgeDeleteSpanAttributeRuleResponseErrorType!
}

"Fields related to transaction traces and data collection for traces.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsTransactionTracerInput {
  "DEPRECATED: Please use capture_memcache_keys on parent type\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  captureMemcacheKeys: Boolean

  "If true, this enables the transaction tracer feature, enabling collection of transaction traces.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  explainEnabled: Boolean

  "Relevant only when explain_enabled is true. Can be set to automatic configuration (APDEX_F) or manual (see explainThresholdValue).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  explainThresholdType: AgentApplicationSettingsThresholdTypeEnum

  "Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true and explainThresholdType is set to VALUE.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  explainThresholdValue: Seconds

  "Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  logSql: Boolean

  "Obfuscation level for SQL queries reported in transaction trace nodes.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  recordSql: AgentApplicationSettingsRecordSqlEnum

  "Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  stackTraceThreshold: Seconds

  "Relevant only when transaction tracer is enabled. Can be set to automatic configuration (APDEX_F) or manual (see TransactionThresholdValue).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  transactionThresholdType: AgentApplicationSettingsThresholdTypeEnum

  "Threshold (in seconds) that transactions with a duration longer than this threshold are eligible for transaction traces.  Relevant only when transaction tracer is enabled and transaction_threshold_type is set to VALUE.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  transactionThresholdValue: Seconds
}

"\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentAccountStitchedFields {
  "Retrieves the incident intelligence environment based on the user's authentication and product entitlement\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  currentEnvironment(
    """Which environment kind to support when evaluating the query"""
    kind: IncidentIntelligenceEnvironmentSupportedEnvironmentKind
  ): IncidentIntelligenceEnvironmentCurrentEnvironmentResult
}

"Information realating to a private location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsPrivateLocationInput {
  "The unique identifier for the Synthetics private location in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: ID!

  "The location's Verified Script Execution password (Only necessary if Verified Script Execution is enabled for the location)\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  vsePassword: SecureValue
}

"App Engine Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpAppengineIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"MQ\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsMqIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Input for creating a baseline NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionBaselineInput {
  "Direction in which the baseline is set on condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  baselineDirection: AlertsNrqlBaselineDirection!

  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the NRQL condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpirationInput

  "The name of the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionQueryInput!

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignalInput

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlDynamicConditionTermsInput!]!

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes. Default is THIRTY_DAYS.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit

  "Duration after which a violation automatically closes in seconds.\nAccepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).\n\nDefault is 3 days (259200 seconds).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"The NerdStorageVault data access level.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
input NerdStorageVaultScope {
  "A NerdStorageVault data access level for the current user.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  actor: NerdStorageVaultActorScope
}

"Slack notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsSlackNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "Slack channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsSlackNotificationChannelConfig!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"Provides fields to set general browser application settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsBrowserConfigInput {
  "The desired target for the APDEX measurement of this application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apdexTarget: Float
}

"Datastore Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpDatastoreIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A newly created user of New Relic scoped to an authentication domain.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementCreatedUser {
  "Authentication domain of the created user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: ID

  "Email address of the created user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: String!

  "The ID of the created user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The full name of the created user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!

  "A \"user type\" is what determines the set of New Relic capabilities a user can theoretically access.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  type: UserManagementUserType!
}

"Missing constraint error. Constraints can be retrieved using suggestion api\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsConstraintError {
  "Names of other constraints this constraint is dependent on\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  dependencies: [String!]!

  "Name of the missing constraint\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String!
}

"The different error types for the entityRelationshipUserDefinedDelete mutation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
enum EntityRelationshipUserDefinedDeleteErrorType {
  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"State of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsDecisionState {
  """Decision state is disabled"""
  DISABLED

  """Decision state is enabled"""
  ENABLED
}

"Test Workflow input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsTestWorkflowInput {
  "destinationConfigurations\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationConfigurations: [AiWorkflowsDestinationConfigurationInput!]!

  "enrichments\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichments: AiWorkflowsTestEnrichmentsInput

  "issuesFilter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  issuesFilter: AiWorkflowsFilterInput
}

"Object that represents a nrql metric with its metric selector\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenOriginalQueryWithSelector {
  "The golden metric NRQL query.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  query: String!

  "The value of the selector. Currently, this is the value of the instrumentation provider.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  selectorValue: String!
}

"Information about a Time Zone\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type TimeZoneInfo {
  "The name of the Time Zone\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The offset in seconds from UTC\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  offset: Seconds
}

"The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.\n\nTo understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface EntityOutline implements AlertableEntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Input object to lookup a feature setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
input DataManagementFeatureSettingLookup {
  "Key of the feature setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  key: String
}

"The automatic status configuration.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadAutomaticStatus {
  "Whether the automatic status configuration is enabled or not.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "An additional meta-rule that can consider all entities that haven't been evaluated by any other rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  remainingEntitiesRule: WorkloadRemainingEntitiesRule

  "A list of rules.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rules: [WorkloadRegularRule!]!
}

"Type of delete error\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsDeleteErrorType {
  """One or more of the parameters you provided are incorrect"""
  INVALID_PARAMETER

  """This account in not authorized to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR
}

"Represents a time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type TimeWindow {
  "The end time of the time window the number of milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  endTime: EpochMilliseconds

  "The start time of the time window the number of milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  startTime: EpochMilliseconds
}

"Type of Enrichment\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsEnrichmentType {
  """NRQL Enrichment type"""
  NRQL
}

"Direct Connect\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsDirectconnectIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The result of a Script Browser monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsScriptBrowserMonitorCreateMutationResult {
  "Errors that occurred during Script Browser monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorCreateError]!

  "The resulting script browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsScriptBrowserMonitor
}

"Possible entity sorting criterion with direction\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input SortCriterionWithDirection {
  "Sort entities by attribute. Mutally exclusive with the `tag` argument\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attribute: EntitySearchSortCriteria

  "The direction to sort results\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  direction: SortBy = ASC

  "Sort entities by tag. Mutally exclusive with the `attribute` argument\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: String
}

"Type of Validation required for this component\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsUiComponentValidation {
  """Data should be a valid DATE ISO-8601 format"""
  DATE

  """Data should be a valid DATETIME ISO-8601 format"""
  DATETIME

  """Data should be a valid email"""
  EMAIL

  """Data should be a valid JSON"""
  JSON

  """No validation"""
  NONE

  """Data should be a valid number"""
  NUMBER

  """Data should be a valid URL"""
  URL
}

"An anomaly detected with respect to an attribute of a span.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
type DistributedTracingSpanAnomaly {
  "The value of the span attribute which was detected as being anomalous.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  anomalousValue: Float!

  "The attribute of the span which was detected as being anomalous.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  anomalyType: DistributedTracingSpanAnomalyType!

  "The average value for the attribute on similar spans.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  averageMeasure: Float!
}

"Details of a drop rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesDropRule {
  "The account this drop rule targets.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  account: AccountReference

  "The account this drop rule targets.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  accountId: Int!

  "The behavior of the drop rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  action: NrqlDropRulesAction!

  "The time this drop rule was created.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  createdAt: DateTime!

  "The id of the user that created the drop rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  createdBy: Int!

  "The user reference of the user that created the drop rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  creator: UserReference

  "Additional information about the rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  description: String

  "The unique id for the drop rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  id: ID!

  "The NRQL used to match data that will receive the `action`.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  nrql: String!

  "Who or what registered this rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  source: String
}

"Firebase Storage\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpFirebasestorageIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Provides all the available filters on the account id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationAccountIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: Int!
}

"Autogenerated return type of UpdateUser.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementUpdateUserPayload {
  "The user that was updated\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  user: UserManagementUser
}

"WAF\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsWafIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Tag entries for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsTag {
  "Name of the tag key\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  key: String!

  "Values associated with the tag key\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  values: [String]!
}

"An environment will be populated only if the user is attached to a single environment.\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentCurrentEnvironmentResult {
  "The current environment attached to the user\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment

  "The explanation for the environment field result\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reason: IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason

  "The current environment result details\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reasonDetails: IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails
}

"Kinesis Firehose Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudKinesisFirehoseIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input for updating an obfuscation expression.\nNull fields are left untouched by mutation.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
input LogConfigurationsUpdateObfuscationExpressionInput {
  "Description of expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  description: String

  "Expression Id.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  id: ID!

  "Name of expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  name: String

  "Regex of expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  regex: String
}

"Configuration options for a monthly monitor downtime that runs on days of the week\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsDaysOfWeekOutput {
  "Which occurrence of the day selected within the month\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  ordinalDayOfMonth: SyntheticsMonitorDowntimeDayOfMonthOrdinal

  "Which day of the week the monitor downtime runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  weekDay: SyntheticsMonitorDowntimeWeekDays
}

"DocumentDB Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsDocdbIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Priority of issue.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsIssuePriority {
  """Issue priority of critical"""
  CRITICAL

  """Issue priority of high"""
  HIGH

  """Issue priority of low"""
  LOW

  """Issue priority of medium"""
  MEDIUM
}

"Operator used to compare against the threshold for `NrqlConditions`. Only `ABOVE` is allowed for baseline NRQL conditions.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNrqlDynamicConditionTermsOperator {
  """For comparing values above a threshold."""
  ABOVE
}

"A group of data sources that are associated with this trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDataSourceGroup {
  "The list of data sources in this group.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  dataSources: [EdgeDataSource!]!
}

"Attributes for creating an account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n\n"
input AccountManagementCreateInput {
  "The name of the account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The data center region for the account\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  regionCode: String
}

"Information about removed tag\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackRemovedTagInfo {
  "UUID of the nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackId: ID

  "Tag removed\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagName: NerdpackTagName

  "Version affected\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  version: SemVer
}

"Metadata associated with a dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogDashboardTemplateMetadata {
  "A list of authors that created the dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  authors: [Nr1CatalogAuthor!]!

  "The list of categories for filtering, searching, and grouping associated with the dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [Nr1CatalogCategory!]!

  "The list of category terms associated with the dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categoryTerms: [String!]!

  "A short form description for a dashboard template.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for a dashboard template.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "A list of previews for a dashboard template, such as screenshots.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  previews: [Nr1CatalogPreview!]!

  "A list of required data sources needed to populate data in the dashboard.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  requiredDataSources: [Nr1CatalogDataSource!]!
}

"The flamegraph built from the strack trace samples\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type JavaFlightRecorderFlamegraph {
  "List of stack frames for the flamegraph\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  allFrames: [JavaFlightRecorderStackFrame]!
}

"Token based authentication\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsTokenAuth {
  "Authentication Type - Token or Oauth2\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  authType: AiNotificationsAuthType!

  "Token Prefix\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  prefix: String!
}

"The advanced options inputs available for a Script Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsScriptBrowserMonitorAdvancedOptionsInput {
  "Emulate a device\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceEmulation: SyntheticsDeviceEmulationInput

  "Capture a screenshot during job execution\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  enableScreenshotOnFailureAndScript: Boolean
}

"A result set containing associated policies information for a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelPoliciesResultSet {
  "A set of policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policies: [AlertsNotificationChannelPolicy!]!

  "Total number of policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Type that define the rules for account subscription.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum NerdpackSubscriptionModel {
  """Product nerdpacks displayed to everybody, no subscription required ."""
  CORE

  """Any NR user can subscribe to the nerdpack."""
  GLOBAL

  """Only owner, master and allowed accounts can subscribe to the nerdpack."""
  OWNER_AND_ALLOWED
}

"Page input.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardPageInput {
  "Brief text describing the page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Unique entity identifier of the Page to be updated. When null, it means a new Page will be created.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The name of the page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  name: String!

  "A nested block of all widgets belonging to the page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  widgets: [DashboardWidgetInput!]!
}

"Available filtering types for user IDs\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementUserIdInput {
  "A user ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: ID

  "An array of user IDs\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  in: [ID!]
}

"Settings that are applicable to APM applications and their agents.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsApmBase {
  "The name for the application\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  alias: String

  "Access general settings for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apmConfig: AgentApplicationSettingsApmConfig!

  "Enable or disable the capture of memcache keys.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  captureMemcacheKeys: Boolean

  "Access error collector settings for the application. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  errorCollector: AgentApplicationSettingsErrorCollector

  "Access enabled state for the Java Flight Recorder. This is available only for the Java language agent version 8.0.0 or later.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  jfr: AgentApplicationSettingsJfr

  "The name originally given to the application for reporting.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  originalName: String

  "In APM, when transaction traces are collected, there may be additional Slow query data available.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  slowSql: AgentApplicationSettingsSlowSql

  "Measures wall clock time, CPU time, and method call counts in your application's threads as they run.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  threadProfiler: AgentApplicationSettingsThreadProfiler

  "Type of tracer used. APM's cross application tracing links transactions between APM apps in your service-oriented architecture (SOA).  Distributed tracing is an improvement on the cross application tracing feature, and is recommended for large, distributed systems.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  tracerType: AgentApplicationSettingsTracer

  "Access transaction tracer settings for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  transactionTracer: AgentApplicationSettingsTransactionTracer
}

"The settings of a browser application. Includes loader script.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentApplicationBrowserSettings {
  "Configure cookies. The default is enabled: true.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cookiesEnabled: Boolean!

  "Configure distributed tracing in browser apps. The default is enabled: true.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  distributedTracingEnabled: Boolean!

  "The snippet of JavaScript used to copy/paste into your JavaScript app if you aren't using an auto-instrumenting agent on the backend. Note that the resulting snippet will be a JSON string that will need to be parsed before using in your browser application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  loaderScript: String

  "Determines which browser loader will be configured. The default is \"SPA\".\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  loaderType: AgentApplicationBrowserLoader!
}

"Kinesis Data Analytics\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsKinesisanalyticsIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Sort object.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
input ErrorsInboxErrorGroupSortOrderInput {
  "Sort object order.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  direction: ErrorsInboxDirection!

  "Sort object field.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  field: ErrorsInboxErrorGroupSortOrderField!
}

"Filter channel object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsChannelFilter {
  "active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean

  "destinationId\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  destinationId: ID

  "id\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  id: ID

  "ids\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  ids: [ID!]

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String

  "product\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  product: AiNotificationsProduct

  "property\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  property: AiNotificationsPropertyFilter

  "statuses\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  statuses: [AiNotificationsChannelStatus!]

  "type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsChannelType
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureIntegrationsInput {
  "Api Management integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureApimanagement: [CloudAzureApimanagementIntegrationInput]

  "App Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureAppgateway: [CloudAzureAppgatewayIntegrationInput]

  "App Service integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureAppservice: [CloudAzureAppserviceIntegrationInput]

  "Containers integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureContainers: [CloudAzureContainersIntegrationInput]

  "Cosmos DB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureCosmosdb: [CloudAzureCosmosdbIntegrationInput]

  "Cost Management integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureCostmanagement: [CloudAzureCostmanagementIntegrationInput]

  "Data Factory integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureDatafactory: [CloudAzureDatafactoryIntegrationInput]

  "Event Hub integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureEventhub: [CloudAzureEventhubIntegrationInput]

  "Express Route integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureExpressroute: [CloudAzureExpressrouteIntegrationInput]

  "Firewalls integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureFirewalls: [CloudAzureFirewallsIntegrationInput]

  "Front Door integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureFrontdoor: [CloudAzureFrontdoorIntegrationInput]

  "Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureFunctions: [CloudAzureFunctionsIntegrationInput]

  "Key Vault integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureKeyvault: [CloudAzureKeyvaultIntegrationInput]

  "Load Balancer integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureLoadbalancer: [CloudAzureLoadbalancerIntegrationInput]

  "Logic Apps integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureLogicapps: [CloudAzureLogicappsIntegrationInput]

  "Machine Learning integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMachinelearning: [CloudAzureMachinelearningIntegrationInput]

  "Database for MariaDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMariadb: [CloudAzureMariadbIntegrationInput]

  "Azure Monitor metrics integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMonitor: [CloudAzureMonitorIntegrationInput]

  "Database for MySQL integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMysql: [CloudAzureMysqlIntegrationInput]

  "MySQL Flexible Server integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureMysqlflexible: [CloudAzureMysqlflexibleIntegrationInput]

  "Database for PostgreSQL integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azurePostgresql: [CloudAzurePostgresqlIntegrationInput]

  "PostgreSQL Flexible Server integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azurePostgresqlflexible: [CloudAzurePostgresqlflexibleIntegrationInput]

  "Power BI Dedicated integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azurePowerbidedicated: [CloudAzurePowerbidedicatedIntegrationInput]

  "Redis Cache integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureRediscache: [CloudAzureRediscacheIntegrationInput]

  "Service Bus integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureServicebus: [CloudAzureServicebusIntegrationInput]

  "SQL Database integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureSql: [CloudAzureSqlIntegrationInput]

  "SQL Managed Instances integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureSqlmanaged: [CloudAzureSqlmanagedIntegrationInput]

  "Storage integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureStorage: [CloudAzureStorageIntegrationInput]

  "Virtual machine scale sets integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVirtualmachine: [CloudAzureVirtualmachineIntegrationInput]

  "Virtual Network integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVirtualnetworks: [CloudAzureVirtualnetworksIntegrationInput]

  "Virtual Machines integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVms: [CloudAzureVmsIntegrationInput]

  "VPN Gateways integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azureVpngateways: [CloudAzureVpngatewaysIntegrationInput]
}

"Represents the currently running agent versions in an APM Application.\nAn application could be running multiple versions of an agent (across different hosts, for example).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmApplicationRunningAgentVersions {
  "The maximum (newest) language agent version running in the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxVersion: String

  "The minimum (oldest) language agent version running in the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minVersion: String
}

"Amazon Route 53\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudRoute53IntegrationInput {
  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Type of update error\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsUpdateErrorType {
  """We couldn't find a channel with the given id"""
  CHANNEL_NOT_FOUND

  """A workflow with this name already exists"""
  DUPLICATE

  """One or more of the parameters you provided are incorrect"""
  INVALID_PARAMETER

  """
  This account is missing the required entitlement(s) to perform this action
  """
  MISSING_ENTITLEMENT

  """This account in not authorized to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """The given channel id represents an unsupported channel type"""
  UNSUPPORTED_CHANNEL_TYPE

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR
}

"A tag that has been applied to an entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityTag {
  "The tag's key\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  key: String

  "A list of the tag values\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  values: [String]
}

"Available filtering types for pending upgrade requests\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementPendingUpgradeRequestInput {
  "Whether a request exists or not\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  exists: Boolean!
}

"Represents the details about an announcement.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n\n"
type WhatsNewAnnouncementContent implements WhatsNewContent {
  "The body of the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  body: String

  "The type of the news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  contentType: WhatsNewContentType!

  "Contains information about the context of the announcement.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  context: [String!]

  "A link to the documentation.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  docUrl: String

  "A link to a page to get started.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  gettingStartedUrl: String

  "The ID of the announcement.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  id: ID!

  "A boolean representing whether this content is Featured.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  isFeatured: Boolean

  "A link to a page to learn more about the announcement.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  learnMoreUrl: String

  "The date the announcement was published.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  publishDate: EpochMilliseconds

  "Information about the requirements.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  requirements: String

  "The summary of the announcement.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  summary: String

  "The title of the announcement.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  title: String
}

"This scalar represents a NRDB Result. It is a `Map` of `String` keys to values.\n\nThe shape of these objects reflect the query used to generate them, the contents\nof the objects is not part of the GraphQL schema.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar NrdbResult

"Google Compute Engine\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpVmsIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Trusted Advisor\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudTrustedadvisorIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The `EpochMilliseconds` scalar represents the number of milliseconds since the Unix epoch\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar EpochMilliseconds

"Composer\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpComposerIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementUserGroups {
  "container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups: [UserManagementUserGroup!]!

  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Result of a mutation.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
type NerdStorageVaultDeleteSecretResult {
  "Any errors that happend during the mutation.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  errors: [NerdStorageVaultResultError!]

  "The status of the mutation.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  status: NerdStorageVaultResultStatus!
}

"Information about the mutation result when installing a dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogInstallDashboardTemplateResult {
  "An outline of the created dashboard\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  createdDashboard: Nr1CatalogDashboardOutline!

  "The template that was used for the installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  dashboardTemplate: Nr1CatalogDashboardTemplate!
}

"The method that determines when we consider an aggregation window to be complete\nso that we can evaluate the signal for violations. Default is `CADENCE`.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsSignalAggregationMethod {
  """
  `CADENCE` streams data points as the clocks at New Relic advance past the end
  of their window. This ensures a rigorous evaluation cadence, but does not take
  into account extraneous data latency.
  
  Use in conjunction with the `aggregationDelay` field.
  """
  CADENCE

  """
  `EVENT_FLOW` streams data points for evaluation as data for newer time windows
  arrive. Whenever data is received, any data points older than the specified
  delay will be evaluated.
  
  Use in conjunction with the `aggregationDelay` field.
  """
  EVENT_FLOW

  """
  `EVENT_TIMER` streams data points after the specified timer elapses since data
  last arrived for that window. Special measures are taken to make sure data
  points flow in order.
  
  Use in conjunction with the `aggregationTimer` field.
  """
  EVENT_TIMER
}

"An Infrastructure Host entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InfrastructureHostEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hostSummary: InfrastructureHostSummaryData

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Successfully deleted trace observers, or one or more error responses if there were issues.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDeleteTraceObserverResponse {
  "Errors that may occur when deleting a `TraceObserver`. Defaults to `null` in case of success.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  errors: [EdgeDeleteTraceObserverResponseError]

  "The trace observer that was deleted. Defaults to `null` in case of failure.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  traceObserver: EdgeTraceObserver
}

"Update workflow mutation response including errors\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsUpdateWorkflowResponse {
  "A list of errors that occurred while performing the update workflow action\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  errors: [AiWorkflowsUpdateResponseError!]!

  "Successfully updated workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  workflow: AiWorkflowsWorkflow
}

"Error details about the rule that failed to be deleted and why.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesDeleteDropRuleFailure {
  "Information about why the delete failed.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  error: NrqlDropRulesError!

  "Input information about on what was unable to be deleted.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  submitted: NrqlDropRulesDeleteDropRuleSubmission!
}

"Details about if or how frequently a MutingRule's schedule repeats.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsMutingRuleScheduleRepeat {
  """Schedule repeats once per calendar day"""
  DAILY

  """Schedule repeats once per calendar month"""
  MONTHLY

  """Schedule repeats once per specified day per calendar week"""
  WEEKLY
}

"The events that define the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelEventsCreateInput {
  "The New Relic account ID where the events are fetched from.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The definition of bad events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  badEvents: ServiceLevelEventsQueryCreateInput

  "The definition of good events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  goodEvents: ServiceLevelEventsQueryCreateInput

  "The definition of valid events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  validEvents: ServiceLevelEventsQueryCreateInput!
}

"The input object representing parameters for the authentication domain ID filter\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityAuthenticationDomainIdInput {
  "An authentication domain ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"A query string using Entity Search query syntax\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar EntitySearchQuery

"CloudFront Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudCloudfrontIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchLambdasAtEdge: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Configuration for visualization type 'viz.pie'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardPieWidgetConfiguration {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"Amazon API Gateway\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudApigatewayIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  stagePrefixes: [String]

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"A filter for account shares\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountShareFilterInput {
  "Filter by account id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountId: OrganizationAccountIdInput!

  "Filter by target id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  targetId: OrganizationTargetIdInput
}

"Cognito Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsCognitoIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The input for creating a new VictorOps notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsVictorOpsNotificationChannelCreateInput {
  "Key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  key: SecureValue!

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Route key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  routeKey: String!
}

"List of APM application instances with pagination data.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentApplicationInstancesResult {
  "List of APM application instances .\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationInstances: [AgentEnvironmentApplicationInstance!]

  "If nextCursor is a String value, set it to the cursor input field while searching in order to get the next page of results.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Summary statistics about an External Service called by an APM App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmExternalServiceSummaryData {
  "The average response time for external service calls in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  responseTimeAverage: Seconds

  "The number of external service calls per minute.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  throughput: Float
}

"Permisions that represent visibility & editability\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum DashboardEntityPermissions {
  """Private"""
  PRIVATE

  """Public read only"""
  PUBLIC_READ_ONLY

  """Public read & write"""
  PUBLIC_READ_WRITE
}

"The rules that were attempted to be deleted.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesDeleteDropRuleSubmission {
  "Account the rule was created on.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  accountId: Int!

  "Id of the rule you want to delete.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  ruleId: ID!
}

"Dataproc\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpDataprocIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Update error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsUpdateResponseError implements AiWorkflowsResponseError {
  "The error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  description: String!

  "The error type\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsUpdateErrorType!
}

"The time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelObjectiveTimeWindowUpdateInput {
  "The rolling time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  rolling: ServiceLevelObjectiveRollingTimeWindowUpdateInput!
}

"Data required to create a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeCreateTraceObserverInput {
  "Optional list of compliance types (e.g., FedRAMP) applied to this trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  complianceTypes: [EdgeComplianceTypeCode!]

  "When set to `true` a trace observer will write trace metrics to the current account.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  monitoring: Boolean

  "Name of the trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  name: String!

  "Provider and region where the trace observer must run. Currently, only AWS regions are supported.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  providerRegion: EdgeProviderRegion!
}

"An error object for recording the Pixie terms of service acceptance\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixieRecordPixieTosAcceptanceError {
  "A message explaining what the error is about.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String

  "The type of error.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: PixieRecordPixieTosAcceptanceErrorType
}

"An entity search query used to dynamically retrieve a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadEntitySearchQuery {
  "The moment when the object was created, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "The user who created the entity search query.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdBy: UserReference

  "The unique identifier of the entity search query.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int!

  "The entity search query that is used to perform the search of a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  query: String!

  "The moment when the object was last updated, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds
}

"Mutation result status.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
enum NerdStorageVaultResultStatus {
  """The mutation failed."""
  FAILURE

  """The mutation succeeded."""
  SUCCESS
}

"An object that represents a golden metric.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenMetric {
  "The definition of the golden metric.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  definition: EntityGoldenMetricDefinition!

  "The synthesised metric name. i.e: newrelic.goldenmetrics.apm.application.throughput\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  metricName: String!

  "The name of the golden metric.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The definitions of the golden metric as they are defined in the public repo https://github.com/newrelic/entity-definitions.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  originalDefinitions: [EntityGoldenOriginalDefinitionWithSelector!]!

  "Original queries as they are defined in the public repo https://github.com/newrelic/entity-definitions.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  originalQueries: [EntityGoldenOriginalQueryWithSelector!]!

  "The golden metric NRQL query.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  query: String!

  "The title of the golden metric.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  title: String!

  "The unit used to represent the golden metric.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  unit: EntityGoldenMetricUnit!
}

"Blueprint for vertex creation.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiTopologyCollectorVertexBlueprint {
  "Attributes to define the vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  definingAttributes: [AiTopologyCollectorAttributeInput!]!

  "The name of the vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "The class of the vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  vertexClass: AiTopologyCollectorVertexClass!
}

"Filter on entity domain-types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
input EntityRelationshipEntityDomainTypeFilter {
  "Filter the relationships to those between entities that are not of specific domain-types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  exclude: [DomainTypeInput!]

  "Filter the relationships to those between entities of specific domain-types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  include: [DomainTypeInput!]
}

"Response for error group resources.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxResourcesResponse {
  "Cursor used to fetch the next set of results\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  nextCursor: String

  "The list of search results\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  results: [ErrorsInboxResource!]!

  "The total number of results that match the search\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  totalCount: Int!
}

"Grace period config per priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesGracePeriodConfig {
  "Grace period for notification in seconds per priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  period: Seconds!

  "Priority for which grace period is defined (MEDIUM/LOW/HIGH/CRITICAL)\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: AiIssuesPriority!
}

"Google Cloud Storage\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpStorageIntegrationInput {
  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Metadata associated with a data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogDataSourceMetadata {
  "A list of alert policy templates that are auto installed upon data source installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  autoInstallAlertPolicyTemplates: [Nr1CatalogAlertPolicyTemplate!]!

  "A list of dashboard templates that are auto installed upon data source installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  autoInstallDashboardTemplates: [Nr1CatalogDashboardTemplate!]!

  "The categories for the data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [Nr1CatalogCategory!]!

  "A short form description for the data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "The corresponding icon for the data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  icon: Nr1CatalogIcon

  "Install information for the data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  install: Nr1CatalogDataSourceInstall!

  "A list of keywords for filtering and searching\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  keywords: [String!]!
}

"ElastiCache Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudElasticacheIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input for creating a static NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionStaticInput {
  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the NRQL condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpirationInput

  "Name of the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionQueryInput!

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignalInput

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlConditionTermsInput!]!

  "Deprecated - use `signal.slideBy` instead.\n\nFunction used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation is opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  valueFunction: AlertsNrqlStaticConditionValueFunction

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes. Default is THIRTY_DAYS.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit

  "Duration after which a violation automatically closes in seconds.\nAccepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).\n\nDefault is 3 days (259200 seconds).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"A Team entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type TeamEntity implements AlertableEntity & CollectionEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  collection(
    """The name of the collection to fetch."""
    name: String!
  ): EntityCollection

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Enumerations of role types\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantAuthorizationRoleTypeEnum {
  """Custom role"""
  CUSTOM

  """Standard role"""
  STANDARD
}

"A user of New Relic scoped to an authentication domain.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementUser {
  "Email address of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: String

  "One of: \"Not Verifiable\", \"Verified\", and \"Pending\".\n\nNot Verifiable: the user's email does not require verification.\n\nVerified: the user's email requires verification and has been.\n\nPending: the user's email requires verification and has not been.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  emailVerificationState: String!

  "container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]
  ): UserManagementUserGroups

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The last active date of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  lastActive: DateTime

  "The full name of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String

  "The pending upgrade request for the user (if any).\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  pendingUpgradeRequest: UserManagementPendingUpgradeRequest

  "Time zone of the user in IANA Time Zone database format, also known as the \"Olson\" time zone database format (for exmaple, \"America/Los_Angeles\").\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  timeZone: String

  "A \"user type\" is what determines the set of New Relic capabilities a user can theoretically access.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  type: UserManagementUserType!
}

"Outcome of the mutation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogMutationResult {
  """The mutation failed"""
  ERROR

  """The mutation was processed successfully"""
  OK
}

"An array containing errors from the deletion of a private location, if any\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsPrivateLocationDeleteResult {
  "An array container errors resulting from the mutation, if any\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsPrivateLocationMutationError]
}

"Rule for identifying a set of log data to apply specific obfuscation actions to.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
type LogConfigurationsObfuscationRule {
  "Obfuscation actions to take if a record passes the matching criteria.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  actions: [LogConfigurationsObfuscationAction!]

  "Identifies the date and time when the rule was created.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  createdAt: DateTime!

  "Identifies the user who has created the rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  createdBy: UserReference

  "Description of the obfuscation rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  description: String

  "Whether the rule should be applied to incoming logs\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  enabled: Boolean!

  "NRQL filter to determine if a log record should have obfuscation actions applied.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  filter: Nrql!

  "The id of the obfuscation rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  id: ID!

  "Name of the obfuscation rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  name: String!

  "Identifies the date and time when the rule was last updated.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  updatedAt: DateTime!

  "Identifies the user who has last updated the rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  updatedBy: UserReference
}

"Error details about the events to metrics rule that failed to be deleted and why.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsDeleteRuleFailure {
  "Information about why the delete failed.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errors: [EventsToMetricsError]

  "Input information about a submitted rule that was unable to be deleted.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  submitted: EventsToMetricsDeleteRuleSubmission
}

"EBS Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudEbsIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"State of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsRuleState {
  """Rule state is disabled"""
  DISABLED

  """Rule state is enabled"""
  ENABLED
}

"An encoded Entity GUID\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar EntityGuid

"A grouping of similar error events with all fields.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxErrorGroup implements ErrorsInboxErrorGroupBase {
  "User assigned to the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignedUser: UserReference @deprecated

  "User assigned to the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignment: ErrorsInboxAssignment

  "Source entity Guid\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  entityGuid: EntityGuid

  "NRQL formatted query for retrieving error events\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  eventsQuery: Nrql

  "Time of first occurrence\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/use_stored_timestamps`)\n\n"
  firstSeenAt: EpochMilliseconds

  "Versions running within 30 min after this error was first seen, ordered alphanumerically\nNote: This field requires additional queries that may slow down the response\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/provide_first_last_versions_from_api`)\n\n"
  firstSeenVersions: [ErrorsInboxVersion!]

  "A unique identifier for the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  id: ID!

  "Indicates whether this error group was custom generated.\n- false = this is a system-generated error group\n- true = this is a custom error group, created and sent by the end user\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/custom_fingerprinting`)\n\n"
  isCustom: Boolean

  "Time of last occurrence\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/use_stored_timestamps`)\n\n"
  lastSeenAt: EpochMilliseconds

  "Versions running within 30 min before this error was last seen, ordered alphanumerically\nNote: This field requires additional queries that may slow down the response\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/provide_first_last_versions_from_api`)\n\n"
  lastSeenVersions: [ErrorsInboxVersion!]

  "Error group message\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  message: String

  "Error group name\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  name: String

  "The occurrences of this error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  occurrences: ErrorsInboxOccurrences

  "Time of regression occurrence for regressed error groups\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  regressedAt: EpochMilliseconds

  "List of resources associated with this error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  resources(
    """Current query cursor"""
    cursor: String

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxResourceFilterInput
  ): ErrorsInboxResourcesResponse!

  "The source event of the error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  source: String

  "Value to indicate the current state of the group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  state: ErrorsInboxErrorGroupState

  "The public URL of the error group detail view.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  url: String
}

"The result of a Script Api monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsScriptApiMonitorCreateMutationResult {
  "Errors that occurred during Script Api monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorCreateError]!

  "The resulting Script Api monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsScriptApiMonitor
}

"NRQL type update enrichment input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsNrqlUpdateEnrichmentInput {
  "configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  configuration: [AiWorkflowsNrqlConfigurationInput!]!

  "id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID

  "name\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!
}

"Transit Gateway Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsTransitgatewayIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"An object that contains an installation event created from within the newrelic-cli.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InstallationRecipeEvent {
  "The version of the newrelic-cli that was used for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cliVersion: SemVer!

  "Whether or not the recipe has been installed and all steps have been completed.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  complete: Boolean!

  "The display name for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  displayName: String!

  "The entity Guid for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "The error returned for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  error: InstallationStatusError!

  "The host name of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hostName: String!

  "The unique ID that corresponds to an install event.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installId: ID

  "The version of the open-install-library that is being used.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installLibraryVersion: SemVer

  "The kernel architecture of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelArch: String!

  "The kernel version of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelVersion: SemVer!

  "The path to the log file on the customer's host.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  logFilePath: String!

  "Additional key:value data related to the environment where the installation occurred.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metadata: InstallationRawMetadata

  "The unique name for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "The OS of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  os: String!

  "The platform name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platform: String!

  "The platform family name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformFamily: String!

  "The platform version provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformVersion: SemVer!

  "The redirect URL created by the CLI used for redirecting to a particular entity.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  redirectUrl: String

  "The status for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  status: InstallationRecipeStatusType!

  "Whether or not the recipe being installed is a targeted install.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  targetedInstall: Boolean!

  "The path to the installation task as defined in the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  taskPath: String

  "The timestamp for when the recipe event occurred.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timestamp: EpochSeconds!

  "The number of milliseconds it took to validate the recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  validationDurationMilliseconds: EpochMilliseconds!
}

"Description of errors that may occur while attempting to delete a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDeleteTraceObserverResponseError {
  "Error message, with further detail to help resolve the issue.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  message: String!

  "Error that may occur while attempting to delete a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  type: EdgeDeleteTraceObserverResponseErrorType!
}

"Enum of monitor period types\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsMonitorPeriod {
  """10 minute monitor period"""
  EVERY_10_MINUTES

  """12 hour monitor period (720 minutes)"""
  EVERY_12_HOURS

  """15 minute monitor period"""
  EVERY_15_MINUTES

  """30 minute monitor period"""
  EVERY_30_MINUTES

  """5 minute monitor period"""
  EVERY_5_MINUTES

  """6 hour monitor period (360 minutes)"""
  EVERY_6_HOURS

  """1 day monitor period (1440 minutes)"""
  EVERY_DAY

  """1 hour monitor period (60 minutes)"""
  EVERY_HOUR

  """1 minute monitor period"""
  EVERY_MINUTE
}

"Configuration for visualization type 'viz.area'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardAreaWidgetConfiguration {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"Google Kubernetes Engine\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpKubernetesIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Type of assign error group error.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
enum ErrorsInboxAssignErrorGroupErrorType {
  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"Autogenerated return type of DeleteUser.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementDeleteUserPayload {
  "The user that was deleted\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  deletedUser: UserManagementDeletedUser
}

"Input type for RelativeFuzzyWuzzyRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeFuzzyWuzzyRatioInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Search criteria for returning specific policies.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsPoliciesSearchCriteriaInput {
  "The list of policy ids to return.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  ids: [ID!]

  "Exact name of the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "String to partially match a policy name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nameLike: String
}

"An object that represents the result after updating a data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsUpdateDataPartitionRuleResponse {
  "List of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  errors: [LogConfigurationsDataPartitionRuleMutationError]

  "The updated data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  rule: LogConfigurationsDataPartitionRule
}

"A Broken Links monitor resulting from a Broken Links monitor mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsBrokenLinksMonitor {
  "The creation time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  createdAt: EpochMilliseconds

  "The unique client identifier for the Synthetics Monitor in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The unique identifier of the monitor within the Synthetics domain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  id: ID

  "The locations the monitor runs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocations

  "The last modification time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  modifiedAt: EpochMilliseconds

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String
}

"EC2 Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudEc2Integration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  duplicateEc2Tags: Boolean

  "Specify if IP addresses of ec2 instance should be collected\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchIpAddresses: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input type for FixedContains expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedContainsInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  container: AiDecisionsIncidentObjectInput!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"An ingest key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessIngestKey implements ApiAccessKey {
  "The account this key is in.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference

  "The account attached to the ingest key. Agents using this key will report to the account the key belongs to.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  accountId: Int

  "The UNIX epoch when the key was created, in seconds.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds

  "The ID of the ingest key. This can be used to identify a key without revealing the key itself (used to update and delete).\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  id: ID

  "The type of ingest key, which dictates what types of agents can use it to report.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  ingestType: ApiAccessIngestKeyType

  "The keystring of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  key: String

  "The name of the key. Limited to 120 characters.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  name: String

  "Any notes can be attached to an key. Limited to 120 characters.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  notes: String

  "The obfuscated key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  obfuscatedKey: String

  "The type of key, indicating what New Relic APIs it can be used to access.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  type: ApiAccessKeyType
}

"Visualization configuration.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardWidgetVisualization {
  "This field can either have a known type like `viz.area` or `<nerdpack-id>.<visualization-id>` in the case of custom visualizations.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  id: String
}

"Provides the types of account statuses available\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationAccountStatus {
  """Accounts that are not in canceled status"""
  ACTIVE

  """Accounts that have been canceled"""
  CANCELED
}

"Blueprint for edge creation.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiTopologyCollectorEdgeBlueprint {
  "Whether or not from and to have any semantic meaning.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  directed: Boolean

  "The source vertex name.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fromVertexName: String!

  "The destination vertex name.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  toVertexName: String!
}

"Type of update error group state error.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
enum ErrorsInboxUpdateErrorGroupStateErrorType {
  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"An object that represent the context.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenContext {
  "Account context.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  account: Int

  "Collection guid context.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  guid: EntityGuid
}

"The status of the jobs to search for\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationCreateJobStatusInput {
  "a job status to search for\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: OrganizationOrganizationCreateJobStatusEnum

  "a set of job statuses to search for\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  in: [OrganizationOrganizationCreateJobStatusEnum!]
}

"Result status\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsResult {
  """Failure"""
  FAIL

  """Success"""
  SUCCESS
}

"The input object used to provide the configuration that defines how the status of the workload is calculated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadStatusConfigInput {
  "An input object used to represent an automatic status configuration.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  automatic: WorkloadAutomaticStatusInput

  "A list of static status configurations. You can only configure one static status for a workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  static: [WorkloadStaticStatusInput!]
}

"The information common to all endpoints.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
interface EdgeEndpointDetail {
  "Full host name that is used to connect to the endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  host: String!

  "Port that is used to connect to the endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  port: Int!
}

"EMR Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudEmrIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadRollup {
  "The rollup strategy that is applied to the group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  strategy: WorkloadRollupStrategy!

  "Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdType: WorkloadRuleThresholdType

  "Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdValue: Int
}

"An AWS Lambda Function entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InfrastructureAwsLambdaFunctionEntity implements AlertableEntity & Entity & InfrastructureIntegrationEntity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  integrationTypeCode: String

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  runtime: String

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Application of an obfuscation expression with specific a replacement method.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
type LogConfigurationsObfuscationAction {
  "Log record attributes to apply this expression to. An empty list applies the action to all the attributes.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  attributes: [String!]!

  "Obfuscation expression applied by this action.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  expression: LogConfigurationsObfuscationExpression!

  "The id of the obfuscation action.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  id: ID!

  "How to obfuscate matches for the applied expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  method: LogConfigurationsObfuscationMethod!
}

"A human-readable definition of an NRDB Event Type\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventDefinition {
  "A list of attribute definitions for this event type\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attributes: [EventAttributeDefinition]

  "A short description of this event\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  definition: String

  "The human-friendly formatted name of the event\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  label: String

  "The name of the event\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Available filtering types for group IDs\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementGroupIdInput {
  "A group ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: ID

  "An array of group IDs\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  in: [ID!]
}

"Provides all the available filters on the organization group id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationGroupIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"A data structure that contains the results of the multi account NRDB query along\nwith other capabilities that enhance those results.\n\nDirect query results are available through `results`, `totalResult` and\n`otherResult`. The query you made is accessible through `nrql`, along with\n`metadata` about the query itself.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type CrossAccountNrdbResultContainer {
  "In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  currentResults: [NrdbResult]

  "Metadata about the query and result.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metadata: NrdbMetadata

  "The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query that was executed to yield these results.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: Nrql

  "In a `FACET` query, the `otherResult` contains the aggregates representing the events _not_\ncontained in an individual `results` facet.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  otherResult: NrdbResult

  "In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  previousResults: [NrdbResult]

  "Metadata about the execution of an asynchronous NRQL query.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  queryProgress: NrdbQueryProgress

  "The raw query results exactly as they are returned from NRDB. NerdGraph provides no additional transformation.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  rawResponse: NrdbRawResults

  "The query results. This is a flat list of objects who's structure matches the query submitted.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  results: [NrdbResult]

  "In a `FACET` query, the `totalResult` contains the aggregates representing _all_ the events,\nwhether or not they are contained in an individual `results` facet.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  totalResult: NrdbResult
}

"Attributes to filter a list of nerdpack versions. Restrictions: 'tags' attribute cannot combined with other attributes.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackVersionFilter {
  "Fallback version to return if no version matches the given filters. No version is returned by default.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fallback: NerdpackVersionFilterFallback

  "Get a version with the specified tag.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName

  "Get the versions with a tag from the tag list.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [NerdpackTagName]

  "Nerdpack version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  version: SemVer
}

"Event object that contains data about the event and its attributes\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n\n"
type DataDictionaryEvent {
  "List of attributes in this event\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  attributes: [DataDictionaryAttribute!]!

  "List of places where this event comes from\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  dataSources: [DataDictionaryDataSource!]!

  "A description of the event\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  definition(
    """Specify the text format for the definition"""
    format: DataDictionaryTextFormat = PLAIN
  ): String

  "The official name of this event\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  name: String!
}

"Represents a date time window input.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input DateTimeWindowInput {
  "The end date and time expressed as an ISO8601 formatted string\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  endTime: DateTime!

  "The start date and time expressed as an ISO8601 formatted string\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  startTime: DateTime!
}

"The response for creating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelCreateResponse {
  "Error.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  error: AlertsNotificationChannelCreateError

  "Notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannel: AlertsNotificationChannelMutation
}

"Result of addWidgetsToPage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardAddWidgetsToPageResult {
  "Expected errors while processing request. No errors means successful request.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardAddWidgetsToPageError]
}

"Object for validation errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsDataValidationError {
  "Top level error details\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  details: String!

  "List of invalid fields\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  fields: [AiNotificationsFieldError!]!
}

"Firebase Database\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpFirebasedatabaseIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Input to determine which runtime the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsRuntimeInput {
  "The runtime type that the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtimeType: String!

  "The specific version of the runtime type selected\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtimeTypeVersion: SemVer!

  "The programing language that should execute the script\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  scriptLanguage: String
}

"Result of create operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardCreateResult {
  "Dashboard creation result.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  entityResult: DashboardEntityResult

  "Expected errors while processing request.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardCreateError]
}

"UI component type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsUiComponentType {
  """Button component"""
  BUTTON @deprecated(reason: "unused component type")

  """Dictionary type component"""
  DICTIONARY_WITH_MASK

  """Handlebars powered payload editor"""
  PAYLOAD

  """Select component"""
  SELECT

  """Multiline text box"""
  TEXT_AREA

  """Single line text field"""
  TEXT_FIELD

  """Toggle component"""
  TOGGLE
}

"BigQuery Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpBigqueryIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Fetch BigQuery Table metrics, disabled by default\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTableMetrics: Boolean

  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Provides the field and direction the result should be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationRoleSortInput {
  "The direction the field should be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  direction: MultiTenantAuthorizationSortDirectionEnum

  "The field which should be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  key: MultiTenantAuthorizationRoleSortEnum!
}

"The monitor input values needed to create a Cert Check monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCreateCertCheckMonitorInput {
  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The domain of the host that will have its certificate checked\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  domain: String!

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput!

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "The desired number of remaining days until the certificate expires to trigger a monitor failure\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  numberDaysToFailBeforeCertExpires: Int!

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod!

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus!

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"Results for loaded modules search. This list is paginated. Use the cursor to go through all the available results.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentAccountApplicationLoadedModulesResults {
  "If nextCursor is a String value, set it to the cursor input field while searching in order to get the next page of results.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nextCursor: String

  "Results of the search.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  results: [AgentEnvironmentAccountApplicationLoadedModules!]
}

"Incident state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
enum AiIssuesIncidentState {
  """Incident is closed"""
  CLOSED

  """Incident is created"""
  CREATED
}

"The Amazon Web Services cloud provider (GovCloud)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsGovCloudProvider implements CloudProvider {
  "The AWS Account ID\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsAccountId: String!

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud provider icon name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  icon: String!

  "The cloud provider identifier in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int!

  "The cloud provider name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "Get details of one cloud provider service.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  "Get details of all the cloud provider services available for integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  services: [CloudService!]!

  "The cloud provider short name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  slug: String!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Amazon Simple Queue Service (SQS)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudSqsIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  queuePrefixes: [String]

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Expected errors that can be returned by addWidgetsToPage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardAddWidgetsToPageError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardAddWidgetsToPageErrorType!
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type CustomerAdministrationJobs {
  "Organization Create job results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationCreateAsyncResults(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """Filter organization create job results"""
    filter: OrganizationOrganizationCreateAsyncResultFilterInput!
  ): OrganizationOrganizationCreateAsyncResultCollection
}

"\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n\n"
type MobilePushNotificationActorStitchedFields {
  "A list of mobile devices the user has registered for push notifications.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  devices: [MobilePushNotificationDevice]
}

"Which environment kinds the request will provide\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum IncidentIntelligenceEnvironmentSupportedEnvironmentKind {
  """
  Will return environments that are cross account (based on the parent-account and sub-account)
  """
  CROSS_ACCOUNT

  """
  Will return environments that are cross account (based on the parent-account and sub-account) and single accounts
  """
  SINGLE_AND_CROSS_ACCOUNT
}

"Result of a notification test\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsChannelTestResponse {
  "Extra details (if available)\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  details: String

  "Test response error\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "The evidence (url for example) of the channel being created.\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  evidence: String

  "Test result - success or failure\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  result: AiNotificationsResult!
}

"Nerdgraph account field\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsAccountStitchedFields {
  "Query that fetches the script of a specific scripted monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  script(
    """Unique identifier for monitor that that runs the script to be fetched"""
    monitorGuid: EntityGuid!
  ): SyntheticsMonitorScriptQueryResponse

  "visiblity(flag:Synthetics/setGraphqlCustomerVisible) Query that fetches the steps used by the specified Step Monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  steps(
    """
    Unique identifier for monitor that holds the script steps that are to be fetched
    """
    monitorGuid: EntityGuid!
  ): [SyntheticsStep!]
}

"Available keys for sorting groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantIdentitySortKeyEnum {
  """Authentication domain ID"""
  AUTHENTICATION_DOMAIN_ID

  """Group ID"""
  ID

  """Group name"""
  NAME
}

"The user has access to more than one environment from the context of this account (only one is allowed)\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable {
  "The multiple accounts the user has access to in this context\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountIds: [Int]
}

"Applied rules\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementAppliedRules {
  "The account id for namespace rule\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  accountId: Int

  "Length of time data will be retained (in days)\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  retentionInDays: Int
}

"Information about the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogNerdpack {
  "The unique identifier for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the Nerdpack that is available in the New Relic One Catalog\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogNerdpackMetadata

  "Indicates the visibility of the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  visibility: Nr1CatalogNerdpackVisibility!
}

"Result options for account consent marking\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum IncidentIntelligenceEnvironmentDissentAccountsResult {
  """
  There are no accounts authorized by the user that are consented for Incident Intelligence usage
  """
  CONSENTED_ACCOUNTS_NOT_FOUND

  """Accounts were dissented"""
  DISSENTED

  """The user is not authorized to dissent due to a missing capability"""
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementAccountStitchedFields {
  "List all customizable event namespaces\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  customizableRetention: DataManagementCustomizableRetention

  "Get the event retention policies for an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  eventRetentionPolicies: [DataManagementRenderedRetention]

  "Get the event retention rule for a namespace on an account, if it exists\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  eventRetentionRule(
    """Namespace of the requested event retention rule"""
    namespace: String!
  ): DataManagementRule

  "List all the event retention rules for an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  eventRetentionRules: [DataManagementRule]

  "Query for all feature settings\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  featureSettings: [DataManagementFeatureSetting]

  "Query for all limits\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  limits: [DataManagementAccountLimit]

  "Audit of retention values per namespace for an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  retentionAudit: [DataManagementRetentionValues]

  "List of all namespaces\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  retentions: [DataManagementRetention]
}

"\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
type StreamingExportAccountStitchedFields {
  "Get the information for a specific streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingRule(
    """The streaming rule you want details about"""
    id: ID!
  ): StreamingExportRule

  "List the streaming rules for the given account\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingRules: [StreamingExportRule]
}

"Span attribute key operator types\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeSpanAttributeKeyOperator {
  """Matches on an exact value"""
  EQUALS

  """
  Matches on a value that starts-with and/or ends-with the provided value
  """
  LIKE
}

"\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesAccountStitchedFields {
  "List the drop rules for the given account\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  list: NrqlDropRulesListDropRulesResult
}

"Validation and data handling rules to be applied to deployment input data.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flags:`Markers/deployment_markers_api` OR `Markers/v2_api`)\n\n\n"
input ChangeTrackingDataHandlingRules {
  "Flags for validation, for example, ‘FAIL_ON_FIELD_LENGTH’.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flags:`Markers/deployment_markers_api` OR `Markers/v2_api`)\n\n"
  validationFlags: [ChangeTrackingValidationFlag!]
}

"An External entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ExternalEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdStorageAccountScope {
  "The collection to be retrieved.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  collection(
    """The collection from which documents will be retrieved."""
    collection: String!
  ): [NerdStorageCollectionMember]

  "A Nerdpack document is formed by an identifier (called documentId) and a set of data associated with it.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  document(
    """The collection that the document belongs to."""
    collection: String!

    """The documentId to be retrieved."""
    documentId: String!
  ): NerdStorageDocument
}

"Information about an item in a Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogNerdpackItem {
  "The unique identifier for the Nerdpack item.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the Nerdpack item\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogNerdpackItemMetadata
}

"The location(s) from which the monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsLocations {
  "Existing private location(s) in which the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  private: [String]

  "Publicly available location(s) in which the monitor will run. For formatting tips, see [this link](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-synthetics-tutorial/#location-field)\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  public: [String]
}

"The monitor values that can be updated on a Simple Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsUpdateSimpleBrowserMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsSimpleBrowserMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntimeInput

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String
}

"The type of Infrastructure Integration\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntityInfrastructureIntegrationType {
  """APACHE_SERVER integration"""
  APACHE_SERVER

  """AWSELASTICSEARCHNODE integration"""
  AWSELASTICSEARCHNODE

  """AWS_ALB integration"""
  AWS_ALB

  """AWS_ALB_LISTENER integration"""
  AWS_ALB_LISTENER

  """AWS_ALB_LISTENER_RULE integration"""
  AWS_ALB_LISTENER_RULE

  """AWS_ALB_TARGET_GROUP integration"""
  AWS_ALB_TARGET_GROUP

  """AWS_API_GATEWAY_API integration"""
  AWS_API_GATEWAY_API

  """AWS_API_GATEWAY_RESOURCE integration"""
  AWS_API_GATEWAY_RESOURCE

  """AWS_API_GATEWAY_RESOURCE_WITH_METRICS integration"""
  AWS_API_GATEWAY_RESOURCE_WITH_METRICS

  """AWS_API_GATEWAY_STAGE integration"""
  AWS_API_GATEWAY_STAGE

  """AWS_AUTO_SCALING_GROUP integration"""
  AWS_AUTO_SCALING_GROUP

  """AWS_AUTO_SCALING_INSTANCE integration"""
  AWS_AUTO_SCALING_INSTANCE

  """AWS_AUTO_SCALING_LAUNCH_CONFIGURATION integration"""
  AWS_AUTO_SCALING_LAUNCH_CONFIGURATION

  """AWS_AUTO_SCALING_POLICY integration"""
  AWS_AUTO_SCALING_POLICY

  """AWS_AUTO_SCALING_REGION_LIMIT integration"""
  AWS_AUTO_SCALING_REGION_LIMIT

  """AWS_BILLING_ACCOUNT_COST integration"""
  AWS_BILLING_ACCOUNT_COST

  """AWS_BILLING_ACCOUNT_SERVICE_COST integration"""
  AWS_BILLING_ACCOUNT_SERVICE_COST

  """AWS_BILLING_BUDGET integration"""
  AWS_BILLING_BUDGET

  """AWS_BILLING_SERVICE_COST integration"""
  AWS_BILLING_SERVICE_COST

  """AWS_CLOUD_FRONT_DISTRIBUTION integration"""
  AWS_CLOUD_FRONT_DISTRIBUTION

  """AWS_CLOUD_TRAIL integration"""
  AWS_CLOUD_TRAIL

  """AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX integration"""
  AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX

  """AWS_DYNAMO_DB_REGION integration"""
  AWS_DYNAMO_DB_REGION

  """AWS_DYNAMO_DB_TABLE integration"""
  AWS_DYNAMO_DB_TABLE

  """AWS_EBS_VOLUME integration"""
  AWS_EBS_VOLUME

  """AWS_ECS_CLUSTER integration"""
  AWS_ECS_CLUSTER

  """AWS_ECS_SERVICE integration"""
  AWS_ECS_SERVICE

  """AWS_EFS_FILE_SYSTEM integration"""
  AWS_EFS_FILE_SYSTEM

  """AWS_ELASTICSEARCH_CLUSTER integration"""
  AWS_ELASTICSEARCH_CLUSTER

  """AWS_ELASTICSEARCH_INSTANCE integration"""
  AWS_ELASTICSEARCH_INSTANCE

  """AWS_ELASTIC_BEANSTALK_ENVIRONMENT integration"""
  AWS_ELASTIC_BEANSTALK_ENVIRONMENT

  """AWS_ELASTIC_BEANSTALK_INSTANCE integration"""
  AWS_ELASTIC_BEANSTALK_INSTANCE

  """AWS_ELASTIC_MAP_REDUCE_CLUSTER integration"""
  AWS_ELASTIC_MAP_REDUCE_CLUSTER

  """AWS_ELASTIC_MAP_REDUCE_INSTANCE integration"""
  AWS_ELASTIC_MAP_REDUCE_INSTANCE

  """AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET integration"""
  AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET

  """AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP integration"""
  AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP

  """AWS_ELASTI_CACHE_MEMCACHED_CLUSTER integration"""
  AWS_ELASTI_CACHE_MEMCACHED_CLUSTER

  """AWS_ELASTI_CACHE_MEMCACHED_NODE integration"""
  AWS_ELASTI_CACHE_MEMCACHED_NODE

  """AWS_ELASTI_CACHE_REDIS_CLUSTER integration"""
  AWS_ELASTI_CACHE_REDIS_CLUSTER

  """AWS_ELASTI_CACHE_REDIS_NODE integration"""
  AWS_ELASTI_CACHE_REDIS_NODE

  """AWS_ELB integration"""
  AWS_ELB

  """AWS_HEALTH_ISSUE integration"""
  AWS_HEALTH_ISSUE

  """AWS_HEALTH_NOTIFICATION integration"""
  AWS_HEALTH_NOTIFICATION

  """AWS_HEALTH_SCHEDULED_CHANGE integration"""
  AWS_HEALTH_SCHEDULED_CHANGE

  """AWS_HEALTH_UNKNOWN integration"""
  AWS_HEALTH_UNKNOWN

  """AWS_IAM integration"""
  AWS_IAM

  """AWS_IAM_GROUP integration"""
  AWS_IAM_GROUP

  """AWS_IAM_OPEN_ID_PROVIDER integration"""
  AWS_IAM_OPEN_ID_PROVIDER

  """AWS_IAM_POLICY integration"""
  AWS_IAM_POLICY

  """AWS_IAM_ROLE integration"""
  AWS_IAM_ROLE

  """AWS_IAM_SAML_PROVIDER integration"""
  AWS_IAM_SAML_PROVIDER

  """AWS_IAM_SERVER_CERTIFICATE integration"""
  AWS_IAM_SERVER_CERTIFICATE

  """AWS_IAM_USER integration"""
  AWS_IAM_USER

  """AWS_IAM_VIRTUAL_MFA_DEVICE integration"""
  AWS_IAM_VIRTUAL_MFA_DEVICE

  """AWS_IOT_BROKER integration"""
  AWS_IOT_BROKER

  """AWS_IOT_RULE integration"""
  AWS_IOT_RULE

  """AWS_IOT_RULE_ACTION integration"""
  AWS_IOT_RULE_ACTION

  """AWS_KINESIS_DELIVERY_STREAM integration"""
  AWS_KINESIS_DELIVERY_STREAM

  """AWS_KINESIS_STREAM integration"""
  AWS_KINESIS_STREAM

  """AWS_KINESIS_STREAM_SHARD integration"""
  AWS_KINESIS_STREAM_SHARD

  """AWS_LAMBDA_AGENT_TRANSACTION integration"""
  AWS_LAMBDA_AGENT_TRANSACTION

  """AWS_LAMBDA_AGENT_TRANSACTION_ERROR integration"""
  AWS_LAMBDA_AGENT_TRANSACTION_ERROR

  """AWS_LAMBDA_EDGE_FUNCTION integration"""
  AWS_LAMBDA_EDGE_FUNCTION

  """AWS_LAMBDA_EVENT_SOURCE_MAPPING integration"""
  AWS_LAMBDA_EVENT_SOURCE_MAPPING

  """AWS_LAMBDA_FUNCTION integration"""
  AWS_LAMBDA_FUNCTION

  """AWS_LAMBDA_FUNCTION_ALIAS integration"""
  AWS_LAMBDA_FUNCTION_ALIAS

  """AWS_LAMBDA_OPERATION integration"""
  AWS_LAMBDA_OPERATION

  """AWS_LAMBDA_REGION integration"""
  AWS_LAMBDA_REGION

  """AWS_LAMBDA_SPAN integration"""
  AWS_LAMBDA_SPAN

  """AWS_LAMBDA_TRACE integration"""
  AWS_LAMBDA_TRACE

  """AWS_RDS_DB_CLUSTER integration"""
  AWS_RDS_DB_CLUSTER

  """AWS_RDS_DB_INSTANCE integration"""
  AWS_RDS_DB_INSTANCE

  """AWS_REDSHIFT_CLUSTER integration"""
  AWS_REDSHIFT_CLUSTER

  """AWS_REDSHIFT_NODE integration"""
  AWS_REDSHIFT_NODE

  """AWS_ROUTE53_HEALTH_CHECK integration"""
  AWS_ROUTE53_HEALTH_CHECK

  """AWS_ROUTE53_ZONE integration"""
  AWS_ROUTE53_ZONE

  """AWS_ROUTE53_ZONE_RECORD_SET integration"""
  AWS_ROUTE53_ZONE_RECORD_SET

  """AWS_S3_BUCKET integration"""
  AWS_S3_BUCKET

  """AWS_S3_BUCKET_REQUESTS integration"""
  AWS_S3_BUCKET_REQUESTS

  """AWS_SES_CONFIGURATION_SET integration"""
  AWS_SES_CONFIGURATION_SET

  """AWS_SES_EVENT_DESTINATION integration"""
  AWS_SES_EVENT_DESTINATION

  """AWS_SES_RECEIPT_FILTER integration"""
  AWS_SES_RECEIPT_FILTER

  """AWS_SES_RECEIPT_RULE integration"""
  AWS_SES_RECEIPT_RULE

  """AWS_SES_RECEIPT_RULE_SET integration"""
  AWS_SES_RECEIPT_RULE_SET

  """AWS_SES_REGION integration"""
  AWS_SES_REGION

  """AWS_SNS_SUBSCRIPTION integration"""
  AWS_SNS_SUBSCRIPTION

  """AWS_SNS_TOPIC integration"""
  AWS_SNS_TOPIC

  """AWS_SQS_QUEUE integration"""
  AWS_SQS_QUEUE

  """AWS_VPC integration"""
  AWS_VPC

  """AWS_VPC_ENDPOINT integration"""
  AWS_VPC_ENDPOINT

  """AWS_VPC_INTERNET_GATEWAY integration"""
  AWS_VPC_INTERNET_GATEWAY

  """AWS_VPC_NAT_GATEWAY integration"""
  AWS_VPC_NAT_GATEWAY

  """AWS_VPC_NETWORK_ACL integration"""
  AWS_VPC_NETWORK_ACL

  """AWS_VPC_NETWORK_INTERFACE integration"""
  AWS_VPC_NETWORK_INTERFACE

  """AWS_VPC_PEERING_CONNECTION integration"""
  AWS_VPC_PEERING_CONNECTION

  """AWS_VPC_ROUTE_TABLE integration"""
  AWS_VPC_ROUTE_TABLE

  """AWS_VPC_SECURITY_GROUP integration"""
  AWS_VPC_SECURITY_GROUP

  """AWS_VPC_SUBNET integration"""
  AWS_VPC_SUBNET

  """AWS_VPC_VPN_CONNECTION integration"""
  AWS_VPC_VPN_CONNECTION

  """AWS_VPC_VPN_TUNNEL integration"""
  AWS_VPC_VPN_TUNNEL

  """AZURE_APP_SERVICE_HOST_NAME integration"""
  AZURE_APP_SERVICE_HOST_NAME

  """AZURE_APP_SERVICE_WEB_APP integration"""
  AZURE_APP_SERVICE_WEB_APP

  """AZURE_COSMOS_DB_ACCOUNT integration"""
  AZURE_COSMOS_DB_ACCOUNT

  """AZURE_FUNCTIONS_APP integration"""
  AZURE_FUNCTIONS_APP

  """AZURE_LOAD_BALANCER integration"""
  AZURE_LOAD_BALANCER

  """AZURE_LOAD_BALANCER_BACKEND integration"""
  AZURE_LOAD_BALANCER_BACKEND

  """AZURE_LOAD_BALANCER_FRONTEND_IP integration"""
  AZURE_LOAD_BALANCER_FRONTEND_IP

  """AZURE_LOAD_BALANCER_INBOUND_NAT_POOL integration"""
  AZURE_LOAD_BALANCER_INBOUND_NAT_POOL

  """AZURE_LOAD_BALANCER_INBOUND_NAT_RULE integration"""
  AZURE_LOAD_BALANCER_INBOUND_NAT_RULE

  """AZURE_LOAD_BALANCER_PROBE integration"""
  AZURE_LOAD_BALANCER_PROBE

  """AZURE_LOAD_BALANCER_RULE integration"""
  AZURE_LOAD_BALANCER_RULE

  """AZURE_MARIADB_SERVER integration"""
  AZURE_MARIADB_SERVER

  """AZURE_MYSQL_SERVER integration"""
  AZURE_MYSQL_SERVER

  """AZURE_POSTGRESQL_SERVER integration"""
  AZURE_POSTGRESQL_SERVER

  """AZURE_REDIS_CACHE integration"""
  AZURE_REDIS_CACHE

  """AZURE_REDIS_CACHE_SHARD integration"""
  AZURE_REDIS_CACHE_SHARD

  """AZURE_SERVICE_BUS_NAMESPACE integration"""
  AZURE_SERVICE_BUS_NAMESPACE

  """AZURE_SERVICE_BUS_QUEUE integration"""
  AZURE_SERVICE_BUS_QUEUE

  """AZURE_SERVICE_BUS_SUBSCRIPTION integration"""
  AZURE_SERVICE_BUS_SUBSCRIPTION

  """AZURE_SERVICE_BUS_TOPIC integration"""
  AZURE_SERVICE_BUS_TOPIC

  """AZURE_SQL_DATABASE integration"""
  AZURE_SQL_DATABASE

  """AZURE_SQL_ELASTIC_POOL integration"""
  AZURE_SQL_ELASTIC_POOL

  """AZURE_SQL_FIREWALL integration"""
  AZURE_SQL_FIREWALL

  """AZURE_SQL_REPLICATION_LINK integration"""
  AZURE_SQL_REPLICATION_LINK

  """AZURE_SQL_RESTORE_POINT integration"""
  AZURE_SQL_RESTORE_POINT

  """AZURE_SQL_SERVER integration"""
  AZURE_SQL_SERVER

  """AZURE_STORAGE_ACCOUNT integration"""
  AZURE_STORAGE_ACCOUNT

  """AZURE_VIRTUAL_NETWORKS integration"""
  AZURE_VIRTUAL_NETWORKS

  """AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION integration"""
  AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION

  """AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE integration"""
  AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE

  """AZURE_VIRTUAL_NETWORKS_PEERING integration"""
  AZURE_VIRTUAL_NETWORKS_PEERING

  """AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS integration"""
  AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS

  """AZURE_VIRTUAL_NETWORKS_ROUTE integration"""
  AZURE_VIRTUAL_NETWORKS_ROUTE

  """AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE integration"""
  AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE

  """AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP integration"""
  AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP

  """AZURE_VIRTUAL_NETWORKS_SECURITY_RULE integration"""
  AZURE_VIRTUAL_NETWORKS_SECURITY_RULE

  """AZURE_VIRTUAL_NETWORKS_SUBNET integration"""
  AZURE_VIRTUAL_NETWORKS_SUBNET

  """CASSANDRA_NODE integration"""
  CASSANDRA_NODE

  """CONSUL_AGENT integration"""
  CONSUL_AGENT

  """COUCHBASE_BUCKET integration"""
  COUCHBASE_BUCKET

  """COUCHBASE_CLUSTER integration"""
  COUCHBASE_CLUSTER

  """COUCHBASE_NODE integration"""
  COUCHBASE_NODE

  """COUCHBASE_QUERY_ENGINE integration"""
  COUCHBASE_QUERY_ENGINE

  """ELASTICSEARCH_NODE integration"""
  ELASTICSEARCH_NODE

  """F5_NODE integration"""
  F5_NODE

  """F5_POOL integration"""
  F5_POOL

  """F5_POOL_MEMBER integration"""
  F5_POOL_MEMBER

  """F5_SYSTEM integration"""
  F5_SYSTEM

  """F5_VIRTUAL_SERVER integration"""
  F5_VIRTUAL_SERVER

  """GCP_APP_ENGINE_SERVICE integration"""
  GCP_APP_ENGINE_SERVICE

  """GCP_BIG_QUERY_DATA_SET integration"""
  GCP_BIG_QUERY_DATA_SET

  """GCP_BIG_QUERY_PROJECT integration"""
  GCP_BIG_QUERY_PROJECT

  """GCP_BIG_QUERY_TABLE integration"""
  GCP_BIG_QUERY_TABLE

  """GCP_CLOUD_FUNCTION integration"""
  GCP_CLOUD_FUNCTION

  """GCP_CLOUD_SQL integration"""
  GCP_CLOUD_SQL

  """GCP_CLOUD_TASKS_QUEUE integration"""
  GCP_CLOUD_TASKS_QUEUE

  """GCP_HTTP_LOAD_BALANCER integration"""
  GCP_HTTP_LOAD_BALANCER

  """GCP_INTERNAL_LOAD_BALANCER integration"""
  GCP_INTERNAL_LOAD_BALANCER

  """GCP_KUBERNETES_CONTAINER integration"""
  GCP_KUBERNETES_CONTAINER

  """GCP_KUBERNETES_NODE integration"""
  GCP_KUBERNETES_NODE

  """GCP_KUBERNETES_POD integration"""
  GCP_KUBERNETES_POD

  """GCP_PUB_SUB_SUBSCRIPTION integration"""
  GCP_PUB_SUB_SUBSCRIPTION

  """GCP_PUB_SUB_TOPIC integration"""
  GCP_PUB_SUB_TOPIC

  """GCP_SPANNER_DATABASE integration"""
  GCP_SPANNER_DATABASE

  """GCP_SPANNER_INSTANCE integration"""
  GCP_SPANNER_INSTANCE

  """GCP_STORAGE_BUCKET integration"""
  GCP_STORAGE_BUCKET

  """GCP_TCP_SSL_PROXY_LOAD_BALANCER integration"""
  GCP_TCP_SSL_PROXY_LOAD_BALANCER

  """GCP_VIRTUAL_MACHINE_DISK integration"""
  GCP_VIRTUAL_MACHINE_DISK

  """KAFKA_BROKER integration"""
  KAFKA_BROKER

  """KAFKA_TOPIC integration"""
  KAFKA_TOPIC

  """KUBERNETES_CLUSTER integration"""
  KUBERNETES_CLUSTER

  """MEMCACHED_INSTANCE integration"""
  MEMCACHED_INSTANCE

  """MSSQL_INSTANCE integration"""
  MSSQL_INSTANCE

  """MYSQL_NODE integration"""
  MYSQL_NODE

  """NA integration"""
  NA

  """NGINX_SERVER integration"""
  NGINX_SERVER

  """ORACLE_DB_INSTANCE integration"""
  ORACLE_DB_INSTANCE

  """POSTGRE_SQL_INSTANCE integration"""
  POSTGRE_SQL_INSTANCE

  """RABBIT_MQ_CLUSTER integration"""
  RABBIT_MQ_CLUSTER

  """RABBIT_MQ_EXCHANGE integration"""
  RABBIT_MQ_EXCHANGE

  """RABBIT_MQ_NODE integration"""
  RABBIT_MQ_NODE

  """RABBIT_MQ_QUEUE integration"""
  RABBIT_MQ_QUEUE

  """REDIS_INSTANCE integration"""
  REDIS_INSTANCE

  """VARNISH_INSTANCE integration"""
  VARNISH_INSTANCE
}

"The result of updating a key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type KeyTransactionUpdateResult {
  "The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apdexTarget: Float

  "The application associated with this key transaction\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  application: KeyTransactionApplication!

  "The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  browserApdexTarget: Float

  "The name of the key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Input type for CategoricalClustering expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsCategoricalClusteringInput {
  "Threshold for comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  threshold: Float!
}

"Possible options to sort search results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogSearchSortOption {
  """Sort the search results alphabetically"""
  ALPHABETICAL

  """Sort the search results by most popular"""
  POPULARITY

  """Sort the search results by the most relevant to the search query"""
  RELEVANCE

  """Sort the search results alphabetically in reverse order"""
  REVERSE_ALPHABETICAL
}

"Google App Engine\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpAppengineIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Input type for FixedHammingDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedHammingDistanceInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Int!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"An attribute that was extracted from a Grok test.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
type LogConfigurationsGrokTestExtractedAttribute {
  "The attribute name.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  name: String!

  "A string representation of the extracted value (which might not be a String).\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  value: String!
}

"Description of errors that may occur while attempting to update a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeUpdateTraceObserverResponseError {
  "Error message, with further detail to help resolve the issue.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  message: String!

  "Error that may occur while attempting to create a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  type: EdgeUpdateTraceObserverResponseErrorType!
}

"An entity tag.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input EntitySearchQueryBuilderTag {
  "The tag key. You can search using a `tags.` prefix or omit it and receive the same results.\n\nExamples: `tags.environment`, `environment`.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  key: String!

  "The tag value.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"A filter for customer contracts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationCustomerContractFilterInput {
  "The id of the customer\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customerId: OrganizationContractCustomerIdInputFilter

  "The id of the organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationId: OrganizationContractOrganizationIdInputFilter
}

"The configuration that defines how the status of the workload is calculated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadStatusConfig {
  "An automatic status configuration.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  automatic: WorkloadAutomaticStatus

  "A list of static status configurations.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  static: [WorkloadStaticStatus!]
}

"The resulting NRQL queries that help consume the metrics of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelObjectiveResultQueries {
  "The NRQL query that measures the attainment of the SLO target.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attainment: ServiceLevelResultQuery!
}

"NRQL condition terms determine when a violation will be opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlConditionTerms {
  "Operator used to compare against the threshold.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  operator: AlertsNrqlConditionTermsOperator!

  "Priority determines how much attention your incidents need. Your workflow settings then tell us when and where to send notifications for different priorities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  priority: AlertsNrqlConditionPriority!

  "Value that triggers a violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  threshold: Float!

  "Duration, in seconds, that the condition must violate the threshold before creating a violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  thresholdDuration: Int!

  "How many data points must be in violation for the specified threshold duration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  thresholdOccurrences: AlertsNrqlConditionThresholdOccurrences!
}

"Express Route\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureExpressrouteIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Metadata associated with the alert condition in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartAlertConditionMetadata implements Nr1CatalogQuickstartComponentMetadata {
  "A short form description for the alert condition\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the alert condition\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "Determines the type of alert condition that will be created\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  type: Nr1CatalogQuickstartAlertConditionType!
}

"Incidents data\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesIncidentData {
  "Incidents\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidents: [AiIssuesIIncident!]!

  "Cursor to get the next batch of results\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  nextCursor: String
}

"Subscription result.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackSubscribeResult {
  "Nerdpack to be subscribed to.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpack: NerdpackData!

  "Subscription result per account.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  resultsPerAccount: [NerdpackMutationResultPerAccount]

  "Tag associated with the version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName
}

"Mutation result for the given acccount.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackMutationResultPerAccount {
  "Given account ID.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "Error type if mutation failed.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reason: NerdpackMutationErrorType

  "Mutation result for the given acccount.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: NerdpackMutationResult!
}

"Input for creating an obfuscation rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
input LogConfigurationsCreateObfuscationRuleInput {
  "Actions for the rule. The actions will be applied in the order specified by this list.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  actions: [LogConfigurationsCreateObfuscationActionInput!]!

  "Description of rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  description: String

  "Whether the rule should be applied or not to incoming data.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  enabled: Boolean!

  "NRQL for determining whether a given log record should have obfuscation actions applied.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  filter: Nrql!

  "Name of rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  name: String!
}

"The scope associated to the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type MultiTenantAuthorizationGrantScope {
  "The id of the resource in scope\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: String!

  "The type of the resource in scope\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  type: MultiTenantAuthorizationGrantScopeEnum!
}

"Issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesIssue {
  "account\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`III/api_access`)\n\n"
  account: AccountReference

  "A list of account Ids. As an issue could be correlated with others from other accounts.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  accountIds: [Int!]!

  "The time the issue was acknowledged\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  acknowledgedAt: EpochMilliseconds

  "The user that acknowledged the issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  acknowledgedBy: String

  "The time the issue was activated\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  activatedAt: EpochMilliseconds

  "The time the issue was closed\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  closedAt: EpochMilliseconds

  "The user that manually closed the issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  closedBy: String

  "A list of condition ids associated with this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  conditionFamilyId: [Int!]

  "A list of condition text descriptions associated with this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  conditionName: [String!]

  "A list of New Relic products connected to the conditions associated with this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  conditionProduct: [String!]

  "A list of correlation rule descriptions applied to correlate this issue to other issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  correlationRuleDescriptions: [String!]

  "A list of correlation rule ids applied to correlate this issue to other issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  correlationRuleIds: [Int!]

  "A list of correlation rule names applied to correlate this issue to other issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  correlationRuleNames: [String!]

  "The time the issue was created\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  createdAt: EpochMilliseconds!

  "A list of ML data associated with this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  dataMlModules: [AiIssuesKeyValues!]

  "A list of urls into New Relic product page, scoped to this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  deepLinkUrl: [String!]

  "A list of incident descriptions\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  description: [String!]!

  "A list of unique entity identifiers\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: [EntityGuid!]

  "A list of entity names\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityNames: [String!]

  "A list of entity types\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: [String!]

  "See our documentation to learn about environments\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  environmentId: Int! @deprecated(reason: "Use account")

  "An issue event that could be INCIDENT_ADDED, USER_ACTION, INCIDENT_CLOSED,...\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  eventType: String!

  "A list of incident IDs in this issue. Notice, in some cases there may be thousands of incidents in an issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentIds: [String!]

  "True means that other issues were correlated to this one\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  isCorrelated: Boolean!

  "See our documentation to learn about idle issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  isIdle: Boolean!

  "Issue identifier\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  issueId: ID!

  "The reason this issue was merged\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  mergeReason: String

  "The issue muting state (supress notifications)\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  mutingState: AiIssuesIssueMutingState

  "A list of origins of the incidents (violations, anomalies, external)\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  origins: [String!]!

  "The merge id if this issue is part of the merge or null otherwise\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  parentMergeId: String

  "A list of policy ids associated with this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  policyIds: [Int!]

  "A list of policy names associated with this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  policyName: [String!]

  "The issue priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: AiIssuesPriority!

  "A list of sources of the incidents (newrelic or external)\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  sources: [String!]!

  "The issue state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  state: AiIssuesIssueState!

  "A list of underlying incident titles\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  title: [String!]!

  "The count of underlying incidents\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  totalIncidents: Int!

  "The time the issue was unacknowledged\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  unAcknowledgedAt: EpochMilliseconds

  "The user that unacknowledged the issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  unAcknowledgedBy: String

  "The time the issue was last updated\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  updatedAt: EpochMilliseconds!

  "A list of wildcard expressions used for wildcard metrics associated with this issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  wildcard: [String!]
}

"Information about an install plan component in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartInstallPlan implements Nr1CatalogQuickstartComponent {
  "Metadata associated with the install plan\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogQuickstartInstallPlanMetadata! @deprecated(reason: "This field is no longer supported. Please use installer instead.")
}

"Summary statistics about the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type BrowserApplicationSummaryData {
  "The number of AJAX requests per minute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ajaxRequestThroughput: Float

  "The average AJAX response time in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ajaxResponseTimeAverage: Seconds

  "The percentage of page views with a JS error.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  jsErrorRate: Float

  "The number of page loads per minute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pageLoadThroughput: Float

  "The average page view time in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pageLoadTimeAverage: Float

  "The median page view time in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pageLoadTimeMedian: Float

  "The average SPA response time in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  spaResponseTimeAverage: Seconds

  "The median SPA response time in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  spaResponseTimeMedian: Seconds
}

"The `AccountOutline` object provides basic data about an account.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AccountOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: Int

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "Returns event types that are currently reporting in the account.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reportingEventTypes(
    """Filter results to a chosen set of event types."""
    filter: [String]
    timeWindow: TimeWindowInput
  ): [String]
}

"Attributes for creating a shared account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationCreateSharedAccountInput {
  "The id of the account to be shared\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The id of the limiting role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  limitingRoleId: Int!

  "The name of the shared account\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String

  "The id of the target organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  targetOrganizationId: ID!
}

"WAFV2\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsWafv2IntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"An input that represents a golden tag\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
input EntityGoldenTagInput {
  "The golden tag key.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  key: String!
}

"The monitor input values needed to create a Simple (ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCreateSimpleMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsSimpleMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput!

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod!

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus!

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String!
}

"An \"authentication domain\" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementAuthenticationDomain {
  "container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter groups"""
    filter: UserManagementGroupFilterInput

    """
    a list of ids to filter returned objects by
    
    (NOTICE: setting both this argument and the filter argument to filter by ID is not allowed)
    
    (NOTICE: this argument will be deprecated at a later date, so please use the filter argument to return users by ID)
    """
    id: [ID!]

    """Sort groups"""
    sort: [UserManagementGroupSortInput!] = []
  ): UserManagementGroups

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!

  "the method used to provision users in this authentication domain\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  provisioningType: String!

  "container for users enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter users"""
    filter: UserManagementUserFilterInput

    """
    a list of ids to filter returned objects by
    
    (NOTICE: setting both this argument and the filter argument to filter by ID is not allowed)
    
    (NOTICE: this argument will be deprecated at a later date, so please use the filter argument to return users by ID)
    """
    id: [ID!]
  ): UserManagementUsers
}

"Enrichment configuration object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
union AiWorkflowsConfiguration = AiWorkflowsNrqlConfiguration

"The data access level and ID for the selected scope.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdStorageScopeInput {
  "The ID for the selected scope.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: String!

  "The NerdStorage data access level.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: NerdStorageScope!
}

"Provides the operations available on the name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationNameInput {
  "Part of an authentication domain name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  contains: String

  "An authentication domain name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Azure SQL Database\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureSqlIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"General Properties related to browser applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsBrowserProperties {
  "The configuration required to run the npm version of the JS agent. This is the \"pure\" JSON configuration block without surrounding HTML <script> tags.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  jsConfig: AgentApplicationSettingsRawJsConfiguration

  "The configuration block required to run the npm version of the JS agent. This includes the HTML <script> tags.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  jsConfigScript: String

  "The snippet of JavaScript used to copy/paste into your JavaScript app if you aren’t using an auto-instrumentating agent on the backend.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  jsLoaderScript: String
}

"The input object used to represent a rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadRollupInput {
  "The rollup strategy that is applied to a group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  strategy: WorkloadRollupStrategy!

  "Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdType: WorkloadRuleThresholdType

  "Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  thresholdValue: Int
}

"The events that define the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelEvents {
  "The New Relic account to fetch the events from.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference

  "The definition of bad events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  badEvents: ServiceLevelEventsQuery

  "The definition of good events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  goodEvents: ServiceLevelEventsQuery

  "The definition of valid events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  validEvents: ServiceLevelEventsQuery!
}

"Route53 Resolver\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsRoute53resolverIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The tags with metadata of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityTagWithMetadata {
  "The tag's key.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  key: String

  "A list of tag values with metadata information.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  values: [EntityTagValueWithMetadata]
}

"Provides all the available filters on the role type\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationRoleTypeInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: MultiTenantAuthorizationRoleTypeEnum!
}

"This scalar represents a NerdStorage document.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar NerdStorageDocument

"Metadata associated with the documentation component in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartDocumentationMetadata implements Nr1CatalogQuickstartComponentMetadata {
  "A short form description for the documentation component.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the documentation component.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "The documentation URL\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"A query suggestion based on analysis of events within a specific anomalous time\nrange vs. nearby events outside of that time range.\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SuggestedAnomalyBasedNrqlQuery implements SuggestedNrqlQuery {
  "Information about the anomaly upon which this suggestion is based\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  anomaly: SuggestedNrqlQueryAnomaly!

  "The NRQL string to run for the suggested query\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: String!

  "A human-readable title describing what the query shows\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  title: String!
}

"User action for issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesIssueUserActionResult {
  "Account id\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  accountId: Int!

  "User action\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  action: AiIssuesIssueUserAction!

  "Issue id\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  issueId: ID!
}

"A Cloud Provider service available for monitoring.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudService {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service dashboard templates.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  dashboards: [CloudDashboardTemplate!]!

  "The cloud service icon name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  icon: String!

  "The cloud service identifier in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int!

  "Shows if the cloud service is enabled for integrating.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  isEnabled: Boolean!

  "The cloud service name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "The cloud provider.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  provider: CloudProvider!

  "The cloud service unique short name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  slug: String!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input data that maps hosts to alias names for grouping and identification purposes.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsNetworkAliasesInput {
  "An alternative name that can be used to reference the hostnames.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  alias: String!

  "A list of hostnames to associate with an alias.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  hosts: [String!]!
}

"Response for error group state mutation.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxUpdateErrorGroupStateResponse {
  "List of errors encountered.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errors: [ErrorsInboxUpdateErrorGroupStateError!] @deprecated

  "Updated state value.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  state: ErrorsInboxErrorGroupState
}

"Expected error types that can be returned by updatePage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardUpdatePageErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT

  """Page not found in the system."""
  PAGE_NOT_FOUND
}

"Provides the available values of possible fields that can be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationSortKeyEnum {
  """Authentication domain id"""
  ID

  """Authentication domain name"""
  NAME
}

"Sort order direction\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
enum ErrorsInboxDirection {
  """Descending sort order"""
  DESC
}

"Configuration for visualization type 'viz.markdown'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardMarkdownWidgetConfiguration {
  "Markdown content of the widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  text: String!
}

"AWS Lambda\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudLambdaIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Bigtable Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpBigtableIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Information needed to create a repository entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ReferenceEntityCreateRepositoryInput {
  "The account id this repository will live under.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The name of the repository.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "The url of the repository.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  url: String!
}

"The response for dissociating notification channels from a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelsRemoveFromPolicyResponse {
  "Errors.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  errors: [AlertsNotificationChannelsRemoveFromPolicyError!]!

  "Notification channels.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannels: [AlertsNotificationChannelId!]!

  "Policy ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policyId: ID!
}

"\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n\n"
type HistoricalDataExportAccountStitchedFields {
  "Retrieve a single export by export id\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  export(
    """The unique identifier for the requested export"""
    id: ID!
  ): HistoricalDataExportCustomerExportResponse

  "Retrieve all exports for an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  exports: [HistoricalDataExportCustomerExportResponse!]
}

"The field type for stitching into the NerdGraph schema.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n\n"
type AccountManagementOrganizationStitchedFields {
  "Admin-level info about the accounts in an organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  managedAccounts(
    """Input for filtering by canceled status"""
    isCanceled: Boolean
  ): [AccountManagementManagedAccount!]
}

"Provides fields to set general APM application settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsApmConfigInput {
  "The desired target for the APDEX measurement of this application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  apdexTarget: Float

  "Sets if installed agents should override local settings with ones set here.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  useServerSideConfig: Boolean
}

"A human-readable definition of an NRDB Event Type Attribute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventAttributeDefinition {
  "This attribute's category\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  category: String @deprecated(reason: "This field no longer returns data.")

  "A short description of this attribute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  definition: String

  "The New Relic docs page for this attribute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  documentationUrl: String

  "The human-friendly formatted name of the attribute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  label: String

  "The name of the attribute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Response for all channel related mutations. Includes relevant channel and/or errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsChannelResponse {
  "Successfully mutated channel\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  channel: AiNotificationsChannel

  "Error in channel mutation\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")
}

"Settings that are applicable to mobile applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsMobileBase {
  "Network settings associated with the mobile application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  networkSettings: AgentApplicationSettingsMobileNetworkSettings

  "Enables viewing in-depth reports for mobile application crashes.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  useCrashReports: Boolean
}

"The rolling time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelObjectiveRollingTimeWindowUpdateInput {
  "The count of time units. Accepted values are 1, 7 and 28 days.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "The time unit.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  unit: ServiceLevelObjectiveRollingTimeWindowUnit!
}

"The input object representing the group being created\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementCreateGroup {
  "The id of the authentication domain the group will belong to\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: ID!

  "The name of the group\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  displayName: String!
}

"A Simple Browser monitor resulting from a Simple Browser monitor mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsSimpleBrowserMonitor {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsSimpleBrowserMonitorAdvancedOptions

  "The creation time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  createdAt: EpochMilliseconds

  "The unique client identifier for the Synthetics Monitor in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The unique identifier of the monitor within the Synthetics domain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  id: ID

  "The locations the monitor runs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocations

  "The last modification time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  modifiedAt: EpochMilliseconds

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntime

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String
}

"Autogenerated return type of UnlinkAccount\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudUnlinkAccountPayload {
  "The list of errors.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  errors: [CloudAccountMutationError!]!

  "The unlinked accounts.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  unlinkedAccounts: [CloudLinkedAccount!]!
}

"Information about any errors encountered while updating values.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsUpdateError {
  "A 'human readable' description of the error.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  description: String

  "The category of the error.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  errorClass: AgentApplicationSettingsUpdateErrorClass

  "The field that was being updated when the error was encountered.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  field: String
}

"A structured representation of a stack trace for a Browser application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceBrowserStackTrace {
  "Stack trace frames.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  frames: [StackTraceBrowserStackTraceFrame]
}

"A key-value entry representing an attribute name and value.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyDefiningAttribute {
  "Key of entry.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  key: String!

  "Value of entry.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"container for roles enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementRoleSearch {
  "an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "control the access granted to groups\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roles: [AuthorizationManagementRole!]!

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Result of a connection test\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsDestinationTestResponse {
  "Extra details (if available)\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  details: String

  "Test response error\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "Test result - success or failure\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  result: AiNotificationsResult!
}

"Redis\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpRedisIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"AppSync Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsAppsyncIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Event Hub Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureEventhubIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Provides all the available filters on the customer id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationContractCustomerIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: String!
}

"Configuration for variables of type NRQL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardVariableNrqlQuery {
  "New Relic account ID(s) to issue the query against.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  accountIds: [Int]

  "NRQL formatted query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  query: Nrql!
}

"Athena\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsAthenaIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Sort object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsDestinationSorter {
  "direction\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  direction: AiNotificationsSortOrder!

  "field\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  field: AiNotificationsDestinationFields!
}

"Represent an account that is mark with consent for Incident Intelligence usage\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentConsentedAccount {
  "The account marked with consent\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference
}

"Interconnect Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpInterconnectIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Expected error types that can be returned by delete operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardDeleteError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardDeleteErrorType!
}

"Possible component types to filter the search\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogSearchComponentType {
  """Filter search results that contain alerts"""
  ALERTS

  """Filter search results that contain apps"""
  APPS

  """Filter search results that contain dashboards"""
  DASHBOARDS

  """Filter search results that contain data sources"""
  DATA_SOURCES

  """Filter search results that contain visualizations"""
  VISUALIZATIONS
}

"The advanced options available for a Simple (ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsSimpleMonitorAdvancedOptions {
  "Custom headers to use in monitor job\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  customHeaders: [SyntheticsCustomHeader]

  "Categorize redirects during a monitor job as a failure\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  redirectIsFailure: Boolean

  "Validation text for monitor to search for at given URI\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  responseValidationText: String

  "Monitor should skip default HEAD request and instead use GET verb in check\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  shouldBypassHeadRequest: Boolean

  "Monitor should validate SSL certificate chain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  useTlsValidation: Boolean
}

"Information about results returned from a search\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogSearchResponse {
  "Get count information about the filters\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  facets: Nr1CatalogSearchFacets!

  "Cursor used to fetch the next set of results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "The list of search results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  results: [Nr1CatalogSearchResult!]!

  "The total number of results that match the search\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Details needed to create a NRQL drop rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
input NrqlDropRulesCreateDropRuleInput {
  "The type of drop rule you want. This changes the way your NRQL string is interpreted.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  action: NrqlDropRulesAction!

  "Additional information about the rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  description: String

  "The NRQL string used to match data you want to take the specified action on.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  nrql: String!
}

"Input type for RelativeLessThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeLessThanOrEqualInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Represents the different types of content available when searching by news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n\n"
enum WhatsNewContentType {
  """News the content of which is type of announcement."""
  ANNOUNCEMENT
}

"Storage Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureStorageIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Issue priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
enum AiIssuesPriority {
  """Critical priority"""
  CRITICAL

  """High priority"""
  HIGH

  """Low priority"""
  LOW

  """Medium priority"""
  MEDIUM
}

"X-Ray Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsXrayIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input type for RelativeEndsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeEndsWithInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  contained: AiDecisionsIncidentObjectInput!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  container: AiDecisionsIncidentObjectInput!
}

"Information about how a quickstart is installed\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogInstaller {
  "The type of installer\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  type: Nr1CatalogInstallerType!
}

"Specifies a default value for variables.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardVariableDefaultValueInput {
  "Default string value.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  string: String
}

"VictorOps notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsVictorOpsNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "VictorOps channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsVictorOpsNotificationChannelConfig!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"Autogenerated return type of RemoveUsersFromGroups.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementRemoveUsersFromGroupsPayload {
  "The group(s) updated.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups: [UserManagementGroup!]
}

"Input type for RelativeLongestCommonSubsequenceDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeLongestCommonSubsequenceDistanceInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Input type for RelativeCommonPrefix expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeCommonPrefixInput {
  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Sort key and direction for accounts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountSortInput {
  "Direction to sort in\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  direction: OrganizationAccountSortDirectionEnum

  "Account share attribute to sort on\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  key: OrganizationAccountSortKeyEnum
}

"Data required to update a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeUpdateTraceObserverInput {
  "When set, allows updating the data source group.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  dataSourceGroupConfig: EdgeDataSourceGroupInput

  "Globally unique identifier of the trace observer being updated.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  id: Int!

  "When set to `true` a trace observer will write trace metrics to the current account.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  monitoring: Boolean

  "Name of the trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  name: String

  "When set, allows changing the random trace filter configuration.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  randomTraceFilterConfig: EdgeRandomTraceFilterInput
}

"A container specifying the various types support channels\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
input Nr1CatalogSupportInput {
  "A support channel where users can get support via the community\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  community: Nr1CatalogCommunityContactChannelInput

  "A support channel where users can get support via email\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  email: Nr1CatalogEmailContactChannelInput

  "A support channel where users can get support via issues\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  issues: Nr1CatalogIssuesContactChannelInput
}

"Value determining whether to open a critical or warning incident for a NrqlCondition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNrqlConditionPriority {
  """
  Our highest priority. Use a critical priority when system behavior needs immediate attention.
  """
  CRITICAL

  """
  Lower priority. Use a warning priority when system behavior is noteworthy but not degraded enough to cause problems yet.
  """
  WARNING
}

"Status of the test\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsTestResponseStatus {
  """The test failed"""
  FAILURE

  """The test succeeded"""
  SUCCESS
}

"The `id` and data to update one or more keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessUpdateInput {
  "A list of the configurations of each ingest key you want to update.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  ingest: [ApiAccessUpdateIngestKeyInput]

  "A list of the configurations of each user key you want to update.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  user: [ApiAccessUpdateUserKeyInput]
}

"Details about a streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
type StreamingExportRule {
  "The account associated to this streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference

  "The AWS information configured for the streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  aws: StreamingExportAwsDetails

  "The Azure information configured for the streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  azure: StreamingExportAzureDetails

  "The time at which the process of creating the streaming rule began\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "Additional information about the streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  description: String

  "The rule ID for this streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  id: ID!

  "A message returned by the latest API call\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  message: String

  "The name of this streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  name: String!

  "NRQL used to select data to be exported\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  nrql: Nrql

  "Whether or not to compress payloads before exporting them, and what compression format to use if so\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  payloadCompression: StreamingExportPayloadCompression

  "The state of this streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  status: StreamingExportStatus!

  "The last time the status of the streaming rule was updated\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds!
}

"A reference to a New Relic entity.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadEntityRef {
  "The unique entity identifier in New Relic.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  guid: EntityGuid
}

"Dissent accounts to usage of the Incident Intelligence product in the EU/FedRAMP (removes the consent marking).\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentDissentAccounts {
  "The list of previously consented accounts, now dissented\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  dissentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  "The outcome of the dissent marking\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: IncidentIntelligenceEnvironmentDissentAccountsResult!
}

"Google Cloud Functions\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpFunctionsIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Wrapper object for customizable retention namespaces\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementCustomizableRetention {
  "List of customizable event namespaces\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  eventNamespaces: [DataManagementEventNamespaces]
}

"Metadata information for a launcher\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogLauncherMetadata implements Nr1CatalogNerdpackItemMetadata {
  "A short form description for the launcher.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the launcher.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "The corresponding icon for the launcher.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  icon: Nr1CatalogIcon

  "A list of previews for the launcher, such as screenshots.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  previews: [Nr1CatalogPreview!]!
}

"Cloud integrations related data, including configured integrations and\nall available cloud provider service integrations.\n\n---\n**NR Internal**\n\n * [#beyond](https://newrelic.slack.com/messages/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type CloudAccountFields {
  "Get one linked provider account.\n\n---\n**NR Internal**\n\n * [#beyond](https://newrelic.slack.com/messages/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  linkedAccount(
    """The linked cloud provider account's ID."""
    id: Int
  ): CloudLinkedAccount

  "Get all linked cloud provider accounts.\n\n---\n**NR Internal**\n\n * [#beyond](https://newrelic.slack.com/messages/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  linkedAccounts: [CloudLinkedAccount]

  "Get one cloud provider by short name.\n\n---\n**NR Internal**\n\n * [#beyond](https://newrelic.slack.com/messages/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  provider(
    """
    The cloud provider short name.
    
    Values include `aws`, `gcp`, foobar?
    """
    slug: String
  ): CloudProvider

  "Get all available cloud providers.\n\n---\n**NR Internal**\n\n * [#beyond](https://newrelic.slack.com/messages/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  providers: [CloudProvider]
}

"Kinesis Data Analytics Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsKinesisanalyticsIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Array of responses, one for each trace observer update request.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeUpdateTraceObserverResponses {
  "Array of trace observer update responses, one for each `UpdateTraceObserverInput`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  responses: [EdgeUpdateTraceObserverResponse!]!
}

"Removed Tag response\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackRemovedTagResponse {
  "Optional removed tag information\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  removedTagInfo: NerdpackRemovedTagInfo

  "The status of the response. Tells is the tag was deleted or not\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  status: NerdpackRemovedTagResponseType
}

"Response for error group assignment mutation.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxAssignErrorGroupResponse {
  "User that was assigned to the error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignedUser: UserReference @deprecated

  "User that was assigned to the error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignment: ErrorsInboxAssignment

  "List of errors encountered.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errors: [ErrorsInboxAssignErrorGroupError!]
}

"A baseline NRQL condition is a self-adjusting condition based on the past behavior of a monitored NRQL query.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlBaselineCondition implements AlertsNrqlCondition {
  "Direction in which the baseline is set on condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  baselineDirection: AlertsNrqlBaselineDirection!

  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The Entity associated with the NRQL Condition\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: EntityOutline

  "The condition's entity GUID\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpiration!

  "Condition ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Name of the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionQuery!

  "Alerts policy ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policyId: ID!

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Settings that determine how the NRQL results are evaluated\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignal!

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlConditionTerms!]!

  "Type of NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNrqlConditionType!

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  "Duration after which a violation automatically closes in seconds.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"Information about a visualization in a Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogVisualization implements Nr1CatalogNerdpackItem {
  "The unique identifier for the visualization.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the visualization\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogVisualizationMetadata
}

"Attributes for creating an account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationSharedAccountInput {
  "The id of the account to share with new organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The limiting role id the new organization will be granted on for the shared account\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  limitingRoleId: Int
}

"Configuration for variables of type NRQL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardVariableNrqlQueryInput {
  "New Relic account ID(s) to issue the query against.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  accountIds: [Int!]!

  "NRQL formatted query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  query: Nrql!
}

"Grace periods for issue to be activated per priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
input AiIssuesGracePeriodConfigurationInput {
  "critical\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  critical: Seconds!

  "high\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  high: Seconds!

  "low\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  low: Seconds!

  "medium\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  medium: Seconds!
}

"Schema field object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsSchemaField {
  "UI Component details\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  component: AiNotificationsUiComponent!

  "Field key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  key: String!

  "Field label shown in the UI\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  label: String!

  "Is the field mandatory\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  mandatory: Boolean!
}

"This is the root of all GraphQL queries. The fields in this object\nare available at the top level of a query.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(product)\n\n\n"
type RootQueryType {
  "The `actor` field is the top-level entry into all data that is scoped\nto the API user's access level.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  actor: Actor

  "The `customerAdministration` field is the place for managing the configuration that defines the business relationships between New Relic, partners, and customers.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  customerAdministration: CustomerAdministration

  "Access to structured New Relic documentation data\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  docs: DocumentationFields

  "The `requestContext` field provides contextual information about the API request itself.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  requestContext: RequestContext
}

"The input object representing the user being updated\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementUpdateUser {
  "The new email address to be updated on the user\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: String

  "The ID of the user to be updated\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The full name of the user to be updated\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String

  "The user time zone to be updated, in IANA zoneinfo format, e.g. 'America/Chicago'\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  timeZone: String

  "The new user type to be updated on the user\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userType: UserManagementRequestedTierName
}

"Product types\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsProduct {
  """Alerts product type"""
  ALERTS

  """APM product type"""
  APM

  """Change tracking product type"""
  CHANGE_TRACKING

  """CSSP (EOPs) product type"""
  CSSP

  """Discussions and comments product type"""
  DISCUSSIONS

  """Error Tracking product type"""
  ERROR_TRACKING

  """Incident Intelligence product type"""
  IINT

  """Notifications internal product type"""
  NTFC

  """Proactive Detection product type"""
  PD

  """Security product type"""
  SECURITY

  """Sharing product type"""
  SHARING
}

"Amazon Kinesis Data Firehose\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudKinesisFirehoseIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"For users on our New Relic One user model, a \"group\" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementUserGroup {
  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  displayName: String!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Destination Configuration Object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsDestinationConfiguration {
  "Channel Id of the Destination Configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  channelId: ID!

  "Name of the Destination Configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!

  "Notification triggers of the Destination Configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/handle_notification_triggers`)\n\n"
  notificationTriggers: [AiWorkflowsNotificationTrigger!]

  "Type of the Destination Configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsDestinationType!
}

"A detailed entity search response object type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntitySearchTypes {
  "The number of results with this type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int

  "The domain of the search result group.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "The combined domain & type of the search result group.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The type of the search result group.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Webhook custom payload type\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsWebhookCustomPayloadType {
  """FORM payload type"""
  FORM

  """JSON payload type"""
  JSON
}

"SQL Managed Instances\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureSqlmanagedIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Query object for UserSearch.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input UsersUserSearchQuery {
  "The scope to filter the search response by.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  scope: UsersUserSearchScope
}

"Attributes for creating a new managed account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationNewManagedAccountInput {
  "The name of the new account to be created.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String

  "The region-code for the account to be created.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  regionCode: OrganizationRegionCodeEnum
}

"\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InstallationAccountStitchedFields {
  "Look up the install event for a given account.\n- An install event is a representation for when the newrelic-cli has attempted an installation.\"\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installStatus: InstallationInstallStatus

  "Look up all recipe events for a given account.\n- Recipe events are stored in our cache for any given account.\n- Recipe events are used in the nr1-install-newrelic nerdlet to provide an overview of all the attempted installation statuses.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recipeEvents: [InstallationRecipeEvent!]

  "Look up recipe events for a given account by installId.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recipes(
    """
    used to fetch next page of results.  If not present, most recent events (first page) will be returned
    """
    cursor: String

    """
    installId associated to recipe events.  If not present, all recipe events will be returned for the email provided from the service gateway email header
    """
    installId: String
  ): InstallationRecipeEventResult

  "Look up install statuses for a given account by installId.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  statuses(
    """
    used to fetch next page of results.  If not present, most recent install statuses (first page) will be returned
    """
    cursor: String

    """
    installId associated to recipe events.  If not present, all install statuses will be returned for the email provided from the service gateway email header
    """
    installId: String
  ): InstallationInstallStatusResult
}

"Rule expression input\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRuleExpressionInput {
  "Input type for All expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  all: AiDecisionsAllInput

  "Input type for And expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  and: AiDecisionsAndInput

  "Input type for AttributeExists expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attributeExists: AiDecisionsAttributeExistsInput

  "Input type for CategoricalClustering expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  categoricalClustering: AiDecisionsCategoricalClusteringInput

  "Input type for FixedContains expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedContains: AiDecisionsFixedContainsInput

  "Input type for FixedCosineDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedCosineDistance: AiDecisionsFixedCosineDistanceInput

  "Input type for FixedEndsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedEndsWith: AiDecisionsFixedEndsWithInput

  "Input type for FixedEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedEqual: AiDecisionsFixedEqualInput

  "Input type for FixedFuzzyScore expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedFuzzyScore: AiDecisionsFixedFuzzyScoreInput

  "Input type for FixedFuzzyWuzzyAdaptiveRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedFuzzyWuzzyAdaptiveRatio: AiDecisionsFixedFuzzyWuzzyAdaptiveRatioInput

  "Input type for FixedFuzzyWuzzyPartialRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedFuzzyWuzzyPartialRatio: AiDecisionsFixedFuzzyWuzzyPartialRatioInput

  "Input type for FixedFuzzyWuzzyRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedFuzzyWuzzyRatio: AiDecisionsFixedFuzzyWuzzyRatioInput

  "Input type for FixedFuzzyWuzzyTokenSetRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedFuzzyWuzzyTokenSetRatio: AiDecisionsFixedFuzzyWuzzyTokenSetRatioInput

  "Input type for FixedGreaterThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedGreaterThan: AiDecisionsFixedGreaterThanInput

  "Input type for FixedGreaterThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedGreaterThanOrEqual: AiDecisionsFixedGreaterThanOrEqualInput

  "Input type for FixedHammingDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedHammingDistance: AiDecisionsFixedHammingDistanceInput

  "Input type for FixedJaccardDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedJaccardDistance: AiDecisionsFixedJaccardDistanceInput

  "Input type for FixedJaroWinkler expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedJaroWinkler: AiDecisionsFixedJaroWinklerInput

  "Input type for FixedLessThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedLessThan: AiDecisionsFixedLessThanInput

  "Input type for FixedLessThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedLessThanOrEqual: AiDecisionsFixedLessThanOrEqualInput

  "Input type for FixedLevenshtein expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedLevenshtein: AiDecisionsFixedLevenshteinInput

  "Input type for FixedLongestCommonSubsequenceDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedLongestCommonSubsequenceDistance: AiDecisionsFixedLongestCommonSubsequenceDistanceInput

  "Input type for FixedNumericalEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedNumericalEqual: AiDecisionsFixedNumericalEqualInput

  "Input type for FixedRegularExpression expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedRegularExpression: AiDecisionsFixedRegularExpressionInput

  "Input type for FixedSoundEx expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedSoundEx: AiDecisionsFixedSoundExInput

  "Input type for FixedStartsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fixedStartsWith: AiDecisionsFixedStartsWithInput

  "Input type for Not expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  not: AiDecisionsNotInput

  "Input type for One expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  one: AiDecisionsOneInput

  "Input type for Or expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  or: AiDecisionsOrInput

  "Input type for RelativeCommonPrefix expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeCommonPrefix: AiDecisionsRelativeCommonPrefixInput

  "Input type for RelativeContains expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeContains: AiDecisionsRelativeContainsInput

  "Input type for RelativeCosineDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeCosineDistance: AiDecisionsRelativeCosineDistanceInput

  "Input type for RelativeEndsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeEndsWith: AiDecisionsRelativeEndsWithInput

  "Input type for RelativeEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeEqual: AiDecisionsRelativeEqualInput

  "Input type for RelativeFuzzyScore expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeFuzzyScore: AiDecisionsRelativeFuzzyScoreInput

  "Input type for RelativeFuzzyWuzzyAdaptiveRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeFuzzyWuzzyAdaptiveRatio: AiDecisionsRelativeFuzzyWuzzyAdaptiveRatioInput

  "Input type for RelativeFuzzyWuzzyPartialRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeFuzzyWuzzyPartialRatio: AiDecisionsRelativeFuzzyWuzzyPartialRatioInput

  "Input type for RelativeFuzzyWuzzyRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeFuzzyWuzzyRatio: AiDecisionsRelativeFuzzyWuzzyRatioInput

  "Input type for RelativeFuzzyWuzzyTokenSetRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeFuzzyWuzzyTokenSetRatio: AiDecisionsRelativeFuzzyWuzzyTokenSetRatioInput

  "Input type for RelativeGreaterThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeGreaterThan: AiDecisionsRelativeGreaterThanInput

  "Input type for RelativeGreaterThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeGreaterThanOrEqual: AiDecisionsRelativeGreaterThanOrEqualInput

  "Input type for RelativeHammingDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeHammingDistance: AiDecisionsRelativeHammingDistanceInput

  "Input type for RelativeJaccardDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeJaccardDistance: AiDecisionsRelativeJaccardDistanceInput

  "Input type for RelativeJaroWinkler expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeJaroWinkler: AiDecisionsRelativeJaroWinklerInput

  "Input type for RelativeLessThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeLessThan: AiDecisionsRelativeLessThanInput

  "Input type for RelativeLessThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeLessThanOrEqual: AiDecisionsRelativeLessThanOrEqualInput

  "Input type for RelativeLevenshtein expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeLevenshtein: AiDecisionsRelativeLevenshteinInput

  "Input type for RelativeLongestCommonSubsequenceDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeLongestCommonSubsequenceDistance: AiDecisionsRelativeLongestCommonSubsequenceDistanceInput

  "Input type for RelativeNumericalEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeNumericalEqual: AiDecisionsRelativeNumericalEqualInput

  "Input type for RelativeRegularExpression expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeRegularExpression: AiDecisionsRelativeRegularExpressionInput

  "Input type for RelativeSoundEx expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeSoundEx: AiDecisionsRelativeSoundExInput

  "Input type for RelativeStartsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeStartsWith: AiDecisionsRelativeStartsWithInput

  "Input type for RelativeTopologicallyDependent expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relativeTopologicallyDependent: AiDecisionsRelativeTopologicallyDependentInput

  "Input type for WholeCosineDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  wholeCosineDistance: AiDecisionsWholeCosineDistanceInput

  "Input type for WholeJaccardSimilarity expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  wholeJaccardSimilarity: AiDecisionsWholeJaccardSimilarityInput
}

"Destination types\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flags:`Notifications/destination_consolidation_api` OR `Notifications/notifications__api`)\n\n\n"
enum AiNotificationsDestinationType {
  """Email destination type"""
  EMAIL

  """EventBridge destination type"""
  EVENT_BRIDGE

  """Jira destination type"""
  JIRA

  """Mobile push destination type"""
  MOBILE_PUSH

  """PagerDuty destination type"""
  PAGERDUTY_ACCOUNT_INTEGRATION

  """PagerDuty destination type}"""
  PAGERDUTY_SERVICE_INTEGRATION

  """ServiceNow destination type"""
  SERVICE_NOW

  """ServiceNow app destination type"""
  SERVICE_NOW_APP

  """Slack destination type"""
  SLACK

  """Slack Collaboration destination type"""
  SLACK_COLLABORATION

  """Legacy Slack destination type based on Incoming Webhooks"""
  SLACK_LEGACY

  """WebHook destination type"""
  WEBHOOK
}

"Current environment result reasoning\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason {
  """The current account is not entitled for incident intelligence"""
  CURRENT_ACCOUNT_NOT_ENTITLED

  """The user is attached to an environment"""
  ENVIRONMENT_FOUND

  """
  The user is attached to more than one environment, hence the user is authorized to more then one parent account that has an environment. To get a list of possible environments, query authorizedEnvironment and select one of the accounts.
  """
  MULTIPLE_ENVIRONMENTS

  """The user is not attached to any environment"""
  NO_ENVIRONMENT

  """
  The user is not authorized to access environments from the current account
  """
  USER_NOT_AUTHORIZED_FOR_ACCOUNT
}

"A contact channel where users can get support via the community\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogCommunityContactChannel {
  "The URL linking to a website for support\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"Specifies fields required for types that implement the ability to determine the level of supported entity types.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogSupportedEntityTypes {
  "Determines the supported entity type mode.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"Provides the available values for authentication type\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationAuthenticationTypeEnum {
  """Authentication not configured"""
  DISABLED

  """Heroku Single Sign-On"""
  HEROKU_SSO

  """Username and password authentication"""
  PASSWORD

  """SAML Single Sign-On"""
  SAML_SSO
}

"Information required when operating on a Linked Account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudRenameAccountsInput {
  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The linked account new name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!
}

"The \"raw\" configuration values for configuring the javascript client.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
scalar AgentApplicationSettingsRawJsConfiguration

"New subscriptions input.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackSubscribeAccountsInput {
  "List of accounts to be subscribed.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountIds: [Int!]!

  "Tag of the Nerdpack version to be subscribed to.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName!
}

"The `ViolationInt` scalar type represents 52-bit signed integers\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar EntityAlertViolationInt

"Type of Destination Configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsDestinationType {
  """Email Destination Configuration type"""
  EMAIL

  """Event Bridge Destination Configuration type"""
  EVENT_BRIDGE

  """Jira Destination Configuration type"""
  JIRA

  """New Relic Mobile Push Destination Configuration type"""
  MOBILE_PUSH @deprecated(reason: "This type is under development")

  """Pager Duty Destination Configuration type"""
  PAGERDUTY @deprecated(reason: "Unused destination type")

  """Pager Duty with account integration Destination Configuration type"""
  PAGERDUTY_ACCOUNT_INTEGRATION

  """Pager Duty with service integration Destination Configuration type"""
  PAGERDUTY_SERVICE_INTEGRATION

  """Service Now Destination Configuration type"""
  SERVICE_NOW

  """ServiceNow official NewRelic app Configuration type"""
  SERVICE_NOW_APP

  """Slack Destination Configuration type"""
  SLACK

  """Slack legacy Destination Configuration type"""
  SLACK_LEGACY

  """Webhook Destination Configuration type"""
  WEBHOOK
}

"IoT Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudIotIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
interface AiWorkflowsResponseError {
  "The error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  description: String!
}

"The attributes of an account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationSharedAccount {
  "The ID of the account being shared.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The ID of the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: String!

  "The ID of the limiting role for the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  limitingRoleId: Int!

  "The name of the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String

  "The ID of the organization sending the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  sourceOrganizationId: ID!

  "The name of the organization sending the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  sourceOrganizationName: String

  "The ID of the organization receiving the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  targetOrganizationId: ID!

  "The name of the organization receiving the account share.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  targetOrganizationName: String
}

"A decision used to compare incidents and subsequently merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsDecision {
  "Internal data associated with this decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  annotations: [AiDecisionsAnnotationEntry!]!

  "Length of the window in which incidents are compared.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  correlationWindowLength: Milliseconds

  "Time decision was created.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "Creator of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  creator: UserReference

  "Expression to use to compare incidents.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  decisionExpression: AiDecisionsRuleExpression!

  "Type of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  decisionType: AiDecisionsDecisionType!

  "Description of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "ID of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "External data associated with this decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metadata: AiDecisionsRuleMetadata!

  "Number of correlations within a window required to merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minCorrelationThreshold: Int!

  "Name of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Configuration to allow decision to override issue properties.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  overrideConfiguration: AiDecisionsOverrideConfiguration

  "Creation source of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  source: AiDecisionsRuleSource!

  "Current state of decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  state: AiDecisionsDecisionState!

  "Time decision was last updated.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds!
}

"Information related to device emulation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsDeviceEmulation {
  "The device orientation the user would like to represent\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceOrientation: SyntheticsDeviceOrientation!

  "The device type that a user can select\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceType: SyntheticsDeviceType!
}

"Type of connection established with the trace observer. Currently, only `PUBLIC` is supported.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeEndpointType {
  """PUBLIC: the endpoint is reachable on the internet."""
  PUBLIC
}

"A Step monitor resulting from a Step monitor mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsStepMonitor {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsStepMonitorAdvancedOptions

  "The creation time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  createdAt: EpochMilliseconds

  "The unique client identifier for the Synthetics Monitor in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The unique identifier of the monitor within the Synthetics domain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  id: ID

  "The locations the monitor runs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocations

  "The last modification time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  modifiedAt: EpochMilliseconds

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The steps that make up the script the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  steps: [SyntheticsStep]
}

"An object that represents the golden tags scoped by domain and type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenTagsDomainTypeScoped {
  "Context for the golden tags\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  context: EntityGoldenContext!

  "Domain type for the golden tags\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  domainType: DomainType!

  "Tags for the domain and type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  tags: [EntityGoldenTag!]!
}

"The list of sortable fields\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantAuthorizationRoleSortEnum {
  """Id of the role"""
  ID

  """Name of the role"""
  NAME

  """Scope of the role"""
  SCOPE

  """Type of the role"""
  TYPE
}

"Sort key and direction for authentication domains\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAuthenticationDomainSortInput {
  "Direction to sort in\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  direction: OrganizationSortDirectionEnum

  "Authentication domain attribute to sort on\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  key: OrganizationSortKeyEnum
}

"Webhook basic auth\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsWebhookBasicAuthMutationInput {
  "Password\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  password: SecureValue!

  "Username\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  username: String!
}

"Exists only if a user has a pending upgrade request.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementPendingUpgradeRequest {
  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Requester message, why the user believes they require the upgrade.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  message: String

  "Requested user type for the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  requestedUserType: UserManagementUserType
}

"Represents one attribute from within the environment on which an agent is running.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentAttribute {
  "Environment attribute name.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attribute: String!

  "Value of the environment attribute.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Known error codes and messages for `DeleteSpanAttributeRuleResponseError`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeDeleteSpanAttributeRuleResponseErrorType {
  """No trace observer was found with the id given."""
  NOT_FOUND
}

"Information on the owner of a dashboard or page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardOwnerInfo {
  "New Relic user email.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  email: String

  "New Relic user ID.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  userId: Int
}

"An APM application deployment marker\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmApplicationDeployment {
  "The changelog of the deployment\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  changelog: String

  "Description of the deployment\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "A link to view the deployment in the UI\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The revision of the app that was deployed\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  revision: String

  "The moment the deployment occured\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timestamp: EpochMilliseconds

  "The user who triggered the deployment\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  user: String
}

"Test error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsTestResponseError implements AiWorkflowsResponseError {
  "The error description\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  description: String!

  "The error type\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsTestErrorType!
}

"A key-value entry.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsAnnotationEntry {
  "Key of entry.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  key: String!

  "Value of entry.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Input type for FixedGreaterThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedGreaterThanOrEqualInput {
  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  compared: Float!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!
}

"All the details necessary to configure an integration to connect to the Infinite Tracing Trace API (HTTP 1.1) endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeHttpsEndpointDetail implements EdgeEndpointDetail {
  "Full host name that is used to connect to the endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  host: String!

  "Port that is used to connect to the endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  port: Int!

  "Full URL used to send data to the endpoint. For instance, if you were using the\n[Java Telemetry SDK](https://docs.newrelic.com/docs/data-ingest-apis/get-data-new-relic/new-relic-sdks/telemetry-sdks-send-custom-telemetry-data-new-relic)\nthis is the data you would use to create a `URI` to pass to the [`uriOverride`](https://github.com/newrelic/newrelic-telemetry-sdk-java/blob/85e526cf6fbba0640f20d2d7a3ab0dab89f958b3/telemetry_core/src/main/java/com/newrelic/telemetry/AbstractSenderBuilder.java#L37-L48)\nmethod.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  url: String!
}

"List of schema/suggestions constraints\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsConstraint {
  "key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  key: String!

  "value\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  value: String!
}

"Input type for RelativeGreaterThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeGreaterThanInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"The `id` and data to update one or more keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessUpdateIngestKeyInput {
  "The `id` of the key you want to update.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  keyId: String!

  "The name you want to assign to the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  name: String

  "The notes you want to assign to the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  notes: String
}

"Represents the location of an install\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogInstallPlanTarget {
  "Provides context on the location the install will take place\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  destination: Nr1CatalogInstallPlanDestination!

  "Provides context for the operating system that will be targeted\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  os: [Nr1CatalogInstallPlanOperatingSystem!]!

  "Provides context for the type of installation that will take place\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  type: Nr1CatalogInstallPlanTargetType!
}

"The unit of measurement\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n\n"
type DataDictionaryUnit {
  "Name and abbreviation (if applicable) of the unit\n\n---\n**NR Internal**\n\n * [#help-documentation](https://newrelic.slack.com/archives/C0DSGL3FZ)\n * Team ID: No team ID provided\n\n* [attribute-dictionary repo](https://source.datanerd.us/docs-eng/attribute-dictionary)\n\n * visibility(customer)\n\n"
  label: String!
}

"Information about the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstart {
  "Determines if this is a featured quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  featured: Boolean!

  "The unique identifier for the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogQuickstartMetadata

  "Specifies the URL where the source definition for the quickstart can be found\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  sourceUrl: String

  "Level of support expected for the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  supportLevel: Nr1CatalogSupportLevel!
}

"A section of the entity search results. If there is a `nextCursor` present, there are more results available.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntitySearchResult {
  "The entities contained in this section of the entity search results.\n\nFor information on New Relic entities, visit [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).\n\nTo see some query examples of entity information,\nvisit [our entity GraphQL API docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entities: [EntityOutline]

  "The next cursor for fetching additional paginated entity search results.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Newrelic incident\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesNewRelicIncident implements AiIssuesIIncident {
  "account\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`III/api_access`)\n\n"
  account: AccountReference

  "An account id this incident is stored in\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  accountIds: String!

  "The time the incident was closed\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  closedAt: EpochMilliseconds

  "The condition id\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  conditionFamilyId: String

  "The time the incident was created\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  createdAt: EpochMilliseconds!

  "The description is generated from the policy name and the condition name\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  description: [String!]!

  "A list of unique entity identifiers\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: EntityGuid

  "A list of entity names\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityNames: String

  "A list of entity types\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: String

  "See our documentation to learn about environments\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  environmentId: Int! @deprecated(reason: "Use account")

  "Incident identifier\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentId: ID!

  "The policy id\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  policyIds: String

  "Incident priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: AiIssuesPriority!

  "Incident state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  state: AiIssuesIncidentState!

  "Incident event timestamp\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  timestamp: EpochMilliseconds!

  "The description the user gave the condition if provided. Otherwise the incident description\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  title: String!

  "The time the incident was last updated\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  updatedAt: EpochMilliseconds!
}

"Fallback version to return if no version matches with the given filters.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum NerdpackVersionFilterFallback {
  """Latest version (semver)."""
  LATEST_SEMVER
}

"The wanted behavior for muted issues in the workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsMutingRulesHandling {
  """Notify only about partially muted and unmuted issues"""
  DONT_NOTIFY_FULLY_MUTED_ISSUES

  """Notify only about unmuted issues"""
  DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES

  """Notify about all issues"""
  NOTIFY_ALL_ISSUES
}

"The resulting NRQL SELECT clause to aggregate events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelEventsQuerySelect {
  "The attribute used in the selected function.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attribute: String

  "The function to use in the SELECT clause.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  function: ServiceLevelEventsQuerySelectFunction!

  "The threshold used in the selected function.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  threshold: Float
}

"Expected default error types as result of mutating an existing parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
enum LogConfigurationsParsingRuleMutationErrorType {
  """Invalid Grok"""
  INVALID_GROK

  """Number format error. ID should be convertible to int."""
  INVALID_ID

  """Invalid NRQL"""
  INVALID_NRQL

  """Couldn't find the specified parsing rule."""
  NOT_FOUND
}

"The input object representing the access to revoke for the group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input AuthorizationManagementRevokeAccess {
  "The Role and the Account the Target Group should no longer have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  accountAccessGrants: [AuthorizationManagementAccountAccessGrant!]

  "The Role and the Group the Target Group should no longer have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groupAccessGrants: [AuthorizationManagementGroupAccessGrant!]

  "The Group ID that will have access revoked\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groupId: ID!

  "The Role and the Organization the Target Group should no longer have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  organizationAccessGrants: [AuthorizationManagementOrganizationAccessGrant!]
}

"State of suggestion\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsSuggestionState {
  """Suggestion is accepted"""
  ACCEPTED

  """Suggestion is declined"""
  DECLINED

  """Suggestion is postponed"""
  POSTPONED

  """Suggestion is undecided"""
  UNDECIDED
}

"Cost Management\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureCostmanagementIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify if additional cost data per tag should be collected. This field is case sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKeys: [String]
}

"Functions Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureFunctionsIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Destination Configuration input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsDestinationConfigurationInput {
  "channelId\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  channelId: ID!

  "notificationTriggers\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  notificationTriggers: [AiWorkflowsNotificationTrigger!]
}

"Power BI Dedicated\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzurePowerbidedicatedIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The type of entity\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntitySearchQueryBuilderType {
  """An application"""
  APPLICATION

  """A dashboard"""
  DASHBOARD

  """A host"""
  HOST

  """A monitor"""
  MONITOR

  """A workload"""
  WORKLOAD
}

"The object that's returned from successfully updating a shared account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationUpdateSharedAccountResponse {
  "Information about the updated shared account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  sharedAccount: OrganizationSharedAccount
}

"A structured representation of a handled exception occurring in a mobile application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceMobileException {
  "A structured representation of a handled exception in a mobile application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  stackTrace: StackTraceMobileExceptionStackTrace
}

"Data to filter subscribable nerdpack list.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackDataFilter {
  "ID of the account to be subscribed.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "Nerdpack subscription model to filter.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  subscriptionModel: NerdpackSubscriptionModel

  "Tag the account may subscribe to.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName
}

"A `SpanAttributeRule` applies a filtering rule (keep or discard) to traces within a particular `TraceObserver`\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeSpanAttributeRule {
  "The action that this filter takes if it matches the provided attribute name and value\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  action: EdgeTraceFilterAction!

  "Globally unique identifier of this trace filter.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  id: Int!

  "Name of the attribute that this filter matches on\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  key: String!

  "Type of match to apply to the attribute name (EQUALS, LIKE).\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  keyOperator: EdgeSpanAttributeKeyOperator!

  "Value of the attribute that this filter matches on.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  value: String

  "Type of match to apply to the attribute value (EQUALS, LIKE, IS_NOT_NULL).\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  valueOperator: EdgeSpanAttributeValueOperator!
}

"Possible strategies when replacing variables in a NRQL query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardVariableReplacementStrategy {
  """Replace the variable based on its automatically-inferred type."""
  DEFAULT

  """Replace the variable value as an identifier."""
  IDENTIFIER

  """Replace the variable value as a number."""
  NUMBER

  """Replace the variable value as a string."""
  STRING
}

"Metadata information for an item in a Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
interface Nr1CatalogNerdpackItemMetadata {
  "A short form description for the Nerdpack item.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the Nerdpack item.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "A list of previews for the Nerdpack item, such as screenshots.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  previews: [Nr1CatalogPreview!]!
}

"The result after deleting a data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsDeleteDataPartitionRuleResponse {
  "List of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  errors: [LogConfigurationsDataPartitionRuleMutationError]
}

"Distributed tracing type. See [documentation](https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/browser-data-distributed-tracing/) for further information.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsBrowserDistributedTracing {
  "List of allowed origins for use with distributed tracing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  allowedOrigins: [String!]

  "Whether or not CORS is enabled in distributed tracing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  corsEnabled: Boolean

  "Whether or not CORS uses the `newrelic` header in distributed tracing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  corsUseNewrelicHeader: Boolean

  "Whether or not CORS uses tracecontext headers in distributed tracing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  corsUseTracecontextHeaders: Boolean

  "Whether or not distributed tracing is enabled.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Whether or not to exclude the `newrelic` header in distributed tracing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  excludeNewrelicHeader: Boolean
}

"Configuration for visualization type 'viz.pie'.  Learn more about [pie](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#pie) widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardPieWidgetConfigurationInput {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"Provides all the available filters on the organization group name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationGroupNameInputFilter {
  "performs a contains operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  contains: String

  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Agent Feature Filter\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AgentFeaturesFilter {
  DOTNET
  ELIXIR
  GO
  HTML
  JAVA
  MOBILE
  NODEJS
  PHP
  PYTHON
  RUBY
  SDK
}

"The input object representing the sort parameters for groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityGroupSortInput {
  "Order by which to sort groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  direction: MultiTenantIdentitySortDirection

  "Group attribute to sort on\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  key: MultiTenantIdentitySortKeyEnum
}

"A database instance seen by an APM Application\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmDatabaseInstanceEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The host the database instance is running on.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  host: String

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  portOrPath: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "The type of database. ex: `Postgres` | `Redis`\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  vendor: String
}

"EFS Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudEfsIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A configuration setting that maps hosts to alias names for grouping and identification purposes.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsNetworkAlias {
  "An alternative name that can be used to reference the hostnames.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  alias: String

  "A list of hostnames to associate with an alias.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  hosts: [String!]
}

"Available filtering types for names\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementNameInput {
  "Part of a user name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  contains: String

  "A user name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Collection of policies with pagination information.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsPoliciesSearchResultSet {
  "Cursor pointing to the end of the current page of policy records. Null if final page.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "Set of policies returned for the supplied cursor and criteria.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policies: [AlertsPolicy!]!

  "Total number of policy records for the given search criteria.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Information about the error group state type\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxErrorGroupStateTypeResult {
  "Type of the error group state\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  type: ErrorsInboxErrorGroupState
}

"Firebase Hosting\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpFirebasehostingIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"An object that contains the overall installation status to be created.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input InstallationInstallStatusInput {
  "The version of the newrelic-cli that was used for a given installation attempt.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cliVersion: SemVer!

  "Refers to the source of the installation.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  deployedBy: String

  "Whether or not the installation is using a proxy.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  enabledProxy: Boolean!

  "The error for a given installation attempt.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  error: InstallationStatusErrorInput!

  "The host name of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hostName: String!

  "The unique ID that corresponds to an install status.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installId: ID!

  "The version of the open-install-library that is being used.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installLibraryVersion: SemVer!

  "Whether or not the installation is supported on the host machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  isUnsupported: Boolean!

  "The kernel architecture of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelArch: String!

  "The kernel version of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelVersion: SemVer!

  "The path to the log file on the customer's host.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  logFilePath: String!

  "The OS of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  os: String!

  "The platform name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platform: String!

  "The platform family name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformFamily: String!

  "The platform version provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformVersion: SemVer!

  "A URL generated by the newrelic-cli that redirects to the appropriate entity once an installation is complete.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  redirectUrl: String!

  "The state of the installation.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  state: InstallationInstallStateType!

  "Whether or not the installation is a targeted install.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  targetedInstall: Boolean!

  "The timestamp for when the install event occurred.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timestamp: EpochSeconds
}

"Direct Connect Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsDirectconnectIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"NRQL condition terms determine when a violation will be opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlDynamicConditionTermsInput {
  "Operator used to compare against the threshold.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  operator: AlertsNrqlDynamicConditionTermsOperator!

  "Priority determines how much attention your incidents need. Your workflow settings then tell us when and where to send notifications for different priorities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  priority: AlertsNrqlConditionPriority!

  "Value that triggers a violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  threshold: Float!

  "The duration, in seconds, that the threshold must violate in order to create a violation.\nValue must be within 120-86400 seconds and a multiple of the aggregation window for baseline conditions.\n(Default aggregation window duration is 60 seconds.)\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  thresholdDuration: Int!

  "How many data points must be in violation for the specified threshold duration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  thresholdOccurrences: AlertsNrqlConditionThresholdOccurrences!
}

"Basic user and password authentication\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsBasicAuth {
  "Authentication Type - Basic\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  authType: AiNotificationsAuthType!

  "Username\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  user: String!
}

"An object that represents a tag key-values pair.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n\n"
input TaggingTagInput {
  "The tag key.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  key: String!

  "The tag values.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  values: [String]
}

"Configuration for visualization type 'viz.billboard'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardBillboardWidgetConfiguration {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQuery]

  "Array of thresholds to categorize the results of the query in different groups.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  thresholds: [DashboardBillboardWidgetThreshold]
}

"A thematic grouping for catalog items\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogCategory {
  "The human readable name of the category\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String!

  "The url friendly name of the category\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  slug: String!

  "A list of terms that match catalog items to this category\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  terms: [String!]!
}

"Channel fields to filter by\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsChannelFields {
  """active field"""
  ACTIVE

  """created timestamp field"""
  CREATED_AT

  """default field"""
  DEFAULT

  """destination id field"""
  DESTINATION_ID

  """name field"""
  NAME

  """product field"""
  PRODUCT

  """status field"""
  STATUS

  """type field"""
  TYPE

  """updated timestamp field"""
  UPDATED_AT

  """updated_by field"""
  UPDATED_BY
}

"The input for creating a new xMatters notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsXMattersNotificationChannelCreateInput {
  "Integration URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  integrationUrl: SecureValue!

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"The input object that represents the SLI that will be created.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelIndicatorCreateInput {
  "The description of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The events that define the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  events: ServiceLevelEventsCreateInput!

  "The name of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "A list of objective definitions.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  objectives: [ServiceLevelObjectiveCreateInput!]

  "[DEPRECATED] The slug is deprecated and it will be removed from the schema as soon as possible.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  slug: String
}

"Settings for the thread profiler.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsThreadProfilerInput {
  "Is thread profiling enabled for this application?\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean
}

"Available keys for sorting users\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantIdentityUserSortKey {
  """User email address"""
  EMAIL

  """User id"""
  ID

  """User last active date"""
  LAST_ACTIVE

  """User name"""
  NAME
}

"An outline of a created dashboard\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogDashboardOutline {
  "The guid of the created dashboard\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  dashboardGuid: EntityGuid!
}

"Object for suggestion errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsSuggestionError {
  "SuggestionError description\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  description: String! @deprecated(reason: "this entire object will be deprecated, please refrain from using SuggestionError")

  "SuggestionError details\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  details: String! @deprecated(reason: "this entire object will be deprecated, please refrain from using SuggestionError")

  "SuggestionError type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsErrorType! @deprecated(reason: "this entire object will be deprecated, please refrain from using SuggestionError")
}

"The `Organization` object provides basic data about an organization.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type Organization {
  "This field provides access to AccountManagement data.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  accountManagement: AccountManagementOrganizationStitchedFields

  "Namespace for querying and filtering the actor's organization's shared accounts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountShares(
    """Input for filtering by limiting role id of a shared account."""
    limitingRoleId: Int

    """Input for filtering by source organization id for a shared account."""
    sourceOrganizationId: ID

    """Input for filtering by target organization id of a shared account."""
    targetOrganizationId: ID
  ): OrganizationAccountShares

  "The organization's administrator\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  administrator: OrganizationOrganizationAdministrator

  "This field provides access to AuthorizationManagement data.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  authorizationManagement: AuthorizationManagementOrganizationStitchedFields

  "The customer id for the organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customerId: String

  "The ID of the organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID

  "The name of the organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String

  "The telemetry id for the organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  telemetryId: String

  "This field provides access to UserManagement data.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userManagement: UserManagementOrganizationStitchedFields
}

"A customer organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationCustomerOrganization {
  "The ID of the organization group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  contractId: ID

  "The ID of the customer\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customerId: String

  "The ID of the organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The name of the organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String
}

"Invalid field object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsFieldError {
  "Field name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  field: String!

  "Validation error\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  message: String!
}

"The Group and Role another Group should have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input AuthorizationManagementGroupAccessGrant {
  "The Group ID the Role will grant access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groupId: ID!

  "The Role ID that will define the access\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roleId: ID!
}

"A filter for authentication domains\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAuthenticationDomainFilterInput {
  "Filter authentication domains by id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: OrganizationIdInput

  "Filter authentication domains by name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: OrganizationNameInput

  "Filter authentication domains by organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationId: OrganizationOrganizationIdInput!
}

"Parameters by which to filter the search.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessKeySearchQuery {
  "Criteria by which to narrow the scope of keys to be returned.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  scope: ApiAccessKeySearchScope

  "A list of key types to be included in the search. If no types are provided, all types will be returned by default.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  types: [ApiAccessKeyType]!
}

"Info about Nerdpack assets.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackAssetInfo {
  "Name of the asset.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "Size of the asset, in Bytes.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  sizeInBytes: Int
}

"This scalar represents an event\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/custom_fingerprinting`)\n\n\n"
scalar ErrorsInboxRawEvent

"The input for creating a new Webhook notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsWebhookNotificationChannelCreateInput {
  "Base URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  baseUrl: String!

  "Basic auth.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  basicAuth: AlertsWebhookBasicAuthMutationInput

  "Custom HTTP headers.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customHttpHeaders: [AlertsWebhookCustomHeaderMutationInput!]

  "Custom payload body.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customPayloadBody: String

  "Custom payload type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customPayloadType: AlertsWebhookCustomPayloadType

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"Configuration options for a monitor downtime that runs daily\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
input SyntheticsMonitorDowntimeDailyConfig {
  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endRepeat: SyntheticsDateWindowEndConfig

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"Autogenerated return type of DisableIntegration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudDisableIntegrationPayload {
  "The list of disabled cloud service integrations.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  disabledIntegrations: [CloudIntegration!]!

  "The list of errors.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  errors: [CloudIntegrationMutationError!]!
}

"Authentication types\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsAuthType {
  """Basic user and password authentication"""
  BASIC

  """OAuth based authentication"""
  OAUTH2

  """Token based authentication"""
  TOKEN
}

"Possible types for the install plan operating system\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogInstallPlanOperatingSystem {
  """Mac operating system"""
  DARWIN

  """Linux operating system"""
  LINUX

  """Windows operating system"""
  WINDOWS
}

"A base set of fields for a grouping of similar error events.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
interface ErrorsInboxErrorGroupBase {
  "User assigned to the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignedUser: UserReference @deprecated

  "User assigned to the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  assignment: ErrorsInboxAssignment

  "Source entity Guid\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  entityGuid: EntityGuid

  "NRQL formatted query for retrieving error events\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  eventsQuery: Nrql

  "Time of first occurrence\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/use_stored_timestamps`)\n\n"
  firstSeenAt: EpochMilliseconds

  "A unique identifier for the error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  id: ID!

  "Indicates whether this error group was custom generated.\n- false = this is a system-generated error group\n- true = this is a custom error group, created and sent by the end user\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/custom_fingerprinting`)\n\n"
  isCustom: Boolean

  "Time of last occurrence\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/use_stored_timestamps`)\n\n"
  lastSeenAt: EpochMilliseconds

  "Error group message\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  message: String

  "Error group name\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  name: String

  "The occurrences of this error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  occurrences: ErrorsInboxOccurrences

  "Time of regression occurrence for regressed error groups\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  regressedAt: EpochMilliseconds

  "List of resources associated with this error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  resources(
    """Current query cursor"""
    cursor: String

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxResourceFilterInput
  ): ErrorsInboxResourcesResponse!

  "The source event of the error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  source: String

  "Value to indicate the current state of the group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  state: ErrorsInboxErrorGroupState

  "The public URL of the error group detail view.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  url: String
}

"The response for deleting a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelDeleteResponse {
  "Error.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  error: AlertsNotificationChannelDeleteError

  "Notification channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Contains all of the data that is used to sample traces based on their attributes.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeSpanAttributesTraceFilter {
  "The list of rules that determine whether to keep or drop a trace based on a span attribute.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  spanAttributeRules: [EdgeSpanAttributeRule!]!
}

"Input type for FixedSoundEx expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedSoundExInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Minimum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minDistance: Int!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"A Script Browser monitor resulting from a Script Browser mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsScriptBrowserMonitor {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsScriptBrowserMonitorAdvancedOptions

  "The creation time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  createdAt: EpochMilliseconds

  "The unique client identifier for the Synthetics Monitor in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The unique identifier of the monitor within the Synthetics domain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  id: ID

  "The locations the monitor runs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocations

  "The last modification time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  modifiedAt: EpochMilliseconds

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntime

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus
}

"Deprecated.  By default, condition is evaluated based on each query's returned value.  To aggregate data in time \"windows\", use `signal.slideBy`.\n\nFunction used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation will be opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNrqlStaticConditionValueFunction {
  """Condition is evaluated based on each query's returned value."""
  SINGLE_VALUE @deprecated(reason: "Default behavior.")

  """
  Condition is evaluated based on the sum of each query's returned values over the specified thresholdDuration.
  """
  SUM @deprecated(reason: "Replaced by `signal.slideBy`.")
}

"The `SecureValue` scalar represents a secure value, ie a password, an API key, etc.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar SecureValue

"An enum that represent the installation state.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum InstallationInstallStateType {
  """Defines a completed installation."""
  COMPLETED

  """Defines an installation that has been started."""
  STARTED
}

"Category fields to group by\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsVariableCategory {
  """Condition category"""
  CONDITION

  """Entities category"""
  ENTITIES

  """Incident category"""
  INCIDENT

  """Issue category"""
  ISSUE

  """Default category"""
  OTHER

  """Policy category"""
  POLICY

  """Tags category"""
  TAGS

  """Workflow category"""
  WORKFLOW
}

"Athena Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsAthenaIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Connect Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsConnectIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Different scopes that can be used to filter the returned users.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input UsersUserSearchScope {
  "Filter by string that will partially match a User's `email`.  Same as `name` it will partially match and case is ignored.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  email: String

  "Filter by string that will partially match a User's `name`. So argument `name='Ste'` will match `name='Steve'` and case is ignored so `name='Koester'` would also match.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "Will match both a User's `email` and `name`.  So argument `search='ple'`  will match `name='Johnny Appleseed'` and `email='mary@example.com'`.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  search: String

  "List of 1 or more userIds to filter by. Will only return data for users with ids that match the full ID, no partial matching. (so 2 ids provided will yield at most 2 users)\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  userIds: [ID!]
}

"Status of the test notification\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsTestNotificationResponseStatus {
  """The test notification failed"""
  FAILURE

  """The test notification succeeded"""
  SUCCESS
}

"The allow list object for browser applications.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSegmentsBrowserSegmentAllowList {
  "The url segments that are allowed.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n"
  segments: [String]
}

"Specifies the supported entity types to be no entity types\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogNoSupportedEntityTypes implements Nr1CatalogSupportedEntityTypes {
  "The level of support entity types. Always set to NONE\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"Database for MariaDB Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureMariadbIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A collection of user defined Entities and Entity Search queries.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityCollection {
  "The account the collection is part of\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference

  "The user who created the collection\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdBy: UserReference

  "The definition of the collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  definition: EntityCollectionDefinition

  "The GUID of the Entity\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The result of searching for the members of the collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  members: EntitySearch

  "The name of the collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The type of Collection\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: EntityCollectionType
}

"The result of the entityRelationshipUserDefinedCreateOrReplace mutation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipUserDefinedCreateOrReplaceResult {
  "The list of errors that occurred when executing the mutation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  errors: [EntityRelationshipUserDefinedCreateOrReplaceResultError!]
}

"An entity outline that is unavailable.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type UnavailableEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"The time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelObjectiveTimeWindowCreateInput {
  "The rolling time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  rolling: ServiceLevelObjectiveRollingTimeWindowCreateInput!
}

"An object that represents a status error whenever an recipe has failed to install.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InstallationStatusError {
  "Error details, if any.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  details: String

  "The actual error message.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String
}

"The monitor input values needed to create a Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCreateStepMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsStepMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsScriptedMonitorLocationsInput!

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod!

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus!

  "The steps that make up the script the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  steps: [SyntheticsStepInput!]!

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"The input object representing the access to grant for the group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input AuthorizationManagementGrantAccess {
  "The Role and the Account the Target Group should have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  accountAccessGrants: [AuthorizationManagementAccountAccessGrant!]

  "The Role and the Group the Target Group should have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groupAccessGrants: [AuthorizationManagementGroupAccessGrant!]

  "The Group ID that will have access granted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groupId: ID!

  "The Role and the Organization the Target Group should have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  organizationAccessGrants: [AuthorizationManagementOrganizationAccessGrant!]
}

"Installation information for a data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
union Nr1CatalogDataSourceInstallDirective = Nr1CatalogLinkInstallDirective | Nr1CatalogNerdletInstallDirective

"A filter that can be applied to filter results.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AgentEnvironmentFilter {
  "A string to filter results that includes this string anywhere. Case insensitive.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  contains: String

  "A string to filter out results that includes this string anywhere. Case insensitive.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  doesNotContain: String

  "A string to filter results that are exactly as the string provided. Case sensitive.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  equals: String

  "A string to filter results that starts with this string. Case insensitive.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  startsWith: String
}

"Result from removing a device.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n\n"
type MobilePushNotificationRemoveDeviceResult {
  "The uuid of the device that was removed.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  deviceId: String

  "The success or failure message from the attempted remove.\n\n---\n**NR Internal**\n\n * [#mobile-apps](https://newrelic.slack.com/archives/C0MPP9KD2)\n * Team ID: No team ID provided\n\n* [mobile-device-service-graphql repo](https://source.datanerd.us/mobile-apps/mobile-device-service-graphql)\n\n * visibility(customer)\n\n"
  message: String
}

"A parsing rule for an account.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
type LogConfigurationsParsingRule {
  "The account id associated with the rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  accountId: Int!

  "The parsing rule will apply to value of this attribute.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rule_attribute_field`)\n\n"
  attribute: String!

  "Identifies the user who has created the rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  createdBy: UserReference

  "Whether or not this rule is deleted.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  deleted: Boolean!

  "A description of what this parsing rule represents.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  description: String!

  "Whether or not this rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  enabled: Boolean!

  "The Grok of what to parse.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  grok: String!

  "Unique parsing rule identifier.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  id: ID!

  "The Lucene to match events to the parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  lucene: String!

  "The NRQL to match events to the parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  nrql: Nrql!

  "Identifies the date and time when the rule was last updated.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  updatedAt: DateTime

  "Identifies the user who has last updated the rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  updatedBy: UserReference
}

"Configuration options for a monitor downtime that runs weekly\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
input SyntheticsMonitorDowntimeWeeklyConfig {
  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endRepeat: SyntheticsDateWindowEndConfig

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"Interconnect\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpInterconnectIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Details about the contact channel where users can get support via the repository issues page\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
input Nr1CatalogIssuesContactChannelInput {
  "The URL linking the repository issues page where users can get support\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"The input for creating a new OpsGenie notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsOpsGenieNotificationChannelCreateInput {
  "API key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  apiKey: SecureValue!

  "OpsGenie data center region.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  dataCenterRegion: AlertsOpsGenieDataCenterRegion!

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "List of email recipients.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  recipients: [String!]

  "Tags.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  tags: [String!]

  "Teams.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  teams: [String!]
}

"Cognito\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsCognitoIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Provides the sorting options for grants\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantSortInput {
  "The direction which the field should be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  direction: MultiTenantAuthorizationSortDirectionEnum

  "The field to be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  key: MultiTenantAuthorizationGrantSortEnum!
}

"We have three types of browser agents: Lite, Pro, and Pro+SPA.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSettingsBrowserLoaderInput {
  """Use PRO instead."""
  FULL @deprecated(reason: "Browsers which historically had the FULL loader will now return PRO as the loader type.")

  """
  Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
  """
  LITE

  """Don't use an agent."""
  NONE

  """
  Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
  """
  PRO

  """
  Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
  """
  SPA
}

"The monitor input values needed to create a Simple Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCreateSimpleBrowserMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsSimpleBrowserMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput!

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod!

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntimeInput

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus!

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String!
}

"Information about an author\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAuthor {
  "The name of the author\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  name: String!
}

"Amazon DynamoDB\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudDynamodbIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Amazon CloudFront\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudCloudfrontIntegrationInput {
  "Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchLambdasAtEdge: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"An object that contains the overall installation status that is created from within the newrelic-cli.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InstallationInstallStatus {
  "The version of the newrelic-cli that was used for a given installation attempt.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cliVersion: SemVer!

  "Refers to the source of the installation.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  deployedBy: String!

  "Whether or not the installation is using a proxy.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  enabledProxy: Boolean!

  "The error returned for a given installation attempt.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  error: InstallationStatusError!

  "The host name of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hostName: String!

  "The unique ID that corresponds to an install status.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installId: ID!

  "The version of the open-install-library that is being used.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installLibraryVersion: SemVer!

  "Whether or not the installation is supported on the host machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  isUnsupported: Boolean!

  "The kernel architecture of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelArch: String!

  "The kernel version of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelVersion: SemVer!

  "The path to the log file on the customer's host.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  logFilePath: String!

  "The OS of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  os: String!

  "The platform name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platform: String!

  "The platform family name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformFamily: String!

  "The platform version provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformVersion: SemVer!

  "A URL generated by the newrelic-cli that redirects to the appropriate entity once an installation is complete.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  redirectUrl: String!

  "The state of the installation.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  state: InstallationInstallStateType!

  "Whether or not the installation is a targeted install.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  targetedInstall: Boolean!

  "The timestamp for when the install event occurred.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timestamp: EpochSeconds
}

"AWS IoT\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudIotIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"A Browser Application entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type BrowserApplicationEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The type of Browser agent installed for this application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentInstallType: BrowserAgentInstallType

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "The ID of the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationId: Int

  "Access general properties for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserProperties: AgentApplicationSettingsBrowserProperties

  "Settings that are common across browser applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserSettings: AgentApplicationSettingsBrowserBase

  "Summary statistics about the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  browserSummary: BrowserApplicationSummaryData

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "An Exception that occurred in your Browser Application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  exception(
    """A unique exception identifier."""
    fingerprint: Int!

    """
    The time window (60 minutes maximum) in which to search for the browser exception. Defaults to standard NRQL query window.
    """
    timeWindow: TimeWindowInput
  ): StackTraceBrowserException

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "Retrieves the entity metric grouping issues.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricGroupingIssues(
    """End time."""
    endTime: EpochMilliseconds

    """Metric normalization rule ids"""
    metricNormalizationRuleIds: [Int]

    """Start time."""
    startTime: EpochMilliseconds
  ): [MetricNormalizationRuleMetricGroupingIssue!]

  "Retrieves a rule\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  "Retrieves the rules for the application.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The running versions of the agent in the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  runningAgentVersions: BrowserApplicationRunningAgentVersions

  "The allow list for browser applications that contains a set of allowed url segments that will appear in groupings on the Page views and AJAX pages.\n\n---\n**NR Internal**\n\n * [#help-o11y-services](https://newrelic.slack.com/archives/C03SBGBP61E)\n * Team ID: No team ID provided\n\n* [segment-list-api repo](https://source.datanerd.us/O11y-Services/segment-list-api)\n\n * visibility(customer)\n\n"
  segmentAllowListAggregate(
    """Filter the lists that you would want to see"""
    filters: AgentApplicationSegmentsSegmentAllowListFilters
  ): AgentApplicationSegmentsBrowserSegmentAllowList

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The ID of the APM Application that serves this Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  servingApmApplicationId: Int

  "Configuration settings for the Browser App\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  settings: BrowserApplicationSettings

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Azure Storage\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureStorageIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Amazon Elasticsearch Service\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudElasticsearchIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchNodes: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"The occurrences of an error group\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n\n"
type ErrorsInboxOccurrences {
  "Total number of expected occurrences in the given time window.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  expectedCount: Int

  "Time of first occurrence in the given time window.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  firstSeenAt: EpochMilliseconds

  "Time of last occurrence in the given time window.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  lastSeenAt: EpochMilliseconds

  "Total number of occurrences in the given time window.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/filter_query_string`)\n\n"
  totalCount: Int
}

"Notification Triggers for the Destination Configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flags:`UEFA/expose_workflows_api` OR `UEFA/handle_notification_triggers`)\n\n\n"
enum AiWorkflowsNotificationTrigger {
  """Send a notification when the issue is acknowledged"""
  ACKNOWLEDGED

  """Send a notification when the issue is activated"""
  ACTIVATED

  """Send a notification when the issue is closed"""
  CLOSED

  """Sends notification when the issue has other updates"""
  OTHER_UPDATES

  """Send a notification when the issue's priority has changed"""
  PRIORITY_CHANGED
}

"App Gateway\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureAppgatewayIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"An AWS Lambda Function entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InfrastructureAwsLambdaFunctionEntityOutline implements AlertableEntityOutline & EntityOutline & InfrastructureIntegrationEntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  integrationTypeCode: String

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  runtime: String

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Destination input object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsDestinationInput {
  "auth\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  auth: AiNotificationsCredentialsInput

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String!

  "properties\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  properties: [AiNotificationsPropertyInput!]!

  "type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsDestinationType!
}

"Metadata associated with the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAlertPolicyTemplateMetadata {
  "A list of authors that created the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  authors: [Nr1CatalogAuthor!]!

  "The list of categories for filtering, searching, and grouping associated with the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [Nr1CatalogCategory!]!

  "The list of category terms associated with the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categoryTerms: [String!]!

  "The list of alert condition templates attached to the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  conditions: [Nr1CatalogAlertConditionTemplate!]!

  "The human-readable name for the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "The corresponding icon for the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  icon: Nr1CatalogIcon

  "A list of required data sources needed to populate data in the alert policy.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  requiredDataSources: [Nr1CatalogDataSource!]!
}

"A step that will be added to the monitor script\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsStep {
  "The position of the step within the script ranging from 1-100.\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  ordinal: Int!

  "The type of step to be added to the script\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  type: SyntheticsStepType!

  "The metadata values related to the step\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  values: [String!]
}

"A rule for setting a data retention value for a particular event namespace on an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementRule {
  "The UNIX timestamp when the event retention rule went into effect\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds

  "The New Relic ID of the user who created the event retention rule\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  createdById: Int

  "The UNIX timestamp when the event retention rule was deleted\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  deletedAt: EpochSeconds

  "The New Relic ID of the user who deleted the event retention rule\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  deletedById: Int

  "The event retention rule's unique identifier\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  id: ID

  "The namespace the event retention rule applies to\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  namespace: String

  "Length of time data will be retained (in days)\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  retentionInDays: Int
}

"Specifies the supported entity types to be all entity types\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAllSupportedEntityTypes implements Nr1CatalogSupportedEntityTypes {
  "The level of support entity types. Always set to ALL\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"Environment data found for one application instance.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentApplicationEnvironmentAttributes {
  "List of Guids of the APM Applications this instance belongs to.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationGuids: [EntityGuid!]!

  "A list of environment attributes of the application instance.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attributes: [AgentEnvironmentAttribute!]

  "Information of the application instance, such as host and language.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  details: AgentEnvironmentApplicationInstanceDetails
}

"Firebase Database Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpFirebasedatabaseIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A workload entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type WorkloadEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "When the workload was created.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds

  "The user that created the workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdByUser: UserReference

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "When the workload was last updated.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds

  "Status of the workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  workloadStatus: WorkloadStatus
}

"Information for generating the condition NRQL query.\nOutput from the evaluated NRQL query will be compared to the condition terms to detect violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlConditionQuery {
  "Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.\n\nBy default, we evaluate the NRQL query in one-minute time windows. The start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.\n\nThis value is the number of time windows we look back at the aggregated data.\n\nExample: With an `evaluationOffset` of 3, the NRQL time window applied to your query will be:\n\n`SINCE 3 minutes ago UNTIL 2 minutes ago`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  evaluationOffset: Int @deprecated(reason: "Superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.")

  "NRQL syntax that defines the query.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  query: Nrql!
}

"Pixie Project with the New Relic account\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixieLinkedPixieProject {
  "The New Relic account id\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The linked Pixie Project\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pixieProject: PixiePixieProject!
}

"Cloud Pub/Sub\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpPubsubIntegrationInput {
  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Workflow input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsCreateWorkflowInput {
  "destinationConfigurations\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationConfigurations: [AiWorkflowsDestinationConfigurationInput!]!

  "destinationsEnabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationsEnabled: Boolean

  "enrichments\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichments: AiWorkflowsEnrichmentsInput

  "enrichmentsEnabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichmentsEnabled: Boolean

  "issuesFilter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  issuesFilter: AiWorkflowsFilterInput

  "mutingRulesHandling\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  mutingRulesHandling: AiWorkflowsMutingRulesHandling!

  "name\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!

  "workflowEnabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  workflowEnabled: Boolean
}

"A time window input with default values.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flags:`Markers/deployment_markers_api` OR `Markers/v2_api`)\n\n\n"
input ChangeTrackingTimeWindowInputWithDefaults {
  "The end time of the time window. If not specified, it defaults to the current time.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flags:`Markers/deployment_markers_api` OR `Markers/v2_api`)\n\n"
  endTime: EpochMilliseconds

  "The start time of the time window. If not specified, it defaults to 60 minutes before the endTime.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flags:`Markers/deployment_markers_api` OR `Markers/v2_api`)\n\n"
  startTime: EpochMilliseconds
}

"Criteria for the resource filter\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
input ErrorsInboxResourceFilterInput {
  "Types of resources to include in the query\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  types: [ErrorsInboxResourceType!]
}

"The Google Cloud Platform cloud provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpProvider implements CloudProvider {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud provider icon name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  icon: String!

  "The cloud provider identifier in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int!

  "The cloud provider name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "Get details of one cloud provider service.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  "The service account identifier used to link the GCP project to NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  serviceAccountId: String!

  "Get details of all the cloud provider services available for integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  services: [CloudService!]!

  "The cloud provider short name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  slug: String!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Policy fields to be updated.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsPolicyUpdateInput {
  "Determines how incidents are created for critical violations of the conditions contained in the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  incidentPreference: AlertsIncidentPreference

  "Description of the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String
}

"EntityRelationship edge filter.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
input EntityRelationshipEdgeFilter {
  "Filter by direction of relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  direction: EntityRelationshipEdgeDirection

  "Filter on entity domain-types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  entityDomainTypes: EntityRelationshipEntityDomainTypeFilter

  "Filter on relationship types.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relationshipTypes: EntityRelationshipEdgeTypeFilter
}

"Environment created detailed result\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentEnvironmentCreated {
  "The created environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment!
}

"Result of a private location mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsPrivateLocationMutationResult {
  "The account associated to the private location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  accountId: Int

  "A description of the private location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  description: String

  "The private location globally unique identifier\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  domainId: String

  "An array container errors resulting from the mutation, if any\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsPrivateLocationMutationError]

  "The unique client identifier for the Synthetics private location in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The private locations key\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  key: String

  "An alternate identifier based on name\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locationId: String

  "The name of the private location\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "Specifies whether the private location requires a password for scripted monitors\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  verifiedScriptExecution: Boolean
}

"Compliance type codes that can be applied to a trace observer\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeComplianceTypeCode {
  """Fedramp compliant"""
  FEDRAMP
}

"Input for updating MutingRules for New Relic Alerts Violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsMutingRuleUpdateInput {
  "The condition that defines which violations to target.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  condition: AlertsMutingRuleConditionGroupInput

  "The description of the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the MutingRule is enabled\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "The name of the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "The time window when the MutingRule should actively mute violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  schedule: AlertsMutingRuleScheduleUpdateInput
}

"Managed Kafka\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsMskIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Response error object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsResponseError {
  "Error description\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  description: String!

  "Error details\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  details: String!

  "Error type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsErrorType!
}

"Input for updating a static NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionUpdateStaticInput {
  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the NRQL condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpirationInput

  "Name of the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionUpdateQueryInput

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignalInput

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlConditionTermsInput!]

  "Deprecated - use `signal.slideBy` instead.\n\nFunction used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation is opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  valueFunction: AlertsNrqlStaticConditionValueFunction

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes. Default is THIRTY_DAYS.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit

  "Duration after which a violation automatically closes in seconds.\nAccepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).\n\nDefault is 3 days (259200 seconds).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"The role associated to the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type MultiTenantAuthorizationGrantRole {
  "The id of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: Int!
}

"Expected error types that can be returned by create operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardCreateErrorType {
  """Invalid input error."""
  INVALID_INPUT
}

"Possible levels of support\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogSupportLevel {
  """Community supported"""
  COMMUNITY

  """Enterprise supported"""
  ENTERPRISE

  """New Relic supported"""
  NEW_RELIC

  """Partner supported"""
  VERIFIED
}

"A notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
interface AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"Database for MariaDB\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureMariadbIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The list of operators to be used in a MutingRuleCondition. Each operator is limited to one value in the `values` list unless otherwise specified.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsMutingRuleConditionOperator {
  """Where attribute is any."""
  ANY

  """Where attribute contains value."""
  CONTAINS

  """Where attribute ends with value."""
  ENDS_WITH

  """Where attribute equals value."""
  EQUALS

  """Where attribute in values. (Limit 500)"""
  IN

  """Where attribute is blank."""
  IS_BLANK

  """Where attribute is not blank."""
  IS_NOT_BLANK

  """Where attribute does not contain value."""
  NOT_CONTAINS

  """Where attribute does not end with value."""
  NOT_ENDS_WITH

  """Where attribute does not equal value."""
  NOT_EQUALS

  """Where attribute not in values. (Limit 500)"""
  NOT_IN

  """Where attribute does not start with value."""
  NOT_STARTS_WITH

  """Where attribute starts with value."""
  STARTS_WITH
}

"Transaction tracer settings related to APM applications. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsTransactionTracer {
  "DEPRECATED: Please use capture_memcache_keys on parent type.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  captureMemcacheKeys: Boolean

  "If true, this enables the transaction tracer feature, enabling collection of transaction traces.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  explainEnabled: Boolean

  "Relevant only when explain_enabled is true. Can be set to automatic configuration (APDEX_F) or manual (see explainThresholdValue).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  explainThresholdType: AgentApplicationSettingsThresholdTypeEnum

  "Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explainEnabled is true and explainThresholdType is set to VALUE.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  explainThresholdValue: Seconds

  "Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  logSql: Boolean

  "Obfuscation level for SQL queries reported in transaction trace nodes.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  recordSql: AgentApplicationSettingsRecordSqlEnum

  "Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  stackTraceThreshold: Seconds

  "Relevant only when TransactionTracer is enabled. Can be set to automatic configuration (APDEX_F) or manual (see TransactionThresholdValue).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  transactionThresholdType: AgentApplicationSettingsThresholdTypeEnum

  "Threshold (in seconds) that transactions with a duration longer than this threshold are eligible for transaction traces.  Relevant only when transaction tracer is enabled and transaction_threshold_type is set to VALUE.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  transactionThresholdValue: Seconds
}

"A Granted Role represents the access given to a group.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementGrantedRole {
  "the account that this role grants access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  accountId: Int

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  displayName: String

  "the group that this role grants access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groupId: ID

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  name: String!

  "the organization this role grants access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  organizationId: ID

  "the role that defines this access\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roleId: Int!

  "the type of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  type: ID!
}

"The result of the entityRelationshipUserDefinedDelete mutation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipUserDefinedDeleteResult {
  "The list of errors that occurred when executing the mutation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  errors: [EntityRelationshipUserDefinedDeleteResultError!]
}

"The NRQL SELECT clause to aggregate events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelEventsQuerySelectUpdateInput {
  "The attribute used in the selected function. Only use it in combination with the SUM, GET_FIELD and GET_CDF_COUNT functions.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attribute: String

  "The function to use in the SELECT clause.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  function: ServiceLevelEventsQuerySelectFunction!

  "The threshold used in the selected function. Only use it in combination with the GET_CDF_COUNT function.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  threshold: Float
}

"The result after creating a new parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
type LogConfigurationsCreateParsingRuleResponse {
  "List of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  errors: [LogConfigurationsParsingRuleMutationError]

  "The created parsing rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  rule: LogConfigurationsParsingRule
}

"The result of a Broken Links monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsBrokenLinksMonitorUpdateMutationResult {
  "Errors that occurred during Broken Links monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorUpdateError]!

  "The resulting Broken Links monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsBrokenLinksMonitor
}

"Provides the available values of possible fields that can be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationAccountSortKeyEnum {
  """Account ID"""
  ID

  """Account Name"""
  NAME
}

"The type of Span Anomaly being reported (currently only Duration is supported).\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
enum DistributedTracingSpanAnomalyType {
  """An anomaly type related to the duration of the span."""
  DURATION
}

"A filter for Account name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountNameFilterInput {
  "Search text for an account name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  contains: String!
}

"Indicates by which field the remaining entities rule should be grouped.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
enum WorkloadGroupRemainingEntitiesRuleBy {
  """Group the remaining entities rule by entity type."""
  ENTITY_TYPE

  """Do not apply any grouping to the remaining entities rule."""
  NONE
}

"X-Ray\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsXrayIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"VPC Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudVpcIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchNatGateway: Boolean

  "Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchVpn: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Configure distributed traces from within browser apps.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsBrowserDistributedTracingInput {
  "Supplies allowed origins for distributed tracing in browser.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  allowedOrigins: [String!]

  "Enables CORS for distributed tracing in browser.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  corsEnabled: Boolean

  "Enables the use of the `newrelic` header for CORS requests with distributed tracing. [See Docs](https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/browser-data-distributed-tracing/#cors) for more information.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  corsUseNewrelicHeader: Boolean

  "Enables CORS to use tracecontext headers for distributed tracing in browser.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  corsUseTracecontextHeaders: Boolean

  "Enables distributed tracing in browser.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Enables the `newrelic` header to be excluded in distributed tracing in browser.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  excludeNewrelicHeader: Boolean
}

"A Type of resource\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
enum ErrorsInboxResourceType {
  """A JIRA issue"""
  JIRA_ISSUE
}

"OAuth2 auth input object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsOAuth2AuthInput {
  "accessTokenUrl\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  accessTokenUrl: String!

  "authorizationUrl\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  authorizationUrl: String!

  "clientId\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  clientId: String!

  "clientSecret\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  clientSecret: SecureValue!

  "prefix\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  prefix: String

  "refreshInterval\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  refreshInterval: Int

  "refreshToken\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  refreshToken: SecureValue

  "refreshable\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  refreshable: Boolean!

  "scope\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  scope: String

  "token\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  token: SecureValue!
}

"Input type for FixedFuzzyWuzzyPartialRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedFuzzyWuzzyPartialRatioInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Information about a facet count on a component\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogComponentFacet {
  "The type of component\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  component: Nr1CatalogSearchComponentType!

  "The count of results for this component\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  count: Int!
}

"Assign error group error\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxAssignErrorGroupError implements ErrorsInboxResponseError {
  "The description of the error\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  description: String!

  "The error type\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  type: ErrorsInboxAssignErrorGroupErrorType!
}

"Cloud Pub/Sub Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpPubsubIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The `SortBy` enum is for designating sort order.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum SortBy {
  """Sort in ascending order."""
  ASC

  """Sort in descending order."""
  DESC
}

"Amazon Elastic File System (EFS)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudEfsIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Channel result object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsVariableResult {
  "Variable entities\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  entities: [AiNotificationsVariable!]!

  "Cursor to get the next batch of results\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  nextCursor: String

  "Count of all variable entities\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  totalCount: Int!
}

"Delete response object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsDeleteResponse {
  "Error in object deletion\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsResponseError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "Deleted object ids\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  ids: [ID!]
}

"Enumerations of role scopes\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantAuthorizationRoleScopeEnum {
  """Account scoped role"""
  ACCOUNT

  """Organization scoped role"""
  ORGANIZATION
}

"An object that represents the golden metrics scoped by domain and type mutation result\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenMetricsDomainTypeScopedResponse {
  "The list of the errors\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  errors: [EntityGoldenGoldenMetricsError!]

  "The metrics results of the mutations\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  metrics: EntityGoldenMetricsDomainTypeScoped
}

"The Nerdpack root object. Contains the Nerdpack information including the list of versions and subscriptions.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackData {
  "Unique identifier of the account that owns the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "Get the list of accounts specified on the allow list.\nIf the user is authorized to the nerdpack owner account all the allowed accounts will be displayed,\notherwise, only the intersection of allowed accounts and user authorized accounts will be displayed.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  allowedAccounts: [NerdpackAllowedAccount]

  "Unique V5 uuid that identifies the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "Type that defines the rules for account subscription.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  subscriptionModel: NerdpackSubscriptionModel

  "List of subscriptions on versions of the given Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  subscriptions: [NerdpackSubscription]

  "Retrieve the versions for the given Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  versions(
    """Pagination cursor. Defaults to first page"""
    cursor: String

    """Version filter"""
    filter: NerdpackVersionFilter
  ): NerdpackVersionsResult
}

"Response type for delete operations over entities.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityDeleteResult {
  "List that contains the guids of the deleted entities\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  deletedEntities: [EntityGuid!]!

  "List of failures for the delete operation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  failures: [EntityDeleteError!]!
}

"A \"user type\" is what determines the set of New Relic capabilities a user can theoretically access.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementUserType {
  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  displayName: String!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Expected error types as result of creating a new data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
enum LogConfigurationsCreateDataPartitionRuleErrorType {
  """A data partition rule with the provided name already exists."""
  DUPLICATE_DATA_PARTITION_RULE_NAME

  """The provided data partition does not match the validation requirements"""
  INVALID_DATA_PARTITION_INPUT

  """
  Customer has reached the maximum number of allowed data partition rules.
  """
  MAX_DATA_PARTITION_RULES
}

"A generic entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type GenericEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Possible types of configured alert conditions\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogQuickstartAlertConditionType {
  """A baseline alert condition"""
  BASELINE

  """An outlier alert condition"""
  OUTLIER @deprecated(reason: "Outlier alert conditions are no longer supported")

  """A static alert condition"""
  STATIC
}

"Visualization configuration.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardWidgetVisualizationInput {
  "This field can either have a known type like `viz.area` or `<nerdpack-id>.<visualization-id>` in the case of [custom visualizations](https://developer.newrelic.com/explore-docs/custom-viz/build-visualization/). Check out [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-schema) for more info.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  id: String
}

"Input type for FixedGreaterThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedGreaterThanInput {
  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  compared: Float!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!
}

"Filter incidents events\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
input AiIssuesFilterIncidentsEvents {
  "entityGuids\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: [EntityGuid!]

  "entityTypes\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: [String!]

  "ids\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  ids: [ID!]
}

"Provides all the available filters on the customer id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationCustomerIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: String!
}

"Error details about the rule that failed to be created and why.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesCreateDropRuleFailure {
  "Information about why the create failed.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  error: NrqlDropRulesError!

  "Input information about a submitted rule that was unable to be created.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  submitted: NrqlDropRulesCreateDropRuleSubmission!
}

"Configuration settings related to how a browser agent handles Ajax requests.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsBrowserAjaxInput {
  "A list of host destinations that will not record AjaxRequest events when requested.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  denyList: [String!]
}

"Interface type representing a query suggestion.\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface SuggestedNrqlQuery {
  "The NRQL string to run for the suggested query\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: String!

  "A human-readable title describing what the query shows\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  title: String!
}

"Input type for And expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsAndInput {
  "Left child expression.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsRuleExpressionInput!

  "Right child expression.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsRuleExpressionInput!
}

"The result of which submitted events to metrics rules were successfully and unsuccessfully created\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsCreateRuleResult {
  "Rules that were not created and why.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  failures: [EventsToMetricsCreateRuleFailure]

  "Rules that were successfully created.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  successes: [EventsToMetricsRule]
}

"A static status that was involved in the calculation of the workload status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadStaticStatusResult implements WorkloadStatusResult {
  "A description that provides additional details about the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "Indicates where the status value derives from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  source: WorkloadStatusSource!

  "A short description of the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  summary: String

  "The value of a static status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  value: WorkloadStatusValue!
}

"Data of accounts to be unsubscribed.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackUnsubscribeAccountsInput {
  "List of accounts to be unsubscribed.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountIds: [Int!]!
}

"Autogenerated return type of UpdateGroup.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementUpdateGroupPayload {
  "The group that was updated\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  group: UserManagementGroup
}

"Virtual Machines Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureVmsIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Widget layout.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardWidgetLayout {
  "Column position of widget from top left, starting at 1.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  column: Int

  "Height of the widget. Valid values are 1 to 12 inclusive. Defaults to 3.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  height: Int

  "Row position of widget from top left, starting at 1.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  row: Int

  "Width of the widget. Valid values are 1 to 12 inclusive. Defaults to 4.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  width: Int
}

"Configuration options for when a monitor downtime should end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsDateWindowEndOutput {
  "End the monitor downtime on a particular date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  onDate: Date

  "End the monitor downtime after a set number of occurrences\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  onRepeat: Int
}

"Widget input.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardWidgetInput {
  "Typed widgets are area, bar, billboard, line, markdown, pie, and table. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-typed) for more info.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  configuration: DashboardWidgetConfigurationInput

  "ID of the widget. If null, a new widget will be created and added to a dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  id: ID

  "The widget's position and size in the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  layout: DashboardWidgetLayoutInput

  "Entities related to the widget. Currently only supports one Dashboard entity guid, but may allow other cases in the future.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  linkedEntityGuids: [EntityGuid!]

  "Untyped widgets are all other widgets, such as bullet, histogram, inventory, etc. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-untyped) for more info.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  rawConfiguration: DashboardWidgetRawConfiguration

  "A title for the widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "Specifies how this widget will be visualized. If null, the WidgetConfigurationInput will be used to determine the visualization.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  visualization: DashboardWidgetVisualizationInput
}

"All the details necessary to configure an agent to connect to an endoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeAgentEndpointDetail implements EdgeEndpointDetail {
  "Full host name that is used to connect to the endpoint. This is the part that will be placed into an agent config named `infinite_tracing.trace_observer.host`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  host: String!

  "Port that is used to connect to the endpoint. This is the part that will be placed into an agent config named `infinite_tracing.trace_observer.port`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  port: Int!
}

"The input configuration for updating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNotificationChannelUpdateConfiguration {
  "The input configuration for updating an Email notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  email: AlertsEmailNotificationChannelUpdateInput

  "The input configuration for updating an OpsGenie notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  opsGenie: AlertsOpsGenieNotificationChannelUpdateInput

  "The input configuration for updating a PagerDuty notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  pagerDuty: AlertsPagerDutyNotificationChannelUpdateInput

  "The input configuration for updating a Slack notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  slack: AlertsSlackNotificationChannelUpdateInput

  "The input configuration for updating a VictorOps notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  victorOps: AlertsVictorOpsNotificationChannelUpdateInput

  "The input configuration for updating a Webhook notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  webhook: AlertsWebhookNotificationChannelUpdateInput

  "The input configuration for updating an xMatters notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  xMatters: AlertsXMattersNotificationChannelUpdateInput
}

"container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementGroupSearch {
  "contains roles granted to users's groups\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groups: [AuthorizationManagementGroup!]!

  "an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Information about an event-to-metric rule which creates metrics from events.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsRule {
  "Account with the event and where the metrics will be placed.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The time at which the rule was created\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: DateTime!

  "Additional information about the rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "True means this rule is enabled. False means the rule is currently not creating metrics.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The id, uniquely identifying the rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "The name of the rule. This must be unique within an account.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Explains how to create metrics from events.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: String!

  "The time at which the rule was updated\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: DateTime!
}

"Attribute belonging to a loaded module.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentLoadedModuleAttribute {
  "Name of the module attribute.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Value of the module attribute.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Autogenerated return type of DeleteGroup.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementDeleteGroupPayload {
  "The group that was deleted\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  group: UserManagementGroup
}

"Input for updating an obfuscation rule.\nNull fields are left untouched by mutation.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
input LogConfigurationsUpdateObfuscationRuleInput {
  "Actions for the rule. When non-null, this list of actions is used to replace\nthe existing list of actions of the rule. The actions will be applied in the\norder specified by this list.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  actions: [LogConfigurationsUpdateObfuscationActionInput!]

  "Description of rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  description: String

  "Whether the rule should be applied or not to incoming data.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  enabled: Boolean

  "NRQL for determining whether a given log record should have obfuscation actions applied.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  filter: Nrql

  "Rule Id.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  id: ID!

  "Name of rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  name: String
}

"Provides the types of grant scopes available\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantAuthorizationGrantScopeEnum {
  """Grant scoped to an account"""
  ACCOUNT

  """Grant scoped to a group"""
  GROUP

  """Grant scoped to an organization"""
  ORGANIZATION
}

"A wrapper object that contains paginated install statuses along with counts and a pagination cursor\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type InstallationInstallStatusResult {
  "Cursor for fetching next page of results.  Results are ordered by descending timestamp (most recent first)\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cursor: String

  "List of InstallStatus objects\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installStatuses: [InstallationInstallStatus!]

  "Total number of InstallStatus results across all pages for a given query\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  totalCount: Int
}

"In the Java agent (v8.0.0 or later), the Java Flight Recorder can be turned on to collect additional information about the application. This setting cannot be updated for non-java agents.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsJfrInput {
  "Whether or not JFR is enabled.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean
}

"The result of creating a key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type KeyTransactionCreateResult {
  "The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apdexTarget: Float

  "The application associated with this key transaction\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  application: KeyTransactionApplication!

  "The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  browserApdexTarget: Float

  "The GUID for the new key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The name of the metric underlying this key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metricName: String

  "The name of the key transaction.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"A filter for organization create job results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationCreateAsyncResultFilterInput {
  "Filter organization create job results by customer ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customerId: OrganizationOrganizationCreateJobCustomerIdInput

  "Filter oganization create job results by id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  jobId: OrganizationOrganizationCreateJobIdInput

  "Filter organization create job results by status\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  status: OrganizationOrganizationCreateJobStatusInput
}

"A data structure that contains the results of the NRDB query along\nwith other capabilities that enhance those results.\n\nDirect query results are available through `results`, `totalResult` and\n`otherResult`. The query you made is accessible through `nrql`, along with\n`metadata` about the query itself. Enhanced capabilities include\n`eventDefinitions`, `suggestedFacets` and more.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NrdbResultContainer {
  "In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  currentResults: [NrdbResult]

  "Generate a publicly sharable Embedded Chart URL for the NRQL query.\n\nFor more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api#embeddable-charts).\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  embeddedChartUrl(
    """
    The type of chart visualization you want rendered.
    
    We will default to the best fit for the provided NRQL query if omitted.
    """
    chartType: EmbeddedChartType
  ): String

  "Retrieve a list of event type definitions, providing descriptions\nof the event types returned by this query, as well as details\nof their attributes.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eventDefinitions: [EventDefinition]

  "Metadata about the query and result.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metadata: NrdbMetadata

  "The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query that was executed to yield these results.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: Nrql

  "In a `FACET` query, the `otherResult` contains the aggregates representing the events _not_\ncontained in an individual `results` facet.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  otherResult: NrdbResult

  "In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  previousResults: [NrdbResult]

  "Metadata about the execution of an asynchronous NRQL query.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  queryProgress: NrdbQueryProgress

  "The raw query results exactly as they are returned from NRDB. NerdGraph provides no additional transformation.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  rawResponse: NrdbRawResults

  "The query results. This is a flat list of objects who's structure matches the query submitted.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  results: [NrdbResult]

  "Generate a publicly sharable static chart URL for the NRQL query.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  staticChartUrl(
    """
    The type of static chart visualization you want rendered.
    
    We will default to the best fit for the provided NRQL query if omitted.
    """
    chartType: ChartImageType

    """The type of static chart format you want rendered."""
    format: ChartFormatType = PNG

    """The height of static chart format you want rendered."""
    height: Int

    """The width of static chart format you want rendered."""
    width: Int
  ): String

  "Retrieve a list of suggested NRQL facets for this NRDB query, to be used with\nthe `FACET` keyword in NRQL.\n\nResults are based on historical query behaviors.\n\nIf the query already has a `FACET` clause, it will be ignored for the purposes\nof suggesting facets.\n\nFor more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/nerdgraph-graphiql-nrql-tutorial#suggest-facets).\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  suggestedFacets: [NrqlFacetSuggestion]

  "Suggested queries that could help explain an anomaly in your timeseries based on either statistical differences in the data or historical usage.\n\nIf no `anomalyTimeWindow` is supplied, we will attempt to detect a spike in the NRQL results. If no spike is found, the suggested query results will be empty.\n\nInput NRQL must be a TIMESERIES query and must have exactly one result.\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  suggestedQueries(
    """
    The time window of a specific anomaly in milliseconds since Epoch time.
    """
    anomalyTimeWindow: TimeWindowInput
  ): SuggestedNrqlQueryResponse

  "In a `FACET` query, the `totalResult` contains the aggregates representing _all_ the events,\nwhether or not they are contained in an individual `results` facet.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  totalResult: NrdbResult
}

"A workload entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type WorkloadEntity implements AlertableEntity & CollectionEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  collection(
    """The name of the collection to fetch."""
    name: String!
  ): EntityCollection

  "When the workload was created.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds

  "The user that created the workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdByUser: UserReference

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "When the workload was last updated.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds

  "Status of the workload.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  workloadStatus: WorkloadStatus
}

"The status of a MutingRule based on whether it is Enabled and has a Schedule\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsMutingRuleStatus {
  """Muting is enabled and active."""
  ACTIVE

  """Muting is enabled, but no longer active (there's no future schedule)."""
  ENDED

  """Muting is disabled."""
  INACTIVE

  """Muting is enabled but not active yet (there's a future schedule)."""
  SCHEDULED
}

"QLDB Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsQldbIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Identifying information about the events to metrics rule you want to update.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input EventsToMetricsUpdateRuleInput {
  "A submitted account id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "Changes the state of the rule as being enabled or disabled.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "A submitted rule id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleId: ID!
}

"Incident interface\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
interface AiIssuesIIncident {
  "account\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`III/api_access`)\n\n"
  account: AccountReference

  "An account id this incident is stored in\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  accountIds: String!

  "The time the incident was closed\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  closedAt: EpochMilliseconds

  "The time the incident was created\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  createdAt: EpochMilliseconds!

  "The description is generated from the policy name and the condition name or provided through API\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  description: [String!]!

  "A list of unique entity identifiers\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: EntityGuid

  "A list of entity names\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityNames: String

  "A list of entity types\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: String

  "See our documentation to learn about environments\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  environmentId: Int! @deprecated(reason: "Use account")

  "Incident identifier\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentId: ID!

  "Incident priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: AiIssuesPriority!

  "Incident state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  state: AiIssuesIncidentState!

  "Incident event timestamp\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  timestamp: EpochMilliseconds!

  "The description the user gave the condition if provided. Otherwise the incident description\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  title: String!

  "The time the incident was last updated\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  updatedAt: EpochMilliseconds!
}

"Information for generating the condition NRQL query.\nOutput from this NRQL query will be compared to the condition terms to detect violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionUpdateQueryInput {
  "Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.\n\nBy default, we evaluate the NRQL query in one-minute time windows. Start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.\n\nThis value is the number of time windows we look back at the aggregated data.\n\nExample: With an `evaluationOffset` of 3, the NRQL time window applied to your query will be:\n\n`SINCE 3 minutes ago UNTIL 2 minutes ago`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  evaluationOffset: Int

  "NRQL syntax that defines the query.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  query: String
}

"Virtual machine scale sets Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureVirtualmachineIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Data required to delete a trace observer.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeDeleteTraceObserverInput {
  "Globally unique identifier of the trace observer being deleted.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  id: Int!
}

"Autogenerated return type of GrantAccess\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementGrantAccessPayload {
  "the roles that were granted to this group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roles: [AuthorizationManagementGrantedRole!]!
}

"Input type for AttributeExists expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsAttributeExistsInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!
}

"Information about an Agent release\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentRelease {
  "Patch for a bug\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  bugs: [String]

  "The date of the release\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  date: Date

  "Link to agent distribution\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  downloadLink: String

  "The date the release will reach the end of its life. See [New Relic's EOL Policy](https://docs.newrelic.com/docs/licenses/end-of-life/notification-changes-new-relic-saas-features-distributed-software/) for details\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eolDate: Date

  "New feature or instrumentation\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  features: [String]

  "Fix for a security vulnerability\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  security: [String]

  "The release note's location on the docs website. The full URL would be prefixed with [https://docs.newrelic.com](https://docs.newrelic.com/)\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  slug: String

  "The version of the release\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  version: String
}

"Provides the available values of possible directions to sort the result\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationAccountShareSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementOrganizationStitchedFields {
  "list of authentication domains\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  authenticationDomains(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """an optional list of ids to filter by"""
    id: [ID!]
  ): AuthorizationManagementAuthenticationDomainSearch

  "list of roles\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roles(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """an optional list of ids to filter by"""
    id: [ID!]
  ): AuthorizationManagementRoleSearch
}

"The time window when the MutingRule should actively mute violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsMutingRuleScheduleInput {
  "The datetime stamp when the MutingRule schedule should stop repeating.\nThis is in local ISO 8601 format without an offset.\n\nExample: `'2020-07-10T15:00:00'`\n\nNote: Either `endRepeat` or `repeatCount` should be used to end a MutingRule schedule.\nBoth fields should not be provided together.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  endRepeat: NaiveDateTime

  "The datetime stamp representing when the MutingRule should end.\nThis is in local ISO 8601 format without an offset.\n\nExample: `'2020-07-10T15:00:00'`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  endTime: NaiveDateTime

  "The frequency the MutingRule schedule repeats.\nIf the MutingRule repeats `WEEKLY`, be sure to set `weeklyRepeatDays`.\nIf the MutingRule does not repeat, use `null`.\n\nExample: `DAILY`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  repeat: AlertsMutingRuleScheduleRepeat

  "The number of times the MutingRule schedule should repeat.\n\nNote: Either `repeatCount` or `endRepeat` should be used to end a MutingRule schedule.\nBoth fields should not be provided together.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  repeatCount: Int

  "The datetime stamp representing when the MutingRule should start.\nThis is in local ISO 8601 format without an offset.\n\nExample: `'2020-07-08T14:30:00'`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  startTime: NaiveDateTime

  "The time zone that applies to the MutingRule schedule.\n\nExample: `'America/Los_Angeles'`\n\nSee https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  timeZone: String!

  "The day(s) of the week that a MutingRule should repeat when the repeat field is set to `WEEKLY`.\n\nExample: `[MONDAY, WEDNESDAY]`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  weeklyRepeatDays: [AlertsDayOfWeek!]
}

"The NRQL SELECT clause to aggregate events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelEventsQuerySelectCreateInput {
  "The attribute used in the selected function. Only use it in combination with the SUM, GET_FIELD and GET_CDF_COUNT functions.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attribute: String

  "The function to use in the SELECT clause.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  function: ServiceLevelEventsQuerySelectFunction!

  "The threshold used in the selected function. Only use it in combination with the GET_CDF_COUNT function.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  threshold: Float
}

"A list of all keys scoped to the current actor.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessKeySearchResult {
  "The total number of keys found in scope, irrespective of pagination.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  count: Int

  "A list of all keys scoped to the current actor.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  keys: [ApiAccessKey]

  "The next cursor, used for pagination. If a cursor is present, it means more keys can be fetched.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Representation of the New Relic agent collecting data.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentApplicationInstance {
  "Contains environment attributes regarding the reported setting of the reporting agent.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentSettingsAttributes(
    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): [AgentEnvironmentAttribute!]

  "Information of the application instance, such as host and language.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  details: AgentEnvironmentApplicationInstanceDetails!

  "Contains general environment attributes from the same environment where the application instance is running.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  environmentAttributes(
    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): [AgentEnvironmentAttribute!]

  "Contains environment attributes regarding modules loaded by the application instance. Used only by the Java agent.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  modules(
    """Filter to apply to results on module name field."""
    filter: AgentEnvironmentFilter
  ): [AgentEnvironmentApplicationLoadedModule!]
}

"Paginated information about Quickstarts\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartsListing {
  "Cursor used to fetch the next set of results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "The list of quickstart results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  results: [Nr1CatalogQuickstart!]!

  "The total number of quickstart results\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"The user is not authorized for this account\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount {
  "The account id the user is not authorized to receive an environment for\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!
}

"Represents the result of the query history record.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n\n"
type QueryHistoryNrqlHistoryResult {
  "List of cross accounts where the query is executed.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n"
  accountIds: [Int!]

  "The time the query was created as an ISO8601 formatted string.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n"
  createdAt: DateTime

  "Query executed.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n"
  query: Nrql
}

"A cloud account linked to a NewRelic account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudLinkedAccount {
  "The credential. This is a Role ARN for AWS, an application ID for Azure and a service account ID or user account email for GCP.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  authLabel: String!

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Indicates whether the account disabled.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  disabled: Boolean

  "The cloud account identifier. This is the Account ID in AWS, the Subscription ID in Azure and the Project ID in GCP.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  externalId: String

  "The linked account identifier in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int!

  "Get details of one cloud service integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  integration(
    """The cloud service integration identifier."""
    id: Int!
  ): CloudIntegration!

  "Get details of all cloud service integrations.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  integrations(
    """The cloud integration service slug."""
    service: String
  ): [CloudIntegration!]!

  "Indicate how the metrics will be collected (PUSH/PULL)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricCollectionMode: CloudMetricCollectionMode!

  "The linked account name in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "The New Relic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud provider.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  provider: CloudProvider!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Search criteria for returning specific NRQL conditions.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionsSearchCriteriaInput {
  "Exact name of the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "String to partially match a NRQL condition name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nameLike: String

  "Policy ID associated with the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policyId: ID

  "Exact NRQL query used in the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  query: String

  "String to partially match the NRQL query used in the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  queryLike: String

  "Terms operator to match while searching for NRQL conditions.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  termsOperator: AlertsNrqlConditionTermsOperator
}

"An ingest key error. Each error maps to a single key input.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessIngestKeyError implements ApiAccessKeyError {
  "The account ID of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  accountId: Int

  "The error type of the error.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  errorType: ApiAccessIngestKeyErrorType

  "The `id` of the key being updated.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  id: String

  "The ingest type of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  ingestType: ApiAccessIngestKeyType

  "A message about why the key creation failed.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  message: String

  "The type of the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  type: ApiAccessKeyType
}

"A notification channel ID - temporarily until addToPolicy will support returning full notification channels.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelId {
  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID! @deprecated(reason: "This type will be removed once we add the ability to return full notification channels in addToPolicy")
}

"Elemental MediaConvert\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsMediaconvertIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Input type for RelativeLessThan expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeLessThanInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"AlloyDB\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpAlloydbIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The result of a metric rename rule mutation\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
type MetricNormalizationRuleMutationResponse {
  "An array containing errors, if any.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  errors: [MetricNormalizationRuleMutationError]

  "The created rule\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  rule: MetricNormalizationRule
}

"Workflows query response\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsWorkflows {
  "List of all workflows\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  entities: [AiWorkflowsWorkflow!]!

  "Cursor to get the next batch of results\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  nextCursor: String

  "Total count of all workflows\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  totalCount: Int!
}

"A method within the flamegraph\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type JavaFlightRecorderStackFrame {
  "The number of stack traces that this frame is in\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "This stackframe's id\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "The stackframe's class and method name\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "This stackframe's parent id\n\n---\n**NR Internal**\n\n * [#java-agent](https://newrelic.slack.com/archives/C0NUYPJKA)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  parentId: ID
}

"A key-value entry.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiTopologyCollectorAttributeInput {
  "Key of entry.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  key: String!

  "Value of entry.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Expected default error types as result of mutating an existing data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
enum LogConfigurationsDataPartitionRuleMutationErrorType {
  """Number format error. ID should be convertible to int."""
  INVALID_ID

  """Partition rule must be specified with a valid nrql where clause"""
  INVALID_RULE

  """Couldn't find the provided data partition rule."""
  NOT_FOUND
}

"Filter input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsFilterInput {
  "name\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String

  "predicates\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  predicates: [AiWorkflowsPredicateInput!]!

  "type\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  type: AiWorkflowsFilterType!
}

"The errors that can be returned when recording the Pixie terms of service acceptance\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum PixieRecordPixieTosAcceptanceErrorType {
  """
  Some required data to record the Pixie terms of service acceptance is missing
  """
  MISSING_DATA
}

"The error type for deleting a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNotificationChannelDeleteErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"A user defined group of entities without Status\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadCollectionWithoutStatus {
  "The account the workload belongs to.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference

  "The moment when the object was created, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "The user who created the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdBy: UserReference

  "Relevant information about the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entities: [WorkloadEntityRef!]

  "A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [WorkloadEntitySearchQuery!]

  "The entity search query that returns the full collection of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQuery: String

  "The unique entity identifier of the workload in New Relic.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  guid: EntityGuid!

  "The unique identifier of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int!

  "The workload's name.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  name: String!

  "The URL of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  permalink: String!

  "Accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  scopeAccounts: WorkloadScopeAccounts!

  "The configuration that defines how the status of the workload is calculated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  statusConfig: WorkloadStatusConfig

  "The moment when the object was last updated, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds

  "The user who last updated the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedBy: UserReference
}

"The input object representing the group(s) and user(s) to update.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementUsersGroupsInput {
  "The id of the group(s) to add the user(s) to. Max: 10\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groupIds: [ID!]!

  "The id of the user(s) to be added to the group(s). Max: 50\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userIds: [ID!]!
}

"Information required to unlink (remove) a linked account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudUnlinkAccountsInput {
  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!
}

"A container for the various support channels\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogSupportChannels {
  "A support channel available via the community\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  community: Nr1CatalogCommunityContactChannel

  "A support channel available via email\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  email: Nr1CatalogEmailContactChannel

  "A support channel available via an issues page\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  issues: Nr1CatalogIssuesContactChannel
}

"Configuration options for when a monthly monitor downtime should run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsMonitorDowntimeMonthlyFrequencyOutput {
  "Which dates a monitor downtime is run\n (only 1 of these can be selected)\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  daysOfMonth: [Int]

  "Which weekdays in the month the monitor downtime will run\n (only 1 of these can be selected)\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  daysOfWeek: SyntheticsDaysOfWeekOutput
}

"List of providers\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudDisableIntegrationsInput {
  "Aws provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  aws: CloudAwsDisableIntegrationsInput

  "AwsGovcloud provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsGovcloud: CloudAwsGovcloudDisableIntegrationsInput

  "Azure provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azure: CloudAzureDisableIntegrationsInput

  "Gcp provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcp: CloudGcpDisableIntegrationsInput
}

"Input for updating an outlier NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionUpdateOutlierInput {
  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the NRQL condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Number of groups expected in the returned values for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expectedGroups: Int

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpirationInput

  "Name of the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionUpdateQueryInput

  "Whether overlapping groups should produce a violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  openViolationOnGroupOverlap: Boolean

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignalInput

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlDynamicConditionTermsInput!]

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes. Default is THIRTY_DAYS.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit

  "Duration after which a violation automatically closes in seconds.\nAccepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).\n\nDefault is 3 days (259200 seconds).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"Determines whether a threshold is statically configured or dynamically configured.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSettingsThresholdTypeEnum {
  """Configures the threshold to be 4 times the value of APDEX_T."""
  APDEX_F

  """
  Threshold will be statically configured via the corresponding "value" field.
  """
  VALUE
}

"Result of delete operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardDeleteResult {
  "Expected errors while processing request.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardDeleteError]

  "The status of the attempted delete.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  status: DashboardDeleteResultStatus
}

"Cloud Storage Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpStorageIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The organization's administrator\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationAdministrator {
  "The organization id of the organization's administrator\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationId: ID

  "The organization name of the organization's administrator\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationName: String
}

"A data source (i.e., New Relic entity) that is associated with this trace observer. Currently, we support adding Browser, Lambda, and Mobile entities as data sources.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDataSource {
  "The entity representing this data source.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  entity: EntityOutline

  "The status of whether data is being sent to this trace observer for this data source.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  status: EdgeDataSourceStatusType!
}

"Browser monitoring's page load timing feature can track sessions by using cookies that contain a simple session identifier.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsBrowserPrivacyInput {
  "If enabled, enables cookies.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  cookiesEnabled: Boolean
}

"Notification channel types that are available for create and update operations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
union AlertsNotificationChannelMutation = AlertsEmailNotificationChannel | AlertsOpsGenieNotificationChannel | AlertsPagerDutyNotificationChannel | AlertsSlackNotificationChannel | AlertsVictorOpsNotificationChannel | AlertsWebhookNotificationChannel | AlertsXMattersNotificationChannel

"The result object for UserSearch.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type UsersUserSearchResult {
  "The cursor for the next page.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nextCursor: String

  "The total number of users found.\n Note: Not necessarily the same as number of users returned, due to pagination.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  totalCount: Int!

  "Set of all users returned from the query.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  users: [UsersUserSearch!]!
}

"General properties related to mobile applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsMobileProperties {
  "A token used to authenticate your mobile application for data ingest.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  applicationToken: SecureValue
}

"Widget layout input.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardWidgetLayoutInput {
  "Column position of widget from top left, starting at 1.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  column: Int

  "Height of the widget. Valid values are 1 to 12 inclusive. Defaults to 3.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  height: Int

  "Row position of widget from top left, starting at 1.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  row: Int

  "Width of the widget. Valid values are 1 to 12 inclusive. Defaults to 4.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  width: Int
}

"An object that contains expected errors as a result of mutating an existing data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsDataPartitionRuleMutationError {
  "The message with the error cause.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  message: String

  "Type of error.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  type: LogConfigurationsDataPartitionRuleMutationErrorType
}

"The object contains the filters to be applied to the search.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n\n"
input ChangeTrackingSearchFilter {
  "Maximum number of deployments to be returned. Default value is 100 deployments.\nThere is a maximum limit value of 2,000. If you set the limit greater than 2,000, the service will only return the latest 2,000 deployments.\"\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  limit: Int

  "Deployment search query string. The query string can search for a match on users and deployment IDs, and any other deployment event attributes.\n\nOperators available: Any valid NRQL operators, other than subqueries. For example, =, OR, AND, IN, LIKE, RLIKE, NO.\n\nFor the full list of operators, see the where clause documentation [here](https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/get-started/nrql-syntax-clauses-functions/#sel-where)\n\nNote: Do not include keywords like SELECT, WHERE, SINCE, FACET, and TIMESERIES.\n\nExamples:\n\n    • \"user = 'Test User'\"\n    • \"user LIKE '%Test User%' AND deploymentType IN ('BLUE_GREEN', 'CANARY')\"\n    • \"user RLIKE r'Test.*|test.*'\"\n    • \"version = '1.0' OR deploymentType IN ('BASIC')\"\n    • \"deploymentId IN ('1234', '4567')\"\n    • \"((user = 'Test User' AND version = '1.0') OR deploymentType in ('BLUE_GREEN', 'CANARY'))\"\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  query: String

  "Search time window. If not specified, defaults to the past hour.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  timeWindow: ChangeTrackingTimeWindowInputWithDefaults
}

"Type of create error\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsCreateErrorType {
  """We couldn't find a channel with the given id"""
  CHANNEL_NOT_FOUND

  """A workflow with this name already exists"""
  DUPLICATE

  """One or more of the parameters you provided are incorrect"""
  INVALID_PARAMETER

  """Reached the maximum number of workflows per account"""
  LIMIT_REACHED

  """
  This account is missing the required entitlement(s) to perform this action
  """
  MISSING_ENTITLEMENT

  """This account in not authorized to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """The given channel id represents an unsupported channel type"""
  UNSUPPORTED_CHANNEL_TYPE

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR
}

"Provides the available values of possible fields that can be sorted\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationAccountShareSortKeyEnum {
  """Account id"""
  ACCOUNT_ID

  """Name of the target organization the account is shared with"""
  TARGET_ORGANIZATION_NAME
}

"SNS Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudSnsIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Billboard widget threshold input.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardBillboardWidgetThresholdInput {
  "Severity of the alert.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  alertSeverity: DashboardAlertSeverity

  "Value of the alert.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  value: Float
}

"Available keys for sorting groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum UserManagementGroupSortKey {
  """Sort by display name"""
  DISPLAY_NAME

  """Sort by ID"""
  ID
}

"An outlier NRQL condition looks for group behavior and values that are outliers from those\ngroups. Similar to a static NRQL condition, but requires a FACET clause.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlOutlierCondition implements AlertsNrqlCondition {
  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The Entity associated with the NRQL Condition\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: EntityOutline

  "The condition's entity GUID\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "Number of groups expected in the returned values for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expectedGroups: Int!

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpiration!

  "Condition ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Name of the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionQuery!

  "Whether overlapping groups should produce a violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  openViolationOnGroupOverlap: Boolean!

  "Alerts policy ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policyId: ID!

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Settings that determine how the NRQL results are evaluated\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignal!

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlConditionTerms!]!

  "Type of NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNrqlConditionType!

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  "Duration after which a violation automatically closes in seconds.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"A Historic Export. Contains information about the request and the current status of that request.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n\n"
type HistoricalDataExportCustomerExportResponse {
  "The id of the account whose data the Export will run against\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  account: AccountReference

  "The time at which the results of this Export expire and are no longer available. Null values indicate that the export is not ready and does not have an expiration time yet\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  availableUntil: EpochMilliseconds

  "The beginning of the time range of this Export. Determined from the Query String\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  beginTime: EpochMilliseconds!

  "The time at which the Export Request was created\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  createdAt: EpochMilliseconds!

  "The end of the time range of this Export. Determined from the Query String\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  endTime: EpochMilliseconds!

  "The number of events returned by this Export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  eventCount: Int!

  "The event types that the Export will run against. Determined from the Query String\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  eventTypes: [String!]!

  "Unique Identifier for the Export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  id: ID!

  "If relevant, an error message about the status of the current export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  message: String

  "The NRQL query for which this Export will run\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  nrql: Nrql!

  "The current completion percentage of this Export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  percentComplete: Float!

  "A list of urls to download the resulting files. Null values indicate that result files are not yet ready for download\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  results: [String]

  "The current status of this Export\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  status: HistoricalDataExportStatus!

  "The time at which the Export Request was submitted\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  submittedAt: EpochMilliseconds! @deprecated(reason: "submittedAt is deprecated. Use createdAt instead.")

  "The ID of the user who submitted this Export Request\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  user: UserReference
}

"Configuration for Slack notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsSlackNotificationChannelConfig {
  "Slack channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  teamChannel: String

  "Slack channel URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  url: SecureValue!
}

"\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n\n"
type WhatsNewDocsStitchedFields {
  "Fetches an announcement by ID.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  announcement(
    """The ID of the announcement."""
    id: ID!
  ): WhatsNewAnnouncementContent

  "Provides a paginated search to fetch news.\n\n---\n**NR Internal**\n\n * [#help-gnar](https://newrelic.slack.com/archives/C029Q3PF0CC)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`PLG/api-sedona-whats-new`)\n\n"
  newsSearch(
    """A cursor."""
    cursor: String

    """A criteria for searching news."""
    query: WhatsNewContentSearchQuery
  ): WhatsNewSearchResult
}

"An object containing your network settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsMobileNetworkSettings {
  "A list of configuration settings that map host to alias names for grouping and identification purposes.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  aliases: [AgentApplicationSettingsNetworkAlias!]

  "Configuration setting to apply either the show or hide strategy for network filtering.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  filterMode: AgentApplicationSettingsNetworkFilterMode

  "A list of hostnames that would be applied to our filter settings when the filterMode is 'HIDE.'\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  hideList: [String!]

  "A list of rules to ignore status codes associated with different hosts.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ignoredStatusCodeRules: [AgentApplicationSettingsIgnoredStatusCodeRule!]

  "A list of hostnames that would be applied to our filter settings when the filterMode is 'SHOW.'\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  showList: [String!]
}

"Status of an operation.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiTopologyCollectorResultType {
  """Failed operation"""
  FAILURE

  """Successful operation"""
  SUCCESS
}

"A customer organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationCustomerOrganizationWrapper {
  "Accessible customers\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  items: [OrganizationCustomerOrganization!]!

  "an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Azure Virtual Network\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureVirtualnetworksIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The different types of errors the API can return.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
enum MetricNormalizationRuleErrorType {
  """Creation Error."""
  CREATION_ERROR

  """Edition Error."""
  EDITION_ERROR

  """Rule does not exist."""
  RULE_NOT_FOUND

  """Validation error"""
  VALIDATION_ERROR
}

"Represents an AI Incident Intelligence environment. An environment crosses the account boundary and allows\ncorrelating data as long as the data's accounts are attached to the same environment.\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment {
  "Authorized accounts associated with the environment. Events from these accounts can be correlated with one another (across the account boundary). The resulting correlated issue will be stored in the Incident Intelligence account\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  associatedAuthorizedAccounts: [AccountReference]!

  "The assigned quota on the current billing cycle\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  billingCycleQuota: Int

  "When the environment was created\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds

  "The user that created the environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdBy: UserReference

  "The account attached to the environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceAccount: AccountReference

  "True indicates that a consent has to be asked when an environment is created. The consent is to acknowledge that if the account is overaging an additional usage charge may be charged based on extra usage\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  isConsentRequired: Boolean!

  "Whether the environment is entitled for AI\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  isEntitledForAi: Boolean

  "True if the environment is part of the free-tier package\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  isFreeTier: Boolean!

  "The environment kind\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kind: IncidentIntelligenceEnvironmentEnvironmentKind

  "The parent account related to the environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  masterAccount: AccountReference

  "The environment name\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "True if the environment was consented, false otherwise\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  wasConsented: Boolean!
}

"Anomaly incident\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesAnomalyIncident implements AiIssuesIIncident {
  "account\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`III/api_access`)\n\n"
  account: AccountReference

  "An account id this incident is stored in\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  accountIds: String!

  "The anomaly id\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  anomalyId: String

  "The time the incident was closed\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  closedAt: EpochMilliseconds

  "The time the incident was created\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  createdAt: EpochMilliseconds!

  "The description provided through API\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  description: [String!]!

  "A list of unique entity identifiers\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: EntityGuid

  "A list of entity names\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityNames: String

  "A list of entity types\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: String

  "See our documentation to learn about environments\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  environmentId: Int! @deprecated(reason: "Use account")

  "Incident identifier\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentId: ID!

  "Incident priority\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  priority: AiIssuesPriority!

  "Incident state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  state: AiIssuesIncidentState!

  "Incident event timestamp\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  timestamp: EpochMilliseconds!

  "The description the user gave the condition if provided. Otherwise the incident description\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  title: String!

  "The time the incident was last updated\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  updatedAt: EpochMilliseconds!
}

"A result returned when executing a search\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
union Nr1CatalogSearchResult = Nr1CatalogAlertPolicyTemplate | Nr1CatalogDashboardTemplate | Nr1CatalogDataSource | Nr1CatalogNerdpack | Nr1CatalogQuickstart

"Provides all the available filters on a grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantFilterInputExpression {
  "The group id of the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groupId: MultiTenantAuthorizationGrantGroupIdInputFilter

  "The id of the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: MultiTenantAuthorizationGrantIdInputFilter

  "The organization id the grant belongs to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  organizationId: MultiTenantAuthorizationGrantOrganizationIdInputFilter!

  "The role id of the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roleId: MultiTenantAuthorizationGrantRoleIdInputFilter

  "the scope id of the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  scopeId: MultiTenantAuthorizationGrantScopeIdInputFilter

  "The scope type of the grant\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  scopeType: MultiTenantAuthorizationGrantScopeTypeInputFilter
}

"The different rule actions for customers.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
enum MetricNormalizationCustomerRuleAction {
  """Deny new metrics (only for NR Administrators)"""
  DENY_NEW_METRICS

  """Ignore matching metrics."""
  IGNORE

  """Replace metrics."""
  REPLACE
}

"NerdStorageVault data will only be visible to the User that created them.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
enum NerdStorageVaultActorScope {
  """Store and retrieve NerdStorageVault data for the current user."""
  CURRENT_USER
}

"SQL Database Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureSqlIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Direction for a baseline NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNrqlBaselineDirection {
  """Only lower direction."""
  LOWER_ONLY

  """Both upper and lower direction."""
  UPPER_AND_LOWER

  """Only upper direction."""
  UPPER_ONLY
}

"The return object for an update mutation.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationUpdateResponse {
  "A description of any errors with the mutation.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  errors: [OrganizationError!]!

  "Information about the updated organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationInformation: OrganizationInformation
}

"Input data that identifies nerdpack tag.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackRemoveVersionTagInput {
  "Tag name.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName
}

"Google Cloud SQL\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpSqlIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Possible modes for supported entity types\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogSupportedEntityTypesMode {
  """Indicates that all entity types are supported"""
  ALL

  """Indicates that no entity types are supported"""
  NONE

  """Indicates that a specific set of entity types are supported"""
  SPECIFIC
}

"The definition of the metric.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenMetricDefinition {
  "The field used to filter the entity in the metric. This will be added to the WHERE by default.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  eventId: String!

  "Indicates if the eventId field references a GUID, a domainId or an entity name.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  eventObjectId: EntityGoldenEventObjectId!

  "The field to FACET by.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  facet: String!

  "The FROM clause of the query.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  from: String!

  "The SELECT clause of the query.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  select: String!

  "If a complementary WHERE clause is required to identify the entity type this field will contain it.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  where: String
}

"Account stitched fields to enable autostitching in NerdGraph\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsAccountStitchedFields {
  "List all rules for your account.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  allRules: EventsToMetricsListRuleResult

  "List rules for your account by id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  rulesById(
    """Rule ids you want to list (as strings)."""
    ruleIds: [ID]!
  ): EventsToMetricsListRuleResult
}

"Specifies how data matching the drop rule's NRQL string should be processed.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
enum NrqlDropRulesAction {
  """
  This action will strip the attributes specified in the SELECT clause of the NRQL string for all events that match the associated NRQL string.
  """
  DROP_ATTRIBUTES

  """
  This action will strip the attributes specified in the SELECT clause of the NRQL string for metric aggregates. The event type must be Metric.
  """
  DROP_ATTRIBUTES_FROM_METRIC_AGGREGATES

  """
  This action will drop all data that match the associated NRQL string. That string MUST be a `SELECT *`.
  """
  DROP_DATA
}

"App Service Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureAppserviceIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input for creating an obfuscation action on a rule being updated.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
input LogConfigurationsUpdateObfuscationActionInput {
  "Attribute names for action. An empty list applies the action to all the attributes.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  attributes: [String!]!

  "Expression Id for action.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  expressionId: ID!

  "Obfuscation method to use.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  method: LogConfigurationsObfuscationMethod!
}

"Specific Cloud provider information required to link the Cloud provider account to a NewRelic account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudLinkCloudAccountsInput {
  "Aws provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  aws: [CloudAwsLinkAccountInput!]

  "AwsGovCloud provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsGovcloud: [CloudAwsGovCloudLinkAccountInput!]

  "Azure provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azure: [CloudAzureLinkAccountInput!]

  "Gcp provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcp: [CloudGcpLinkAccountInput!]
}

"The access level of the NerdStorage data.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum NerdStorageScope {
  """Account-level storage."""
  ACCOUNT

  """Actor-level storage."""
  ACTOR

  """Entity-level storage."""
  ENTITY
}

"Configuration for visualization type 'viz.table'.  Learn more about [table](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#table) widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardTableWidgetConfigurationInput {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"Input type for RelativeGreaterThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeGreaterThanOrEqualInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Result options for environment deletion\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum IncidentIntelligenceEnvironmentDeleteEnvironmentResult {
  """The account is not entitled to incident intelligence"""
  ACCOUNT_NOT_ENTITLED

  """The environment was deleted successfully"""
  DELETED

  """The environment does not exists and cannot be deleted"""
  DOES_NOT_EXIST

  """The user is not authorized to delete an environment"""
  USER_NOT_AUTHORIZED

  """
  The user is not authorized to delete the environment due to a missing capability
  """
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"The result of creating a browser application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentApplicationCreateBrowserResult {
  "The GUID for the affected Entity.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid!

  "The name of the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Fields related to browser settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  settings: AgentApplicationBrowserSettings
}

"The data partition rule matching criteria.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
input LogConfigurationsDataPartitionRuleMatchingCriteriaInput {
  "The attribute name against which this matching condition will be evaluated.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  attributeName: String!

  "The matching expression of the data partition rule definition.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  matchingExpression: String!

  "The matching method of the data partition rule definition.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  matchingMethod: LogConfigurationsDataPartitionRuleMatchingOperator!
}

"Monitor downtime object returned to the customer once a monitor downtime is deleted\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsMonitorDowntimeDeleteResult {
  "The entity guid of the deleted MonitorDowntime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  guid: EntityGuid
}

"The scope of keys to be returned. Note that some filters only apply to certain key types.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessKeySearchScope {
  "A list of key account IDs.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  accountIds: [Int]

  "The ingest type of the key. Only applies to ingest keys, and does not affect user key filtering.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  ingestTypes: [ApiAccessIngestKeyType]

  "A list of key user ids. Only applies to user keys, and does not affect ingest key filtering.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  userIds: [Int]
}

"SQL Managed Instances Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureSqlmanagedIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Configuration settings for the Browser App\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type BrowserApplicationSettings {
  "The current Apdex target setting\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apdexTarget: Float
}

"Elastic Load Balancing - Classic Load Balancer (ELB)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudElbIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The location(s) from which the scripted monitor runs.\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsScriptedMonitorLocationsInput {
  "The private location(s) that the monitor will run jobs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  private: [SyntheticsPrivateLocationInput!]

  "The public location(s) that the monitor will run jobs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  public: [String!]
}

"\n\n---\n**NR Internal**\n\n * [#beyond](https://newrelic.slack.com/messages/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type CloudActorFields {
  "Get all linked cloud provider accounts scoped to the Actor.\n\n---\n**NR Internal**\n\n * [#beyond](https://newrelic.slack.com/messages/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  linkedAccounts(
    """The cloud provider short name."""
    provider: String
  ): [CloudLinkedAccount]
}

"Information about an alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAlertPolicyTemplate {
  "The unique identifier for the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogAlertPolicyTemplateMetadata

  "Level of support expected for the alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  supportLevel: Nr1CatalogSupportLevel!

  "A timestamp that indicates when the alert policy template was last updated\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  updatedAt: DateTime!
}

"Authentication domains\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAuthenticationDomainCollection {
  "Authentication domains\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  items: [OrganizationAuthenticationDomain!]!

  "an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"A grouping of users governed by the same user management settings\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAuthenticationDomain {
  "Method of authenticating users\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  authenticationType: OrganizationAuthenticationTypeEnum!

  "The authentication domain id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The authentication domain name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The organization the authentication domain belongs to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationId: ID!

  "Method of provisioning users\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  provisioningType: OrganizationProvisioningTypeEnum!
}

"Cosmos DB Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureCosmosdbIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Information about an alert condition in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartAlertCondition implements Nr1CatalogQuickstartComponent {
  "The unique identifier for the alert condition\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the alert condition\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogQuickstartAlertConditionMetadata!
}

"Variable fields to filter by\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsVariableFields {
  """active field"""
  ACTIVE

  """default field"""
  DEFAULT

  """description field"""
  DESCRIPTION

  """example field"""
  EXAMPLE

  """key field"""
  KEY

  """label field"""
  LABEL

  """name field"""
  NAME

  """product field"""
  PRODUCT

  """type field"""
  TYPE
}

"Input condition to select query records.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n\n"
input QueryHistoryQueryHistoryOptionsInput {
  "Total number of query records to be returned.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/archives/CPXF9VA2Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Query_Remembrall/expose_nrql_field_to_customers`)\n\n"
  limit: Int
}

"Custom header input for monitor jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCustomHeaderInput {
  "Header name\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "Header value\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  value: String!
}

"Account data view for administration tasks.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n\n"
type AccountManagementManagedAccount {
  "The account ID.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  id: Int!

  "True if account is canceled\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  isCanceled: Boolean!

  "The name of the account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The data center region for the account (US or EU).\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [legacy-account-service repo](https://source.datanerd.us/orgs-and-accounts/legacy-account-service)\n\n * visibility(customer)\n\n"
  regionCode: String!
}

"Billing Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudBillingIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"An async organization creation result\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationCreateAsyncResult {
  "Organization Creation Async Job Customer\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customer: OrganizationOrganizationCreateAsyncCustomerResult

  "Organization Creation Async Job Result\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  job: OrganizationOrganizationCreateAsyncJobResult!

  "Organization Creation Async Job Organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organization: OrganizationOrganizationCreateAsyncOrganizationResult
}

"Attributes to match a specific nerdpack versions.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackOverrideVersionRules {
  "Nerdpack uuid.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpackId: ID!

  "Nerdpack version tag.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tag: NerdpackTagName

  "Semver-compliant Nerdpack version.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  version: SemVer
}

"Valid request types for user change requests\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum UserManagementRequestedTierName {
  """basic tier"""
  BASIC_USER_TIER

  """core tier"""
  CORE_USER_TIER

  """full tier"""
  FULL_USER_TIER
}

"Input type for FixedEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedEqualInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Api Management\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureApimanagementIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The monitor input values needed to create a Script Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsCreateScriptBrowserMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsScriptBrowserMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsScriptedMonitorLocationsInput!

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String!

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod!

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntimeInput

  "The script that the monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  script: String!

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus!

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"Accounts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAccountCollection {
  "Accounts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  items: [OrganizationAccount!]

  "an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"The advanced options inputs available for a Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsStepMonitorAdvancedOptionsInput {
  "Capture a screenshot during job execution\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  enableScreenshotOnFailureAndScript: Boolean
}

"Input type for FixedRegularExpression expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedRegularExpressionInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"A new data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
input LogConfigurationsCreateDataPartitionRuleInput {
  "The description of the data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  description: String

  "Whether or not this data partition rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  enabled: Boolean!

  "The matching criteria of the data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  matchingCriteria: LogConfigurationsDataPartitionRuleMatchingCriteriaInput

  "The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/partitions_nrql_filter`)\n\n"
  nrql: Nrql

  "The retention policy of the data partition data.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  retentionPolicy: LogConfigurationsDataPartitionRuleRetentionPolicyType!

  "The name of the data partition where logs will be allocated once the rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  targetDataPartition: LogConfigurationsLogDataPartitionName!
}

"Expected error types that can be returned by undelete operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUndeleteError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardUndeleteErrorType!
}

"Array of responses, one for each span attribute trace filter rule creation request.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeCreateTraceFilterRuleResponses {
  "Span attribute trace filter rule creation response\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  spanAttributeRules: EdgeCreateSpanAttributeRulesResponse!
}

"Input for assignment mutation.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
input ErrorsInboxAssignErrorGroupInput {
  "Email address of the user that will be assigned.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  userEmail: String

  "Id of the user that will be assigned.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  userId: Int
}

"AlloyDB Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpAlloydbIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"This scalar represents a map of attributes in the form of key-value pairs.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar AttributeMap

"An object that can be used to discover and create the entity search query argument.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input EntitySearchQueryBuilder {
  "The alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The alertable status of the entity\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertable: Boolean

  "The entity domain. This is not a complete list of entity domains available; it is a way to explore the most popular domains.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: EntitySearchQueryBuilderDomain

  "**WARNING! This argument is deprecated and will not be updated with new infrastructure integration types.** If you want to query for a type not in this list, use the `query` argument instead of `queryBuilder`. To see the query string that is generated by your `queryBuilder` search, ask for the `query` field in the result object. You can then use this to build a query supplied to the `query` argument and remove your `queryBuilder`.\n\nThe Infrastructure integration type. This should be used in place of the `type` field to search for Infrastructure integration specific types.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  infrastructureIntegrationType: EntityInfrastructureIntegrationType

  "The entity name.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The reporting status of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "A list of tags applied to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntitySearchQueryBuilderTag!]

  "The entity type.\n\nThis is not a complete list of entity types available; it is a way to explore the most popular types.\n\nIf you are querying for Infrastructure integration types, use the `infrastructureIntegrationType` field instead of `type`.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: EntitySearchQueryBuilderType
}

"Provides fields to query nerdpacks by different conditions\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackNerdpacks {
  "Get the list of stable core nerdpack versions together with nerdpack versions which the requesting user's account is subscribed.\nThis query allows for version or channel overrides by providing OverrideVersionRules objects.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  effectiveSubscribedVersions(
    """
    List of version override rules per Nerdpack.
    The query will return the version that matches the specified rules (if it exists) for a given nerdpack instead of
    deciding which version has priority
    """
    overrides: [NerdpackOverrideVersionRules]
  ): [NerdpackVersion]

  "If a Nerdpack with the given uuid exists, retrieve the Nerdpack object.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpack(
    """Nerdpack id."""
    id: ID!
  ): NerdpackData

  "Returns the list of subscribable Nerdpacks of the current user.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  subscribable(
    """Nerdpack filter data."""
    nerdpackFilter: NerdpackDataFilter
  ): [NerdpackData]
}

"The result of testing Grok on a log line.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n\n"
type LogConfigurationsGrokTestResult {
  "Any attributes that were extracted.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  attributes: [LogConfigurationsGrokTestExtractedAttribute!]

  "The log line that was tested against.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  logLine: String!

  "Whether the Grok pattern matched.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_parsing_rules`)\n\n"
  matched: Boolean!
}

"Configuration for HipChat notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsHipChatNotificationChannelConfig {
  "Authentication token.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  authToken: SecureValue! @deprecated(reason: "This channel type is deprecated")

  "Base URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  baseUrl: String! @deprecated(reason: "This channel type is deprecated")

  "Room ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  roomId: String! @deprecated(reason: "This channel type is deprecated")
}

"Accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadScopeAccounts {
  "A list of accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  accountIds: [Int!]!
}

"Input type for the metrics.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
input EntityGoldenMetricInput {
  "The field that is used identifies the entities. Default: entity.guid\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  eventId: String

  "The field to FACET by. Default: entity.name\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  facet: String

  "The FROM clause of the query. Default: Metric\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  from: String

  "The name of the metric\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The SELECT clause of the query.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  select: String!

  "The title of the metric\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  title: String!

  "If a complementary WHERE clause is given this field will contain it.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  where: String
}

"Datastore\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpDatastoreIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The result after creating a new data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsCreateDataPartitionRuleResponse {
  "List of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  errors: [LogConfigurationsCreateDataPartitionRuleError]

  "The created data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  rule: LogConfigurationsDataPartitionRule
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface AlertableEntityOutline {
  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity
}

"The definition of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelIndicator {
  "The date when the SLI was created represented in the number of milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "The user who created the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdBy: UserReference

  "The description of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The entity which the SLI is attached to.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "The events that define the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  events: ServiceLevelEvents!

  "The unique entity identifier of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid!

  "The unique identifier of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "The name of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "A list of objective definitions.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  objectives: [ServiceLevelObjective!]

  "The resulting NRQL queries that help consume the metrics of the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  resultQueries: ServiceLevelIndicatorResultQueries

  "[DEPRECATED] The slug is deprecated and it will be removed from the schema as soon as possible.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  slug: String! @deprecated(reason: "The slug is deprecated and it will be removed from the schema as soon as possible.")

  "The date when the SLI was last updated represented in the number of milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds

  "The user who last update the SLI.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedBy: UserReference
}

"The type of error.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
enum ApiAccessIngestKeyErrorType {
  """
  Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
  """
  FORBIDDEN

  """
  Occurs when the action taken on a key did not successfully pass validation.
  """
  INVALID

  """Occurs when the requested key `id` was not found."""
  NOT_FOUND
}

"A vertex is a representation of a node in a graph: a host; an application; etc.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyVertex {
  "The attributes used to define a vertex as a key-value entry.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  definingAttributes: [AiTopologyDefiningAttribute!]!

  "ID of vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "Name of the vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Time rule was last updated.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds!

  "Class of the vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  vertexClass: AiTopologyVertexClass!
}

"An object that represents a recipe status.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input InstallationRecipeStatus {
  "The version of the newrelic-cli that was used for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cliVersion: SemVer!

  "Whether or not the recipe has been installed and all steps have been completed.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  complete: Boolean!

  "The display name for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  displayName: String!

  "The entity Guid for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "The error returned for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  error: InstallationStatusErrorInput!

  "The host name of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hostName: String!

  "The unique ID that corresponds to an install event.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installId: ID

  "The version of the open-install-library that is being used.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installLibraryVersion: SemVer

  "The kernel architecture of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelArch: String!

  "The kernel version of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  kernelVersion: SemVer!

  "The path to the log file on the customer's host.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  logFilePath: String!

  "Additional key:value data related to an error or related to the environment where the installation occurred.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metadata: InstallationRawMetadata

  "The unique name for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "The OS of the customer's machine.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  os: String!

  "The platform name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platform: String!

  "The platform family name provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformFamily: String!

  "The platform version provided by the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  platformVersion: SemVer!

  "The redirect URL created by the CLI used for redirecting to a particular entity.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  redirectUrl: String

  "The status for a given recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  status: InstallationRecipeStatusType!

  "Whether or not the recipe being installed is a targeted install.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  targetedInstall: Boolean!

  "The path to the installation task as defined in the open-install-library.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  taskPath: String

  "The number of milliseconds it took to validate the recipe.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  validationDurationMilliseconds: EpochMilliseconds!
}

"Validation flags to determine how we handle input data.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flags:`Markers/deployment_markers_api` OR `Markers/v2_api`)\n\n\n"
enum ChangeTrackingValidationFlag {
  """
  Will validate all string fields to be within max size limit. An error is returned and data is not saved if any of the fields exceeds max size limit.
  """
  FAIL_ON_FIELD_LENGTH

  """
  For APM entities, a call is made to the legacy New Relic v2 REST API. When this flag is set, if the call fails for any reason, an error will be returned containing the failure message.
  """
  FAIL_ON_REST_API_FAILURES
}

"Input type for RelativeFuzzyScore expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeFuzzyScoreInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Minimum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minDistance: Int!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"BigQuery\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpBigqueryIntegrationInput {
  "Fetch BigQuery Table metrics, disabled by default\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTableMetrics: Boolean

  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Types of errors that can be returned from a Private Location mutation request\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsPrivateLocationMutationErrorType {
  """Received a request missing required fields or containing invalid data"""
  BAD_REQUEST

  """
  An unknown error occurred while processing request to purge specified private location job queue
  """
  INTERNAL_SERVER_ERROR

  """
  Private location not found for key (private location does not exist on account or has already been deleted)
  """
  NOT_FOUND

  """
  User does not have authorization to purge job queue for specified private location
  """
  UNAUTHORIZED
}

"Metadata associated with the install plan in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartInstallPlanMetadata implements Nr1CatalogQuickstartComponentMetadata {
  "A short form description for the documentation component.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String @deprecated(reason: "This field is no longer supported. Please use installer instead.")

  "The human-readable name for the install plan component.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String @deprecated(reason: "This field is no longer supported. Please use installer instead.")
}

"Azure input parameters for a new streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
input StreamingExportAzureInput {
  "Connection string that has access to the specific Event Hub\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  eventHubConnectionString: String!

  "The name of Event Hub to write events to\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  eventHubName: String!
}

"A MutingRule for New Relic Alerts Violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsMutingRule {
  "The account id of the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The condition that defines which violations to target.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  condition: AlertsMutingRuleConditionGroup!

  "The timestamp of when the MutingRule was created.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  createdAt: DateTime!

  "The user id that created the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  createdBy: ID! @deprecated(reason: "Please use 'createdByUser'.")

  "The user information that created the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdByUser: UserReference

  "The description of the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the MutingRule is enabled\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The unique identifier for the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The name of the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The time window when the MutingRule should actively mute violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  schedule: AlertsMutingRuleSchedule

  "The status of a MutingRule based on whether it is Enabled and has a Schedule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  status: AlertsMutingRuleStatus!

  "The timestamp of when the MutingRule was last modified.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  updatedAt: DateTime!

  "The user id that last modified the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  updatedBy: ID! @deprecated(reason: "Please use 'updatedByUser'.")

  "The user information that last modified the MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedByUser: UserReference
}

"List of active users belonging to a group\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityGroupUsers {
  "Active users within group\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  items: [MultiTenantIdentityGroupUser!]!

  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"The specific type of entity\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntityType {
  """An APM Application"""
  APM_APPLICATION_ENTITY

  """A database instance seen by an APM Application"""
  APM_DATABASE_INSTANCE_ENTITY

  """An external service seen by an APM Application"""
  APM_EXTERNAL_SERVICE_ENTITY

  """A Browser Application"""
  BROWSER_APPLICATION_ENTITY

  """A Dashboard entity"""
  DASHBOARD_ENTITY

  """
  An External entity. For more information about defining External entities, see the [open source documentation](https://github.com/newrelic-experimental/entity-synthesis-definitions).
  """
  EXTERNAL_ENTITY

  """A Generic entity with no detailed data"""
  GENERIC_ENTITY

  """An Infrastructure entity"""
  GENERIC_INFRASTRUCTURE_ENTITY

  """An Infrastructure Integration AWS Lambda Function entity"""
  INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY

  """An Infrastructure Host entity"""
  INFRASTRUCTURE_HOST_ENTITY

  """A Key Transaction entity"""
  KEY_TRANSACTION_ENTITY

  """A Mobile Application"""
  MOBILE_APPLICATION_ENTITY

  """A Secure Credential entity"""
  SECURE_CREDENTIAL_ENTITY

  """A Synthetic Monitor entity"""
  SYNTHETIC_MONITOR_ENTITY

  """A Team Entity"""
  TEAM_ENTITY

  """A Third Party Service entity"""
  THIRD_PARTY_SERVICE_ENTITY

  """A entity that is unavailable"""
  UNAVAILABLE_ENTITY

  """A Workload entity"""
  WORKLOAD_ENTITY
}

"A contact channel where users can get support via email\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogEmailContactChannel {
  "The email address for email support\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  address: String!
}

"A user defined group of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadCollection {
  "The account the workload belongs to.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountReference

  "The moment when the object was created, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "The user who created the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdBy: UserReference

  "Relevant information about the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entities: [WorkloadEntityRef!]

  "A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [WorkloadEntitySearchQuery!]

  "The entity search query that returns the full collection of entities.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQuery: String

  "The unique entity identifier of the workload in New Relic.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  guid: EntityGuid!

  "The unique identifier of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int!

  "The workload's name.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  name: String!

  "The URL of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  permalink: String!

  "Accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  scopeAccounts: WorkloadScopeAccounts!

  "Status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  status: WorkloadWorkloadStatus!

  "The configuration that defines how the status of the workload is calculated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  statusConfig: WorkloadStatusConfig

  "The moment when the object was last updated, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds

  "The user who last updated the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedBy: UserReference
}

"Type of action to perform when a `TraceFilter` match occurs\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeTraceFilterAction {
  """Discards traces that match the filter"""
  DISCARD

  """Keeps traces that match the filter"""
  KEEP
}

"API Gateway Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudApigatewayIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  stagePrefixes: [String]

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"An External entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ExternalEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Available filtering types for email addresses\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementEmailInput {
  "Part of a user email\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  contains: String

  "A user email\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Types of errors that can be returned from a Monitor mutation request\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsMonitorUpdateErrorType {
  """Received a request missing required fields or containing invalid data"""
  BAD_REQUEST

  """An unknown error occurred while processing request to mutate monitor"""
  INTERNAL_SERVER_ERROR

  """
  Monitor not found for given guid (monitor does not exist on account or has already been deleted)
  """
  NOT_FOUND

  """Monitor update exceeds account subscription limits"""
  PAYMENT_REQUIRED

  """An error occurred while updating monitor script"""
  SCRIPT_ERROR

  """Monitor tags were not updated."""
  TAGGING_ERROR

  """User does not have authorization to perform monitor mutation."""
  UNAUTHORIZED

  """An unknown error occurred while processing request to update monitor"""
  UNKNOWN_ERROR
}

"Deletes an existing environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentDeleteEnvironment {
  "The deletion outcome\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: IncidentIntelligenceEnvironmentDeleteEnvironmentResult!
}

"An error object for tag mutations.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n\n"
type TaggingMutationError {
  "A message explaining what the errors is about.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  message: String

  "The type of error.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  type: TaggingMutationErrorType
}

"Kinesis Streams Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudKinesisIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchShards: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Azure Functions\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureFunctionsIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The type of error.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
enum ApiAccessUserKeyErrorType {
  """
  Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
  """
  FORBIDDEN

  """
  Occurs when the action taken on a key did not successfully pass validation.
  """
  INVALID

  """Occurs when the requested key `id` was not found."""
  NOT_FOUND
}

"Input data for creating a new nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackCreationInput {
  "Nerdpack owner account ID. If not provided it will use the account ID specified in the header.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ownerAccount: Int
}

"Listing of edges in a graph.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyEdgeListing {
  "Number of edges returned by the query.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "Next cursor.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cursor: String

  "List of edges.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  edges: [AiTopologyEdge!]!
}

"Represents a date time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type DateTimeWindow {
  "The end date and time expressed as an ISO8601 formatted string\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  endTime: DateTime

  "The start date and time expressed as an ISO8601 formatted string\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  startTime: DateTime
}

"User action for issue\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesIncidentUserActionResponse {
  "account id\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  accountId: Int!

  "Error, if any\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  error: String

  "Incident id\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentId: ID!
}

"Browser privacy. See [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/page-load-timing-resources/cookie-collection-session-tracking/) for further information.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsBrowserPrivacy {
  "Whether or not cookies are enabled.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  cookiesEnabled: Boolean!
}

"App Gateway Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureAppgatewayIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Represents all the visualization types available for embedded charts.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EmbeddedChartType {
  APDEX
  AREA
  BAR
  BASELINE
  BILLBOARD
  BULLET
  EMPTY
  EVENT_FEED
  FUNNEL
  HEATMAP
  HISTOGRAM
  JSON
  LINE
  MARKDOWN
  PIE
  SCATTER
  STACKED_HORIZONTAL_BAR
  TABLE
  TRAFFIC_LIGHT
  VERTICAL_BAR
}

"Input type that represents a possible value for a variable of type ENUM.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardVariableEnumItemInput {
  "A human-friendly display string for this value.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "A possible variable value\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  value: String!
}

"Successfully updated trace observers, or one or more error responses if there were issues.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeUpdateTraceObserverResponse {
  "Errors that may occur when creating a `TraceObserver`. Defaults to `null` in case of success.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  errors: [EdgeUpdateTraceObserverResponseError]

  "The trace observer defined in `UpdateTraceObserverInput`. Defaults to `null` in case of failure.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  traceObserver: EdgeTraceObserver
}

"Run Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpRunIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"An object that represents a metric grouping issue.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
type MetricNormalizationRuleMetricGroupingIssue {
  "Total number of received and denied new metrics.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  deniedMetricsCount: Int

  "Rate of received and denied new metrics per minute.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  deniedMetricsRatePerMinute: Float

  "Metric normalization rule id\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalizationRuleId: Int!

  "Whether the issue is mitigated or still active\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  mitigated: Boolean

  "The new metrics rate threshold to consider the issue mitigated.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  mitigationRateThreshold: Float

  "The minute time window to calculate if the issue was mitigated.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  mitigationRateWindowSize: Int
}

"The definition of a rule, which consists of a group of entities and a rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadRegularRule {
  "A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entities: [WorkloadEntityRef!]

  "A list of entity search queries. These queries are constrained to the workload contents.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [WorkloadEntitySearchQuery!]

  "The unique identifier of the rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int

  "The rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rollup: WorkloadRollup!
}

"AppSync\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsAppsyncIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
interface InfrastructureIntegrationEntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  integrationTypeCode: String
}

"Provides all the available filters on the organization name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationNameInputFilter {
  "performs a contains operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  contains: String

  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Amazon Kinesis Data Streams\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudKinesisIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchShards: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"An Infrastructure entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type GenericInfrastructureEntity implements AlertableEntity & Entity & InfrastructureIntegrationEntity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  integrationTypeCode: String

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Information required to link a AWS account to a NewRelic account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsLinkAccountInput {
  "The AWS role ARN (used to fetch data).\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  arn: String!

  "How metrics will be collected.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricCollectionMode: CloudMetricCollectionMode

  "The linked account name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!
}

"Error details about the events to metrics rule that failed to be created and why.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsCreateRuleFailure {
  "Information about why the create failed.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errors: [EventsToMetricsError]

  "Input information about a submitted rule that was unable to be created.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  submitted: EventsToMetricsCreateRuleSubmission
}

"Input object to add and change a feature setting toggle for an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
input DataManagementAccountFeatureSettingInput {
  "Enabled state for the feature setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Feature setting lookup\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  featureSetting: DataManagementFeatureSettingLookup

  "When locked is true, children inherit parent's enabled state\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  locked: Boolean
}

"Expected errors that can be returned by updateWidgetsInPage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUpdateWidgetsInPageError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardUpdateWidgetsInPageErrorType!
}

"The advanced options available for a Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsStepMonitorAdvancedOptions {
  "Capture a screenshot during job execution\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  enableScreenshotOnFailureAndScript: Boolean
}

"The input for updating an existing VictorOps notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsVictorOpsNotificationChannelUpdateInput {
  "Key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  key: SecureValue

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "Route key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  routeKey: String
}

"Supported rendering formats for data\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogRenderFormat {
  """Renders the output in Markdown"""
  MARKDOWN
}

"The definition of a remaining entities rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadRemainingEntitiesRule {
  "The rollup strategy.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rollup: WorkloadRemainingEntitiesRuleRollup!
}

"The details that were submitted when deleteing an events to metrics conversion rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsDeleteRuleSubmission {
  "A submitted account id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "A submitted rule id.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleId: ID!
}

"The query that represents the events to fetch.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelEventsQuery {
  "The NRDB event to fetch the data from.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  from: Nrql!

  "The NRQL SELECT clause to aggregate events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  select: ServiceLevelEventsQuerySelect

  "The NRQL condition to filter the events.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  where: Nrql
}

"For users on our New Relic One user model, a \"group\" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementGroup {
  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  displayName: String!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "container for users enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]
  ): UserManagementGroupUsers
}

"Information about a dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogDashboardTemplate {
  "The unique identifier for the dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogDashboardTemplateMetadata!

  "Level of support expected for the dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  supportLevel: Nr1CatalogSupportLevel!

  "A timestamp that indicates when the dashboard template was last updated\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  updatedAt: DateTime!
}

"A user-readable error\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationError {
  "A description of the error.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  message: String!

  "A description of the type of error.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  type: OrganizationUpdateErrorType!
}

"The `Milliseconds` scalar represents a duration in milliseconds\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar Milliseconds

"A resulting query.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelResultQuery {
  "A NRQL query.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: Nrql!
}

"A correlation rule used to compare incidents and subsequently merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsRule {
  "Internal data associated with this rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  annotations: [AiDecisionsAnnotationEntry!]!

  "Length of the window in which incidents are compared.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  correlationWindowLength: Milliseconds

  "Time rule was created.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "Creator of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  creator: UserReference

  "Description of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "ID of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "External data associated with this rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  metadata: AiDecisionsRuleMetadata!

  "Number of correlations within a window required to merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minCorrelationThreshold: Int!

  "Name of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Configuration to allow rule to override issue properties.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  overrideConfiguration: AiDecisionsOverrideConfiguration

  "Expression to use to compare incidents.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleExpression: AiDecisionsRuleExpression!

  "Type of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleType: AiDecisionsRuleType!

  "Creation source of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  source: AiDecisionsRuleSource!

  "Current state of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  state: AiDecisionsRuleState!

  "Time rule was last updated.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds!
}

"Reusable obfuscation expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
type LogConfigurationsObfuscationExpression {
  "Identifies the date and time when the expression was created.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  createdAt: DateTime!

  "Identifies the user who has created the expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  createdBy: UserReference

  "Description of the expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  description: String

  "The id of the obfuscation expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  id: ID!

  "Name of the expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  name: String!

  "Regular expression for this obfuscation expression. Capture groups will be obscured on matching.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  regex: String!

  "Identifies the date and time when the expression was last updated.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  updatedAt: DateTime!

  "Identifies the user who has last updated the expression.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  updatedBy: UserReference
}

"Represents the currently running agent versions in a Browser App.\nAn app could be running multiple versions of an agent (across different browsers, for example).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type BrowserApplicationRunningAgentVersions {
  "The maximum (newest) agent version running in the Browser App, represented as a semantic version string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxSemanticVersion: SemVer

  "The maximum (newest) agent version running in the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxVersion: Int

  "The minimum (oldest) agent version running in the Browser App, represented as a semantic version string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSemanticVersion: SemVer

  "The minimum (oldest) agent version running in the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minVersion: Int
}

"Success response when deleting an Alerts policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsPolicyDeleteResponse {
  "ID of the deleted policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"A condition which describes how to target a New Relic Alerts Violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsMutingRuleConditionInput {
  "The attribute on a violation. Expects one of:\n\n* **accountId** - The account id\n* **conditionId** - The alert condition id\n* **conditionName** - The alert condition name\n* **conditionRunbookUrl** - The alert condition's runbook url\n* **conditionType** - The alert condition type, such as `metric`\n* **entity.guid** - The entity GUID\n* **nrqlEventType** - The NRQL event type\n* **nrqlQuery** - The NRQL query string\n* **policyId** - The alert policy id\n* **policyName** - The alert policy name\n* **product** - The target product (e.g., `SYNTHETICS`)\n* **tags.<NAME>** - Arbitrary tags associated with some entity (e.g., FACET from a NRQL query, for example `tags.appName` or `tags.host`)\n* **targetId** - The ID of the alerts target\n* **targetName** - The name of the alerts target\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  attribute: String!

  "The operator used to compare the attribute's value with the supplied value(s).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  operator: AlertsMutingRuleConditionOperator!

  "The value(s) to compare against the attribute's value.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  values: [String]!
}

"Result of an allow list mutation.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackAllowListResult {
  "Nerdpack to allow to subscribe.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdpack: NerdpackData!

  "Subscription allow list result per account.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  resultsPerAccount: [NerdpackMutationResultPerAccount]
}

"Information about a targeted install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogTargetedInstallPlanDirective implements Nr1CatalogInstallPlanDirective {
  "The mode of the install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogInstallPlanDirectiveMode!

  "The name of the recipe used for the installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  recipeName: String!
}

"Filters by user id\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityUserIdInput {
  "A user id\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: ID

  "A list of user IDs\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  in: [ID!]
}

"Possible modes for an install plan directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogInstallPlanDirectiveMode {
  """Directs the installation toward an external link"""
  LINK

  """
  Directs the installation to open a stacked Nerdlet to perform the installation
  """
  NERDLET

  """Directs the installation toward a specific target"""
  TARGETED
}

"The ApmApplicationEntity's settings to update.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ApmApplicationEntitySettings {
  "The ApmApplicationEntity's apdex target. For documentation on using apdex effectively, visit [our docs about apdex](https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apdexTarget: Float
}

"Glue Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsGlueIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionSignalInput {
  "How long we wait for data that belongs in each aggregation window. Depending\non your data, a longer delay may increase accuracy but delay notifications.\n\nUse `aggregationDelay` with the `EVENT_FLOW` and `CADENCE` methods. The maximum\ndelay is **1200 seconds** (20 minutes) when using `EVENT_FLOW` and **3600 seconds**\n(60 minutes) when using `CADENCE`. In both cases, the minimum delay is **0 seconds**\nand the default is **120 seconds**.\n\nWhen using `aggregationDelay`, do **not** use `evaluationOffset`.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationDelay: Seconds

  "The method that determines when we consider an aggregation window to be complete\nso that we can evaluate the signal for violations. Default is `EVENT_FLOW`.\n\nWhen using any `aggregationMethod`, do **not** use `evaluationOffset`.\n\nWhen using the `aggregationMethod` with `EVENT_TIMER`, use `aggregationTimer`.\nFor `EVENT_FLOW` and `CADENCE`, use `aggregationDelay`.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationMethod: AlertsSignalAggregationMethod

  "How long we wait after each data point arrives to make sure we've processed\nthe whole batch.\n\nUse `aggregationTimer` with the `EVENT_TIMER` method. The timer value can range\nfrom **5 seconds** to **1200 seconds** (20 minutes); the default is **60 seconds**.\n\nWhen using `aggregationTimer`, do **not** use `evaluationOffset`.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationTimer: Seconds

  "Aggregation window controls the duration of the time window used to evaluate the NRQL query, in seconds.\nThe value must be at least 30 seconds, and no more than 6 hours (21600 seconds). Default is 60 seconds.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationWindow: Seconds

  "How long we wait until the signal starts evaluating. The maximum delay is **7200 seconds** (120 minutes).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  evaluationDelay: Seconds

  "Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.\n\nBy default, we evaluate the NRQL query in one-minute time windows. The start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.\n\nThis value is the number of time windows we look back at the aggregated data.\n\nExample: With an `evaluationOffset` of 3 and a 1 minute aggregation window, the NRQL time window applied to your query will be:\n\n`SINCE 3 minutes ago UNTIL 2 minutes ago`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  evaluationOffset: Int

  "Option that determines the type of value that should be used to fill gaps (empty windows). Defaults to STATIC.\n\nOutlier NRQL conditions may only use NONE.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  fillOption: AlertsFillOption

  "If using the static fill option, this the value used for filling. Defaults to 0.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  fillValue: Float

  "This setting gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends.\n\nThe `slideBy` value is specified in seconds and must be **smaller than** and **a factor of** the `aggregationWindow`.\n\nCannot be used with:\n- Outlier NRQL conditions\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  slideBy: Seconds
}

"Typed configuration for known visualizations. At most one may be populated.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardWidgetConfigurationInput {
  "Configuration for visualization type 'viz.area'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  area: DashboardAreaWidgetConfigurationInput

  "Configuration for visualization type 'viz.bar'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  bar: DashboardBarWidgetConfigurationInput

  "Configuration for visualization type 'viz.billboard'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  billboard: DashboardBillboardWidgetConfigurationInput

  "Configuration for visualization type 'viz.line'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  line: DashboardLineWidgetConfigurationInput

  "Configuration for visualization type 'viz.markdown'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  markdown: DashboardMarkdownWidgetConfigurationInput

  "Configuration for visualization type 'viz.pie'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  pie: DashboardPieWidgetConfigurationInput

  "Configuration for visualization type 'viz.table'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  table: DashboardTableWidgetConfigurationInput
}

"enum of of script step types\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsStepType {
  """Assert on element accessed by ID, CSS, or x-path"""
  ASSERT_ELEMENT

  """Assert on modal exists"""
  ASSERT_MODAL

  """Assert on text accessed by ID, CSS, or x-path"""
  ASSERT_TEXT

  """Assert on title of page"""
  ASSERT_TITLE

  """Click on an element by ID, CSS, or x-path"""
  CLICK_ELEMENT

  """Preform actions on a modal to dismiss"""
  DISMISS_MODAL

  """Double click on an element by ID, CSS, or x-path"""
  DOUBLE_CLICK_ELEMENT

  """Hover over an element by x-path"""
  HOVER_ELEMENT

  """Navigate to the specified url"""
  NAVIGATE

  """Input secure credential into element accessed by ID, CSS, or x-path"""
  SECURE_TEXT_ENTRY

  """Select a dropdown element by value, text, ID, CSS, or x-path"""
  SELECT_ELEMENT

  """Input text into element accessed by ID, CSS, or x-path"""
  TEXT_ENTRY
}

"UI component object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsUiComponent {
  "Should we allow variables rendering in this component\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  allowTemplateVariables: Boolean!

  "Which data validation is applied to this component\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  dataValidation: AiNotificationsUiComponentValidation!

  "Default value of this component\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  defaultValue: AiNotificationsSuggestion

  "Additional options for SELECT type components\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  selectOptions: AiNotificationsSelectComponentOptions

  "Component type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsUiComponentType!

  "Is this component a part of the default fields\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  visibleByDefault: Boolean!
}

"The different units that can be used to express golden metrics.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
enum EntityGoldenMetricUnit {
  """Apdex (Application Performance Index)."""
  APDEX

  """Bits."""
  BITS

  """Bits per second."""
  BITS_PER_SECOND

  """Bytes."""
  BYTES

  """Bytes per second."""
  BYTES_PER_SECOND

  """Degrees celsius."""
  CELSIUS

  """Count."""
  COUNT

  """Hertz."""
  HERTZ

  """Messages per second."""
  MESSAGES_PER_SECOND

  """Milliseconds."""
  MS

  """Operations per second."""
  OPERATIONS_PER_SECOND

  """Pages loaded per second."""
  PAGES_PER_SECOND

  """Percentage."""
  PERCENTAGE

  """Requests received per minute."""
  REQUESTS_PER_MINUTE

  """Requests received per second."""
  REQUESTS_PER_SECOND

  """Seconds."""
  SECONDS

  """Timestamp."""
  TIMESTAMP
}

"The input object used to identify the workload to be updated and the new values.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadUpdateInput {
  "Relevant information about the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "A list of entity GUIDs composing the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entityGuids: [EntityGuid!]

  "A list of entity search queries used to retrieve the groups of entities that compose the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  entitySearchQueries: [WorkloadUpdateCollectionEntitySearchQueryInput!]

  "The name of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  name: String

  "Accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  scopeAccounts: WorkloadScopeAccountsInput

  "The configuration that defines how the status of the workload is calculated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  statusConfig: WorkloadUpdateStatusConfigInput
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type Consumption {
  "The `Consumption` object provides consumption data about a user.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  customerId: ID
}

"Accessible customers\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationCustomerContractWrapper {
  "Accessible customers\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  items: [OrganizationCustomerContract!]!

  "an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Results for environment attributes search. This list is paginated. Use the cursor to go through all the available results.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentAccountEnvironmentAttributesResults {
  "If nextCursor is a String value, set it to the cursor input field while searching in order to get the next page of results.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nextCursor: String

  "Results of the search.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  results: [AgentEnvironmentApplicationEnvironmentAttributes!]
}

"VPN Gateways\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureVpngatewaysIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Amazon Relation Database Service (RDS)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudRdsIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Criteria for applying filters to a search\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
input Nr1CatalogSearchFilter {
  "Filter the search results that match any in a list of category terms\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [String!]

  "Filter the search results by a particular category\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  category: String

  "Filter the search results that contain a set of component types\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  components: [Nr1CatalogSearchComponentType!]

  "Filter the search results to those that match all keywords in the list\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  keywords: [String!]

  "Filter the search results by install recipe name. This will be applied in an OR fashion. Schema is defined in the Open Install Library's recipe spec: https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  recipeNames: [String!]

  "Filter the search results that are of a specific type\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  types: [Nr1CatalogSearchResultType!]
}

"Container for conditions with associated notifications channels.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsPolicy {
  "Account ID of the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "Primary key for policies.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Determines how incidents are created for critical violations of the conditions contained in the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  incidentPreference: AlertsIncidentPreference!

  "Description of the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"A Script Api monitor resulting from a Script Api mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsScriptApiMonitor {
  "The creation time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  createdAt: EpochMilliseconds

  "The unique client identifier for the Synthetics Monitor in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The unique identifier of the monitor within the Synthetics domain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  id: ID

  "The locations the monitor runs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocations

  "The last modification time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  modifiedAt: EpochMilliseconds

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntime

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus
}

"Blueprint for simulation creation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsSimulationBlueprint {
  "Length of the window in which incidents are compared.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  correlationWindowLength: Milliseconds

  "Expression to use to compare incidents.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  expression: AiDecisionsRuleExpressionInput!

  "Number of correlated incidents within window required to merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minCorrelationThreshold: Int

  "Duration to consider resources for.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  retentionWindowLength: Milliseconds
}

"The object that's returned from successfully revoking a shared account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationRevokeSharedAccountResponse {
  "Information about the revoked shared account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  sharedAccount: OrganizationSharedAccount
}

"Metadata information for a visualization\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogVisualizationMetadata implements Nr1CatalogNerdpackItemMetadata {
  "A short form description for the visualization.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the visualization.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "A list of previews for the visualization, such as screenshots.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  previews: [Nr1CatalogPreview!]!
}

"\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxActorStitchedFields {
  "Retrieve metadata on a specific error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errorGroup(
    """Error event that will be encoded to a unique error group id."""
    errorEvent: ErrorsInboxErrorEventInput

    """The unique identifier of the group being fetched."""
    id: ID
  ): ErrorsInboxErrorGroup

  "List of error group state values\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errorGroupStateTypes: [ErrorsInboxErrorGroupStateTypeResult!]

  "Search error groups.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  errorGroups(
    """Current query cursor"""
    cursor: String

    """Filter to specified entities."""
    entityGuids: [EntityGuid!]

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxErrorGroupSearchFilterInput

    """Query string to filter the error groups by"""
    query: String

    """Sort order for results. (limit: 1)"""
    sortBy: [ErrorsInboxErrorGroupSortOrderInput!]

    """Time Window for search"""
    timeWindow: TimeWindowInput
  ): ErrorsInboxErrorGroupsResponse
}

"OAuth URL response\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsOAuthUrlResponse {
  "OAuth response error\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsResponseError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "Transaction id to track OAuth flow with\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  transactionId: ID

  "OAuth URL for the user\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  url: String!
}

"An object that represents the golden metrics scoped by context\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenContextScopedGoldenMetrics {
  "Context for the golden metric\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  context: EntityGoldenContext!

  "Metrics for the domain and type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  metrics: [EntityGoldenMetric!]!
}

"A vertex in an entity relationship edge.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipVertex {
  "The account ID of the relationship node.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The entity of the relationship node.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: EntityOutline

  "The entity guid of the relationship node.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  guid: EntityGuid!
}

"Select incident for comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsIncidentSelect {
  """Select first incident in comparison."""
  FIRST_INCIDENT

  """Select second incident in comparison."""
  SECOND_INCIDENT
}

"VPC Access\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpVpcaccessIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Live URLs input.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardLiveUrlsFilterInput {
  "Live URL type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardLiveUrlType

  "The unique identifier of a public live URL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  uuid: ID
}

"\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessActorStitchedFields {
  "Fetch a single key by ID and type.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  key(
    """
    The `id` of the key. This can be used to identify a key without revealing the key itself (used to update and delete).
    """
    id: ID!

    """The type of key."""
    keyType: ApiAccessKeyType!
  ): ApiAccessKey

  "A list of keys scoped to the current actor and filter arguments. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  keySearch(
    """The cursor."""
    cursor: String

    """The criteria for the key search."""
    query: ApiAccessKeySearchQuery!
  ): ApiAccessKeySearchResult
}

"Result status of delete operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardDeleteResultStatus {
  """FAILURE."""
  FAILURE

  """SUCCESS."""
  SUCCESS
}

"Sort order\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsSortOrder {
  """Ascending sort order"""
  ASC

  """Descending sort order"""
  DESC
}

"\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdStorageDeleteResult {
  "\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  deleted: Int
}

"The monitor values that can be updated on a Script Api monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsUpdateScriptApiMonitorInput {
  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsScriptedMonitorLocationsInput

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The runtime that the monitor will use to run jobs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  runtime: SyntheticsRuntimeInput

  "The script that the monitor runs\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  script: String

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"Error details when processing drop rule requests.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesError {
  "A detailed error message.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  description: String!

  "The category of error that occurred.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  reason: NrqlDropRulesErrorReason!
}

"Filter variable object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsVariableFilter {
  "active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean

  "key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  key: String

  "label\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  label: String

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String

  "product\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  product: AiNotificationsProduct
}

"Cloud Spanner\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpSpannerIntegrationInput {
  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Widgets in a Dashboard Page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardWidget {
  "Typed widgets are area, bar, billboard, line, markdown, pie, and table.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  configuration: DashboardWidgetConfiguration

  "ID of the widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  id: ID!

  "The widget's position and size in the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  layout: DashboardWidgetLayout

  "Entities related to the widget. Currently only supports one Dashboard entity guid, but may allow other cases in the future.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  linkedEntities: [EntityOutline]

  "Untyped widgets are all other widgets, such as bullet, histogram, inventory, etc.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  rawConfiguration: DashboardWidgetRawConfiguration!

  "A title for the widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "Specifies how this widget will be visualized.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  visualization: DashboardWidgetVisualization!
}

"The account type contains the properties of an account\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAccount {
  "The account id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: Int!

  "The account name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The account region code\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  regionCode: String!

  "The status\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  status: String!
}

"The advanced options inputs available for a Simple Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsSimpleBrowserMonitorAdvancedOptionsInput {
  "Custom headers to use in monitor job\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  customHeaders: [SyntheticsCustomHeaderInput]

  "Emulate a device\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceEmulation: SyntheticsDeviceEmulationInput

  "Capture a screenshot during job execution\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  enableScreenshotOnFailureAndScript: Boolean

  "Validation text for monitor to search for at given URI\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  responseValidationText: String

  "Monitor should validate SSL certificate chain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  useTlsValidation: Boolean
}

"This scalar represents the raw nrql query results as returned from NRDB. It is a `Map` of `String` keys to values.\n\nThe shape of these objects reflect the query used to generate them, the contents\nof the objects is not part of the GraphQL schema.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar NrdbRawResults

"The rolling time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelObjectiveRollingTimeWindowCreateInput {
  "The count of time units. Accepted values are 1, 7 and 28 days.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "The time unit.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  unit: ServiceLevelObjectiveRollingTimeWindowUnit!
}

"Provides the types of group capabilities available\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum MultiTenantIdentityCapability {
  """The capability to delete a group"""
  DELETE_GROUP

  """The capability to grant membership to a group"""
  GRANT_GROUP_MEMBERSHIP

  """The capability to revoke membership from a group"""
  REVOKE_GROUP_MEMBERSHIP

  """The capability to update a group's display name"""
  UPDATE_GROUP_NAME
}

"The input object containing accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadScopeAccountsInput {
  "A list of accounts that will be used to get entities from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  accountIds: [Int!]!
}

"Redshift Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudRedshiftIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Consent accounts to usage of the Incident Intelligence product for EU or FedRAMP\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentConsentAccounts {
  "The list of accounts marked with consent\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  consentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  "The outcome of the consent marking\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: IncidentIntelligenceEnvironmentConsentAccountsResult!
}

"An object that represents the golden metrics scoped by domain and type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenMetricsDomainTypeScoped {
  "Context for the golden metric\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  context: EntityGoldenContext!

  "Domain type for the golden metrics\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  domainType: DomainType!

  "Metrics for the domain and type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  metrics: [EntityGoldenMetric!]!
}

"Available directions for sorting\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
enum UserManagementSortDirection {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"Result of updateWidgetsInPage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUpdateWidgetsInPageResult {
  "Expected errors while processing request. No errors means successful request.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardUpdateWidgetsInPageError]
}

"The result of a monitor delete mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsMonitorDeleteMutationResult {
  "The unique identifier of the deleted monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deletedGuid: EntityGuid
}

"The result of enabling browser monitoring for an APM-monitored application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentApplicationEnableBrowserResult {
  "The application's name\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Fields related to browser settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  settings: AgentApplicationApmBrowserSettings
}

"A connection between two vertices within a graph\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyEdge {
  "Whether or not the direction of the edge has semantic meaning.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  directed: Boolean!

  "ID of parent vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fromVertexId: ID!

  "Name of parent vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  fromVertexName: String!

  "ID of edge.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "ID of child vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  toVertexId: ID!

  "Name of child vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  toVertexName: String!

  "Time rule was last updated.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds!
}

"Metadata about a decision.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsRuleMetadata {
  "Summary of user opinions for merges by this decision\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  mergeOpinionCount: [AiDecisionsOpinionEntry!]!
}

"The result of a Simple (ping) monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsSimpleMonitorUpdateMutationResult {
  "Errors that occurred during Simple (ping) monitor update mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorUpdateError]!

  "The resulting Simple (ping) monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsSimpleMonitor
}

"Input type for FixedCosineDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedCosineDistanceInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"An object that represents the golden tags scoped by domain and type mutation result\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenTagsDomainTypeScopedResponse {
  "The list of the errors\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  errors: [EntityGoldenGoldenMetricsError!]

  "The tags results of the mutations\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  tags: EntityGoldenTagsDomainTypeScoped
}

"A result type encapsulating suggested queries\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SuggestedNrqlQueryResponse {
  "List of suggested queries.\n\n---\n**NR Internal**\n\n * [#help-ais](https://newrelic.slack.com/messages/C1X96SDA4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  suggestions: [SuggestedNrqlQuery!]
}

"Channel result object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsChannelsResponse {
  "Channel entities\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  entities: [AiNotificationsChannel!]!

  "Error in channel entities fetching\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsResponseError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "Cursor to get the next batch of results\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  nextCursor: String

  "Count of all channel entities\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  totalCount: Int!
}

"\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeAccountStitchedFields {
  "Provides access to Tracing data.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  tracing: EdgeTracing
}

"The advanced options available for a Script Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsScriptBrowserMonitorAdvancedOptions {
  "Emulate a device\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceEmulation: SyntheticsDeviceEmulation

  "Capture a screenshot during job execution\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  enableScreenshotOnFailureAndScript: Boolean
}

"Overview of a graph; all edges and vertices.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyGraph {
  "List of all edges in this graph.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  edges: [AiTopologyEdge!]!

  "List of all vertices in this graph.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  vertices: [AiTopologyVertex!]!
}

"Azure Load Balancer\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureLoadbalancerIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The `User` object provides general data about the user.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type User {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  email: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: Int

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Information about an alert in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartAlert implements Nr1CatalogQuickstartComponent {
  "The unique identifier for the alert\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID! @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")

  "Metadata associated with the alert\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogQuickstartAlertMetadata! @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")
}

"An input object used to represent an automatic status configuration.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadUpdateAutomaticStatusInput {
  "Whether the automatic status configuration is enabled or not.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "An additional meta-rule that can consider all entities that haven't been evaluated by any other rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  remainingEntitiesRule: WorkloadRemainingEntitiesRuleInput

  "A list of rules.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rules: [WorkloadUpdateRegularRuleInput!]
}

"A result set containing multiple notification channels and pagination info.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelsResultSet {
  "A set of channels.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  channels: [AlertsNotificationChannel!]!

  "Cursor pointing to the end of the current page of channels. Null if final page.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "Total number of channels available.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"The updated settings of an ApmApplicationEntity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmApplicationEntitySettingsResult {
  "The updated entity. You can view the updated apdex target in the `settings` field of an ApmApplicationEntity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: ApmApplicationEntity
}

"Type of deployment.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n\n"
enum ChangeTrackingDeploymentType {
  """A vanilla deployment"""
  BASIC

  """Blue-green deployment"""
  BLUE_GREEN

  """Canary deployment"""
  CANARY

  """Other types of deployment."""
  OTHER

  """Rolling deployment."""
  ROLLING

  """Shadow deployment"""
  SHADOW
}

"The result of which drop rules were successfully and unsuccessfully deleted.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesDeleteDropRuleResult {
  "Rules that were not deleted and why.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  failures: [NrqlDropRulesDeleteDropRuleFailure]

  "Rules that were successfully deleted.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  successes: [NrqlDropRulesDropRule]
}

"The type of key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
enum ApiAccessKeyType {
  """
  An ingest key is used by New Relic agents to authenticate with New Relic and send data to the assigned account.
  """
  INGEST

  """
  A user key is used by New Relic users to authenticate with New Relic and to interact with the New Relic GraphQL API .
  """
  USER
}

"The entityRelationshipUserDefinedDelete result error.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipUserDefinedDeleteResultError {
  "A message explaining what the error is about.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  message: String!

  "The mutation error type.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  type: EntityRelationshipUserDefinedDeleteErrorType!
}

"An object for updating an existing data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
input LogConfigurationsUpdateDataPartitionRuleInput {
  "The description of the data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  description: String

  "Whether or not this data partition rule is enabled.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  enabled: Boolean

  "Unique data partition rule identifier.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  id: ID!

  "The criteria of the data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  matchingCriteria: LogConfigurationsDataPartitionRuleMatchingCriteriaInput

  "The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/partitions_nrql_filter`)\n\n"
  nrql: Nrql
}

"Browser agent install types.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum BrowserAgentInstallType {
  """Lite agent install type."""
  LITE

  """Pro agent install type."""
  PRO

  """Pro + SPA agent install type."""
  PRO_SPA
}

"Result for bulk retention copy to an account\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementBulkCopyResult {
  "The failure destination accounts\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  failure: [Int]

  "The successful destination accounts\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  success: [Int]
}

"Details about the contact channel where users can get support via email\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
input Nr1CatalogEmailContactChannelInput {
  "The email address where users can get email support\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  address: String!
}

"The matching method for the rule to allocate the data partition data.\nSelect EQUALS to target logs that match your criteria exactly, or select LIKE to apply a fuzzy match.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
enum LogConfigurationsDataPartitionRuleMatchingOperator {
  """
  When applying the rule will allocate data for those attributes that are an exact match with the provided value.
  """
  EQUALS

  """
  When applying the rule will allocate data for those attributes that contain the provided value.
  """
  LIKE
}

"Firebase Hosting Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpFirebasehostingIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Database for MySQL\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureMysqlIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"General error categories.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
enum NrqlDropRulesErrorReason {
  """Targeted account does not have access to this feature."""
  FEATURE_FLAG_DISABLED

  """Other errors."""
  GENERAL

  """Something about the request was invalid."""
  INVALID_INPUT

  """The provided NRQL string was ill formed or used invalid features."""
  INVALID_QUERY

  """The drop rule being acted upon did not exist."""
  RULE_NOT_FOUND

  """The current user does not have authority to perform the given action."""
  USER_NOT_AUTHORIZED
}

"Notification response according to channel id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsTestNotificationResponse {
  "The id of the tested channel\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  channelId: ID!

  "Evidence for a successful test notification\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  evidence: String

  "Whether the test notification succeeded\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  status: AiWorkflowsTestNotificationResponseStatus!
}

"Amazon Virtual Private Cloud (VPC)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudVpcIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchNatGateway: Boolean

  "Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchVpn: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"A secure credential entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SecureCredentialEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The description of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The domain-specific identifier for the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  secureCredentialId: ID

  "Summary statistics for the Synthetic Monitor Secure Credential.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  secureCredentialSummary: SecureCredentialSummaryData

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "The time at which the entity was last updated.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds
}

"Provides the types of sharing modes available\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationSharingMode {
  """Accounts that are accessible to this organization"""
  ALL

  """Accounts that are managed by this organization"""
  MANAGED

  """
  Accounts managed by this organization that are currently shared with other organizations
  """
  SHARED_WITH_OTHER_ORGANIZATIONS

  """Accounts that are shared with this organization"""
  SHARED_WITH_THIS_ORGANIZATION
}

"Input for creating an outlier NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionOutlierInput {
  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the NRQL condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "Number of groups expected in the returned values for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expectedGroups: Int!

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpirationInput

  "Name of the NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionQueryInput!

  "Whether overlapping groups should produce a violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  openViolationOnGroupOverlap: Boolean!

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignalInput

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlDynamicConditionTermsInput!]!

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes. Default is THIRTY_DAYS.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit

  "Duration after which a violation automatically closes in seconds.\nAccepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).\n\nDefault is 3 days (259200 seconds).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"Blueprint for rule creation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRuleBlueprint {
  "Length of the window in which incidents are compared.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  correlationWindowLength: Milliseconds

  "Creator of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  creator: String

  "Description of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "Number of correlations within a window required to merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minCorrelationThreshold: Int

  "Name of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Configuration to allow rule to override issue properties.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  overrideConfiguration: AiDecisionsOverrideConfigurationInput

  "Expression to use to compare incidents.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleExpression: AiDecisionsRuleExpressionInput!

  "Type of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleType: AiDecisionsRuleType!

  "Creation source of rule.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  source: AiDecisionsRuleSource!
}

"Amazon Elastic MapReduce (EMR)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudEmrIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"The response of the key delete mutation.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessDeleteKeyResponse {
  "The `id`s of the successfully deleted ingest keys and any errors that occurred when deleting keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  deletedKeys: [ApiAccessDeletedKey]

  "Lists all errors for keys that could not be deleted. Each error maps to a single key input.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  errors: [ApiAccessKeyError]
}

"Public schema - `DashboardEntity` result representation for mutations. It's a subset of the `DashboardEntity` that inherits from the Entity type, but a complete different type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardEntityResult {
  "The New Relic account where the dashboard is created.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  accountId: Int

  "Dashboard creation timestamp.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  createdAt: DateTime

  "Brief text describing the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The name of the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  name: String

  "Information of the user that owns the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  owner: DashboardOwnerInfo

  "A nested block of all pages belonging to the dashboard.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  pages: [DashboardPage]

  "Dashboard permissions configuration.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  permissions: DashboardPermissions

  "Dashboard update timestamp.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  updatedAt: DateTime

  "Dashboard-local variable definitions.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  variables: [DashboardVariable]
}

"A structured representation of an exception for an APM application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceApmException {
  "The top level message associated with the exception.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String

  "The stack trace associated with the exception.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  stackTrace: StackTraceApmStackTrace
}

"An outline of a created alert policy\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogAlertPolicyOutline {
  "A list of created alert conditions under this policy\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  conditions: [Nr1CatalogAlertConditionOutline!]

  "The id of the created alert policy\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Expected errors that can be returned by create operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardCreateError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardCreateErrorType!
}

"For users on our New Relic One user model, a \"group\" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityGroup {
  "The authentication domain the group belongs to\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: ID!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!

  "Active users belonging to a group\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter group users"""
    filter: MultiTenantIdentityGroupUserFilterInput
  ): MultiTenantIdentityGroupUsers
}

"The object that's returned from successfully creating a shared account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationCreateSharedAccountResponse {
  "The created shared account.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  sharedAccount: OrganizationSharedAccount
}

"Indicates if a tag has been removed for a nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum NerdpackRemovedTagResponseType {
  """Indicates the tag has not been removed"""
  NOTHING_TO_REMOVE

  """Indicates the tag has been removed"""
  REMOVED
}

"The status value. Any static status always overrides any other status values calculated automatically.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
enum WorkloadStatusValueInput {
  """The status of the workload is degraded."""
  DEGRADED

  """The status of the workload is disrupted."""
  DISRUPTED

  """The status of the workload is operational."""
  OPERATIONAL
}

"Represents a metric definition for a give metric selector value.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
type EntityGoldenOriginalDefinitionWithSelector {
  "The definition of the golden metric.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  definition: EntityGoldenMetricDefinition!

  "The value of the selector. Currently, this is the value of the instrumentation provider.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  selectorValue: String!
}

"Pixie Project keys linked to a New Relic account\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixiePixieProject {
  "Pixie API key\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apiKey: SecureValue

  "Pixie Deploy key\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  deployKey: SecureValue
}

"Feature Setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementFeatureSetting {
  "Enabled state for the feature setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Key to identify the feature setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  key: String

  "Locked state for the feature setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  locked: Boolean

  "Unique name for the feature setting\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  name: String
}

"An object that represents a golden metrics error\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
enum EntityGoldenGoldenMetricsErrorType {
  """The context defined in the request is not valid."""
  INVALID_CONTEXT

  """The domain type defined in the request is not valid."""
  INVALID_DOMAIN_TYPE

  """There is some parameter validation that has failed"""
  INVALID_QUERY_PARAMS

  """Number of metrics defined in the requests exceeds the limit."""
  LIMIT_EXCEEDED

  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"Configuration for visualization type 'viz.billboard'. Learn more about [billboard](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#billboard) widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardBillboardWidgetConfigurationInput {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]

  "Array of thresholds to categorize the results of the query in different groups.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  thresholds: [DashboardBillboardWidgetThresholdInput!]
}

"Alert severity.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardAlertSeverity {
  """CRITICAL."""
  CRITICAL

  """NOT_ALERTING."""
  NOT_ALERTING

  """WARNING."""
  WARNING
}

"The type of the notification channel which determines its configuration field.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNotificationChannelType {
  """Campfire notification channel."""
  CAMPFIRE @deprecated(reason: "This channel type is deprecated")

  """Email notification channel."""
  EMAIL

  """HipChat notification channel."""
  HIP_CHAT @deprecated(reason: "This channel type is deprecated")

  """OpsGenie notification channel."""
  OPSGENIE

  """PagerDuty notification channel."""
  PAGERDUTY

  """Slack notification channel."""
  SLACK

  """User notification channel."""
  USER @deprecated(reason: "This channel type is deprecated")

  """VictorOps notification channel."""
  VICTOROPS

  """Webhook notification channel."""
  WEBHOOK

  """xMatters notification channel."""
  XMATTERS
}

"Provides all the available filters on the role scope\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationRoleScopeInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: MultiTenantAuthorizationRoleScopeEnum!
}

"A generic entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type GenericEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Provides all the available filters on the role name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationRoleNameInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: String!
}

"Autogenerated return type of RevokeAccess\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementRevokeAccessPayload {
  "the roles that were revoked from this group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roles: [AuthorizationManagementGrantedRole!]!
}

"Response for error groups.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxErrorGroupsResponse {
  "Cursor to get the next page of results.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  nextCursor: String

  "List of error groups.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  results: [ErrorsInboxErrorGroupOutline!]

  "Total error groups matching query\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  totalCount: Int
}

"Information about the mutation result when installing an alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogInstallAlertPolicyTemplateResult {
  "The template that was used for the installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  alertPolicyTemplate: Nr1CatalogAlertPolicyTemplate!

  "An outline of the created alert policy\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  createdAlertPolicy: Nr1CatalogAlertPolicyOutline!
}

"WAFV2 Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsWafv2Integration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Enums for region codes\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationRegionCodeEnum {
  """Region code for EU"""
  EU01

  """Region code for US"""
  US01
}

"Kubernetes Engine Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpKubernetesIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesAccountStitchedFields {
  "Fetch config for env\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  configByEnvironment: AiIssuesConfigurationByEnvironment

  "Fetch incidents latest data by supplied filter\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidents(
    """cursor"""
    cursor: String

    """filter incidents"""
    filter: AiIssuesFilterIncidents

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIncidentData

  "Fetch incidents events data by supplied filter\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  incidentsEvents(
    """cursor"""
    cursor: String

    """filter incidents events"""
    filter: AiIssuesFilterIncidentsEvents

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIncidentData

  "Fetch issues latest data by supplied filter\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  issues(
    """cursor"""
    cursor: String

    """filter issues"""
    filter: AiIssuesFilterIssues

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIssueData

  "Fetch issues events data by supplied filter\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  issuesEvents(
    """cursor"""
    cursor: String

    """filter issues events"""
    filter: AiIssuesFilterIssuesEvents

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIssueData
}

"MySQL Flexible Server\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureMysqlflexibleIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Set browser monitoring application settings.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsBrowserMonitoringInput {
  "Browser monitoring's page load Ajax requests.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ajax: AgentApplicationSettingsBrowserAjaxInput

  "If you use browser to monitor end-user browser activity, you can now see end-user-originating browser-side traces in distributed tracing.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  distributedTracing: AgentApplicationSettingsBrowserDistributedTracingInput

  "Determines which browser loader will be configured.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  loader: AgentApplicationSettingsBrowserLoaderInput

  "Specify the semantic version of the browser agent that you would like your app to use. Leave this blank to use the most recent version. Use 'x' in place of a numeric digit to represent the latest release within the version range. For example, '1.x.x'\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  pinnedVersion: String

  "Browser monitoring's page load timing feature can track sessions by using cookies that contain a simple session identifier.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  privacy: AgentApplicationSettingsBrowserPrivacyInput
}

"Predicate Object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsPredicate {
  "Field name in the issue event\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  attribute: String!

  "Type of operator used to match the values\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  operator: AiWorkflowsOperator!

  "Values to compare\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  values: [String!]!
}

"The time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ServiceLevelObjectiveTimeWindow {
  "The rolling time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  rolling: ServiceLevelObjectiveRollingTimeWindow
}

"Represents a time window input.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input TimeWindowInput {
  "The end time of the time window the number of milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  endTime: EpochMilliseconds!

  "The start time of the time window the number of milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  startTime: EpochMilliseconds!
}

"The input object representing the filter parameters for groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityGroupFilterInput {
  "Filter groups by capabilities\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  allowsCapability: MultiTenantIdentityAllowsCapabilityInput

  "Filter groups by authentication domain\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: MultiTenantIdentityAuthenticationDomainIdInput

  "Filter groups by ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: MultiTenantIdentityGroupIdInput

  "Filter groups that contain specific members\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  members: MultiTenantIdentityGroupMemberIdInput

  "Filter groups by display name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: MultiTenantIdentityGroupNameInput

  "An organization ID to filter groups by\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  organizationId: MultiTenantIdentityOrganizationIdInput!
}

"The input object representing the user being created\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementCreateUser {
  "The authentication domain id for the user to be created under.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: ID!

  "The email address of the user to be created.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: String!

  "The name of the user to be created.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The user type for the user to be created.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  userType: UserManagementRequestedTierName
}

"All the accounts that user has access to, from the same organization.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadValidAccounts {
  "List of accounts from the same organization.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accounts: [AccountReference!]
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdStorageEntityScope {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  collection(collection: String!, scopeByActor: Boolean): [NerdStorageCollectionMember]

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  document(collection: String!, documentId: String!, scopeByActor: Boolean): NerdStorageDocument
}

"The attributes of an organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationInformation {
  "The ID of the organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: String!

  "The name of the organization.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String!
}

"Type of installer\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogInstallerType {
  """Install plan"""
  INSTALL_PLAN
}

"Account Limit\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementAccountLimit {
  "Category for the limit\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  category: DataManagementCategory

  "Description of the uses for this limit\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  description: String

  "Link to documentation for this limit\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  documentationLink: String

  "What happens when the limit is reached?\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  limitReachedBehaviorDescription: String

  "Unique name for the limit\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  name: String

  "Time between limit resets\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  timeInterval: Nrql

  "Unit for the limit value\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  unit: DataManagementUnit

  "Value for the limit\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  value: Int
}

"OpsGenie data center region\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsOpsGenieDataCenterRegion {
  """EU data center region"""
  EU

  """US data center region"""
  US
}

"Destination fields\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
enum AiNotificationsDestinationFields {
  """active field"""
  ACTIVE

  """created_at field"""
  CREATED_AT

  """default field"""
  DEFAULT

  """last_sent field"""
  LAST_SENT

  """name field"""
  NAME

  """status field"""
  STATUS

  """type field"""
  TYPE

  """updated_at field"""
  UPDATED_AT

  """updated_by field"""
  UPDATED_BY
}

"Destinations result object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsDestinationsResponse {
  "Destination entities\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  entities: [AiNotificationsDestination!]!

  "Error in destinations entities fetching\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  error: AiNotificationsResponseError

  "Deprecated list of errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  "Cursor to get the next batch of results\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  nextCursor: String

  "Count of all destination entities\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  totalCount: Int!
}

"Filter on the workflow objects\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsFilters {
  "channelId\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  channelId: ID

  "destinationType\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationType: AiWorkflowsDestinationType

  "enrichmentId\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichmentId: ID

  "filterId\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  filterId: ID

  "guid\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  guid: EntityGuid

  "id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID

  "name\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String

  "nameLike\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  nameLike: String

  "workflowEnabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  workflowEnabled: Boolean
}

"AWS Health\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudHealthIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The input object that represents an objective definition.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelObjectiveCreateInput {
  "The description of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The name of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The target percentage of the SLO. Maximum value is 100.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  target: Float!

  "The time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timeWindow: ServiceLevelObjectiveTimeWindowCreateInput!
}

"Key to values type\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesKeyValues {
  "key\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  key: String!

  "A list of values\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  value: [String!]!
}

"An \"authentication domain\" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementAuthenticationDomain {
  "container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  groups(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """an optional list of ids to filter by"""
    id: [ID!]
  ): AuthorizationManagementGroupSearch!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  name: String!
}

"The position of a span with respect to the boundaries between processes in the trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
enum DistributedTracingSpanProcessBoundary {
  """The first span in a process."""
  ENTRY

  """
  A span that is the parent of an ENTRY span, or has an attribute name prefixed with either `db.` or `http.`, such as `db.statement` or `http.url`. If a span is both the first span in its process and has a `db.` or `http.`, its processBoundary value will be ENTRY.
  """
  EXIT

  """
  A span that is neither an ENTRY nor EXIT span. In-process spans are operations within each process, like internal method calls and functions.
  """
  IN_PROCESS
}

"Input type for One expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsOneInput {
  "Children expressions.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  children: [AiDecisionsRuleExpressionInput!]!
}

"Additional options for SELECT type components\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsSelectComponentOptions {
  "Is custom value creation allowed\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  creatable: Boolean!

  "List of field keys their values are required in order to fetch suggestions for this field\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  dependentOn: [String!]!

  "List of field keys their values can be used to filter suggestions by\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  filteredBy: [String!]!

  "Do we allow additional values as input other than suggested?\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  label: Boolean!

  "Are we expecting a single or multiple values\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  multiple: Boolean!

  "Is this component searchable\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  searchable: Boolean!

  "Preloaded suggestions for\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  suggestions: [AiNotificationsSuggestion!]!
}

"Information about a dashboard in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartDashboard implements Nr1CatalogQuickstartComponent {
  "The unique identifier for the dashboard\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the dashboard\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogQuickstartDashboardMetadata!
}

"Revoke live URL result.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardRevokeLiveUrlResult {
  "The list of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardLiveUrlError]

  "The unique identifier of the public live URL if revoked successfully, null otherwise.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  uuid: ID
}

"Incident Intelligence environment kinds\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum IncidentIntelligenceEnvironmentEnvironmentKind {
  """
  The environment can contain more than one account so that cross-account correlation between accounts is supported
  """
  CROSS_ACCOUNT_ENVIRONMENT

  """The environment only contains a single account"""
  SINGLE_ACCOUNT_ENVIRONMENT
}

"Information about the publicly accessible screenshot\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogScreenshot implements Nr1CatalogPreview {
  "The publicly accessible URL for the screenshot\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum RegionScope {
  """Do not filter by region"""
  GLOBAL

  """Filter by region"""
  IN_REGION
}

"The result of a Simple Browser monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsSimpleBrowserMonitorCreateMutationResult {
  "Errors that occurred during Simple Browser monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorCreateError]!

  "The resulting Simple Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsSimpleBrowserMonitor
}

"Exists only if a user has a pending upgrade request.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityPendingUpgradeRequest {
  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Requester message, why the user believes they require the upgrade.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  message: String

  "Requested user type for the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  requestedUserType: MultiTenantIdentityUserType
}

"Input type for RelativeContains expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeContainsInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  contained: AiDecisionsIncidentObjectInput!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  container: AiDecisionsIncidentObjectInput!
}

"The `DateTime` scalar represents a date and time. The `DateTime` appears as an ISO8601 formatted string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar DateTime

"Mutation error information.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n\n"
type NerdStorageVaultResultError {
  "The error message.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  message: String

  "The type of error that occured when performing the mutation.\n\n---\n**NR Internal**\n\n * [#help-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DevEx/nerd_storage_vault_api`)\n\n"
  type: NerdStorageVaultErrorType!
}

"Trusted Advisor Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudTrustedadvisorIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A Simple (ping) monitor resulting from a Simple monitor mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsSimpleMonitor {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsSimpleMonitorAdvancedOptions

  "The creation time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  createdAt: EpochMilliseconds

  "The unique client identifier for the Synthetics Monitor in New Relic\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  guid: EntityGuid

  "The unique identifier of the monitor within the Synthetics domain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  id: ID

  "The locations the monitor runs from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocations

  "The last modification time of the monitor in millis\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  modifiedAt: EpochMilliseconds

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The uri the monitor runs against\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  uri: String
}

"Front Door\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureFrontdoorIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The rolling time window units.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum ServiceLevelObjectiveRollingTimeWindowUnit {
  """Day."""
  DAY
}

"\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdStorageCollectionMember {
  "The NerdStorage document.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  document: NerdStorageDocument

  "The documentId.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/messages/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: String
}

"A customers organization groups\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationGroupWrapper {
  "A customers organization groups\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  items: [OrganizationOrganizationGroup!]

  "an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Provides the operations available on the account id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountIdInput {
  "An account id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: Int!
}

"Step Functions Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsStatesIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"An `Endpoint` describes access to an endpoint pointing to a trace observer. Currently, only one endpoint per trace observer is supported.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeEndpoint {
  "Connection information related to the agent configuration.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  agent: EdgeAgentEndpointDetail!

  "Type of the endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  endpointType: EdgeEndpointType!

  "Connection information related to the Infinite Tracing Trace API (HTTP 1.1) configuration.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  https: EdgeHttpsEndpointDetail!

  "Status of the endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  status: EdgeEndpointStatus!
}

"Input object used to represent the rule to be created\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
input MetricNormalizationEditRuleInput {
  "Rule action.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  action: MetricNormalizationCustomerRuleAction!

  "Is rule enabled?\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  enabled: Boolean!

  "Rule evaluation order\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  evalOrder: Int

  "Rule Id.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  id: Int!

  "Metric Match Expression.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  matchExpression: String!

  "Notes.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  notes: String

  "Metric Replacement Expression.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  replacement: String

  "Whether it terminates the evaluation chain or not\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  terminateChain: Boolean
}

"Type that wraps the errors from a entity delete operation.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityDeleteError {
  "Guid related to the error.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "User-friendly message describing the error.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String!

  "Describes all potential error types that a delete operation might return.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: EntityDeleteErrorType!
}

"Creates a new Incident Intelligence Environment,\nwill fail if an environment is already attached to the same parent account\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentCreateEnvironment {
  "The created environment\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment @deprecated(reason: "Environment moved to the result details field")

  "The outcome of the creation\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: IncidentIntelligenceEnvironmentCreateEnvironmentResult!

  "Additional result details\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  resultDetails: IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails
}

"Input data for allow list handling.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input NerdpackAllowListInput {
  "List of accounts that will be allow to subscribe. They must belong to the user's authorized account list.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountIds: [Int]!
}

"The result of which submitted drop rules were successfully and unsuccessfully created.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesCreateDropRuleResult {
  "Rules that were not created and why.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  failures: [NrqlDropRulesCreateDropRuleFailure]

  "Rules that were successfully created.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  successes: [NrqlDropRulesDropRule]
}

"Configuration for Webhook notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsWebhookNotificationChannelConfig {
  "Base URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  baseUrl: String!

  "Basic auth.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  basicAuth: AlertsWebhookBasicAuthInput

  "Custom HTTP headers.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customHttpHeaders: [AlertsWebhookCustomHeaderInput!]

  "Custom payload body.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customPayloadBody: String

  "Custom payload type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customPayloadType: AlertsWebhookCustomPayloadType
}

"The type of update you would like to apply to the existing data source group.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeDataSourceGroupUpdateType {
  """Add the supplied entity guids to those that are currently active."""
  ADD

  """Remove the supplied entity guids from those that are currently active."""
  REMOVE

  """Replace the currently active entity guids with the ones supplied."""
  REPLACE
}

"Input type for RelativeFuzzyWuzzyAdaptiveRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeFuzzyWuzzyAdaptiveRatioInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"AWS Auto Scaling\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAutoscalingIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Input for deleting multiple trace filter rules by id\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeDeleteTraceFilterRulesInput {
  "One or more SpanAttributeRule id(s) to be deleted.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  spanAttributeRuleIds: [Int!]
}

"Containers Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureContainersIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Represents the type of the threshold defined for a rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
enum WorkloadRuleThresholdType {
  """
  The worst status is rolled up only after a certain number of entities within the workload are not operational.
  """
  FIXED

  """
  The worst status is rolled up only after a certain percentage of entities within the workload are not operational.
  """
  PERCENTAGE
}

"Express Route Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureExpressrouteIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Error details about the events to metrics rule that failed to be updated and why.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsUpdateRuleFailure {
  "Information about why the update failed.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errors: [EventsToMetricsError]

  "Input information about a failed update.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  submitted: EventsToMetricsUpdateRuleSubmission
}

"The available fill options.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsFillOption {
  """Fill using the last known value."""
  LAST_VALUE

  """Do not fill data."""
  NONE

  """Fill using a static value."""
  STATIC
}

"Issue muting state\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
enum AiIssuesIssueMutingState {
  """Issue is muted"""
  FULLY_MUTED

  """Issue is not muted"""
  NOT_MUTED

  """Issue is partially muted"""
  PARTIALLY_MUTED
}

"Fetch Metadata for AWS integrations Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsMetadataIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A cloud service dashboard template.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudDashboardTemplate {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The dashboard layout position.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  layout: Int!

  "The dashboard template name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "The dashboard template slug.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  slug: String!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"The error for dissociating notification channels from a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelsRemoveFromPolicyError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String!

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  errorType: AlertsNotificationChannelsRemoveFromPolicyErrorType!

  "Notification channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannelId: ID!
}

"Details about the contact channel where users can get support via the web\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
input Nr1CatalogCommunityContactChannelInput {
  "The URL linking to the website where users can get web support\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"The Accounts used to scope a collection.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntityCollectionScopeAccounts {
  "The Account IDs that make up the account scoping.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountIds: [Int]
}

"Azure Monitor metrics Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureMonitorIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if integration is active\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Specify resource tags (in 'key:value' form) associated with the resources that you want to exclude from monitoring. Exclusion takes precedence over inclusion.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  excludeTags: [String]

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "Specify resource tags (in 'key:value' form) associated with the resources that you want to monitor. If empty, all resources will be monitored.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  includeTags: [String]

  "The polling interval for metadata and tags, in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The polling interval for metrics, in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "Specify each Azure resource type that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceTypes: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Metadata associated with the Nerdpack that is available in the New Relic One Catalog\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogNerdpackMetadata {
  "Additional information about the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  additionalInfo(
    """The output format for the additional information"""
    format: Nr1CatalogRenderFormat = MARKDOWN
  ): String

  "The list of categories for filtering, searching, and grouping associated with the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [Nr1CatalogCategory!]!

  "The list of category terms associated with the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categoryTerms: [String!]!

  "A short form description for the New Relic One Nerdpack. Used throughout the platform when displaying the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The long form description used in the catalog to detail the functionality of the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  details: String

  "The human-readable name for the Nerdpack. Used throughout the New Relic One platform when displaying the Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "Additional documentation for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  documentation(
    """The output format for the documentation"""
    format: Nr1CatalogRenderFormat = MARKDOWN
  ): String

  "The corresponding icon for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  icon: Nr1CatalogIcon

  "The types of artifacts (e.g. nerdlet, launcher, etc) contained in the nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  includedArtifactTypes: [String]

  "The list of keywords for filtering and searching\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  keywords: [String!]!

  "Information related to items in the nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdpackItems: [Nr1CatalogNerdpackItem!]!

  "A list of previews for the Nerdpack, such as screenshots.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  previews: [Nr1CatalogPreview!]!

  "The date the Nerdpack was published\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  publishDate: DateTime

  "The date the Nerdpack was deployed\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  releaseDate: DateTime @deprecated(reason: "This field is no longer supported. Please use publishDate instead.")

  "The URL to the repository where the source code for the Nerdpack can be found.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  repository: String

  "Contact information to get support for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  support: Nr1CatalogSupportChannels!

  "A tagline for the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  tagline: String

  "The nerdpack version the metadata corresponds with\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  version: SemVer!

  "A description of changes for this version of the Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  whatsNew: Nr1CatalogReleaseNote
}

"Known error codes and messages for `DeleteTraceObserverResponseError`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeDeleteTraceObserverResponseErrorType {
  """The trace observer has already been deleted."""
  ALREADY_DELETED

  """No trace observer was found with the id given."""
  NOT_FOUND
}

"Available filtering types for email verification states\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementEmailVerificationStateInput {
  "An email verification state\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  pending: Boolean!
}

"Information about a Nerdlet in a Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogNerdlet implements Nr1CatalogNerdpackItem {
  "The unique identifier for the Nerdlet.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  id: ID!

  "Metadata associated with the Nerdlet\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  metadata: Nr1CatalogNerdletMetadata
}

"Live URL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardLiveUrl {
  "Creation date.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds

  "Title that describes the source entity that is accessible through the public live URL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  title: String

  "Live URL type.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardLiveUrlType

  "Public URL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  url: String!

  "The unique identifier of the public live URL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  uuid: ID!
}

"NRQL type configuration input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsNrqlConfigurationInput {
  "query\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  query: String!
}

"Route 53 Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudRoute53Integration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Information about a link install directive\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogLinkInstallDirective {
  "The URL of the external link used to guide the user through installation\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  url: String!
}

"A New Relic Alerts condition that uses a NRQL query to determine violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
interface AlertsNrqlCondition {
  "The custom violation description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the condition is enabled.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The Entity associated with the NRQL Condition\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entity: EntityOutline

  "The condition's entity GUID\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  entityGuid: EntityGuid!

  "Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  expiration: AlertsNrqlConditionExpiration!

  "Condition ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Name of the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "The NRQL query that defines the signal for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrql: AlertsNrqlConditionQuery!

  "Alerts policy ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policyId: ID!

  "Runbook URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  runbookUrl: String

  "Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  signal: AlertsNrqlConditionSignal!

  "List of critical and warning terms for the condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  terms: [AlertsNrqlConditionTerms!]!

  "Type of NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNrqlConditionType!

  "Deprecated - use violationTimeLimitSeconds for full range of values.\n\nDuration after which a violation automatically closes.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  "Duration after which a violation automatically closes in seconds.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  violationTimeLimitSeconds: Seconds
}

"An entity relationship automatically detected by NewRelic.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipDetectedEdge implements EntityRelationshipEdge {
  "The time the relationship was created.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "The source entity of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  source: EntityRelationshipVertex!

  "The target entity of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  target: EntityRelationshipVertex!

  "The type of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  type: EntityRelationshipEdgeType!
}

"Azure Redis Cache\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureRediscacheIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The name of a log data partition. Has to start with 'Log_' prefix and can only contain alphanumeric characters and underscores.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
scalar LogConfigurationsLogDataPartitionName

"The monitor values that can be updated on a Cert Check monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsUpdateCertCheckMonitorInput {
  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The domain of the host that will have its certificate checked\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  domain: String

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsLocationsInput

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The desired number of remaining days until the certificate expires to trigger a monitor failure\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  numberDaysToFailBeforeCertExpires: Int

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"Expected error types that can be returned by addWidgetsToPage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
enum DashboardAddWidgetsToPageErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT

  """Page not found in the system."""
  PAGE_NOT_FOUND
}

"A group of users.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityUserGroup {
  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "the name of the object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!
}

"PostgreSQL Flexible Server\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzurePostgresqlflexibleIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The input object that represents an objective definition.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input ServiceLevelObjectiveUpdateInput {
  "The description of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The name of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The target percentage of the SLO. Maximum value is 100.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  target: Float!

  "The time window configuration of the SLO.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timeWindow: ServiceLevelObjectiveTimeWindowUpdateInput!
}

"The input object used to provide the configuration that defines how the status of the workload is calculated.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadUpdateStatusConfigInput {
  "An input object used to represent an automatic status configuration.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  automatic: WorkloadUpdateAutomaticStatusInput

  "A list of static status configurations. You can only configure one static status for a workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  static: [WorkloadUpdateStaticStatusInput!]
}

"An object representing a stack trace segment\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceMobileCrashStackTraceFrame {
  "Frame filepath\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  filepath: String

  "Formatted frame\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  formatted: String!

  "Frame line number\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  line: Int

  "Frame name\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Base Integration Object\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudBaseIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Cloud Functions Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpFunctionsIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Input data that maps ignore status codes associated with different hosts.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsIgnoredStatusCodeRuleInput {
  "An array of hosts to apply the status code rule to.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  hosts: [String!]!

  "An array of status codes to be be ignored on these hosts.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  statusCodes: [String!]!
}

"An iterable collection of roles\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type MultiTenantAuthorizationRoleCollection {
  "collection of roles\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  items: [MultiTenantAuthorizationRole!]!

  "an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"NRQL enrichment configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsNrqlConfiguration {
  "NRQL query\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  query: String!
}

"Input type for RelativeCosineDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeCosineDistanceInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"An entity relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
interface EntityRelationshipEdge {
  "The time the relationship was created.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "The source entity of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  source: EntityRelationshipVertex!

  "The target entity of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  target: EntityRelationshipVertex!

  "The type of the relationship.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  type: EntityRelationshipEdgeType!
}

"Provides all the available filters on the authentication domain id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationAuthenticationDomainIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogActorStitchedFields {
  "Information related to a alert policy template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  alertPolicyTemplate(
    """The ID associated with the alert policy template"""
    id: ID!
  ): Nr1CatalogAlertPolicyTemplate

  "List of available categories for filtering and searching\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  categories: [Nr1CatalogCategory!]

  "Information related to a dashboard template\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  dashboardTemplate(
    """The ID associated with the dashboard template"""
    id: ID!
  ): Nr1CatalogDashboardTemplate

  "Information related to a data source\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  dataSource(
    """The ID associated with the data source"""
    id: ID!
  ): Nr1CatalogDataSource

  "Information related to a deployed Nerdpack\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdpack(
    """The ID associated with the Nerdpack"""
    id: ID!
  ): Nr1CatalogNerdpack

  "List of nerdpacks available in the catalog\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  nerdpacks: [Nr1CatalogNerdpack!]

  "Catalog information related to a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  quickstart(
    """The ID associated with the quickstart"""
    id: ID!
  ): Nr1CatalogQuickstart

  "List of Quickstarts available in New Relic I/O\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  quickstarts(
    """Cursor for pagination. Supplied by a previous Quickstarts query."""
    cursor: String
  ): Nr1CatalogQuickstartsListing

  "Search for items in the catalog\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  search(
    """Cursor for pagination. Supplied by a previous search."""
    cursor: String

    """Set of filters to apply to the search"""
    filter: Nr1CatalogSearchFilter

    """Search query string"""
    query: String

    """Method used to sort the search results"""
    sortBy: Nr1CatalogSearchSortOption = ALPHABETICAL
  ): Nr1CatalogSearchResponse
}

"Result of update operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUpdateResult {
  "Dashboard update result.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  entityResult: DashboardEntityResult

  "Expected errors while processing request.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardUpdateError]
}

"Token auth input object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsTokenAuthInput {
  "prefix\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  prefix: String

  "token\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  token: SecureValue!
}

"The `Account` object provides general data about the account, as well as\nbeing the entry point into more detailed data about a single account.\n\nAccount configuration data is queried through this object, as well as\ntelemetry data that is specific to a single account.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type Account {
  "This field provides access to AgentEnvironment data.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentEnvironment: AgentEnvironmentAccountStitchedFields

  "This field provides access to AiDecisions data.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiDecisions: AiDecisionsAccountStitchedFields

  "This field provides access to AiIssues data.\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  aiIssues: AiIssuesAccountStitchedFields

  "This field provides access to AiNotifications data.\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  aiNotifications: AiNotificationsAccountStitchedFields

  "This field provides access to AiTopology data.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  aiTopology: AiTopologyAccountStitchedFields

  "This field provides access to AiWorkflows data.\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  aiWorkflows: AiWorkflowsAccountStitchedFields

  "This field provides access to Alerts data.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  alerts: AlertsAccountStitchedFields

  "The `cloud` field provides access to cloud integrations configuration data.\n\nFor details and query examples visit\n[our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  cloud: CloudAccountFields

  "This field provides access to DataManagement data.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  dataManagement: DataManagementAccountStitchedFields

  "This field provides access to Edge data.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  edge: EdgeAccountStitchedFields

  "This field provides access to EventsToMetrics data.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eventsToMetrics: EventsToMetricsAccountStitchedFields

  "This field provides access to HistoricalDataExport data.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [historic-export-driver repo](https://source.datanerd.us/dirac/historic-export-driver)\n\n * visibility(flag:`HistoricalExport/nerdgraph_visible`)\n\n"
  historicalDataExport: HistoricalDataExportAccountStitchedFields

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: Int

  "This field provides access to IncidentIntelligenceEnvironment data.\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentIntelligenceEnvironment: IncidentIntelligenceEnvironmentAccountStitchedFields

  "This field provides access to Installation data.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  installation: InstallationAccountStitchedFields

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  licenseKey: String @deprecated(reason: "Please use `actor.apiAccess.keySearch` to access your license keys.")

  "This field provides access to LogConfigurations data.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  logConfigurations: LogConfigurationsAccountStitchedFields

  "This field provides access to MetricNormalization data.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  metricNormalization: MetricNormalizationAccountStitchedFields

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "NerdStorage is a document database that is accessible within the New Relic One interface.\nThis allows for persistence of Nerdpack data including users' configuration settings and preferences\n(like favorites), or any other small data sets.\n\nConceptually, you can imagine NerdStorage as a nested key-value map.\n\nFor information on New Relic NerdStorage, visit [our docs](https://developer.newrelic.com/build-tools/new-relic-one-applications/nerdstorage).\n\nTo use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageAccountScope

  "Make a query to NRDB with a NRQL string.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\nExample NRQL query:\n```\nSELECT count(*) FROM Transaction TIMESERIES\n```\n\nFor more details on how to use NRQL in the GraphQL API, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api)\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrqlQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    query: Nrql!

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "This field provides access to NrqlDropRules data.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  nrqlDropRules: NrqlDropRulesAccountStitchedFields

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrqlQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "This field provides access to Pixie data.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pixie: PixieAccountStitchedFields

  "This field provides access to StreamingExport data.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  streamingExport: StreamingExportAccountStitchedFields

  "This field provides access to Synthetics data.\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  synthetics: SyntheticsAccountStitchedFields

  "This field provides access to Workload data.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  workload: WorkloadAccountStitchedFields
}

"Relationship filter\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input EntityRelationshipFilter {
  "Filter the relationships to those that contain a specific entity type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: [EntityType]

  "Filter the relationships to those that contain a specific Infrastructure integration entity type\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  infrastructureIntegrationType: [EntityInfrastructureIntegrationType]
}

"Type of Filter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
enum AiWorkflowsOperator {
  """String or list attribute contains this value"""
  CONTAINS

  """String or list attribute does not contain this value"""
  DOES_NOT_CONTAIN

  """String or Numeric attribute does not equal this value"""
  DOES_NOT_EQUAL

  """Element in list attribute does not exactly match this value"""
  DOES_NOT_EXACTLY_MATCH

  """String attribute ends with this value"""
  ENDS_WITH

  """String or Numeric attribute equals this value"""
  EQUAL

  """Element in list attribute exactly matches this value"""
  EXACTLY_MATCHES

  """Numeric attribute is greater or equal to this value"""
  GREATER_OR_EQUAL

  """Numeric attribute is greater than this value"""
  GREATER_THAN

  """Boolean attribute equals value"""
  IS

  """Boolean attribute does not equal value"""
  IS_NOT

  """Numeric attribute is less or equal to this value"""
  LESS_OR_EQUAL

  """Numeric attribute is less than this value"""
  LESS_THAN

  """String attribute starts with this value"""
  STARTS_WITH
}

"An arbitrary key:value object containing additional data related to the environment where the installation occurred.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar InstallationRawMetadata

"The details of a status that was involved in the calculation of the workload status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
interface WorkloadStatusResult {
  "Indicates where the status value derives from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  source: WorkloadStatusSource!

  "The value of a status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  value: WorkloadStatusValue!
}

"An organization's shared accounts, both given and received.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationAccountShares {
  "An organization's shared accounts, both given and received.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  sharedAccounts: [OrganizationSharedAccount!]
}

"Autogenerated return type of MigrateAwsGovCloudToAssumeRole\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudMigrateAwsGovCloudToAssumeRolePayload {
  "The list of errors.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  errors: [CloudAccountMutationError!]!

  "The updated linked accounts.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccounts: [CloudLinkedAccount!]!
}

"Indicates where the status value derives from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
enum WorkloadStatusSource {
  """Refers to the result of an automatic rule defined for a workload."""
  ROLLUP_RULE

  """Refers to a static status defined for a workload."""
  STATIC

  """Refers to an undetermined status source."""
  UNKNOWN

  """
  Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
  """
  WORKLOAD
}

"enum of DeviceTypes that the user can use for device emulation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsDeviceType {
  """This will be dimensions for a typical mobile device"""
  MOBILE

  """This will disable device emulation"""
  NONE

  """This will be dimensions for a typical tablet device"""
  TABLET
}

"Api Management Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureApimanagementIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"MQ Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsMqIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Data Factory\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureDatafactoryIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"A step that will be added to the monitor script\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsStepInput {
  "The position of the step within the script ranging from 1-100.\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  ordinal: Int!

  "The type of step to be added to the script\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  type: SyntheticsStepType!

  "The metadata values related to the step\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  values: [String!]
}

"Autogenerated return type of ConfigureIntegration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudConfigureIntegrationPayload {
  "The list of errors.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  errors: [CloudIntegrationMutationError!]!

  "The created/modified service integrations.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  integrations: [CloudIntegration!]!
}

"A relationship between a parent and child span.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
type DistributedTracingSpanConnection {
  "The span identifier of the child for this connection.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  child: String!

  "The span identifier of the parent for this connection.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  parent: String!
}

"Front Door Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureFrontdoorIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Azure Service Bus\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureServicebusIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Input type for FixedEndsWith expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedEndsWithInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Successfully created span attribute trace filter rule, or one or more error responses if there were issues.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeCreateSpanAttributeRulesResponse {
  "Errors that may occur when creating a `SpanAttributeTraceFilter`. Defaults to `null` in case of success.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  errors: [EdgeCreateSpanAttributeRuleResponseError]

  "The trace filter rules that were created. Defaults to `null` in case of failure.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  rules: [EdgeSpanAttributeRule]
}

"The details that were submitted when creating a drop rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesCreateDropRuleSubmission {
  "The account the targeted data report to.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  accountId: Int!

  "The type of drop rule you want. This changes the way your NRQL string is interpreted.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  action: NrqlDropRulesAction!

  "Additional information about the rule.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  description: String

  "The NRQL string used to match data you want to take the specified action on.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  nrql: String!
}

"Success response for deleting an Alerts condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsConditionDeleteResponse {
  "ID of the deleted Alerts condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"An object representing a stack trace segment\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceMobileExceptionStackTraceFrame {
  "Frame filepath\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  filepath: String

  "Formatted frame\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  formatted: String!

  "Frame line number\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  line: Int

  "Frame name\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"Metadata associated with the dashboard in a quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogQuickstartDashboardMetadata implements Nr1CatalogQuickstartComponentMetadata {
  "A short form description for the dashboard.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  description: String

  "The human-readable name for the dashboard.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String

  "A list of previews for the dashboard, such as screenshots.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  previews: [Nr1CatalogPreview!]!
}

"The `UserReference` object provides basic identifying information about the user.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type UserReference {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  email: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  gravatar: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: Int

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String
}

"A customers organization group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationGroup {
  "The ID of the organization group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The name of the organization group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: String!
}

"Channel input object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsChannelInput {
  "destinationId\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  destinationId: ID!

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String!

  "product\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  product: AiNotificationsProduct!

  "properties\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  properties: [AiNotificationsPropertyInput!]!

  "type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsChannelType!
}

"Fetch tags for all integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsTagsGlobalIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Simulation of a rule expression for a certain period of time.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsSimulation {
  "Example potential incident correlations.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  candidateIncidents: [[ID!]!]!

  "Time simulation completed.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  completedAt: EpochMilliseconds

  "Time simulation was created.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "Error message if simulation failed.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errorMessage: String

  "ID of simulation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "Applicability of ingested incidents to the expression.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentsApplicable: [AiDecisionsSelectorApplicability!]!

  "Number of incidents correlated by simulation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentsCorrelated: Int!

  "Number of incidents ingested by simulation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentsIngested: Int!

  "Number of applicable incidents processed by simulation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentsProcessed: Int!

  "Percentage of current progress of simulation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  progress: Float!

  "Time simulation was last updated.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds!
}

"Configuration options for when a monthly monitor downtime should run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
input SyntheticsMonitorDowntimeMonthlyFrequency {
  "Which dates a monitor downtime is run (only 1 of these can be selected)\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  daysOfMonth: [Int]

  "Which weekdays in the month the monitor downtime will run (only 1 of these can be selected)\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  daysOfWeek: SyntheticsDaysOfWeek
}

"Dataproc Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpDataprocIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Firestore\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpFirestoreIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Variable object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsVariable {
  "Is variable active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean!

  "Variable category\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  category: AiNotificationsVariableCategory!

  "Variable creation time\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  createdAt: DateTime!

  "Variable description\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  description: String

  "Variable example\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  example: String!

  "Variable id\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  id: ID!

  "Variable key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  key: String!

  "Variable label\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  label: String

  "Variable name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String!

  "Related product type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  product: AiNotificationsProduct!

  "Variable type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsVariableType!

  "Variable update time\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  updatedAt: DateTime!

  "Variable creator userId\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  updatedBy: Int!
}

"General error categories.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EventsToMetricsErrorReason {
  """Other errors."""
  GENERAL

  """Indicates some part of your submission was invalid."""
  INVALID_INPUT

  """The user attempting to submit this rule is not authorized to do so."""
  USER_NOT_AUTHORIZED
}

"The advanced options available for a Simple Browser monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsSimpleBrowserMonitorAdvancedOptions {
  "Custom headers to use in monitor job\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  customHeaders: [SyntheticsCustomHeader]

  "Emulate a device\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  deviceEmulation: SyntheticsDeviceEmulation

  "Capture a screenshot during job execution\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  enableScreenshotOnFailureAndScript: Boolean

  "Validation text for monitor to search for at given URI\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  responseValidationText: String

  "Monitor should validate SSL certificate chain\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  useTlsValidation: Boolean
}

"Settings that are applicable to browser applications.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsBrowserBase {
  "Access general settings for the application.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserConfig: AgentApplicationSettingsBrowserConfig!

  "browser monitoring provides real user monitoring (RUM) that measures the speed and performance of end users as they navigate the application using different web browsers, devices, operating systems, and networks.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  browserMonitoring: AgentApplicationSettingsBrowserMonitoring!
}

"Additional entity search options.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input EntitySearchOptions {
  "Whether or not matching on tag keys and values should be case-sensitive.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  caseSensitiveTagMatching: Boolean

  "A limit to apply to the number of entities returned. Note: this option can only _lower_ the default limits.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  limit: Int

  "Specify which tags to include with search results. Does not affect which entities are returned.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagFilter: [String!]
}

"Array of responses, one for each trace filter rule deletion request\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDeleteTraceFilterRuleResponses {
  "Array of span attribute trace filter rule deletion responses, one for each id provided to `DeleteTraceFilterRulesInput`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  spanAttributeRules: [EdgeDeleteSpanAttributeRuleResponse!]!
}

"Update Workflow input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsUpdateWorkflowInput {
  "destinationConfigurations\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationConfigurations: [AiWorkflowsDestinationConfigurationInput!]

  "destinationsEnabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationsEnabled: Boolean

  "enrichments\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichments: AiWorkflowsUpdateEnrichmentsInput

  "enrichmentsEnabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichmentsEnabled: Boolean

  "id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID!

  "issuesFilter\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  issuesFilter: AiWorkflowsUpdatedFilterInput

  "mutingRulesHandling\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  mutingRulesHandling: AiWorkflowsMutingRulesHandling

  "name\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String

  "workflowEnabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  workflowEnabled: Boolean
}

"Firestore Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpFirestoreIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"User assigned to an error group.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
type ErrorsInboxAssignment {
  "Email address of the user.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  email: String

  "Additional user data for New Relic users.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  userInfo: UserReference
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpDisableIntegrationsInput {
  "Vertex AI integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpAiplatform: [CloudDisableAccountIntegrationInput]

  "AlloyDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpAlloydb: [CloudDisableAccountIntegrationInput]

  "App Engine integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpAppengine: [CloudDisableAccountIntegrationInput]

  "BigQuery integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpBigquery: [CloudDisableAccountIntegrationInput]

  "Bigtable integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpBigtable: [CloudDisableAccountIntegrationInput]

  "Composer integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpComposer: [CloudDisableAccountIntegrationInput]

  "Dataflow integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpDataflow: [CloudDisableAccountIntegrationInput]

  "Dataproc integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpDataproc: [CloudDisableAccountIntegrationInput]

  "Datastore integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpDatastore: [CloudDisableAccountIntegrationInput]

  "Firebase Database integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirebasedatabase: [CloudDisableAccountIntegrationInput]

  "Firebase Hosting integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirebasehosting: [CloudDisableAccountIntegrationInput]

  "Firebase Storage integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirebasestorage: [CloudDisableAccountIntegrationInput]

  "Firestore integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFirestore: [CloudDisableAccountIntegrationInput]

  "Cloud Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpFunctions: [CloudDisableAccountIntegrationInput]

  "Interconnect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpInterconnect: [CloudDisableAccountIntegrationInput]

  "Kubernetes Engine integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpKubernetes: [CloudDisableAccountIntegrationInput]

  "Cloud Load Balancing integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpLoadbalancing: [CloudDisableAccountIntegrationInput]

  "Memcache integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpMemcache: [CloudDisableAccountIntegrationInput]

  "Cloud Pub/Sub integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpPubsub: [CloudDisableAccountIntegrationInput]

  "Redis integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpRedis: [CloudDisableAccountIntegrationInput]

  "Router integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpRouter: [CloudDisableAccountIntegrationInput]

  "Run integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpRun: [CloudDisableAccountIntegrationInput]

  "Cloud Spanner integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpSpanner: [CloudDisableAccountIntegrationInput]

  "Cloud SQL integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpSql: [CloudDisableAccountIntegrationInput]

  "Cloud Storage integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpStorage: [CloudDisableAccountIntegrationInput]

  "Compute Engine integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpVms: [CloudDisableAccountIntegrationInput]

  "VPC Access integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcpVpcaccess: [CloudDisableAccountIntegrationInput]
}

"Filters by user email address\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityUserEmailInput {
  "Part of an email address\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  contains: String

  "An email address\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: String
}

"Input type for RelativeJaccardDistance expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeJaccardDistanceInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Float!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!
}

"Lambda Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudLambdaIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Autogenerated return type of CreateUser.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementCreateUserPayload {
  "The user that was created\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  createdUser: UserManagementCreatedUser
}

"The monitor values that can be updated on a Step monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
input SyntheticsUpdateStepMonitorInput {
  "The monitor advanced options\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  advancedOptions: SyntheticsStepMonitorAdvancedOptionsInput

  "The monitor's Apdex target used to populate SLA reports\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  apdexTarget: Float

  "The locations the monitor will run from\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  locations: SyntheticsScriptedMonitorLocationsInput

  "The human readable identifier for the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  name: String

  "The interval at which the monitor runs in minutes\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  period: SyntheticsMonitorPeriod

  "The run state of the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  status: SyntheticsMonitorStatus

  "The steps that make up the script the monitor will run\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  steps: [SyntheticsStepInput]

  "The tags that will be associated with the monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  tags: [SyntheticsTag]
}

"Database for MySQL Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzureMysqlIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Vertex AI\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpAiplatformIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"NRQL condition terms determine when a violation will be opened.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNrqlConditionTermsInput {
  "Operator used to compare against the threshold.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  operator: AlertsNrqlConditionTermsOperator!

  "Priority determines how much attention your incidents need. Your workflow settings then tell us when and where to send notifications for different priorities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  priority: AlertsNrqlConditionPriority!

  "Value that triggers a violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  threshold: Float!

  "The duration, in seconds, that the threshold must violate for in order to create a violation.\nThis value must be within 60-86400 seconds and must be a multiple of the aggregation window.\n(Default aggregation window duration is 60 seconds.)\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  thresholdDuration: Int!

  "How many data points must be in violation for the specified thresholdDuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  thresholdOccurrences: AlertsNrqlConditionThresholdOccurrences!
}

"An input object used to represent an automatic status configuration. If not provided, a status configuration will be created by default.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
input WorkloadAutomaticStatusInput {
  "Whether the automatic status configuration is enabled or not.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "An additional meta-rule that can consider all entities that haven't been evaluated by any other rule.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  remainingEntitiesRule: WorkloadRemainingEntitiesRuleInput

  "A list of rules.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  rules: [WorkloadRegularRuleInput!]
}

"Blueprint for suggestion creation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsSuggestionBlueprint {
  "Length of the window in which incidents are compared.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  correlationWindowLength: Milliseconds

  "Description of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "Hash of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hash: String!

  "Number of correlations within a window required to merge issues.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minCorrelationThreshold: Int

  "Name of suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Configuration to allow rule to override issue properties.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  overrideConfiguration: AiDecisionsOverrideConfigurationInput

  "Expression to use to compare incidents.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ruleExpression: AiDecisionsRuleExpressionInput!

  "Service/user that created this suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  suggester: String!

  "Support for suggestion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  support: String
}

"The `Date` scalar represents a date. The `Date` appears as an ISO8601 formatted string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar Date

"A collection of spans with context describing those spans.  The trace represents the complete processing of a request.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
type DistributedTracingTrace {
  "The duration in milliseconds for the back-end part of this trace (not from a client such as a Browser application)\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  backendDurationMs: Milliseconds

  "The total duration of this trace in milliseconds.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  durationMs: Milliseconds

  "All entities that are part of this trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  entities: [EntityOutline!]!

  "The number of entities that are part of this trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  entityCount: Int!

  "Unique identifier for this trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  id: String!

  "Parent/child IDs that represent all of the span relationships within this trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  spanConnections: [DistributedTracingSpanConnection]!

  "Spans associated with this trace. The maximum number of spans returned is limited to 10_000. This could be less than the actual number of spans sent for the trace.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  spans: [DistributedTracingSpan!]!

  "Epoch milliseconds timestamp represents this trace's start time.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  timestamp: EpochMilliseconds!
}

"The input for updating an existing OpsGenie notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsOpsGenieNotificationChannelUpdateInput {
  "API key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  apiKey: SecureValue

  "OpsGenie data center region.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  dataCenterRegion: AlertsOpsGenieDataCenterRegion

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String

  "List of email recipients.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  recipients: [String!]

  "Tags.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  tags: [String!]

  "Teams.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  teams: [String!]
}

"Elastic Load Balancing - Application Load Balancer (ALB)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAlbIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  loadBalancerPrefixes: [String]

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"Workflow object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsWorkflow {
  "Account Id of this Workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  accountId: Int!

  "The time this workflow was created\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  createdAt: DateTime!

  "Specifies where to send the notifications\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationConfigurations: [AiWorkflowsDestinationConfiguration!]!

  "Are Destinations enabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  destinationsEnabled: Boolean!

  "List of enrichments that are attached to the notifications\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichments: [AiWorkflowsEnrichment!]!

  "Are Enrichments enabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  enrichmentsEnabled: Boolean!

  "Entity Id of the workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  guid: EntityGuid!

  "Workflow Id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID!

  "Specifies which issues the workflow will handle\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  issuesFilter: AiWorkflowsFilter!

  "Last time a notification was sent regarding this workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  lastRun: DateTime

  "Describes how to handle muted issues\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  mutingRulesHandling: AiWorkflowsMutingRulesHandling!

  "Name of the Workflow\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!

  "The time this workflow was updated\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  updatedAt: DateTime!

  "Is Workflow enabled\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  workflowEnabled: Boolean!
}

"A condition which describes how to target a New Relic Alerts Violation.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsMutingRuleCondition {
  "The attribute on a violation. Expects one of:\n\n* **accountId** - The account id\n* **conditionId** - The alert condition id\n* **conditionName** - The alert condition name\n* **conditionRunbookUrl** - The alert condition's runbook url\n* **conditionType** - The alert condition type, such as `metric`\n* **entity.guid** - The entity GUID\n* **nrqlEventType** - The NRQL event type\n* **nrqlQuery** - The NRQL query string\n* **policyId** - The alert policy id\n* **policyName** - The alert policy name\n* **product** - The target product (e.g., `SYNTHETICS`)\n* **tags.<NAME>** - Arbitrary tags associated with some entity (e.g., FACET from a NRQL query, for example `tags.appName` or `tags.host`)\n* **targetId** - The ID of the alerts target\n* **targetName** - The name of the alerts target\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  attribute: String!

  "The operator used to compare the attribute's value with the supplied value(s).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  operator: AlertsMutingRuleConditionOperator!

  "The value(s) to compare against the attribute's value.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  values: [String]!
}

"The user is not capable to perform an operation on this account\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount {
  "The account id the user is not capable to perform the operation on\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The capability the user is missing\n\n---\n**NR Internal**\n\n * [#incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  capability: String!
}

"Input type for FixedFuzzyWuzzyAdaptiveRatio expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedFuzzyWuzzyAdaptiveRatioInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Minimum similarity threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minSimilarity: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Virtual machine scale sets\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureVirtualmachineIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"The details that were submitted when creating an events to metrics conversion rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EventsToMetricsCreateRuleSubmission {
  "The account where the events exist and the metrics will be put.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!

  "Provides additional information about the rule.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The name of the rule. This must be unique within a given account.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Explains how to create one or more metrics from events.\n\n---\n**NR Internal**\n\n * [#help-metrics](https://newrelic.slack.com/archives/CH292BVUZ)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrql: String!
}

"A configuration setting used ignore status codes associated with different hosts.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsIgnoredStatusCodeRule {
  "An array of hosts to apply the status code rule to.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  hosts: [String!]

  "An array of status codes to be be ignored on these hosts.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  statusCodes: [String!]
}

"PagerDuty notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsPagerDutyNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  "PagerDuty channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsPagerDutyNotificationChannelConfig!

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType!
}

"Input for creating an obfuscation action on a rule being created.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
input LogConfigurationsCreateObfuscationActionInput {
  "Attribute names for action. An empty list applies the action to all the attributes.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  attributes: [String!]!

  "Expression Id for action.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  expressionId: ID!

  "Obfuscation method to use.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n"
  method: LogConfigurationsObfuscationMethod!
}

"List of integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsGovcloudDisableIntegrationsInput {
  "ALB/NLB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  alb: [CloudDisableAccountIntegrationInput]

  "API Gateway integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  apigateway: [CloudDisableAccountIntegrationInput]

  "AutoScaling integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  autoscaling: [CloudDisableAccountIntegrationInput]

  "Direct Connect integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsDirectconnect: [CloudDisableAccountIntegrationInput]

  "Step Functions integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsStates: [CloudDisableAccountIntegrationInput]

  "CloudTrail integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  cloudtrail: [CloudDisableAccountIntegrationInput]

  "DynamoDB integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  dynamodb: [CloudDisableAccountIntegrationInput]

  "EBS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ebs: [CloudDisableAccountIntegrationInput]

  "EC2 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  ec2: [CloudDisableAccountIntegrationInput]

  "Elasticsearch Service integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elasticsearch: [CloudDisableAccountIntegrationInput]

  "ELB (Classic) integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  elb: [CloudDisableAccountIntegrationInput]

  "EMR integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  emr: [CloudDisableAccountIntegrationInput]

  "IAM integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  iam: [CloudDisableAccountIntegrationInput]

  "Lambda integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  lambda: [CloudDisableAccountIntegrationInput]

  "RDS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  rds: [CloudDisableAccountIntegrationInput]

  "Redshift integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  redshift: [CloudDisableAccountIntegrationInput]

  "Route 53 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  route53: [CloudDisableAccountIntegrationInput]

  "S3 integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  s3: [CloudDisableAccountIntegrationInput]

  "SNS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sns: [CloudDisableAccountIntegrationInput]

  "SQS integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  sqs: [CloudDisableAccountIntegrationInput]
}

"Amazon Simple Notification Service (SNS)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudSnsIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"The error type for dissociating notification channels from a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNotificationChannelsRemoveFromPolicyErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"The result of a tag mutation\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n\n"
type TaggingMutationResult {
  "An array containing errors, if any. These are expected errors listed in TagMutationErrorType which a request should be capable of handling appropriately.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [tag-service repo](https://source.datanerd.us/entity-platform/tag-service)\n\n * visibility(customer)\n\n"
  errors: [TaggingMutationError]
}

"Configuration for Campfire notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsCampfireNotificationChannelConfig {
  "Room.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  room: String! @deprecated(reason: "This channel type is deprecated")

  "Subdomain.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  subdomain: String! @deprecated(reason: "This channel type is deprecated")

  "Authentication token.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  token: SecureValue! @deprecated(reason: "This channel type is deprecated")
}

"Status of the endpoint.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeEndpointStatus {
  """The endpoint has been created and is available for use."""
  CREATED

  """The endpoint has been deleted and is no longer available for use."""
  DELETED
}

"Input type for FixedLessThanOrEqual expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedLessThanOrEqualInput {
  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  compared: Float!

  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!
}

"An enum that represents the various recipe statuses.\n\n---\n**NR Internal**\n\n * [#help-virtuoso](https://newrelic.slack.com/archives/C01PTDC51K2)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum InstallationRecipeStatusType {
  """Defines an available recipe when attempting to install."""
  AVAILABLE

  """Defines a canceled recipe when attempting to install."""
  CANCELED

  """Defines when New Relic instrumentation compatibility is detected."""
  DETECTED

  """Defines a recipe that has failed during installation."""
  FAILED

  """Defines a recipe that has been installed."""
  INSTALLED

  """Defines a recipe currently being installed."""
  INSTALLING

  """Defines a recipe that has been recommended during installation."""
  RECOMMENDED

  """Defines a recipe that has been skipped during installation."""
  SKIPPED

  """Defines a recipe that is unsupported."""
  UNSUPPORTED
}

"The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
input AgentApplicationSettingsErrorCollectorInput {
  "Enables error collector.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  enabled: Boolean

  "Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  expectedErrorClasses: [String!]

  "An array of individual HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  expectedErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]

  "Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ignoredErrorClasses: [String!]

  "An array of individual HTTP status codes that should not be treated as errors.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ignoredErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]
}

"Status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadWorkloadStatus {
  "A description that provides additional details about the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "Indicates where the status value derives from.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  source: WorkloadStatusSource!

  "The details of the statuses that were involved in the calculation of the workload status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  statusDetails: [WorkloadStatusResult!]

  "A short description of the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  summary: String

  "The status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  value: WorkloadStatusValue!
}

"SQS Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudSqsIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  queuePrefixes: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"S3 Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudS3Integration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"List of groups representing named sets of New Relic users within an authentication domain\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityGroupCollection {
  "groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  items: [MultiTenantIdentityGroup!]!

  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Contains all of the data that is used to sample traces based on random selection.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeRandomTraceFilter {
  "The percent of traces to keep when selected at random.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  percentKept: Float!
}

"Property object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsPropertyInput {
  "displayValue\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  displayValue: String

  "key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  key: String!

  "label\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  label: String

  "value\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  value: String!
}

"The Account and Role a Group should have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input AuthorizationManagementAccountAccessGrant {
  "The Account ID the Role will grant access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The Role ID that will define the access\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roleId: ID!
}

"Input type for RelativeTopologicallyDependent expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeTopologicallyDependentInput {
  "From Vertex Id.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  from: [ID!]!

  "Graph Id.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  graphId: ID

  "Maximum number of hops\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxHops: Int

  "Required Vertex Attributes\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  requiredAttributes: [String!]!

  "Required Vertex Classes\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  requiredClasses: [AiDecisionsVertexClass!]!

  "To Vertex Id.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  to: [ID!]!
}

"Details about an entity type\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type DomainType {
  "The domain of the entity.\n\nThe domain must be a value matching /[A-Z][A-Z0-9_]{2,14}/.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String!

  "The type of the entity.\n\nThe type must be a value matching /[A-Z][A-Z0-9_]{2,49}/.\n\nSome examples are APPLICATION, HOST or CONTAINER.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String!
}

"The error type for associating notification channels with a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNotificationChannelsAddToPolicyErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyAccountStitchedFields {
  "Returns a list of edges.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  edges(
    """The cursor to fetch paginated results."""
    cursor: String

    """List of edge IDs."""
    edgeIds: [ID!]
  ): AiTopologyEdgeListing!

  "Returns a graph.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  graph: AiTopologyGraph!

  "Returns a paginated list of vertices.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  vertices(
    """The cursor to fetch paginated results."""
    cursor: String

    """List of classes."""
    vertexClasses: [AiTopologyVertexClass!]

    """List of vertex IDs."""
    vertexIds: [ID!]
  ): AiTopologyVertexListing!
}

"Provides the available values of possible directions to sort the result\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"The input for creating a new Slack notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsSlackNotificationChannelCreateInput {
  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String!

  "Slack channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  teamChannel: String

  "Slack channel URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  url: SecureValue!
}

"The type of error that occurred during the mutation when submitting metadata\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogSubmitMetadataErrorType {
  """The Nerdpack cannot be found"""
  NERDPACK_NOT_FOUND

  """Something went wrong in the service"""
  SERVER_ERROR

  """
  The user does not have permission to update the metadata for the Nerdpack
  """
  UNAUTHORIZED

  """The type of the Nerdpack is not supported in the New Relic One Catalog"""
  UNSUPPORTED_TYPE

  """
  The submitted metadata is not valid and needs to be corrected to be accepted
  """
  VALIDATION_FAILED
}

"The result of a Broken Links monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsBrokenLinksMonitorCreateMutationResult {
  "Errors that occurred during Broken Links monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorCreateError]!

  "The resulting Broken Links monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsBrokenLinksMonitor
}

"A secure credential entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SecureCredentialEntity implements AlertableEntity & Entity {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  "Retrieve the deployment event(s). Ordered by timestamp DESC.\n\n---\n**NR Internal**\n\n * [#help-change-tracking](https://newrelic.enterprise.slack.com/archives/C036L55E8N7)\n * Team ID: [695](https://team-store.datanerd.one/teams?teamId=695)\n\n* [deployment-marker-api repo](https://source.datanerd.us/markers/deployment-marker-api)\n\n * visibility(flag:`Markers/deployment_markers_api`)\n\n"
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  "The description of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  description: String

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nerdStorage: NerdStorageEntityScope

  "Make an `Entity` scoped query to NRDB with a NRQL string.\n\nA relevant `WHERE` clause will be added to your query to scope data to the entity in question.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  "Poll for the results of a previously-executed asychronous NRDB query.\n\nThe `queryId` is available in the `queryProgress` data returned by the original asynchronous query.\n\nSee [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "Recent violations on the entity.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  "Related entities result with optional filtering.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  "A list of the entities' relationships.\n\nFor more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The domain-specific identifier for the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  secureCredentialId: ID

  "Summary statistics for the Synthetic Monitor Secure Credential.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  secureCredentialSummary: SecureCredentialSummaryData

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The tags applied to the entity with their metadata.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tagsWithMetadata: [EntityTagWithMetadata]

  "Look up Distributed Tracing summary data for the selected `EntityGuid`\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String

  "The time at which the entity was last updated.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds
}

"The response for updating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelUpdateResponse {
  "Error.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  error: AlertsNotificationChannelUpdateError

  "Notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannel: AlertsNotificationChannelMutation
}

"Neptune\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsNeptuneIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Compute Engine Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpVmsIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Key value type\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesKeyValue {
  "key\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  key: String!

  "value\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  value: String!
}

"Configuration for visualization type 'viz.line'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardLineWidgetConfiguration {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"Possible types of configured alert conditions\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
enum Nr1CatalogAlertConditionType {
  """A baseline alert condition"""
  BASELINE

  """A static alert condition"""
  STATIC
}

"NRQL type enrichment input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsNrqlEnrichmentInput {
  "configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  configuration: [AiWorkflowsNrqlConfigurationInput!]!

  "name\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!
}

"Successfully deleted span attribute trace filter rule, or one or more error responses if there were issues.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
type EdgeDeleteSpanAttributeRuleResponse {
  "Errors that may occur when deleting a `SpanAttributeRule`. Defaults to `null` in case of success.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  errors: [EdgeDeleteSpanAttributeRuleResponseError]

  "The trace filter rule that was deleted. Defaults to `null` in case of failure.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  rule: EdgeSpanAttributeRule
}

"NRQL type test enrichment input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsNrqlTestEnrichmentInput {
  "configuration\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  configuration: [AiWorkflowsNrqlConfigurationInput!]!

  "id\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  id: ID

  "name\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  name: String!
}

"An async organization creation job result\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
type OrganizationOrganizationCreateAsyncJobResult {
  "The date and time the job was created in UTC\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  createdUtc: String!

  "The error message in case of job failure\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  errorMessage: String

  "The date and time the job was completed in UTC\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  finishedUtc: String

  "The id of the job\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The status of the job\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  status: OrganizationOrganizationCreateJobResultStatusEnum!
}

"Router\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpRouterIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Known error codes and messages for `CreateTraceObserverResponseError`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeCreateTraceObserverResponseErrorType {
  """
  A trace observer already exists for this account family and provider region.
  """
  ALREADY_EXISTS

  """Trace observers aren’t available in provider region."""
  NO_AVAILABILITY_IN_REGION
}

"Input type for RelativeRegularExpression expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsRelativeRegularExpressionInput {
  "Left operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  left: AiDecisionsIncidentObjectInput!

  "Right operand of comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  right: AiDecisionsIncidentObjectInput!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"FSx Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsFsxIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum SyntheticMonitorStatus {
  DELETED
  DISABLED
  ENABLED
  FAULTY
  MUTED
  PAUSED
}

"Example properties to be added to the rendering context, for tests\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsExampleValue {
  "example\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  example: String!

  "type\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  type: AiNotificationsVariableType!
}

"Google Cloud Load Balancing\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpLoadbalancingIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Indicates where this collection is used\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntityCollectionType {
  """Collections that define the entities that belong to a team"""
  TEAM

  """Collections that define the entities that belong to a workload"""
  WORKLOAD

  """
  Collections that define the entity groups that are used to calculate the status of a workload
  """
  WORKLOAD_STATUS_RULE_GROUP
}

"The error for associating notification channels with a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelsAddToPolicyError {
  "Error description.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  description: String!

  "Error type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  errorType: AlertsNotificationChannelsAddToPolicyErrorType!

  "Notification channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannelId: ID!
}

"Information required to link an AWS GovCloud account to a NewRelic account.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsGovCloudLinkAccountInput {
  "The key used to make requests to AWS service APIs\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  accessKeyId: String!

  "The AWS account id\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsAccountId: String!

  "How metrics will be collected.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricCollectionMode: CloudMetricCollectionMode

  "The linked account name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "The secret key used to make requests to AWS service APIs\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  secretAccessKey: SecureValue!
}

"The result of the request to list drop rules for an account.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n\n"
type NrqlDropRulesListDropRulesResult {
  "Information about why we could not list rules.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  error: NrqlDropRulesError

  "The list of drop rules queried on the targeted account.\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`DiracAsyncQueryService/enableDropRules`)\n\n"
  rules: [NrqlDropRulesDropRule]
}

"The input object representing the filter parameters for user groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityGroupUserFilterInput {
  "Filter users by IDs\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: MultiTenantIdentityUserIdInput
}

"Provider and region where the trace observer is located. Currently, only AWS regions are supported.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeProviderRegion {
  """Provider: `AWS`, Region: `ap-southeast-1`"""
  AWS_AP_SOUTHEAST_1

  """Provider: `AWS`, Region: `ap-southeast-2`"""
  AWS_AP_SOUTHEAST_2

  """Provider: `AWS`, Region: `eu-central-1`"""
  AWS_EU_CENTRAL_1

  """Provider: `AWS`, Region: `eu-west-1`"""
  AWS_EU_WEST_1

  """Provider: `AWS`, Region: `us-east-1`"""
  AWS_US_EAST_1

  """Provider: `AWS`, Region: `us-east-2`"""
  AWS_US_EAST_2

  """Provider: `AWS`, Region: `us-west-2`"""
  AWS_US_WEST_2
}

"Result of updatePage operation.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardUpdatePageResult {
  "Expected errors while processing request. No errors means successful request.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardUpdatePageError]
}

"Result of an operation.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiTopologyCollectorOperationResult {
  "Status of the operation.\n\n---\n**NR Internal**\n\n * [#correlation-services]()\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  result: AiTopologyCollectorResultType!
}

"Firewalls\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAzureFirewallsIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]
}

"Event namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n\n"
type DataManagementEventNamespaces {
  "The upper limit for the retention value\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  maxRetentionInDays: Int

  "The lower limit for the retention value\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  minRetentionInDays: Int

  "The name of a namespace\n\n---\n**NR Internal**\n\n * [#help-tdp](https://newrelic.slack.com/archives/C01508Q2879)\n * Team ID: No team ID provided\n\n* [data-management-service repo](https://source.datanerd.us/data-management/data-management-service)\n\n * visibility(customer)\n\n"
  namespace: String
}

"The result of a secure credential mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n\n"
type SyntheticsSecureCredentialMutationResult {
  "The moment when the secure credential was created, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds

  "Description of the secure credential, if available\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  description: String

  "An array containing errors, if any\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  errors: [SyntheticsError]

  "The unique identifier of the secure credential, if available\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  key: String

  "The moment when the secure credential was last updated, represented in milliseconds since the Unix epoch.\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(customer)\n\n"
  lastUpdate: EpochMilliseconds
}

"Known error codes and messages for `UpdateTraceObserverResponseError`.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
enum EdgeUpdateTraceObserverResponseErrorType {
  """Invalid input provided."""
  INVALID_INPUT

  """No trace observer was found with the id given."""
  NOT_FOUND
}

"Determines how incidents are created for critical violations of the conditions contained in the policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsIncidentPreference {
  """
  A condition will create a condition-level incident when it violates its critical threshold.
  Other violating conditions will create their own incidents.
  """
  PER_CONDITION

  """
  Each target of each condition will create an entity-level incident upon critical violation.
  Other violating targets will create their own incidents (even on the same condition).
  """
  PER_CONDITION_AND_TARGET

  """
  A condition will create a policy-level incident when it violates its critical threshold.
  Other violating conditions will be grouped into this incident.
  """
  PER_POLICY
}

"Input for error events.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n\n"
input ErrorsInboxErrorEventInput {
  "Guid of entity that generated the event.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  entityGuid: EntityGuid!

  "A set of attributes representing an event associated with an error\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/custom_fingerprinting`)\n\n"
  event: ErrorsInboxRawEvent

  "Error event message.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  message: String

  "Error event name.\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/errors_inbox_nerdgraph`)\n\n"
  name: String

  "Source of error event (ex: TransactionError, Span)\n\n---\n**NR Internal**\n\n * [#help-error-tracking](https://newrelic.slack.com/archives/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* [error-group-control-plane repo](https://source.datanerd.us/error-tracking/error-group-control-plane)\n\n * visibility(flag:`ErrorTracking/custom_fingerprinting`)\n\n"
  source: ErrorsInboxEventSource
}

"The data partition rule matching criteria.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsDataPartitionRuleMatchingCriteria {
  "The attribute name against which this matching condition will be evaluated.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  attributeName: String!

  "The matching expression of the data partition rule definition.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  matchingExpression: String!

  "The matching method of the data partition rule definition.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  matchingOperator: LogConfigurationsDataPartitionRuleMatchingOperator!
}

"MediaPackage VOD Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAwsMediapackagevodIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type UsersActorStitchedFields {
  "Search for users using a custom query.\n If no query is provided, returns all visible users.\n NOTE: this API only supports users in the New Relic One user model.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  userSearch(
    """The cursor to fetch paginated user search results."""
    cursor: String

    """
    The user search query takes 1 argument `scope` that takes in various arguments. 
     `userIds` is only an exact match while the rest of the arguments can search for an exact or fuzzy match.
    """
    query: UsersUserSearchQuery
  ): UsersUserSearchResult
}

"The static status configuration.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
type WorkloadStaticStatus {
  "A description that provides additional details about the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  description: String

  "Whether the static status configuration is enabled or not. Note that only one static status can be enabled at a given time.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  enabled: Boolean!

  "The unique identifier of the static status.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  id: Int!

  "The status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  status: WorkloadStatusValue!

  "A short description of the status of the workload.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n"
  summary: String
}

"container for roles enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type AuthorizationManagementGrantedRoleSearch {
  "an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the roles granted to this group\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roles: [AuthorizationManagementGrantedRole!]!

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"User notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsUserNotificationChannel implements AlertsNotificationChannel {
  "Policies associated with the channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet! @deprecated(reason: "This channel type is deprecated")

  "User channel specific configuration.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  config: AlertsUserNotificationChannelConfig! @deprecated(reason: "This channel type is deprecated")

  "Channel ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID! @deprecated(reason: "This channel type is deprecated")

  "Channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String! @deprecated(reason: "This channel type is deprecated")

  "Channel type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  type: AlertsNotificationChannelType! @deprecated(reason: "This channel type is deprecated")
}

"Whether Compression is enabled for the export rule, and what compression format is used\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
enum StreamingExportPayloadCompression {
  """Do not compress payloads for this export rule"""
  DISABLED

  """
  Compress payloads for this export rule using the GZIP compression format
  """
  GZIP
}

"Amazon Elastic Container Service (ECS)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudEcsIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"AWS CloudTrail\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudCloudtrailIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Type of access to the subscribed Nerdpack.\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum NerdpackSubscriptionAccessType {
  """Direct subscription with user account."""
  DIRECT

  """Master account subscription."""
  INHERITED
}

"A Browser Application entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type BrowserApplicationEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The type of Browser agent installed for this application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  agentInstallType: BrowserAgentInstallType

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The ID of the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  applicationId: Int

  "Summary statistics about the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  browserSummary: BrowserApplicationSummaryData

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The running versions of the agent in the Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  runningAgentVersions: BrowserApplicationRunningAgentVersions

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The ID of the APM Application that serves this Browser App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  servingApmApplicationId: Int

  "Configuration settings for the Browser App\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  settings: BrowserApplicationSettings

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Represents the type of the rule that the resulting group of entities belongs to.\n\n---\n**NR Internal**\n\n * [#workloads-team](https://newrelic.slack.com/messages/CJJ3DA3SM)\n * Team ID: No team ID provided\n\n* [workloads-api-java repo](https://source.datanerd.us/workloads/workloads-api-java)\n\n * visibility(customer)\n\n\n"
enum WorkloadResultingGroupType {
  """
  The rule considers the entities within a specific group in the workload.
  """
  REGULAR_GROUP

  """
  The rule considers all the entities within the workload that aren’t evaluated in any other rule.
  """
  REMAINING_ENTITIES
}

"Summary statistics about the Browser App injected by the APM Application.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmBrowserApplicationSummaryData {
  "The number of AJAX requests per minute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ajaxRequestThroughput: Float

  "The average AJAX response time in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  ajaxResponseTimeAverage: Seconds

  "The percentage of page views with a JS error.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  jsErrorRate: Float

  "The number of page loads per minute\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pageLoadThroughput: Float

  "The average page view time in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pageLoadTimeAverage: Float
}

"An object that represents a metric rename rule.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
type MetricNormalizationRule {
  "Rule action.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  action: MetricNormalizationRuleAction

  "Application GUID\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  applicationGuid: EntityGuid

  "Application Name\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  applicationName: String

  "Date of rule creation.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  createdAt: EpochMilliseconds

  "Is rule enabled?\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  enabled: Boolean!

  "Rule evaluation order\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  evalOrder: Int

  "Rule Id\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  id: Int!

  "Metric Match Expression.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  matchExpression: String!

  "Notes.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  notes: String

  "Metric Replacement Expression.\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  replacement: String

  "Whether it terminates the evaluation chain or not\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  terminateChain: Boolean
}

"The response for associating notification channels with a policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNotificationChannelsAddToPolicyResponse {
  "Errors.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  errors: [AlertsNotificationChannelsAddToPolicyError!]!

  "Notification channels.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannels: [AlertsNotificationChannelId!]!

  "Policy ID.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policyId: ID!
}

"Monitor downtime object returned to the customer for a downtime run once\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsOnceMonitorDowntimeMutationResult {
  "The account ID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  accountId: Int

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "The entity GUID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  guid: EntityGuid

  "The monitor GUIDs associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  monitorGuids: [EntityGuid]

  "The name of the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  name: String

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"The input object representing parameters for the allowed capability filter\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityAllowsCapabilityInput {
  "A list of capabilities. If set, groups with atleast one of the given capabilities granted on them for the user will be returned. Otherwise, only groups with read access granted are returned.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  in: [MultiTenantIdentityCapability!]
}

"A filter for customer organizations\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationCustomerOrganizationFilterInput {
  "The id of the owned account\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  accountId: OrganizationOrganizationAccountIdInputFilter

  "The id of the authentication domain\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  authenticationDomainId: OrganizationOrganizationAuthenticationDomainIdInputFilter

  "The id of the customer\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  customerId: OrganizationOrganizationCustomerIdInputFilter

  "The id of the organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: OrganizationOrganizationIdInputFilter

  "The name of the organization\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: OrganizationOrganizationNameInputFilter
}

"An object containing metadata about the query and result.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NrdbMetadata {
  "A list of the event types that were queried.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  eventTypes: [String]

  "A list of facets that were queried.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  facets: [String]

  "Messages from NRDB included with the result.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  messages: [String]

  "Details about the query time window.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  timeWindow: NrdbMetadataTimeWindow
}

"Information about an account present on the allow-list\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type NerdpackAllowedAccount {
  "Allowed account id\n\n---\n**NR Internal**\n\n * [#help-nr-core](https://newrelic.slack.com/archives/C9PU1820Z)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int!
}

"Types of errors that can be returned from a create monitor request\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
enum SyntheticsMonitorCreateErrorType {
  """Received a request missing required fields or containing invalid data"""
  BAD_REQUEST

  """An unknown error occurred while processing request to mutate monitor"""
  INTERNAL_SERVER_ERROR

  """
  Monitor not found for given guid (monitor does not exist on account or has already been deleted)
  """
  NOT_FOUND

  """Monitor creation exceeds account subscription limits"""
  PAYMENT_REQUIRED

  """Monitor tags were not updated."""
  TAGGING_ERROR

  """User does not have authorization to perform monitor mutation."""
  UNAUTHORIZED

  """An unknown error occurred while processing request to create monitor"""
  UNKNOWN_ERROR
}

"List of all potential error types that an entity delete operation might return.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum EntityDeleteErrorType {
  """Forbidden request"""
  FORBIDDEN

  """Internal error"""
  INTERNAL_ERROR

  """Invalid input"""
  INVALID_INPUT
}

"The entityRelationshipUserDefinedCreateOrReplace result error.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n\n"
type EntityRelationshipUserDefinedCreateOrReplaceResultError {
  "A message explaining what the error is about.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  message: String!

  "The mutation error type.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [relationship-graphql-service repo](https://source.datanerd.us/entity-platform/relationship-services/tree/master/relationship-graphql-service)\n\n * visibility(customer)\n\n"
  type: EntityRelationshipUserDefinedCreateOrReplaceErrorType!
}

"The `id` and data to update one or more keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessUpdateUserKeyInput {
  "The `id` of the key you want to update.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  keyId: String!

  "The name you want to assign to the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  name: String

  "The notes you want to assign to the key.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  notes: String
}

"A group of MutingRuleConditions combined by an operator.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsMutingRuleConditionGroupInput {
  "The individual MutingRuleConditions within the group.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  conditions: [AlertsMutingRuleConditionInput!]!

  "The operator used to combine all the MutingRuleConditions within the group.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  operator: AlertsMutingRuleConditionGroupOperator!
}

"A list of grants\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
type MultiTenantAuthorizationGrantCollection {
  "List of grants\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  items: [MultiTenantAuthorizationGrant!]!

  "an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  nextCursor: String
}

"Configuration that defines the signal that the NRQL condition will use to evaluate.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsNrqlConditionSignal {
  "How long we wait for data that belongs in each aggregation window. Depending\non your data, a longer delay may increase accuracy but delay notifications.\n\nUse `aggregationDelay` with the `EVENT_FLOW` and `CADENCE` methods. The maximum\ndelay is **1200 seconds** (20 minutes) when using `EVENT_FLOW` and **3600 seconds**\n(60 minutes) when using `CADENCE`. In both cases, the minimum delay is **0 seconds**\nand the default is **120 seconds**.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationDelay: Seconds

  "The method that determines when we consider an aggregation window to be complete\nso that we can evaluate the signal for violations. Default is `EVENT_FLOW`.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationMethod: AlertsSignalAggregationMethod

  "How long we wait after each data point arrives to make sure we've processed\nthe whole batch.\n\nUse `aggregationTimer` with the `EVENT_TIMER` method. The timer value can range\nfrom **5 seconds** to **1200 seconds** (20 minutes); the default is **60 seconds**.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationTimer: Seconds

  "Aggregation window controls the duration of the time window used to evaluate the NRQL query, in seconds.\nThe value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  aggregationWindow: Seconds

  "How long we wait until the signal starts evaluating. The maximum delay is **7200 seconds** (120 minutes).\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  evaluationDelay: Seconds

  "Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.\n\nBy default, we evaluate the NRQL query in one-minute time windows. The start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.\n\nThis value is the number of time windows we look back at the aggregated data.\n\nExample: With an `evaluationOffset` of 3 and a 1 minute aggregation window, the NRQL time window applied to your query will be:\n\n`SINCE 3 minutes ago UNTIL 2 minutes ago`\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  evaluationOffset: Int @deprecated(reason: "Superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.")

  "Option that determines the type of value that should be used to fill gaps (empty windows). Defaults to STATIC.\n\nOutlier NRQL conditions may only use NONE.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  fillOption: AlertsFillOption

  "If using the static fill option, this the value used for filling. Defaults to 0.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  fillValue: Float

  "This setting gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends.\n\nNot used for Outlier NRQL conditions.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  slideBy: Seconds
}

"Information about a facet count on a category\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogCategoryFacet {
  "The count of results for this category\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  count: Int!

  "The category's display name\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  displayName: String!
}

"Duration after which a violation will automatically close.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsViolationTimeLimit {
  """Violation will close after eight hours."""
  EIGHT_HOURS

  """Violation will close after four hours."""
  FOUR_HOURS

  """Time limit specified does not match available options."""
  NON_MATCHABLE_LIMIT_VALUE

  """Violation will close after one hour."""
  ONE_HOUR

  """Violation will close after thirty days."""
  THIRTY_DAYS

  """Violation will close after twelve hours."""
  TWELVE_HOURS

  """Violation will close after twenty four hours."""
  TWENTY_FOUR_HOURS

  """Violation will close after two hours."""
  TWO_HOURS
}

"\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixieAccountStitchedFields {
  "Details for the linked Pixie project\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  linkedPixieProject: PixiePixieProject

  "Get a Pixie access token\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  pixieAccessToken: SecureValue
}

"Live URL error.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardLiveUrlError {
  "Description of the error.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Type of error.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  type: DashboardLiveUrlErrorType
}

"The groupings and counts of entities returned for the specified criteria.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type EntitySearchCounts {
  "The number of entities that match the specified criteria.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int

  "The group of entities returned for the specified criteria.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  facet: AttributeMap
}

"Expected errors as a result of creating a new data partition rule.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n\n"
type LogConfigurationsCreateDataPartitionRuleError {
  "The message with the error cause.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  message: String

  "Type of error.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/nerdgraph_log_configurations`)\n\n"
  type: LogConfigurationsCreateDataPartitionRuleErrorType
}

"Represents a number of opinions.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsOpinionEntry {
  "Number of this type of opinion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "Type of opinion.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  opinion: AiDecisionsOpinion!
}

"The type of ingest key, which dictates what types of agents can use it to report.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
enum ApiAccessIngestKeyType {
  """
  Ingest keys of type `BROWSER` mean browser agents will use them to report data to New Relic.
  """
  BROWSER

  """
  For ingest keys of type `LICENSE`: APM and Infrastructure agents use the key to report data to New Relic.
  """
  LICENSE
}

"Status of an operation.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsResultType {
  """Failed operation"""
  FAILURE

  """Successful operation"""
  SUCCESS
}

"The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessCreateIngestKeyInput {
  "The account ID indicating which account you want to make the key for. This cannot be updated once created.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  accountId: Int!

  "The type of ingest key you want to create. This cannot be updated once created.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  ingestType: ApiAccessIngestKeyType!

  "The name of the key. This can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  name: String

  "Any notes about this ingest key. This can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  notes: String
}

"Configuration for Email notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsEmailNotificationChannelConfig {
  "List of email recipients.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  emails: [String!]!

  "Include details about the violation as a JSON attachment.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  includeJson: Boolean!
}

"ELB (Classic) Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudElbIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Operator used to compare against the threshold for NrqlConditions.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
enum AlertsNrqlConditionTermsOperator {
  """For comparing values above a threshold."""
  ABOVE

  """For comparing values above or equal to a threshold."""
  ABOVE_OR_EQUALS

  """For comparing values below a threshold."""
  BELOW

  """For comparing values below or equal to a threshold."""
  BELOW_OR_EQUALS

  """For comparing values equal to a threshold."""
  EQUALS

  """For comparing values that do not equal a threshold."""
  NOT_EQUALS
}

"Raw JSON payload with full configuration of a widget.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
scalar DashboardWidgetRawConfiguration

"Enrichment input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsEnrichmentsInput {
  "nrql\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  nrql: [AiWorkflowsNrqlEnrichmentInput!]!
}

"The input object representing the filter parameters for groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input UserManagementGroupFilterInput {
  "Filter groups by display name\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  displayName: UserManagementDisplayNameInput

  "Filter groups by group ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: UserManagementGroupIdInput
}

"Data required to change the random trace filter configuration.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n\n"
input EdgeRandomTraceFilterInput {
  "The percentage of randomly selected traces to keep. Acceptable values are between 0.0001 and 100.\n\n---\n**NR Internal**\n\n * [#magic-trace-box](https://newrelic.slack.com/archives/GQ0M550S1)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`NetworkControlPlane/earlyAccessEnabled`)\n\n"
  percentKept: Float!
}

"Input type for FixedJaroWinkler expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedJaroWinklerInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Minimum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  minDistance: Float!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"Monitor downtime object returned to the customer for a downtime run daily\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
type SyntheticsDailyMonitorDowntimeMutationResult {
  "The account ID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  accountId: Int

  "Configuration options if the customer wants the monitor to end at a specific date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endRepeat: SyntheticsDateWindowEndOutput

  "The date and time in which the monitor downtime will end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  endTime: NaiveDateTime

  "The entity GUID associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  guid: EntityGuid

  "The monitor GUIDs associated with the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  monitorGuids: [EntityGuid]

  "The name of the monitor downtime\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  name: String

  "The date and time in which the monitor downtime will begin\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  startTime: NaiveDateTime

  "The timezone the time values will be in\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  timezone: String
}

"Run\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudGcpRunIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"An installer that uses install plan steps\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogInstallPlan implements Nr1CatalogInstaller {
  "The list of install plan steps necessary to execute the installation of the quickstart\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  steps: [Nr1CatalogInstallPlanStep!]!

  "The type of installer\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  type: Nr1CatalogInstallerType!
}

"A structured representation of a stack trace of a crash in a mobile application.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type StackTraceMobileCrashStackTrace {
  "Stack trace frames.\n\n---\n**NR Internal**\n\n * [#help-error-tracking ](https://newrelic.slack.com/messages/C01MAMAU5L0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  frames: [StackTraceMobileCrashStackTraceFrame]
}

"Input type for FixedLevenshtein expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
input AiDecisionsFixedLevenshteinInput {
  "Incident selector to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incident: AiDecisionsIncidentObjectInput!

  "Maximum distance threshold.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  maxDistance: Int!

  "Value to be used in comparison.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  value: String!
}

"List of providers\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudIntegrationsInput {
  "Aws provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  aws: CloudAwsIntegrationsInput

  "AwsGovcloud provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsGovcloud: CloudAwsGovcloudIntegrationsInput

  "Azure provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  azure: CloudAzureIntegrationsInput

  "Gcp provider\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  gcp: CloudGcpIntegrationsInput
}

"Live URL result.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardLiveUrlResult {
  "The list of errors, if any.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  errors: [DashboardLiveUrlError]

  "Live URL.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  liveUrls: [DashboardLiveUrl]
}

"Configuration for OpsGenie notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsOpsGenieNotificationChannelConfig {
  "API key.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  apiKey: SecureValue!

  "OpsGenie data center region.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  dataCenterRegion: AlertsOpsGenieDataCenterRegion!

  "List of email recipients.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  recipients: [String!]

  "Tags.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  tags: [String!]

  "Teams.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  teams: [String!]
}

"Router Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpRouterIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Suggestion object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsSuggestion {
  "Suggestion label\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  displayValue: String!

  "Should suggestion be the default selection\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  icon: String

  "Suggestion key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  value: String!
}

"Filter issues events\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
input AiIssuesFilterIssuesEvents {
  "entityGuids\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityGuids: [EntityGuid!]

  "entityTypes\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  entityTypes: [String!]

  "ids\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  ids: [ID!]
}

"Update Enrichment input object\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
input AiWorkflowsUpdateEnrichmentsInput {
  "nrql\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  nrql: [AiWorkflowsNrqlUpdateEnrichmentInput!]!
}

"The success response for deleting a MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsMutingRuleDeleteResponse {
  "The id of the deleted MutingRule.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"Provides all the available filters on the organization group organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationGroupOrganizationIdInputFilter {
  "performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"Account Mutation Error\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAccountMutationError {
  "The passed linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int

  "The error message.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  message: String!

  "The passed newrelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The passed provider slug.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  providerSlug: String

  "The error status.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  type: String!
}

"Determines which browser loader will be configured. There are three browser loader types. They are Pro+SPA, Pro, and Lite.\nSee [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for further information.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://newrelic.slack.com/archives/C0MPX17GU)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AgentApplicationBrowserLoader {
  """Use PRO instead."""
  FULL @deprecated(reason: "Browsers which historically had the FULL loader will now return PRO as the loader type.")

  """
  Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
  """
  LITE

  """Don't use an agent."""
  NONE

  """
  Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
  """
  PRO

  """
  Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
  """
  SPA
}

"The input configuration for creating a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsNotificationChannelCreateConfiguration {
  "The input configuration for creating an Email notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  email: AlertsEmailNotificationChannelCreateInput

  "The input configuration for creating an OpsGenie notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  opsGenie: AlertsOpsGenieNotificationChannelCreateInput

  "The input configuration for creating a PagerDuty notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  pagerDuty: AlertsPagerDutyNotificationChannelCreateInput

  "The input configuration for creating a Slack notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  slack: AlertsSlackNotificationChannelCreateInput

  "The input configuration for creating a VictorOps notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  victorOps: AlertsVictorOpsNotificationChannelCreateInput

  "The input configuration for creating a Webhook notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  webhook: AlertsWebhookNotificationChannelCreateInput

  "The input configuration for creating an xMatters notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  xMatters: AlertsXMattersNotificationChannelCreateInput
}

"The response of the update keys mutation.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
type ApiAccessUpdateKeyResponse {
  "Lists all errors for keys that could not be updated. Each error maps to a single key input.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  errors: [ApiAccessKeyError]

  "Lists all successfully updated keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  updatedKeys: [ApiAccessKey]
}

"Channel property Object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsProperty {
  "Channel property display key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  displayValue: String

  "Channel property key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  key: String!

  "Channel property display key\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  label: String

  "Channel property value\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  value: String!
}

"\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n\n"
type AiWorkflowsAccountStitchedFields {
  "Returns a list of workflows with pagination cursor according to account id and filters\n\n---\n**NR Internal**\n\n * [#help-incident-intelligence](https://newrelic.slack.com/archives/CGGP36ZKJ)\n * Team ID: No team ID provided\n\n* [notification-request-builder repo](https://source.datanerd.us/UEFA/notification-request-builder)\n\n * visibility(flag:`UEFA/expose_workflows_api`)\n\n"
  workflows(
    """Cursor used to get the next page of results"""
    cursor: String

    """Query filters"""
    filters: AiWorkflowsFilters
  ): AiWorkflowsWorkflows
}

"Browser monitoring.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
type AgentApplicationSettingsBrowserMonitoring {
  "Enables ajax traces in the browser app.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  ajax: AgentApplicationSettingsBrowserAjax

  "Configure distributed tracing in browser apps.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  distributedTracing: AgentApplicationSettingsBrowserDistributedTracing!

  "The type of browser agent that will be loaded.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  loader: AgentApplicationSettingsBrowserLoader!

  "Specify the semantic version of the browser agent that you would like your app to use. Leave this blank to use the most recent version. Use 'x' in place of a numeric digit to represent the latest release within the version range. For example, '1.x.x'\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  pinnedVersion: String

  "Browser monitoring's page load timing feature can track sessions by using cookies that contain a simple session identifier.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n"
  privacy: AgentApplicationSettingsBrowserPrivacy!
}

"The input object to create one or more keys.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n\n"
input ApiAccessCreateInput {
  "Ingest keys are used by agents to report data about your applications to New Relic. Each ingest key input entered here must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  ingest: [ApiAccessCreateIngestKeyInput]

  "Create user keys. You can optionally add a name or notes to your key, which can be updated later.\n\n---\n**NR Internal**\n\n * [#help-unified-api](https://newrelic.slack.com/archives/CBHJRSPSA)\n * Team ID: [106](https://team-store.datanerd.one/teams?teamId=106)\n\n* [api_key_service repo](https://source.datanerd.us/unified-api/api_key_service)\n\n * visibility(customer)\n\n"
  user: [ApiAccessCreateUserKeyInput]
}

"The Organization Role a Group should have access to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input AuthorizationManagementOrganizationAccessGrant {
  "The Role ID that will define the Organization access\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: No team ID provided\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  roleId: ID!
}

"A search for a subset of incidents that may be relevant for a given rule expression\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsApplicableIncidentSearch {
  "Time search operation completed\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  completedAt: EpochMilliseconds

  "Time search operation was created\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  createdAt: EpochMilliseconds!

  "Error message if search operation failed\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errorMessage: String

  "ID of search operation\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  id: ID!

  "Number of incidents scanned by the search operation\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  incidentsScanned: Int!

  "Listing of incident selectors and potential applicable incidents\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  results: [AiDecisionsSelectorExamples!]!

  "Time search operation was last updated\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  updatedAt: EpochMilliseconds!
}

"Error for mutation results\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n\n"
type MetricNormalizationRuleMutationError {
  "Details of error\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  message: String

  "Type of error\n\n---\n**NR Internal**\n\n * [#help-collector](#help-apm-services)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(flag:`Metrics_Pipeline/metric_normalization_api`)\n\n"
  type: MetricNormalizationRuleErrorType
}

"The customer id search for jobs\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationCreateJobCustomerIdInput {
  "A customer id to search for jobs in\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: String!
}

"The input object representing parameters for the organization ID filter\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
input MultiTenantIdentityOrganizationIdInput {
  "An organization ID\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
type AlertsAccountStitchedFields {
  "Retrieve a muting rule for Alerts violations.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  mutingRule(
    """Muting rule identifier."""
    id: ID!
  ): AlertsMutingRule

  "List the muting rules for an account.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  mutingRules: [AlertsMutingRule]

  "Retrieve a notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannel(
    """Notification channel identifier."""
    id: ID!
  ): AlertsNotificationChannel @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`destinations` query](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  "List the notification channels for an account.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  notificationChannels(
    """
    Cursor for pagination. Supplied by a previous `notificationChannels` query.
    """
    cursor: String
  ): AlertsNotificationChannelsResultSet @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`destinations` query](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  "Retrieve a specific NRQL condition.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrqlCondition(
    """NRQL condition identifier."""
    id: ID!
  ): AlertsNrqlCondition

  "List NRQL conditions according to search criteria.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  nrqlConditionsSearch(
    """
    Cursor for pagination. Supplied by a previous `NrqlConditionsSearch` query.
    """
    cursor: String

    """Search criteria used to filter the returned list NRQL conditions."""
    searchCriteria: AlertsNrqlConditionsSearchCriteriaInput
  ): AlertsNrqlConditionsSearchResultSet

  "List Alerts policies according to search criteria.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policiesSearch(
    """Cursor for pagination. Supplied by a previous `PoliciesSearch` query."""
    cursor: String

    """Search criteria used to filter the returned list of policies."""
    searchCriteria: AlertsPoliciesSearchCriteriaInput
  ): AlertsPoliciesSearchResultSet

  "Retrieve a specific Alerts policy.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  policy(
    """Policy identifier."""
    id: ID!
  ): AlertsPolicy
}

"List of groups representing named sets of New Relic users within an authentication domain\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityUserGroups {
  "User groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  items: [MultiTenantIdentityUserGroup!]!

  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"Summary statistics about the APM App.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmApplicationSummaryData {
  "The apdex score. For more details on the use of apdex, visit [our docs](https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apdexScore: Float

  "The percentage of responses to all transactions with an error.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  errorRate: Float

  "The number of hosts this application is running on.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  hostCount: Int

  "The number of instances of this application running.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  instanceCount: Int

  "The average response time for non-web transactions in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nonWebResponseTimeAverage: Seconds

  "The number of non-web transactions per minute.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nonWebThroughput: Float

  "The average response time for all transactions in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  responseTimeAverage: Seconds

  "The number of all transactions per minute.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  throughput: Float

  "The average response time for web transactions in seconds.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  webResponseTimeAverage: Seconds

  "The number of web transactions per minute.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  webThroughput: Float
}

"Result of a Synthetics purge private location queue mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsPrivateLocationPurgeQueueResult {
  "An array containing errors resulting from the mutation, if any\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsPrivateLocationMutationError]
}

"This scalar represents a NRQL query string.\n\nSee the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about NRQL syntax.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
scalar Nrql

"Provides the available values of possible directions to sort the result\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
enum OrganizationAccountSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"Fetch Metadata for AWS integrations\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsMetadataIntegrationInput {
  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"Provides all the available filters on a role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationRoleFilterInputExpression {
  "The id of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  id: MultiTenantAuthorizationRoleIdInputFilter

  "The name of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  name: MultiTenantAuthorizationRoleNameInputFilter

  "The organization id the role belongs to\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  organizationId: MultiTenantAuthorizationRoleOrganizationIdInputFilter!

  "The scope of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  scope: MultiTenantAuthorizationRoleScopeInputFilter

  "The type of the role\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  type: MultiTenantAuthorizationRoleTypeInputFilter
}

"A filter for Accounts\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountFilterInput {
  "Filter by account ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  id: OrganizationAccountIdFilterInput

  "Filter by Account Name\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  name: OrganizationAccountNameFilterInput

  "Filter by organization ID\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  organizationId: OrganizationAccountOrganizationIdFilterInput!

  "Filter by Sharing Mode\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  sharingMode: OrganizationAccountSharingModeFilterInput

  "Filter by an account status. By default filters to active accounts.\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  status: OrganizationAccountStatusFilterInput
}

"Configuration setting to apply either the show or hide strategy for network filtering.\n\n---\n**NR Internal**\n\n * [#help-api-evolution](https://app.slack.com/client/T02D34WJD/C0MPX17GU)\n * Team ID: No team ID provided\n\n* [asgs repo](https://source.datanerd.us/api-evolution/asgs)\n\n * visibility(customer)\n\n\n"
enum AgentApplicationSettingsNetworkFilterMode {
  """Disables both show and hide confurations."""
  DISABLED

  """Use the hide list configuration."""
  HIDE

  """Use the show list configuration."""
  SHOW
}

"Types of references for the default WHERE clause.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
enum EntityGoldenEventObjectId {
  """The WHERE clause will be done against a domainId."""
  DOMAIN_IDS

  """The WHERE clause will be done against a GUID."""
  ENTITY_GUIDS

  """The WHERE clause will be done against the name of the entity."""
  ENTITY_NAMES @deprecated(reason: "This use case will be removed in future versions.")
}

"Cloud Spanner Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudGcpSpannerIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"A Synthetic Monitor entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type SyntheticMonitorEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The Synthetic Monitor ID\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitorId: ID

  "Summary statistics for the Synthetic Monitor.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitorSummary: SyntheticMonitorSummaryData

  "The Synthetic Monitor type\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitorType: SyntheticMonitorType

  "The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  monitoredUrl: String

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The duration in minutes between Synthetic Monitor runs.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  period: Minutes

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Specifies the supported entity types to be a specific subset of entity types\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n\n"
type Nr1CatalogSpecificSupportedEntityTypes implements Nr1CatalogSupportedEntityTypes {
  "The list of support entity types.\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  entityTypes: [DomainType!]!

  "The level of support entity types. Always set to SPECIFIC\n\n---\n**NR Internal**\n\n * [#help-nr1-dev-experience](https://newrelic.slack.com/archives/CPE597DNY)\n * Team ID: No team ID provided\n\n* [catalog-service-elixir repo](https://source.datanerd.us/nr1-dev-experience/catalog-service-elixir)\n\n * visibility(customer)\n\n"
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"Error object for Synthetics monitor update request\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsMonitorUpdateError {
  "String description of error\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  description: String!

  "Enum of error that was returned during monitor update\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  type: SyntheticsMonitorUpdateErrorType!
}

"User information returned within Groups\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementGroupUser {
  "The email of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: String!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The full name of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The configured time zone of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  timeZone: String!
}

"Azure details about a streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
type StreamingExportAzureDetails {
  "Connection string that has access to the specific Event Hub\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  eventHubConnectionString: String!

  "The name of Event Hub to write events to\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  eventHubName: String!
}

"Configuration options for when a monitor downtime should end\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n\n"
input SyntheticsDateWindowEndConfig {
  "End the monitor downtime on a particular date\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  onDate: Date

  "End the monitor downtime after a set number of occurrences\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setMonitorDowntimeCustomerVisible`)\n\n"
  onRepeat: Int
}

"A filter for Account Status\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationAccountStatusFilterInput {
  "An account status\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: OrganizationAccountStatus!
}

"ECS Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudEcsIntegration implements CloudIntegration {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Step Functions\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudAwsStatesIntegrationInput {
  "Specify each AWS region that includes the resources that you want to monitor.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  awsRegions: [String]

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int
}

"A cloud services provider.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
interface CloudProvider {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud provider icon name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  icon: String!

  "The cloud provider identifier in NewRelic.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int!

  "The cloud provider name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String!

  "Get details of one cloud provider service.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  "Get details of all the cloud provider services available for integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  services: [CloudService!]!

  "The cloud provider short name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  slug: String!

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Filters on the grants organization id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantOrganizationIdInputFilter {
  "Performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: ID!
}

"Destination update object\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
input AiNotificationsDestinationUpdate {
  "active\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  active: Boolean

  "auth\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  auth: AiNotificationsCredentialsInput

  "disableAuth\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  disableAuth: Boolean

  "name\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  name: String

  "properties\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  properties: [AiNotificationsPropertyInput!]
}

"The id of the job to retrieve\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n\n"
input OrganizationOrganizationCreateJobIdInput {
  "An organization create job id\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  eq: ID

  "A set of job ids to search for\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/archives/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [organization-service repo](https://source.datanerd.us/orgs-and-accounts/organization-service)\n\n * visibility(customer)\n\n"
  in: [ID!]
}

"container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementGroups {
  "container for groups enabling cursor based pagination\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  groups: [UserManagementGroup!]!

  "an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  nextCursor: String

  "the total number of results\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  totalCount: Int!
}

"A Key Transaction entity outline.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type KeyTransactionEntityOutline implements AlertableEntityOutline & EntityOutline {
  "\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  account: AccountOutline

  "The New Relic account ID associated with this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  accountId: Int

  "The current alerting severity of the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  alertSeverity: EntityAlertSeverity

  "The entity's domain\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  domain: String

  "A value representing the combination of the entity's domain and type.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  entityType: EntityType

  "The date of last time the entity has updated any of its fields.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  firstIndexedAt: EpochMilliseconds

  "The list of golden metrics for a specific entity\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  "The list of golden tags for a specific entityType.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  "A unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The time the entity was indexed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  indexedAt: EpochMilliseconds

  "The last time the entity's reporting status changed.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  lastReportingChangeAt: EpochMilliseconds

  "The name of this entity.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The url to the entity.\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  permalink: String

  "The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  reporting: Boolean

  "The service level defined for the entity.\n\n---\n**NR Internal**\n\n * [#help-service-levels](https://newrelic.slack.com/archives/C01NCTZ9M6U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serviceLevel: ServiceLevelDefinition

  "The tags applied to the entity.\n\nFor details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  tags: [EntityTag]

  "The entity's type\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/messages/CH5MLECNN)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: String
}

"Class of vertex.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsVertexClass {
  """Vertex class is application"""
  APPLICATION

  """Vertex class is cloudservice"""
  CLOUDSERVICE

  """Vertex class is cluster"""
  CLUSTER

  """Vertex class is datastore"""
  DATASTORE

  """Vertex class is host"""
  HOST

  """Vertex class is team"""
  TEAM
}

"Object for constraints errors\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n\n"
type AiNotificationsConstraintsError {
  "List of missing constraints for channel creation\n\n---\n**NR Internal**\n\n * [#notifications](https://newrelic.slack.com/archives/C01AE77N010)\n * Team ID: No team ID provided\n\n* [bifrost repo](https://source.datanerd.us/newrelic-notifications/bifrost)\n\n * visibility(flag:`Notifications/notifications__api`)\n\n"
  constraints: [AiNotificationsConstraintError!]!
}

"Input type used to define the context for the golden metrics.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n\n"
input EntityGoldenContextInput {
  "Account context.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  account: Int

  "Collection guid context.\n\n---\n**NR Internal**\n\n * [#help-entity-platform](https://newrelic.slack.com/archives/CH5MLECNN)\n * Team ID: No team ID provided\n\n* [golden-metric-service repo](https://source.datanerd.us/entity-platform/golden-metric-service)\n\n * visibility(customer)\n\n"
  guid: EntityGuid
}

"Active user within group\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type MultiTenantIdentityGroupUser {
  "The email of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  email: String!

  "a value that uniquely identifies this object\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!

  "The full name of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  name: String!

  "The configured time zone of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.enterprise.slack.com/archives/C03HDHEBJS0)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  timeZone: String
}

"Windowed view of an account's decisions.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AiDecisionsDecisionListing {
  "Number of decisions in this window.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  count: Int!

  "List of decisions in this window.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  decisions: [AiDecisionsDecision!]!

  "Cursor used to fetch next page.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  nextCursor: String

  "Cursor used to fetch previous page.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  prevCursor: String
}

"Types of opinions users can leave as feedback.\n\n---\n**NR Internal**\n\n * [#correlation-services](https://newrelic.slack.com/messages/CG6MNSB8U)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
enum AiDecisionsOpinion {
  """A dislike opinion"""
  DISLIKE

  """A like opinion"""
  LIKE
}

"The result of a Cert Check monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsCertCheckMonitorCreateMutationResult {
  "Errors that occurred during Cert Check monitor create mutation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  errors: [SyntheticsMonitorCreateError]!

  "The resulting Cert Check monitor\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  monitor: SyntheticsCertCheckMonitor
}

"Filters on the grants scope type\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n\n"
input MultiTenantAuthorizationGrantScopeTypeInputFilter {
  "Performs an equals operation\n\n---\n**NR Internal**\n\n * [#help-authorization](https://newrelic.slack.com/messages/C03HDJCQDB6)\n * Team ID: [717](https://team-store.datanerd.one/teams?teamId=717)\n\n* [authorization_management_service repo](https://source.datanerd.us/account-auth-and-access/authorization_management_service)\n\n * visibility(customer)\n\n"
  eq: MultiTenantAuthorizationGrantScopeEnum!
}

"Represents whether a span is a call to a datastore or an external service.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
enum DistributedTracingSpanClientType {
  """A span that represents a call to a datastore."""
  DATASTORE

  """A span that represents a call to an external service."""
  EXTERNAL
}

"\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n\n"
type DistributedTracingActorStitchedFields {
  "Look up the details of a trace based upon the traceId and optional start time.\n\n---\n**NR Internal**\n\n * [#help-tracing](https://newrelic.slack.com/messages/C7GQYNEEB)\n * Team ID: No team ID provided\n\n* [distributed_tracing_service repo](https://source.datanerd.us/distributed-tracing/distributed_tracing_service)\n\n * visibility(flag:`Distributed_Tracing/apiEarlyAccess`)\n\n"
  trace(
    """
    The start time of the trace. This will default to 1 hour ago and will look for traces within that window. If you are looking for a preserved trace then it is required to pass in a timestamp.
    """
    timestamp: EpochMilliseconds

    """Unique identifier shared by all spans within a single trace."""
    traceId: String!
  ): DistributedTracingTrace
}

"Error object for Synthetics monitor creation request\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n\n"
type SyntheticsMonitorCreateError {
  "String description of error\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  description: String!

  "Enum of error that was returned during monitor creation\n\n---\n**NR Internal**\n\n * [#help-proactive-monitoring](https://newrelic.enterprise.slack.com/archives/C7HKX5HGR)\n * Team ID: [46](https://team-store.datanerd.one/teams?teamId=46)\n\n* [synthetics-graphql-gateway repo](https://source.datanerd.us/synthetics-platform/synthetics-graphql-gateway)\n\n * visibility(flag:`Synthetics/setGraphqlCustomerVisible`)\n\n"
  type: SyntheticsMonitorCreateErrorType!
}

"Methods for replacing obfuscated values.\n\n---\n**NR Internal**\n\n * [#help-logging](https://newrelic.slack.com/archives/CEQGKUQ80)\n * Team ID: No team ID provided\n\n* [log-parser-api repo](https://source.datanerd.us/logging/log-parser-api)\n\n * visibility(flag:`Logging/obfuscation_api`)\n\n\n"
enum LogConfigurationsObfuscationMethod {
  """Replace the matched data with a SHA256 hash."""
  HASH_SHA256

  """Replace the matched data with a static value."""
  MASK
}

"Configuration for visualization type 'viz.area'\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
input DashboardAreaWidgetConfigurationInput {
  "NRQL queries.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"Issues data\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n\n"
type AiIssuesIssueData {
  "Issues\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  issues: [AiIssuesIssue!]!

  "Cursor to get the next batch of results\n\n---\n**NR Internal**\n\n * [#team-iii](https://newrelic.slack.com/archives/C010REE61BN)\n * Team ID: No team ID provided\n\n* [lucifer repo](https://source.datanerd.us/incident-intelligence/lucifer)\n\n * visibility(flag:`III/api_access`)\n\n"
  nextCursor: String
}

"User information returned for UserSearch\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type UsersUserSearch {
  "The email of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  email: String

  "The full name of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String

  "The unique identifier of the user.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C03HDHEBJS0)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  userId: ID
}

"Configuration settings for the APM Application\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type ApmApplicationSettings {
  "The current Apdex target setting\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  apdexTarget: Float

  "State of server-side configuration setting\n\n---\n**NR Internal**\n\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  serverSideConfig: Boolean
}

"AWS details about a streaming rule\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n\n"
type StreamingExportAwsDetails {
  "The AWS account to which the target firehose belongs\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  awsAccountId: ID!

  "The name of the delivery stream to write events to\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  deliveryStreamName: String!

  "The AWS region the delivery stream is located in\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  region: String!

  "The role configured for New Relic to assume\n\n---\n**NR Internal**\n\n * [#help-unified-dstreams](https://newrelic.slack.com/archives/CBB5R0ZU3)\n * Team ID: No team ID provided\n\n* [export_registrar repo](https://source.datanerd.us/events-pipeline/event_exporter/tree/master/export_registrar)\n\n * visibility(customer)\n\n"
  role: String!
}

"Represents a module loaded by the apm application.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type AgentEnvironmentApplicationLoadedModule {
  "Extra module attributes.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  attributes: [AgentEnvironmentLoadedModuleAttribute]!

  "Module name.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  name: String!

  "Module version.\n\n---\n**NR Internal**\n\n * [help-collector](https://newrelic.slack.com/archives/CAJU8N3K9)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  version: String
}

"An error object for linking a Pixie project.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n\n"
type PixieLinkPixieProjectError {
  "A message explaining what the error is about.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  message: String

  "The type of error.\n\n---\n**NR Internal**\n\n * [#fsi-team](https://newrelic.slack.com/messages/CBPPENPM4)\n * Team ID: No team ID provided\n\n* No repo link provided\n\n * visibility(customer)\n\n"
  type: PixieLinkPixieProjectErrorType
}

"A user of New Relic to be deleted.\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n\n"
type UserManagementDeletedUser {
  "The id of the deleted user\n\n---\n**NR Internal**\n\n * [#help-authentication-platform](https://newrelic.slack.com/archives/C1682F2GM)\n * Team ID: [719](https://team-store.datanerd.one/teams?teamId=719)\n\n* [user-service repo](https://source.datanerd.us/account-auth-and-access/user-service)\n\n * visibility(customer)\n\n"
  id: ID!
}

"PostgreSQL Flexible Server Integration\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
type CloudAzurePostgresqlflexibleIntegration implements CloudIntegration {
  "The object creation date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  createdAt: EpochSeconds!

  "The cloud service integration identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  id: Int

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  "The parent linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccount: CloudLinkedAccount

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "The cloud service integration name.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  name: String

  "The parent NewRelic account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  nrAccountId: Int!

  "Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  resourceGroups: [String]

  "The cloud service used in the integration.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  service: CloudService

  "The object last update date, in epoch (Unix) time\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  updatedAt: EpochSeconds!
}

"Page in a dashboard entity.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n\n"
type DashboardPage {
  "Page creation timestamp.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  createdAt: DateTime

  "Brief text describing the page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  description: String

  "Unique entity identifier.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  guid: EntityGuid

  "The name of the page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  name: String

  "Information of the user that owns the page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  owner: DashboardOwnerInfo

  "Page update timestamp.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  updatedAt: DateTime

  "A nested block of all widgets belonging to the page.\n\n---\n**NR Internal**\n\n * [#help-dashboard-services](https://newrelic.slack.com/messages/CPXF9VA2Z)\n * Team ID: [206](https://team-store.datanerd.one/teams?teamId=206)\n\n* [dashcow repo](https://source.datanerd.us/dashboard-services/dashcow)\n\n * visibility(customer)\n\n"
  widgets: [DashboardWidget]
}

"Amazon Simple Storage Service (S3)\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n\n"
input CloudS3IntegrationInput {
  "Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchExtendedInventory: Boolean

  "Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  fetchTags: Boolean

  "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  inventoryPollingInterval: Int

  "The linked account identifier.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  linkedAccountId: Int!

  "The data polling interval in seconds.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  metricsPollingInterval: Int

  "Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagKey: String

  "Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.\n\n---\n**NR Internal**\n\n * [#help-cloud-integrations](https://newrelic.slack.com/archives/C0RF9MFSQ)\n * Team ID: No team ID provided\n\n* [beyond-api repo](https://source.datanerd.us/beyond/beyond-api)\n\n * visibility(customer)\n\n"
  tagValue: String
}

"The input for updating an existing Webhook notification channel.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n\n"
input AlertsWebhookNotificationChannelUpdateInput {
  "Base URL.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  baseUrl: String

  "Basic auth.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  basicAuth: AlertsWebhookBasicAuthMutationInput

  "Custom HTTP headers.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customHttpHeaders: [AlertsWebhookCustomHeaderMutationInput!]

  "Custom payload body.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customPayloadBody: String

  "Custom payload type.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  customPayloadType: AlertsWebhookCustomPayloadType

  "Notification channel name.\n\n---\n**NR Internal**\n\n * [#help-alerts](https://newrelic.slack.com/messages/C0DSAFF8Q)\n * Team ID: No team ID provided\n\n* [alerts_graphql_service repo](https://source.datanerd.us/Alerting/alerts_graphql_service)\n\n * visibility(customer)\n\n"
  name: String
}