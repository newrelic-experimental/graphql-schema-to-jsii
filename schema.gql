schema {
  query: RootQueryType
  mutation: RootMutationType
}

"""Metadata associated with a dashboard template"""
type Nr1CatalogDashboardTemplateMetadata {
  """A list of authors that created the dashboard template"""
  authors: [Nr1CatalogAuthor!]!

  """
  The list of categories for filtering, searching, and grouping associated with the dashboard template
  """
  categories: [Nr1CatalogCategory!]!

  """The list of category terms associated with the dashboard template"""
  categoryTerms: [String!]!

  """A short form description for a dashboard template."""
  description: String

  """The human-readable name for a dashboard template."""
  displayName: String

  """A list of previews for a dashboard template, such as screenshots."""
  previews: [Nr1CatalogPreview!]!

  """
  A list of required data sources needed to populate data in the dashboard.
  """
  requiredDataSources: [Nr1CatalogDataSource!]!
}

"""SQS Integration"""
type CloudSqsIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
  """
  queuePrefixes: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Additional entity search options."""
input EntitySearchOptions {
  """
  Whether or not matching on tag keys and values should be case-sensitive.
  """
  caseSensitiveTagMatching: Boolean

  """
  A limit to apply to the number of entities returned. Note: this option can only _lower_ the default limits.
  """
  limit: Int

  """
  Specify which tags to include with search results. Does not affect which entities are returned.
  """
  tagFilter: [String!]
}

"""
Monitor downtime object returned to the customer for a downtime run monthly
"""
type SyntheticsMonthlyMonitorDowntimeMutationResult {
  """The account ID associated with the monitor downtime"""
  accountId: Int

  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  endRepeat: SyntheticsDateWindowEndOutput

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """
  Configuration options for which days of the month a monitor downtime will occur
  """
  frequency: SyntheticsMonitorDowntimeMonthlyFrequencyOutput

  """The entity GUID associated with the monitor downtime"""
  guid: EntityGuid

  """The monitor GUIDs associated with the monitor downtime"""
  monitorGuids: [EntityGuid]

  """The name of the monitor downtime"""
  name: String

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""Router Integration"""
type CloudGcpRouterIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""General error categories."""
enum NrqlDropRulesErrorReason {
  """Targeted account does not have access to this feature."""
  FEATURE_FLAG_DISABLED

  """Other errors."""
  GENERAL

  """Something about the request was invalid."""
  INVALID_INPUT

  """The provided NRQL string was ill formed or used invalid features."""
  INVALID_QUERY

  """The drop rule being acted upon did not exist."""
  RULE_NOT_FOUND

  """The current user does not have authority to perform the given action."""
  USER_NOT_AUTHORIZED
}

"""Expected errors that can be returned by addWidgetsToPage operation."""
type DashboardAddWidgetsToPageError {
  """Error description."""
  description: String

  """Error type."""
  type: DashboardAddWidgetsToPageErrorType!
}

"""Active user within group"""
type MultiTenantIdentityGroupUser {
  """The email of the user."""
  email: String!

  """a value that uniquely identifies this object"""
  id: ID!

  """The full name of the user."""
  name: String!

  """The configured time zone of the user."""
  timeZone: String
}

"""Provides the available values for provisioning type"""
enum OrganizationProvisioningTypeEnum {
  """Provisioning not configured"""
  DISABLED

  """Manual provisioning"""
  MANUAL

  """SCIM automated provisioning"""
  SCIM
}

"""Data to filter subscribable nerdpack list."""
input NerdpackDataFilter {
  """ID of the account to be subscribed."""
  accountId: Int

  """Nerdpack subscription model to filter."""
  subscriptionModel: NerdpackSubscriptionModel

  """Tag the account may subscribe to."""
  tag: NerdpackTagName
}

"""
Typed configuration for known visualizations. Only one (at most) will be populated for a given widget.
"""
type DashboardWidgetConfiguration {
  """Configuration for visualization type 'viz.area'"""
  area: DashboardAreaWidgetConfiguration

  """Configuration for visualization type 'viz.bar'"""
  bar: DashboardBarWidgetConfiguration

  """Configuration for visualization type 'viz.billboard'"""
  billboard: DashboardBillboardWidgetConfiguration

  """Configuration for visualization type 'viz.line'"""
  line: DashboardLineWidgetConfiguration

  """Configuration for visualization type 'viz.markdown'"""
  markdown: DashboardMarkdownWidgetConfiguration

  """Configuration for visualization type 'viz.pie'"""
  pie: DashboardPieWidgetConfiguration

  """Configuration for visualization type 'viz.table'"""
  table: DashboardTableWidgetConfiguration
}

"""The response of the update keys mutation."""
type ApiAccessUpdateKeyResponse {
  """
  Lists all errors for keys that could not be updated. Each error maps to a single key input.
  """
  errors: [ApiAccessKeyError]

  """Lists all successfully updated keys."""
  updatedKeys: [ApiAccessKey]
}

"""Basic auth input object"""
input AiNotificationsBasicAuthInput {
  """password"""
  password: SecureValue!

  """user"""
  user: String!
}

"""A connection between two vertices within a graph"""
type AiTopologyEdge {
  """Whether or not the direction of the edge has semantic meaning."""
  directed: Boolean!

  """ID of parent vertex."""
  fromVertexId: ID!

  """Name of parent vertex."""
  fromVertexName: String!

  """ID of edge."""
  id: ID!

  """ID of child vertex."""
  toVertexId: ID!

  """Name of child vertex."""
  toVertexName: String!

  """Time rule was last updated."""
  updatedAt: EpochMilliseconds!
}

"""Error for mutation results"""
type MetricNormalizationRuleMutationError {
  """Details of error"""
  message: String

  """Type of error"""
  type: MetricNormalizationRuleErrorType
}

"""The advanced options available for a Simple Browser monitor"""
type SyntheticsSimpleBrowserMonitorAdvancedOptions {
  """Custom headers to use in monitor job"""
  customHeaders: [SyntheticsCustomHeader]

  """Emulate a device"""
  deviceEmulation: SyntheticsDeviceEmulation

  """Capture a screenshot during job execution"""
  enableScreenshotOnFailureAndScript: Boolean

  """Validation text for monitor to search for at given URI"""
  responseValidationText: String

  """Monitor should validate SSL certificate chain"""
  useTlsValidation: Boolean
}

"""A query string using Entity Search query syntax"""
scalar EntitySearchQuery

"""SNS Integration"""
type CloudSnsIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The input object representing the group being created"""
input UserManagementCreateGroup {
  """The id of the authentication domain the group will belong to"""
  authenticationDomainId: ID!

  """The name of the group"""
  displayName: String!
}

"""
Provides the available values of possible directions to sort the result
"""
enum OrganizationAccountSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"""Specifies a default value for variables."""
input DashboardVariableDefaultValueInput {
  """Default string value."""
  string: String
}

"""Input type for RelativeTopologicallyDependent expression"""
input AiDecisionsRelativeTopologicallyDependentInput {
  """From Vertex Id."""
  from: [ID!]!

  """Graph Id."""
  graphId: ID

  """Maximum number of hops"""
  maxHops: Int

  """Required Vertex Attributes"""
  requiredAttributes: [String!]!

  """Required Vertex Classes"""
  requiredClasses: [AiDecisionsVertexClass!]!

  """To Vertex Id."""
  to: [ID!]!
}

"""Firestore Integration"""
type CloudGcpFirestoreIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
A New Relic Alerts condition that uses a NRQL query to determine violations.
"""
interface AlertsNrqlCondition {
  """The custom violation description."""
  description: String

  """Whether the condition is enabled."""
  enabled: Boolean!

  """The Entity associated with the NRQL Condition"""
  entity: EntityOutline

  """The condition's entity GUID"""
  entityGuid: EntityGuid!

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpiration!

  """Condition ID."""
  id: ID!

  """Name of the condition."""
  name: String!

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionQuery!

  """Alerts policy ID."""
  policyId: ID!

  """Runbook URL."""
  runbookUrl: String

  """
  Configuration that defines the signal that the NRQL condition will use to evaluate.
  """
  signal: AlertsNrqlConditionSignal!

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlConditionTerms!]!

  """Type of NRQL condition."""
  type: AlertsNrqlConditionType!

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes.
  """
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  """Duration after which a violation automatically closes in seconds."""
  violationTimeLimitSeconds: Seconds
}

"""All the accounts that user has access to, from the same organization."""
type WorkloadValidAccounts {
  """List of accounts from the same organization."""
  accounts: [AccountReference!]
}

"""Express Route"""
input CloudAzureExpressrouteIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Expected error types that can be returned by create operation."""
enum DashboardCreateErrorType {
  """Invalid input error."""
  INVALID_INPUT
}

"""An object that represents a golden metric."""
type EntityGoldenMetric {
  """The definition of the golden metric."""
  definition: EntityGoldenMetricDefinition!

  """
  The synthesised metric name. i.e: newrelic.goldenmetrics.apm.application.throughput
  """
  metricName: String!

  """The name of the golden metric."""
  name: String!

  """
  The definitions of the golden metric as they are defined in the public repo https://github.com/newrelic/entity-definitions.
  """
  originalDefinitions: [EntityGoldenOriginalDefinitionWithSelector!]!

  """
  Original queries as they are defined in the public repo https://github.com/newrelic/entity-definitions.
  """
  originalQueries: [EntityGoldenOriginalQueryWithSelector!]!

  """The golden metric NRQL query."""
  query: String!

  """The title of the golden metric."""
  title: String!

  """The unit used to represent the golden metric."""
  unit: EntityGoldenMetricUnit!
}

"""A filter for Account name"""
input OrganizationAccountNameFilterInput {
  """Search text for an account name"""
  contains: String!
}

"""
List of groups representing named sets of New Relic users within an authentication domain
"""
type MultiTenantIdentityGroupCollection {
  """groups"""
  items: [MultiTenantIdentityGroup!]!

  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""Unit for a limit value"""
enum DataManagementUnit {
  """Value is in bytes"""
  BYTES

  """Value is a count"""
  COUNT

  """Value is in gigabytes"""
  GIGABYTES
}

"""Enumerated list of text output"""
enum DataDictionaryTextFormat {
  """Text as HTML output"""
  HTML

  """Text as markdown output"""
  MARKDOWN

  """Text as plain output, stripped of markup"""
  PLAIN
}

"""MySQL Flexible Server"""
input CloudAzureMysqlflexibleIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Firewalls"""
input CloudAzureFirewallsIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Valid billing structure values"""
enum OrganizationBillingStructure {
  """Account Hierarchy"""
  ACCOUNT_HIERARCHY

  """Customer Contract"""
  CUSTOMER_CONTRACT

  """Unstructured"""
  UNSTRUCTURED
}

"""Database for PostgreSQL Integration"""
type CloudAzurePostgresqlIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The list of valid job statuses to search for"""
enum OrganizationOrganizationCreateJobStatusEnum {
  """All jobs regardless of status"""
  ALL

  """Jobs that have been created but not yet started running"""
  CREATED

  """Jobs that have failed and stopped running"""
  FAILED

  """Jobs that are still running"""
  RUNNING

  """Jobs that completed successfully"""
  SUCCEEDED
}

"""The kind of access granted by permissions"""
enum MultiTenantAuthorizationPermissionCategoryEnum {
  """Delete access"""
  DELETE

  """Create and update access"""
  MANAGE

  """Create and update access"""
  MODIFY

  """Other access"""
  OTHER

  """View access"""
  READ

  """View access"""
  VIEW
}

"""Account Limit"""
type DataManagementAccountLimit {
  """Category for the limit"""
  category: DataManagementCategory

  """Description of the uses for this limit"""
  description: String

  """Link to documentation for this limit"""
  documentationLink: String

  """What happens when the limit is reached?"""
  limitReachedBehaviorDescription: String

  """Unique name for the limit"""
  name: String

  """Time between limit resets"""
  timeInterval: Nrql

  """Unit for the limit value"""
  unit: DataManagementUnit

  """Value for the limit"""
  value: Int
}

"""
Identifying information about the events to metrics rule you want to delete.
"""
input EventsToMetricsDeleteRuleInput {
  """A submitted account id."""
  accountId: Int!

  """A submitted rule id."""
  ruleId: ID!
}

"""
Determines which browser loader will be configured. Some allowed return values are specified for backwards-compatability and do not represent currently allowed values for new applications.
See [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for further information.
"""
enum AgentApplicationSettingsBrowserLoader {
  """Use PRO instead"""
  FULL @deprecated(reason: "Browsers which historically had the FULL loader will now return PRO as the loader type.")

  """
  Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
  """
  LITE

  """Don't use an agent."""
  NONE

  """
  Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
  """
  PRO

  """This value is no longer in use."""
  RUM @deprecated(reason: "Browsers which historically had the RUM loader will now return LITE as the loader type.")

  """
  Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
  """
  SPA

  """This value is specified for backwards-compatability."""
  XHR
}

"""
A rollup rule that was involved in the calculation of the workload status.
"""
type WorkloadRollupRuleStatusResult implements WorkloadStatusResult {
  """Represents the details of a rollup rule."""
  rollupRuleDetails: WorkloadRollupRuleDetails

  """Indicates where the status value derives from."""
  source: WorkloadStatusSource!

  """The status of a rollup rule."""
  value: WorkloadStatusValue!
}

"""The input for updating an existing Email notification channel."""
input AlertsEmailNotificationChannelUpdateInput {
  """List of email recipients."""
  emails: [String!]

  """Include details about the violation as a JSON attachment."""
  includeJson: Boolean

  """Notification channel name."""
  name: String
}

"""Kinesis Firehose Integration"""
type CloudKinesisFirehoseIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""User operations with issue"""
enum AiIssuesIssueUserAction {
  """Acknowledge issue"""
  ACK

  """Resolve issue"""
  RESOLVE

  """Unacknowledge issue"""
  UNACK
}

type UsersActorStitchedFields {
  """
  Search for users using a custom query.
   If no query is provided, returns all visible users.
   NOTE: this API only supports users in the New Relic One user model.
  """
  userSearch(
    """The cursor to fetch paginated user search results."""
    cursor: String

    """
    The user search query takes 1 argument `scope` that takes in various arguments. 
     `userIds` is only an exact match while the rest of the arguments can search for an exact or fuzzy match.
    """
    query: UsersUserSearchQuery
  ): UsersUserSearchResult
}

"""Information about a policy associated with a notification channel."""
type AlertsNotificationChannelPolicy {
  """Policy ID."""
  id: ID!

  """Policy name."""
  name: String!
}

"""Cloud Pub/Sub Integration"""
type CloudGcpPubsubIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Configuration options for a monitor downtime that runs monthly"""
input SyntheticsMonitorDowntimeMonthlyConfig {
  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  endRepeat: SyntheticsDateWindowEndConfig

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """
  Configuration options for which days of the month a monitor downtime will occur
  """
  frequency: SyntheticsMonitorDowntimeMonthlyFrequency

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""Object for validation errors"""
type AiNotificationsDataValidationError {
  """Top level error details"""
  details: String!

  """List of invalid fields"""
  fields: [AiNotificationsFieldError!]!
}

"""Webhook notification channel."""
type AlertsWebhookNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """Webhook channel specific configuration."""
  config: AlertsWebhookNotificationChannelConfig!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

"""Firebase Hosting Integration"""
type CloudGcpFirebasehostingIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Provides the available values of possible directions to sort the result
"""
enum OrganizationSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"""The static status configuration."""
type WorkloadStaticStatus {
  """
  A description that provides additional details about the status of the workload.
  """
  description: String

  """
  Whether the static status configuration is enabled or not. Note that only one static status can be enabled at a given time.
  """
  enabled: Boolean!

  """The unique identifier of the static status."""
  id: Int!

  """The status of the workload."""
  status: WorkloadStatusValue!

  """A short description of the status of the workload."""
  summary: String
}

"""Indicates where a variable's possible values may come from."""
enum DashboardVariableType {
  """Value comes from an enumerated list of possible values."""
  ENUM

  """Value comes from the results of a NRQL query."""
  NRQL

  """Dashboard user can supply an arbitrary string value to variable."""
  STRING
}

"""Amazon Simple Queue Service (SQS)"""
input CloudSqsIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
  """
  queuePrefixes: [String]

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Namespace level retention"""
type DataManagementNamespaceLevelRetention {
  """Length of time data will be retained (in days)"""
  retentionInDays: Int
}

"""
Information for generating the condition NRQL query.
Output from this NRQL query will be compared to the condition terms to detect violations.
"""
input AlertsNrqlConditionUpdateQueryInput {
  """
  Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.
  
  By default, we evaluate the NRQL query in one-minute time windows. Start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.
  
  This value is the number of time windows we look back at the aggregated data.
  
  Example: With an `evaluationOffset` of 3, the NRQL time window applied to your query will be:
  
  `SINCE 3 minutes ago UNTIL 2 minutes ago`
  """
  evaluationOffset: Int

  """NRQL syntax that defines the query."""
  query: String
}

"""Represents the details about an announcement."""
type WhatsNewAnnouncementContent implements WhatsNewContent {
  """The body of the news."""
  body: String

  """The type of the news."""
  contentType: WhatsNewContentType!

  """Contains information about the context of the announcement."""
  context: [String!]

  """A link to the documentation."""
  docUrl: String

  """A link to a page to get started."""
  gettingStartedUrl: String

  """The ID of the announcement."""
  id: ID!

  """A boolean representing whether this content is Featured."""
  isFeatured: Boolean

  """A link to a page to learn more about the announcement."""
  learnMoreUrl: String

  """The date the announcement was published."""
  publishDate: EpochMilliseconds

  """Information about the requirements."""
  requirements: String

  """The summary of the announcement."""
  summary: String

  """The title of the announcement."""
  title: String
}

"""Filters on the grants scope type"""
input MultiTenantAuthorizationGrantScopeTypeInputFilter {
  """Performs an equals operation"""
  eq: MultiTenantAuthorizationGrantScopeEnum!
}

"""Information about an icon"""
type Nr1CatalogIcon {
  """The publicly accessible URL for the icon"""
  url: String!
}

"""Provides all the available filters on the customer id"""
input OrganizationOrganizationCustomerIdInputFilter {
  """performs an equals operation"""
  eq: String!
}

"""Search criteria for returning specific NRQL conditions."""
input AlertsNrqlConditionsSearchCriteriaInput {
  """Exact name of the NRQL condition."""
  name: String

  """String to partially match a NRQL condition name."""
  nameLike: String

  """Policy ID associated with the NRQL condition."""
  policyId: ID

  """Exact NRQL query used in the NRQL condition."""
  query: String

  """String to partially match the NRQL query used in the NRQL condition."""
  queryLike: String

  """Terms operator to match while searching for NRQL conditions."""
  termsOperator: AlertsNrqlConditionTermsOperator
}

"""
Results for loaded modules search. This list is paginated. Use the cursor to go through all the available results.
"""
type AgentEnvironmentAccountApplicationLoadedModulesResults {
  """
  If nextCursor is a String value, set it to the cursor input field while searching in order to get the next page of results.
  """
  nextCursor: String

  """Results of the search."""
  results: [AgentEnvironmentAccountApplicationLoadedModules!]
}

"""Features of the Agent"""
type AgentFeatures {
  """The minimum version available for the Agent on this entity"""
  minVersion: String

  """The name of the feature"""
  name: String
}

"""
Specifies how data matching the drop rule's NRQL string should be processed.
"""
enum NrqlDropRulesAction {
  """
  This action will strip the attributes specified in the SELECT clause of the NRQL string for all events that match the associated NRQL string.
  """
  DROP_ATTRIBUTES

  """
  This action will strip the attributes specified in the SELECT clause of the NRQL string for metric aggregates. The event type must be Metric.
  """
  DROP_ATTRIBUTES_FROM_METRIC_AGGREGATES

  """
  This action will drop all data that match the associated NRQL string. That string MUST be a `SELECT *`.
  """
  DROP_DATA
}

"""Attributes for revoking an account share."""
input OrganizationRevokeSharedAccountInput {
  """The id of the account share to be revoked"""
  id: String!
}

"""Information about the quickstart"""
type Nr1CatalogQuickstart {
  """Determines if this is a featured quickstart"""
  featured: Boolean!

  """The unique identifier for the quickstart"""
  id: ID!

  """Metadata associated with the quickstart"""
  metadata: Nr1CatalogQuickstartMetadata

  """
  Specifies the URL where the source definition for the quickstart can be found
  """
  sourceUrl: String

  """Level of support expected for the quickstart"""
  supportLevel: Nr1CatalogSupportLevel!
}

"""The user is not capable to perform an operation on this account"""
type IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount {
  """The account id the user is not capable to perform the operation on"""
  accountId: Int

  """The capability the user is missing"""
  capability: String!
}

"""Input type used when updating widgets."""
input DashboardUpdateWidgetInput {
  """
  Typed widgets are area, bar, billboard, line, markdown, pie, and table. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-typed) for more info.
  """
  configuration: DashboardWidgetConfigurationInput

  """ID of the widget to be updated."""
  id: ID!

  """The widget's position and size in the dashboard."""
  layout: DashboardWidgetLayoutInput

  """
  Entities related to the widget. Currently only supports one Dashboard entity guid, but may allow other cases in the future.
  """
  linkedEntityGuids: [EntityGuid!]

  """
  Untyped widgets are all other widgets, such as bullet, histogram, inventory, etc. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-untyped) for more info.
  """
  rawConfiguration: DashboardWidgetRawConfiguration

  """A title for the widget."""
  title: String

  """
  Specifies how this widget will be visualized. If null, the WidgetConfigurationInput will be used to determine the visualization.
  """
  visualization: DashboardWidgetVisualizationInput
}

"""Sort object"""
input AiNotificationsDestinationSorter {
  """direction"""
  direction: AiNotificationsSortOrder!

  """field"""
  field: AiNotificationsDestinationFields!
}

"""The deleted key response of the key delete mutation."""
type ApiAccessDeletedKey {
  """The `id` of the deleted key."""
  id: String
}

"""Input for creating a static NRQL condition."""
input AlertsNrqlConditionStaticInput {
  """The custom violation description."""
  description: String

  """Whether the NRQL condition is enabled."""
  enabled: Boolean!

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpirationInput

  """Name of the NRQL condition."""
  name: String!

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionQueryInput!

  """Runbook URL."""
  runbookUrl: String

  """
  Configuration that defines the signal that the NRQL condition will use to evaluate.
  """
  signal: AlertsNrqlConditionSignalInput

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlConditionTermsInput!]!

  """
  Deprecated - use `signal.slideBy` instead.
  
  Function used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation is opened.
  """
  valueFunction: AlertsNrqlStaticConditionValueFunction

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes. Default is THIRTY_DAYS.
  """
  violationTimeLimit: AlertsViolationTimeLimit

  """
  Duration after which a violation automatically closes in seconds.
  Accepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).
  
  Default is 3 days (259200 seconds).
  """
  violationTimeLimitSeconds: Seconds
}

"""Class of vertex."""
enum AiDecisionsVertexClass {
  """Vertex class is application"""
  APPLICATION

  """Vertex class is cloudservice"""
  CLOUDSERVICE

  """Vertex class is cluster"""
  CLUSTER

  """Vertex class is datastore"""
  DATASTORE

  """Vertex class is host"""
  HOST

  """Vertex class is team"""
  TEAM
}

"""Amazon Kinesis Data Firehose"""
input CloudKinesisFirehoseIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Represents a time window."""
type TimeWindow {
  """
  The end time of the time window the number of milliseconds since the Unix epoch.
  """
  endTime: EpochMilliseconds

  """
  The start time of the time window the number of milliseconds since the Unix epoch.
  """
  startTime: EpochMilliseconds
}

"""Information about the mutation result when submitting metadata"""
type Nr1CatalogSubmitMetadataResult {
  """
  A list of errors that may have occurred as a result of submitting metadata
  """
  errors: [Nr1CatalogSubmitMetadataError!]

  """
  The Nerdpack with updated information as a result of running the mutation
  """
  nerdpack: Nr1CatalogNerdpack

  """The mutation result when submitting metadata"""
  result: Nr1CatalogMutationResult!
}

"""Filter input object"""
input AiWorkflowsFilterInput {
  """name"""
  name: String

  """predicates"""
  predicates: [AiWorkflowsPredicateInput!]!

  """type"""
  type: AiWorkflowsFilterType!
}

"""Search criteria for returning specific policies."""
input AlertsPoliciesSearchCriteriaInput {
  """The list of policy ids to return."""
  ids: [ID!]

  """Exact name of the policy."""
  name: String

  """String to partially match a policy name."""
  nameLike: String
}

"""QLDB"""
input CloudAwsQldbIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""The available fill options."""
enum AlertsFillOption {
  """Fill using the last known value."""
  LAST_VALUE

  """Do not fill data."""
  NONE

  """Fill using a static value."""
  STATIC
}

"""Browser monitoring."""
type AgentApplicationSettingsBrowserMonitoring {
  """Enables ajax traces in the browser app."""
  ajax: AgentApplicationSettingsBrowserAjax

  """Configure distributed tracing in browser apps."""
  distributedTracing: AgentApplicationSettingsBrowserDistributedTracing!

  """The type of browser agent that will be loaded."""
  loader: AgentApplicationSettingsBrowserLoader!

  """
  Specify the semantic version of the browser agent that you would like your app to use. Leave this blank to use the most recent version. Use 'x' in place of a numeric digit to represent the latest release within the version range. For example, '1.x.x'
  """
  pinnedVersion: String

  """
  Browser monitoring's page load timing feature can track sessions by using cookies that contain a simple session identifier.
  """
  privacy: AgentApplicationSettingsBrowserPrivacy!
}

"""Redis Integration"""
type CloudGcpRedisIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""A tag that has been applied to an entity."""
type EntityTag {
  """The tag's key"""
  key: String

  """A list of the tag values"""
  values: [String]
}

"""The input for updating an existing Webhook notification channel."""
input AlertsWebhookNotificationChannelUpdateInput {
  """Base URL."""
  baseUrl: String

  """Basic auth."""
  basicAuth: AlertsWebhookBasicAuthMutationInput

  """Custom HTTP headers."""
  customHttpHeaders: [AlertsWebhookCustomHeaderMutationInput!]

  """Custom payload body."""
  customPayloadBody: String

  """Custom payload type."""
  customPayloadType: AlertsWebhookCustomPayloadType

  """Notification channel name."""
  name: String
}

"""
Expected error types that can be returned by updateWidgetsInPage operation.
"""
enum DashboardUpdateWidgetsInPageErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT

  """Page not found in the system."""
  PAGE_NOT_FOUND

  """Widget not found in the system."""
  WIDGET_NOT_FOUND
}

"""Available keys for sorting groups"""
enum MultiTenantIdentitySortKeyEnum {
  """Authentication domain ID"""
  AUTHENTICATION_DOMAIN_ID

  """Group ID"""
  ID

  """Group name"""
  NAME
}

"""Input type for RelativeLessThan expression"""
input AiDecisionsRelativeLessThanInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""
Represents the currently running agent versions in an APM Application.
An application could be running multiple versions of an agent (across different hosts, for example).
"""
type ApmApplicationRunningAgentVersions {
  """
  The maximum (newest) language agent version running in the APM Application.
  """
  maxVersion: String

  """
  The minimum (oldest) language agent version running in the APM Application.
  """
  minVersion: String
}

"""
The response returned when linking a Pixie project to a New Relic account
"""
type PixieLinkPixieProjectResult {
  """An array containing errors, if any."""
  errors: [PixieLinkPixieProjectError]

  """
  The Pixie project details that were linked. This will be null for unlinkAccount.
  """
  linkedPixieProject: PixiePixieProject

  """
  Whether the linking succeeded or not. Check the "errors" list for details
  """
  success: Boolean!
}

"""The error type for deleting a notification channel."""
enum AlertsNotificationChannelDeleteErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"""User action for issue"""
type AiIssuesIssueUserActionResult {
  """Account id"""
  accountId: Int!

  """User action"""
  action: AiIssuesIssueUserAction!

  """Issue id"""
  issueId: ID!
}

"""Page in a dashboard entity."""
type DashboardPage {
  """Page creation timestamp."""
  createdAt: DateTime

  """Brief text describing the page."""
  description: String

  """Unique entity identifier."""
  guid: EntityGuid

  """The name of the page."""
  name: String

  """Information of the user that owns the page."""
  owner: DashboardOwnerInfo

  """Page update timestamp."""
  updatedAt: DateTime

  """A nested block of all widgets belonging to the page."""
  widgets: [DashboardWidget]
}

"""Storage Integration"""
type CloudAzureStorageIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Represents a piece of user feedback for a merge."""
type AiDecisionsMergeFeedback {
  """ID of child issue."""
  childIssueId: ID!

  """Opinion of the current user on this merge."""
  opinion: AiDecisionsOpinion!

  """ID of parent issue."""
  parentIssueId: ID!

  """ID of correlation rule."""
  ruleId: ID!

  """ID of user."""
  userId: ID!
}

"""
The configuration that defines how the status of the workload is calculated.
"""
type WorkloadStatusConfig {
  """An automatic status configuration."""
  automatic: WorkloadAutomaticStatus

  """A list of static status configurations."""
  static: [WorkloadStaticStatus!]
}

"""An entity relationship automatically detected by NewRelic."""
type EntityRelationshipDetectedEdge implements EntityRelationshipEdge {
  """The time the relationship was created."""
  createdAt: EpochMilliseconds!

  """The source entity of the relationship."""
  source: EntityRelationshipVertex!

  """The target entity of the relationship."""
  target: EntityRelationshipVertex!

  """The type of the relationship."""
  type: EntityRelationshipEdgeType!
}

"""Provides the operations available on the organization id"""
input OrganizationOrganizationIdInput {
  """An organization id"""
  eq: ID!
}

"""UI component type"""
enum AiNotificationsUiComponentType {
  """Button component"""
  BUTTON @deprecated(reason: "unused component type")

  """Dictionary type component"""
  DICTIONARY_WITH_MASK

  """Handlebars powered payload editor"""
  PAYLOAD

  """Select component"""
  SELECT

  """Multiline text box"""
  TEXT_AREA

  """Single line text field"""
  TEXT_FIELD

  """Toggle component"""
  TOGGLE
}

"""A thematic grouping for catalog items"""
type Nr1CatalogCategory {
  """The human readable name of the category"""
  displayName: String!

  """The url friendly name of the category"""
  slug: String!

  """A list of terms that match catalog items to this category"""
  terms: [String!]!
}

"""A user of New Relic to be deleted."""
type UserManagementDeletedUser {
  """The id of the deleted user"""
  id: ID!
}

"""The rollup strategy."""
type WorkloadRollup {
  """The rollup strategy that is applied to the group of entities."""
  strategy: WorkloadRollupStrategy!

  """
  Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
  """
  thresholdType: WorkloadRuleThresholdType

  """
  Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
  """
  thresholdValue: Int
}

"""Input type for RelativeFuzzyScore expression"""
input AiDecisionsRelativeFuzzyScoreInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Minimum distance threshold."""
  minDistance: Int!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""Input for creating MutingRules for New Relic Alerts Violations."""
input AlertsMutingRuleInput {
  """The condition that defines which violations to target."""
  condition: AlertsMutingRuleConditionGroupInput!

  """The description of the MutingRule."""
  description: String

  """Whether the MutingRule is enabled"""
  enabled: Boolean!

  """The name of the MutingRule."""
  name: String!

  """The time window when the MutingRule should actively mute violations."""
  schedule: AlertsMutingRuleScheduleInput
}

"""The result of a Broken Links monitor update mutation"""
type SyntheticsBrokenLinksMonitorUpdateMutationResult {
  """Errors that occurred during Broken Links monitor update mutation"""
  errors: [SyntheticsMonitorUpdateError]!

  """The resulting Broken Links monitor"""
  monitor: SyntheticsBrokenLinksMonitor
}

"""Channel input object"""
input AiNotificationsChannelInput {
  """destinationId"""
  destinationId: ID!

  """name"""
  name: String!

  """product"""
  product: AiNotificationsProduct!

  """properties"""
  properties: [AiNotificationsPropertyInput!]!

  """type"""
  type: AiNotificationsChannelType!
}

"""
Access to the enabled state of the Java Flight Recorder. This feature only available on the Java language agent version 8.0.0 or later.
"""
type AgentApplicationSettingsJfr {
  """
  If true, the java agent collects Java Flight Recorder data. (Java Agent version 8.0.0 required.)
  """
  enabled: Boolean
}

"""AutoScaling Integration"""
type CloudAutoscalingIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input type for RelativeLessThanOrEqual expression"""
input AiDecisionsRelativeLessThanOrEqualInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""
Information about the mutation result when installing an alert policy template
"""
type Nr1CatalogInstallAlertPolicyTemplateResult {
  """The template that was used for the installation"""
  alertPolicyTemplate: Nr1CatalogAlertPolicyTemplate!

  """An outline of the created alert policy"""
  createdAlertPolicy: Nr1CatalogAlertPolicyOutline!
}

"""DocumentDB"""
input CloudAwsDocdbIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""The input object used to represent a rollup strategy."""
input WorkloadRollupInput {
  """The rollup strategy that is applied to a group of entities."""
  strategy: WorkloadRollupStrategy!

  """
  Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
  """
  thresholdType: WorkloadRuleThresholdType

  """
  Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
  """
  thresholdValue: Int
}

"""The data partition rule for an account."""
type LogConfigurationsDataPartitionRule {
  """Identifies the date and time when the rule was created."""
  createdAt: DateTime!

  """Identifies the user who has created the rule."""
  createdBy: UserReference

  """
  Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.
  """
  deleted: Boolean!

  """A description of what this data partition rule represents."""
  description: String

  """Whether or not this data partition rule is enabled."""
  enabled: Boolean!

  """Unique data partition rule identifier."""
  id: ID!

  """
  The matching criteria for this data partition rule. Logs matching this criteria will be routed to the specified data partition once the rule is enabled.
  """
  matchingCriteria: LogConfigurationsDataPartitionRuleMatchingCriteria @deprecated(reason: "matchingCriteria is deprecated and will eventually be replaced with a new field named nrql which will allow for greater flexibility in defining rules")

  """
  The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition once the rule is enabled.
  """
  nrql: Nrql

  """The retention policy of the data partition data."""
  retentionPolicy: LogConfigurationsDataPartitionRuleRetentionPolicyType!

  """The name of the data partition."""
  targetDataPartition: LogConfigurationsLogDataPartitionName!

  """Identifies the date and time when the rule was last updated."""
  updatedAt: DateTime

  """Identifies the user who has last updated the rule."""
  updatedBy: UserReference
}

"""Trusted Advisor"""
input CloudTrustedadvisorIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Exists only if a user has a pending upgrade request."""
type UserManagementPendingUpgradeRequest {
  """a value that uniquely identifies this object"""
  id: ID!

  """Requester message, why the user believes they require the upgrade."""
  message: String

  """Requested user type for the user."""
  requestedUserType: UserManagementUserType
}

"""An async organization creation job result"""
type OrganizationOrganizationCreateAsyncJobResult {
  """The date and time the job was created in UTC"""
  createdUtc: String!

  """The error message in case of job failure"""
  errorMessage: String

  """The date and time the job was completed in UTC"""
  finishedUtc: String

  """The id of the job"""
  id: ID!

  """The status of the job"""
  status: OrganizationOrganizationCreateJobResultStatusEnum!
}

"""DocumentDB Integration"""
type CloudAwsDocdbIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""An Infrastructure entity."""
type GenericInfrastructureEntity implements AlertableEntity & Entity & InfrastructureIntegrationEntity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds
  integrationTypeCode: String

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Information about a facet count on a search result type"""
type Nr1CatalogSearchResultTypeFacet {
  """The count of results for this search result type"""
  count: Int!

  """The type of search result"""
  type: Nr1CatalogSearchResultType!
}

"""
Distributed tracing type. See [documentation](https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/browser-data-distributed-tracing/) for further information.
"""
type AgentApplicationSettingsBrowserDistributedTracing {
  """List of allowed origins for use with distributed tracing."""
  allowedOrigins: [String!]

  """Whether or not CORS is enabled in distributed tracing."""
  corsEnabled: Boolean

  """Whether or not CORS uses the `newrelic` header in distributed tracing."""
  corsUseNewrelicHeader: Boolean

  """Whether or not CORS uses tracecontext headers in distributed tracing."""
  corsUseTracecontextHeaders: Boolean

  """Whether or not distributed tracing is enabled."""
  enabled: Boolean

  """
  Whether or not to exclude the `newrelic` header in distributed tracing.
  """
  excludeNewrelicHeader: Boolean
}

"""Provides all the available filters on the role type"""
input MultiTenantAuthorizationRoleTypeInputFilter {
  """performs an equals operation"""
  eq: MultiTenantAuthorizationRoleTypeEnum!
}

"""The input object used to represent the workload duplicate."""
input WorkloadDuplicateInput {
  """
  The name of the workload duplicate. If the name isn't specified, the name + ' copy' of the source workload is used to compose the new name.
  """
  name: String
}

"""
The `UserReference` object provides basic identifying information about the user.
"""
type UserReference {
  email: String
  gravatar: String
  id: Int
  name: String
}

"""Autogenerated return type of DeleteUser."""
type UserManagementDeleteUserPayload {
  """The user that was deleted"""
  deletedUser: UserManagementDeletedUser
}

"""The input object representing the group(s) and user(s) to update."""
input UserManagementUsersGroupsInput {
  """The id of the group(s) to add the user(s) to. Max: 10"""
  groupIds: [ID!]!

  """The id of the user(s) to be added to the group(s). Max: 50"""
  userIds: [ID!]!
}

"""App Gateway"""
input CloudAzureAppgatewayIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""A base set of fields for a grouping of similar error events."""
interface ErrorsInboxErrorGroupBase {
  """User assigned to the error group"""
  assignedUser: UserReference @deprecated

  """User assigned to the error group"""
  assignment: ErrorsInboxAssignment

  """Source entity Guid"""
  entityGuid: EntityGuid

  """NRQL formatted query for retrieving error events"""
  eventsQuery: Nrql

  """Time of first occurrence"""
  firstSeenAt: EpochMilliseconds

  """A unique identifier for the error group"""
  id: ID!

  """
  Indicates whether this error group was custom generated.
  - false = this is a system-generated error group
  - true = this is a custom error group, created and sent by the end user
  """
  isCustom: Boolean

  """Time of last occurrence"""
  lastSeenAt: EpochMilliseconds

  """Error group message"""
  message: String

  """Error group name"""
  name: String

  """The occurrences of this error group."""
  occurrences: ErrorsInboxOccurrences

  """Time of regression occurrence for regressed error groups"""
  regressedAt: EpochMilliseconds

  """List of resources associated with this error group"""
  resources(
    """Current query cursor"""
    cursor: String

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxResourceFilterInput
  ): ErrorsInboxResourcesResponse!

  """The source event of the error group."""
  source: String

  """Value to indicate the current state of the group."""
  state: ErrorsInboxErrorGroupState

  """The public URL of the error group detail view."""
  url: String
}

"""Blueprint for simulation creation."""
input AiDecisionsSimulationBlueprint {
  """Length of the window in which incidents are compared."""
  correlationWindowLength: Milliseconds

  """Expression to use to compare incidents."""
  expression: AiDecisionsRuleExpressionInput!

  """Number of correlated incidents within window required to merge issues."""
  minCorrelationThreshold: Int

  """Duration to consider resources for."""
  retentionWindowLength: Milliseconds
}

"""The updated settings of an ApmApplicationEntity."""
type ApmApplicationEntitySettingsResult {
  """
  The updated entity. You can view the updated apdex target in the `settings` field of an ApmApplicationEntity.
  """
  entity: ApmApplicationEntity
}

"""The result of testing Grok on a log line."""
type LogConfigurationsGrokTestResult {
  """Any attributes that were extracted."""
  attributes: [LogConfigurationsGrokTestExtractedAttribute!]

  """The log line that was tested against."""
  logLine: String!

  """Whether the Grok pattern matched."""
  matched: Boolean!
}

"""
A `TraceObserver` handles a group of tracing services for an account family.
"""
type EdgeTraceObserver {
  """
  Optional list of compliance types (e.g., FedRAMP) applied to this trace observer.
  """
  complianceTypes: [EdgeComplianceTypeCode!]

  """
  The group of data sources if any have been assigned to this trace observer.
  """
  dataSourceGroup: EdgeDataSourceGroup

  """
  List of endpoints associated with this trace observer. Currently, only one endpoint per trace observer is supported.
  """
  endpoints: [EdgeEndpoint!]!

  """Globally unique identifier of this trace observer."""
  id: Int!

  """
  Which account monitoring metrics are being written to for this trace observer (if specified)
  """
  monitoringAccountId: Int

  """Human-readable name of this trace observer."""
  name: String!

  """
  Provider-specific region of this endpoint (for example, `AWS_US_EAST_1`). Currently, only AWS regions are supported.
  """
  providerRegion: EdgeProviderRegion!

  """Status of the trace observer."""
  status: EdgeTraceObserverStatus!

  """Trace filters applied to the trace observer."""
  traceFilters: EdgeTraceFilters!
}

"""Input type for RelativeCosineDistance expression"""
input AiDecisionsRelativeCosineDistanceInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""
A Historic Export. Contains information about the request and the current status of that request.
"""
type HistoricalDataExportCustomerExportResponse {
  """The id of the account whose data the Export will run against"""
  account: AccountReference

  """
  The time at which the results of this Export expire and are no longer available. Null values indicate that the export is not ready and does not have an expiration time yet
  """
  availableUntil: EpochMilliseconds

  """
  The beginning of the time range of this Export. Determined from the Query String
  """
  beginTime: EpochMilliseconds!

  """The time at which the Export Request was created"""
  createdAt: EpochMilliseconds!

  """
  The end of the time range of this Export. Determined from the Query String
  """
  endTime: EpochMilliseconds!

  """The number of events returned by this Export"""
  eventCount: Int!

  """
  The event types that the Export will run against. Determined from the Query String
  """
  eventTypes: [String!]!

  """Unique Identifier for the Export"""
  id: ID!

  """If relevant, an error message about the status of the current export"""
  message: String

  """The NRQL query for which this Export will run"""
  nrql: Nrql!

  """The current completion percentage of this Export"""
  percentComplete: Float!

  """
  A list of urls to download the resulting files. Null values indicate that result files are not yet ready for download
  """
  results: [String]

  """The current status of this Export"""
  status: HistoricalDataExportStatus!

  """The time at which the Export Request was submitted"""
  submittedAt: EpochMilliseconds! @deprecated(reason: "submittedAt is deprecated. Use createdAt instead.")

  """The ID of the user who submitted this Export Request"""
  user: UserReference
}

"""Input type for RelativeNumericalEqual expression"""
input AiDecisionsRelativeNumericalEqualInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""Specifies a default value for variables."""
type DashboardVariableDefaultValue {
  """Default string value."""
  string: String
}

"""Enrichment configuration object"""
union AiWorkflowsConfiguration = AiWorkflowsNrqlConfiguration

"""A method within the flamegraph"""
type JavaFlightRecorderStackFrame {
  """The number of stack traces that this frame is in"""
  count: Int!

  """This stackframe's id"""
  id: ID!

  """The stackframe's class and method name"""
  name: String!

  """This stackframe's parent id"""
  parentId: ID
}

"""
Information required to link an AWS GovCloud account to a NewRelic account.
"""
input CloudAwsGovCloudLinkAccountInput {
  """The key used to make requests to AWS service APIs"""
  accessKeyId: String!

  """The AWS account id"""
  awsAccountId: String!

  """How metrics will be collected."""
  metricCollectionMode: CloudMetricCollectionMode

  """The linked account name."""
  name: String!

  """The secret key used to make requests to AWS service APIs"""
  secretAccessKey: SecureValue!
}

"""
A structured representation of a handled exception occurring in a mobile application.
"""
type StackTraceMobileException {
  """
  A structured representation of a handled exception in a mobile application.
  """
  stackTrace: StackTraceMobileExceptionStackTrace
}

"""
The reponse returned when record the acceptance of the Pixie terms of service on a given account
"""
type PixieRecordPixieTosAcceptanceResult {
  """An array containings errors, if any."""
  errors: [PixieRecordPixieTosAcceptanceError]

  """
  Whether the Pixie terms of service acceptance was successfully recorded or not.
  """
  success: Boolean!
}

"""Represents a possible value for a variable of type ENUM."""
type DashboardVariableEnumItem {
  """A human-friendly display string for this value."""
  title: String

  """A possible variable value."""
  value: String
}

"""The time window configuration of the SLO."""
input ServiceLevelObjectiveTimeWindowUpdateInput {
  """The rolling time window configuration of the SLO."""
  rolling: ServiceLevelObjectiveRollingTimeWindowUpdateInput!
}

"""Containers Integration"""
type CloudAzureContainersIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Amazon Elastic MapReduce (EMR)"""
input CloudEmrIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Transit Gateway Integration"""
type CloudAwsTransitgatewayIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Information about the changes made to the metadata for a version of the Nerdpack
"""
type Nr1CatalogReleaseNote {
  """The description of changes made for this version of the Nerdpack"""
  changes: String!

  """The version of the Nerdpack the changes correspond with"""
  version: SemVer!
}

"""The error for deleting a notification channel."""
type AlertsNotificationChannelDeleteError {
  """Error description."""
  description: String!

  """Error type."""
  errorType: AlertsNotificationChannelDeleteErrorType!

  """Notification channel ID."""
  notificationChannelId: ID!
}

"""The result of creating a key transaction."""
type KeyTransactionCreateResult {
  """
  The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).
  """
  apdexTarget: Float

  """The application associated with this key transaction"""
  application: KeyTransactionApplication!

  """
  The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
  """
  browserApdexTarget: Float

  """The GUID for the new key transaction."""
  guid: EntityGuid

  """The name of the metric underlying this key transaction."""
  metricName: String

  """The name of the key transaction."""
  name: String
}

"""Azure Cosmos DB"""
input CloudAzureCosmosdbIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""The input object used to represent a rule."""
input WorkloadUpdateRegularRuleInput {
  """A list of entity GUIDs composing the rule."""
  entityGuids: [EntityGuid!]

  """
  A list of entity search queries used to retrieve the groups of entities that compose the rule.
  """
  entitySearchQueries: [WorkloadUpdateCollectionEntitySearchQueryInput!]

  """
  The unique identifier of the rule to be updated. If not provided, a new rule is created.
  """
  id: Int

  """The input object used to represent a roll-up strategy."""
  rollup: WorkloadRollupInput!
}

"""Step Functions Integration"""
type CloudAwsStatesIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
An object that contains an installation event created from within the newrelic-cli.
"""
type InstallationRecipeEvent {
  """The version of the newrelic-cli that was used for a given recipe."""
  cliVersion: SemVer!

  """
  Whether or not the recipe has been installed and all steps have been completed.
  """
  complete: Boolean!

  """The display name for a given recipe."""
  displayName: String!

  """The entity Guid for a given recipe."""
  entityGuid: EntityGuid!

  """The error returned for a given recipe."""
  error: InstallationStatusError!

  """The host name of the customer's machine."""
  hostName: String!

  """The unique ID that corresponds to an install event."""
  installId: ID

  """The version of the open-install-library that is being used."""
  installLibraryVersion: SemVer

  """The kernel architecture of the customer's machine."""
  kernelArch: String!

  """The kernel version of the customer's machine."""
  kernelVersion: SemVer!

  """The path to the log file on the customer's host."""
  logFilePath: String!

  """
  Additional key:value data related to the environment where the installation occurred.
  """
  metadata: InstallationRawMetadata

  """The unique name for a given recipe."""
  name: String!

  """The OS of the customer's machine."""
  os: String!

  """The platform name provided by the open-install-library."""
  platform: String!

  """The platform family name provided by the open-install-library."""
  platformFamily: String!

  """The platform version provided by the open-install-library."""
  platformVersion: SemVer!

  """
  The redirect URL created by the CLI used for redirecting to a particular entity.
  """
  redirectUrl: String

  """The status for a given recipe."""
  status: InstallationRecipeStatusType!

  """Whether or not the recipe being installed is a targeted install."""
  targetedInstall: Boolean!

  """
  The path to the installation task as defined in the open-install-library.
  """
  taskPath: String

  """The timestamp for when the recipe event occurred."""
  timestamp: EpochSeconds!

  """The number of milliseconds it took to validate the recipe."""
  validationDurationMilliseconds: EpochMilliseconds!
}

"""List of integrations"""
input CloudAwsDisableIntegrationsInput {
  """ALB/NLB integration"""
  alb: [CloudDisableAccountIntegrationInput]

  """API Gateway integration"""
  apigateway: [CloudDisableAccountIntegrationInput]

  """AutoScaling integration"""
  autoscaling: [CloudDisableAccountIntegrationInput]

  """AppSync integration"""
  awsAppsync: [CloudDisableAccountIntegrationInput]

  """Athena integration"""
  awsAthena: [CloudDisableAccountIntegrationInput]

  """Cognito integration"""
  awsCognito: [CloudDisableAccountIntegrationInput]

  """Connect integration"""
  awsConnect: [CloudDisableAccountIntegrationInput]

  """Direct Connect integration"""
  awsDirectconnect: [CloudDisableAccountIntegrationInput]

  """DocumentDB integration"""
  awsDocdb: [CloudDisableAccountIntegrationInput]

  """FSx integration"""
  awsFsx: [CloudDisableAccountIntegrationInput]

  """Glue integration"""
  awsGlue: [CloudDisableAccountIntegrationInput]

  """Kinesis Data Analytics integration"""
  awsKinesisanalytics: [CloudDisableAccountIntegrationInput]

  """Elemental MediaConvert integration"""
  awsMediaconvert: [CloudDisableAccountIntegrationInput]

  """MediaPackage VOD integration"""
  awsMediapackagevod: [CloudDisableAccountIntegrationInput]

  """Fetch Metadata for AWS integrations integration"""
  awsMetadata: [CloudDisableAccountIntegrationInput]

  """MQ integration"""
  awsMq: [CloudDisableAccountIntegrationInput]

  """Managed Kafka integration"""
  awsMsk: [CloudDisableAccountIntegrationInput]

  """Neptune integration"""
  awsNeptune: [CloudDisableAccountIntegrationInput]

  """QLDB integration"""
  awsQldb: [CloudDisableAccountIntegrationInput]

  """Route53 Resolver integration"""
  awsRoute53resolver: [CloudDisableAccountIntegrationInput]

  """Step Functions integration"""
  awsStates: [CloudDisableAccountIntegrationInput]

  """Fetch tags for all integrations integration"""
  awsTagsGlobal: [CloudDisableAccountIntegrationInput]

  """Transit Gateway integration"""
  awsTransitgateway: [CloudDisableAccountIntegrationInput]

  """WAF integration"""
  awsWaf: [CloudDisableAccountIntegrationInput]

  """WAFV2 integration"""
  awsWafv2: [CloudDisableAccountIntegrationInput]

  """X-Ray integration"""
  awsXray: [CloudDisableAccountIntegrationInput]

  """Billing integration"""
  billing: [CloudDisableAccountIntegrationInput]

  """CloudFront integration"""
  cloudfront: [CloudDisableAccountIntegrationInput]

  """CloudTrail integration"""
  cloudtrail: [CloudDisableAccountIntegrationInput]

  """DynamoDB integration"""
  dynamodb: [CloudDisableAccountIntegrationInput]

  """EBS integration"""
  ebs: [CloudDisableAccountIntegrationInput]

  """EC2 integration"""
  ec2: [CloudDisableAccountIntegrationInput]

  """ECS integration"""
  ecs: [CloudDisableAccountIntegrationInput]

  """EFS integration"""
  efs: [CloudDisableAccountIntegrationInput]

  """ElastiCache integration"""
  elasticache: [CloudDisableAccountIntegrationInput]

  """Elastic Beanstalk integration"""
  elasticbeanstalk: [CloudDisableAccountIntegrationInput]

  """Elasticsearch Service integration"""
  elasticsearch: [CloudDisableAccountIntegrationInput]

  """ELB (Classic) integration"""
  elb: [CloudDisableAccountIntegrationInput]

  """EMR integration"""
  emr: [CloudDisableAccountIntegrationInput]

  """Health integration"""
  health: [CloudDisableAccountIntegrationInput]

  """IAM integration"""
  iam: [CloudDisableAccountIntegrationInput]

  """IoT integration"""
  iot: [CloudDisableAccountIntegrationInput]

  """Kinesis Streams integration"""
  kinesis: [CloudDisableAccountIntegrationInput]

  """Kinesis Firehose integration"""
  kinesisFirehose: [CloudDisableAccountIntegrationInput]

  """Lambda integration"""
  lambda: [CloudDisableAccountIntegrationInput]

  """RDS integration"""
  rds: [CloudDisableAccountIntegrationInput]

  """Redshift integration"""
  redshift: [CloudDisableAccountIntegrationInput]

  """Route 53 integration"""
  route53: [CloudDisableAccountIntegrationInput]

  """S3 integration"""
  s3: [CloudDisableAccountIntegrationInput]

  """SES integration"""
  ses: [CloudDisableAccountIntegrationInput]

  """SNS integration"""
  sns: [CloudDisableAccountIntegrationInput]

  """SQS integration"""
  sqs: [CloudDisableAccountIntegrationInput]

  """Trusted Advisor integration"""
  trustedadvisor: [CloudDisableAccountIntegrationInput]

  """VPC integration"""
  vpc: [CloudDisableAccountIntegrationInput]
}

"""The rules that were attempted to be deleted."""
type NrqlDropRulesDeleteDropRuleSubmission {
  """Account the rule was created on."""
  accountId: Int!

  """Id of the rule you want to delete."""
  ruleId: ID!
}

"""A key-value entry."""
input AiTopologyCollectorAttributeInput {
  """Key of entry."""
  key: String!

  """Value of entry."""
  value: String!
}

"""Information related to device emulation"""
type SyntheticsDeviceEmulation {
  """The device orientation the user would like to represent"""
  deviceOrientation: SyntheticsDeviceOrientation!

  """The device type that a user can select"""
  deviceType: SyntheticsDeviceType!
}

"""
Event data definitions, where they come from, and information about the attributes they contain
"""
type DataDictionaryDocsStitchedFields {
  """List of events"""
  events(
    """The official name of this event"""
    names: [String]
  ): [DataDictionaryEvent!]
}

"""
Parameters that affect the data and the rendering of the dashboards returned by the snapshot url mutation.
"""
input DashboardSnapshotUrlInput {
  """
  Period of time from which the data to be displayed on the dashboard will be obtained.
  """
  timeWindow: DashboardSnapshotUrlTimeWindowInput
}

"""Asset produced during the execution of the check"""
type SyntheticsSyntheticMonitorAsset {
  """MIME type of asset"""
  type: String

  """Temporary url at which the asset is available for download"""
  url: String
}

"""Channel result object"""
type AiNotificationsChannelsResponse {
  """Channel entities"""
  entities: [AiNotificationsChannel!]!

  """Error in channel entities fetching"""
  error: AiNotificationsResponseError

  """Deprecated list of errors"""
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """Cursor to get the next batch of results"""
  nextCursor: String

  """Count of all channel entities"""
  totalCount: Int!
}

"""DynamoDB Integration"""
type CloudDynamodbIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""An error object for linking a Pixie project."""
type PixieLinkPixieProjectError {
  """A message explaining what the error is about."""
  message: String

  """The type of error."""
  type: PixieLinkPixieProjectErrorType
}

"""A generic entity outline."""
type GenericEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Feature Setting"""
type DataManagementFeatureSetting {
  """Enabled state for the feature setting"""
  enabled: Boolean

  """Key to identify the feature setting"""
  key: String

  """Locked state for the feature setting"""
  locked: Boolean

  """Unique name for the feature setting"""
  name: String
}

"""
The new settings to use - leave blank any settings you do not wish to modify.

While all settings can be specified here, some may not affect your installed agents, depending on the language agent and the current version installed. Note: not all settings of your agent are available to be set server-side. 

Please see docs.newrelic.com for more information about the capabilities of individual agents.

[Go agent configuration](https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/)

[Java agent configuration](https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/)

[.Net agent configuration](https://docs.newrelic.com/docs/agents/net-agent/configuration/net-agent-configuration/)

[nodejs agent configuration](https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/)

[PHP agent configuration](https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/)

[Python agent configuration](https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/)

[Ruby agent configuration](https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/)
"""
input AgentApplicationSettingsUpdateInput {
  """The new name for the application."""
  alias: String

  """Provides fields to set general APM application settings."""
  apmConfig: AgentApplicationSettingsApmConfigInput

  """Provides fields to set general browser application settings."""
  browserConfig: AgentApplicationSettingsBrowserConfigInput

  """Provides fields to set browser monitoring application settings."""
  browserMonitoring: AgentApplicationSettingsBrowserMonitoringInput

  """Enable or disable the capture of memcache keys"""
  captureMemcacheKeys: Boolean

  """
  Captures information about uncaught exceptions and sends them to New Relic for viewing.
  """
  errorCollector: AgentApplicationSettingsErrorCollectorInput

  """
  In the Java Agent (v8.0.0 or later), it can collect additional data with the Java Flight Recorder enabled.
  """
  jfr: AgentApplicationSettingsJfrInput

  """Input object for mobile settings."""
  mobileSettings: AgentApplicationSettingsMobileSettingsInput

  """DEPRECATED: Use `alias` to set a new name for the application."""
  name: String

  """
  In APM, when transaction traces are collected, there may be additional Slow query data available.
  """
  slowSql: AgentApplicationSettingsSlowSqlInput

  """Settings for the thread profiler."""
  threadProfiler: AgentApplicationSettingsThreadProfilerInput

  """Input object for setting the type of tracing performed."""
  tracerType: AgentApplicationSettingsTracerTypeInput

  """Transaction tracer settings related to APM applications."""
  transactionTracer: AgentApplicationSettingsTransactionTracerInput
}

"""The monitor input values needed to create a Script Browser monitor"""
input SyntheticsCreateScriptBrowserMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsScriptBrowserMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsScriptedMonitorLocationsInput!

  """The human readable identifier for the monitor"""
  name: String!

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod!

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntimeInput

  """The script that the monitor runs"""
  script: String!

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus!

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""Information about an alert policy template"""
type Nr1CatalogAlertPolicyTemplate {
  """The unique identifier for the alert policy template"""
  id: ID!

  """Metadata associated with the alert policy template"""
  metadata: Nr1CatalogAlertPolicyTemplateMetadata

  """Level of support expected for the alert policy template"""
  supportLevel: Nr1CatalogSupportLevel!

  """
  A timestamp that indicates when the alert policy template was last updated
  """
  updatedAt: DateTime!
}

"""Update Workflow input object"""
input AiWorkflowsUpdateWorkflowInput {
  """destinationConfigurations"""
  destinationConfigurations: [AiWorkflowsDestinationConfigurationInput!]

  """destinationsEnabled"""
  destinationsEnabled: Boolean

  """enrichments"""
  enrichments: AiWorkflowsUpdateEnrichmentsInput

  """enrichmentsEnabled"""
  enrichmentsEnabled: Boolean

  """id"""
  id: ID!

  """issuesFilter"""
  issuesFilter: AiWorkflowsUpdatedFilterInput

  """mutingRulesHandling"""
  mutingRulesHandling: AiWorkflowsMutingRulesHandling

  """name"""
  name: String

  """workflowEnabled"""
  workflowEnabled: Boolean
}

"""Slack notification channel."""
type AlertsSlackNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """Slack channel specific configuration."""
  config: AlertsSlackNotificationChannelConfig!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

"""Indicates if a tag has been removed for a nerdpack"""
enum NerdpackRemovedTagResponseType {
  """Indicates the tag has not been removed"""
  NOTHING_TO_REMOVE

  """Indicates the tag has been removed"""
  REMOVED
}

"""
Response for all channel related mutations. Includes relevant channel and/or errors
"""
type AiNotificationsChannelResponse {
  """Successfully mutated channel"""
  channel: AiNotificationsChannel

  """Error in channel mutation"""
  error: AiNotificationsError

  """Deprecated list of errors"""
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")
}

"""An External entity outline."""
type ExternalEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Logic Apps"""
input CloudAzureLogicappsIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Express Route Integration"""
type CloudAzureExpressrouteIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
All the details necessary to configure an agent to connect to an endoint.
"""
type EdgeAgentEndpointDetail implements EdgeEndpointDetail {
  """
  Full host name that is used to connect to the endpoint. This is the part that will be placed into an agent config named `infinite_tracing.trace_observer.host`.
  """
  host: String!

  """
  Port that is used to connect to the endpoint. This is the part that will be placed into an agent config named `infinite_tracing.trace_observer.port`.
  """
  port: Int!
}

"""Policy fields to be updated."""
input AlertsPolicyUpdateInput {
  """
  Determines how incidents are created for critical violations of the conditions contained in the policy.
  """
  incidentPreference: AlertsIncidentPreference

  """Description of the policy."""
  name: String
}

"""
A vertex is a representation of a node in a graph: a host; an application; etc.
"""
type AiTopologyVertex {
  """The attributes used to define a vertex as a key-value entry."""
  definingAttributes: [AiTopologyDefiningAttribute!]!

  """ID of vertex."""
  id: ID!

  """Name of the vertex."""
  name: String!

  """Time rule was last updated."""
  updatedAt: EpochMilliseconds!

  """Class of the vertex."""
  vertexClass: AiTopologyVertexClass!
}

"""Represents a metric definition for a give metric selector value."""
type EntityGoldenOriginalDefinitionWithSelector {
  """The definition of the golden metric."""
  definition: EntityGoldenMetricDefinition!

  """
  The value of the selector. Currently, this is the value of the instrumentation provider.
  """
  selectorValue: String!
}

"""User information returned within Groups"""
type UserManagementGroupUser {
  """The email of the user."""
  email: String!

  """a value that uniquely identifies this object"""
  id: ID!

  """The full name of the user."""
  name: String!

  """The configured time zone of the user."""
  timeZone: String!
}

"""Represents a time window input."""
input TimeWindowInput {
  """
  The end time of the time window the number of milliseconds since the Unix epoch.
  """
  endTime: EpochMilliseconds!

  """
  The start time of the time window the number of milliseconds since the Unix epoch.
  """
  startTime: EpochMilliseconds!
}

"""Category fields to group by"""
enum AiNotificationsVariableCategory {
  """Condition category"""
  CONDITION

  """Entities category"""
  ENTITIES

  """Incident category"""
  INCIDENT

  """Issue category"""
  ISSUE

  """Default category"""
  OTHER

  """Policy category"""
  POLICY

  """Tags category"""
  TAGS

  """Workflow category"""
  WORKFLOW
}

"""
The details that were submitted when deleteing an events to metrics conversion rule.
"""
type EventsToMetricsDeleteRuleSubmission {
  """A submitted account id."""
  accountId: Int!

  """A submitted rule id."""
  ruleId: ID!
}

"""A customers organization group"""
type OrganizationOrganizationGroup {
  """The ID of the organization group"""
  id: ID!

  """The name of the organization group"""
  name: String!
}

"""Error object for Synthetic Private Location mutation request"""
type SyntheticsPrivateLocationMutationError {
  """String description of error"""
  description: String!

  """Enum type of error response"""
  type: SyntheticsPrivateLocationMutationErrorType!
}

"""Channel update object"""
input AiNotificationsChannelUpdate {
  """active"""
  active: Boolean

  """name"""
  name: String

  """properties"""
  properties: [AiNotificationsPropertyInput!]
}

"""The response for creating a notification channel."""
type AlertsNotificationChannelCreateResponse {
  """Error."""
  error: AlertsNotificationChannelCreateError

  """Notification channel."""
  notificationChannel: AlertsNotificationChannelMutation
}

"""Summary statistics for the Synthetic Monitor."""
type SyntheticMonitorSummaryData {
  """The number of locations that are currently failing."""
  locationsFailing: Int

  """The number of locations that are currently running."""
  locationsRunning: Int
  status: SyntheticMonitorStatus

  """
  The percentage of successful synthetic monitor checks in the last 24 hours.
  """
  successRate: Float
}

"""The possible status values for job results"""
enum OrganizationOrganizationCreateJobResultStatusEnum {
  """Jobs that have been created but not yet started running"""
  CREATED

  """Jobs that have failed and stopped running"""
  FAILED

  """Jobs that are still running"""
  RUNNING

  """Jobs that completed successfully"""
  SUCCEEDED
}

"""
A list of HTTP status codes, such as "404" or "500."
"""
scalar AgentApplicationSettingsErrorCollectorHttpStatus

"""The input object representing the group to remove"""
input UserManagementDeleteGroup {
  """The ID of the group being removed."""
  id: String!
}

"""Configure distributed traces from within browser apps."""
input AgentApplicationSettingsBrowserDistributedTracingInput {
  """Supplies allowed origins for distributed tracing in browser."""
  allowedOrigins: [String!]

  """Enables CORS for distributed tracing in browser."""
  corsEnabled: Boolean

  """
  Enables the use of the `newrelic` header for CORS requests with distributed tracing. [See Docs](https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/browser-data-distributed-tracing/#cors) for more information.
  """
  corsUseNewrelicHeader: Boolean

  """
  Enables CORS to use tracecontext headers for distributed tracing in browser.
  """
  corsUseTracecontextHeaders: Boolean

  """Enables distributed tracing in browser."""
  enabled: Boolean

  """
  Enables the `newrelic` header to be excluded in distributed tracing in browser.
  """
  excludeNewrelicHeader: Boolean
}

"""
The different error types for the entityRelationshipUserDefinedCreateOrReplace mutation.
"""
enum EntityRelationshipUserDefinedCreateOrReplaceErrorType {
  """
  Number of user-defined relationships for a given entity has exceeded the limit (2000 relationships).
  """
  LIMIT_EXCEEDED

  """The operation is not allowed."""
  NOT_ALLOWED

  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"""A grouping of similar error events with minimal fields."""
type ErrorsInboxErrorGroupOutline implements ErrorsInboxErrorGroupBase {
  """User assigned to the error group"""
  assignedUser: UserReference @deprecated

  """User assigned to the error group"""
  assignment: ErrorsInboxAssignment

  """Source entity Guid"""
  entityGuid: EntityGuid

  """NRQL formatted query for retrieving error events"""
  eventsQuery: Nrql

  """Time of first occurrence"""
  firstSeenAt: EpochMilliseconds

  """A unique identifier for the error group"""
  id: ID!

  """
  Indicates whether this error group was custom generated.
  - false = this is a system-generated error group
  - true = this is a custom error group, created and sent by the end user
  """
  isCustom: Boolean

  """Time of last occurrence"""
  lastSeenAt: EpochMilliseconds

  """Error group message"""
  message: String

  """Error group name"""
  name: String

  """The occurrences of this error group."""
  occurrences: ErrorsInboxOccurrences

  """Time of regression occurrence for regressed error groups"""
  regressedAt: EpochMilliseconds

  """List of resources associated with this error group"""
  resources(
    """Current query cursor"""
    cursor: String

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxResourceFilterInput
  ): ErrorsInboxResourcesResponse!

  """The source event of the error group."""
  source: String

  """Value to indicate the current state of the group."""
  state: ErrorsInboxErrorGroupState

  """The public URL of the error group detail view."""
  url: String
}

"""Filter permissions by role id"""
input MultiTenantAuthorizationPermissionFilterRoleIdInput {
  """performs an equals operation"""
  eq: ID!
}

"""
The object that's returned from successfully creating a shared account.
"""
type OrganizationCreateSharedAccountResponse {
  """The created shared account."""
  sharedAccount: OrganizationSharedAccount
}

"""Class of vertex."""
enum AiTopologyVertexClass {
  """Vertex class is application"""
  APPLICATION

  """Vertex class is cloudservice"""
  CLOUDSERVICE

  """Vertex class is cluster"""
  CLUSTER

  """Vertex class is datastore"""
  DATASTORE

  """Vertex class is host"""
  HOST

  """Vertex class is team"""
  TEAM
}

"""The Organization Role a Group should have access to"""
input AuthorizationManagementOrganizationAccessGrant {
  """The Role ID that will define the Organization access"""
  roleId: ID!
}

"""The result of a Step monitor update mutation"""
type SyntheticsStepMonitorUpdateMutationResult {
  """Errors that occurred during Step monitor update mutation"""
  errors: [SyntheticsMonitorUpdateError]!

  """The resulting Step monitor"""
  monitor: SyntheticsStepMonitor
}

"""BigQuery"""
input CloudGcpBigqueryIntegrationInput {
  """Fetch BigQuery Table metrics, disabled by default"""
  fetchTableMetrics: Boolean

  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Configuration for variables of type NRQL."""
input DashboardVariableNrqlQueryInput {
  """New Relic account ID(s) to issue the query against."""
  accountIds: [Int!]!

  """NRQL formatted query."""
  query: Nrql!
}

"""Provides all the available filters on the organization name"""
input OrganizationOrganizationNameInputFilter {
  """performs a contains operation"""
  contains: String

  """performs an equals operation"""
  eq: String
}

"""The monitor input values needed to create a Step monitor"""
input SyntheticsCreateStepMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsStepMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsScriptedMonitorLocationsInput!

  """The human readable identifier for the monitor"""
  name: String!

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod!

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus!

  """The steps that make up the script the monitor will run"""
  steps: [SyntheticsStepInput!]!

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""Input type for FixedHammingDistance expression"""
input AiDecisionsFixedHammingDistanceInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Int!

  """Value to be used in comparison."""
  value: String!
}

"""Test workflow mutation response including errors"""
type AiWorkflowsTestWorkflowResponse {
  """
  A list of errors that occurred while performing the test workflow action
  """
  errors: [AiWorkflowsTestResponseError!]

  """List of responses by channel id"""
  notificationResponses: [AiWorkflowsTestNotificationResponse!]

  """Whether the test was a success or not"""
  status: AiWorkflowsTestResponseStatus!
}

"""
Description of errors that may occur while attempting to update a trace observer.
"""
type EdgeUpdateTraceObserverResponseError {
  """Error message, with further detail to help resolve the issue."""
  message: String!

  """Error that may occur while attempting to create a trace observer."""
  type: EdgeUpdateTraceObserverResponseErrorType!
}

"""Types of opinions users can leave as feedback."""
enum AiDecisionsOpinion {
  """A dislike opinion"""
  DISLIKE

  """A like opinion"""
  LIKE
}

"""Response containing entity relationships."""
type EntityRelationshipRelatedEntitiesResult {
  """The next cursor for fetching additional paginated results."""
  nextCursor: String

  """The list of  entity relationships."""
  results: [EntityRelationshipEdge!]!
}

"""The customer id search for jobs"""
input OrganizationOrganizationCreateJobCustomerIdInput {
  """A customer id to search for jobs in"""
  eq: String!
}

"""Wrapper object for retention namespaces"""
type DataManagementRetention {
  """Is this field customizable?"""
  customizable: Boolean

  """The name as displayed in the UI"""
  displayName: String

  """The upper limit for the retention value"""
  maxRetentionInDays: Int

  """The lower limit for the retention value"""
  minRetentionInDays: Int

  """The name of a namespace"""
  namespace: String

  """The source of the namespace"""
  source: String
}

"""Invalid field object"""
type AiNotificationsFieldError {
  """Field name"""
  field: String!

  """Validation error"""
  message: String!
}

"""Environment created detailed result"""
type IncidentIntelligenceEnvironmentEnvironmentCreated {
  """The created environment"""
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment!
}

"""
Provides the available values of possible directions to sort the result
"""
enum OrganizationAccountShareSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"""
A group of entities defined by entity search queries and specific GUIDs
"""
interface CollectionEntity {
  collection(
    """The name of the collection to fetch."""
    name: String!
  ): EntityCollection
  guid: EntityGuid
}

"""enum of weekdays customers can select monitor downtimes to run"""
enum SyntheticsMonitorDowntimeWeekDays {
  """Select monitor downtime to run on Friday"""
  FRIDAY

  """Select monitor downtime to run on Monday"""
  MONDAY

  """Select monitor downtime to run on Saturday"""
  SATURDAY

  """Select monitor downtime to run on Sunday"""
  SUNDAY

  """Select monitor downtime to run on Thursday"""
  THURSDAY

  """Select monitor downtime to run on Tuesday"""
  TUESDAY

  """Select monitor downtime to run on Wednesday"""
  WEDNESDAY
}

"""The input object used to represent a rule."""
input WorkloadRegularRuleInput {
  """A list of entity GUIDs composing the rule."""
  entityGuids: [EntityGuid!]

  """
  A list of entity search queries used to retrieve the entities that compose the rule.
  """
  entitySearchQueries: [WorkloadEntitySearchQueryInput!]

  """The input object used to represent a rollup strategy."""
  rollup: WorkloadRollupInput!
}

"""Amazon Kinesis Data Streams"""
input CloudKinesisIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchShards: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Custom header input for monitor jobs"""
input SyntheticsCustomHeaderInput {
  """Header name"""
  name: String!

  """Header value"""
  value: String!
}

"""
Response for all destinations related mutation. Includes relevant destination and/or errors
"""
type AiNotificationsDestinationResponse {
  """Successfully mutated destination"""
  destination: AiNotificationsDestination

  """Error in destination mutation"""
  error: AiNotificationsError

  """Deprecated list of errors"""
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")
}

"""Fetch tags for all integrations Integration"""
type CloudAwsTagsGlobalIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Information about the anomaly upon which this analysis was based."""
type SuggestedNrqlQueryAnomaly {
  """The approximate time window of the anomalous region"""
  timeWindow: TimeWindow!
}

"""Simulation of a rule expression for a certain period of time."""
type AiDecisionsSimulation {
  """Example potential incident correlations."""
  candidateIncidents: [[ID!]!]!

  """Time simulation completed."""
  completedAt: EpochMilliseconds

  """Time simulation was created."""
  createdAt: EpochMilliseconds!

  """Error message if simulation failed."""
  errorMessage: String

  """ID of simulation."""
  id: ID!

  """Applicability of ingested incidents to the expression."""
  incidentsApplicable: [AiDecisionsSelectorApplicability!]!

  """Number of incidents correlated by simulation."""
  incidentsCorrelated: Int!

  """Number of incidents ingested by simulation."""
  incidentsIngested: Int!

  """Number of applicable incidents processed by simulation."""
  incidentsProcessed: Int!

  """Percentage of current progress of simulation."""
  progress: Float!

  """Time simulation was last updated."""
  updatedAt: EpochMilliseconds!
}

"""Type of decision"""
enum AiDecisionsDecisionType {
  """Decision type is explicit"""
  EXPLICIT

  """Decision type is global"""
  GLOBAL

  """Decision type is implicit"""
  IMPLICIT
}

"""The result of a Simple (ping) monitor update mutation"""
type SyntheticsSimpleMonitorUpdateMutationResult {
  """Errors that occurred during Simple (ping) monitor update mutation"""
  errors: [SyntheticsMonitorUpdateError]!

  """The resulting Simple (ping) monitor"""
  monitor: SyntheticsSimpleMonitor
}

"""Input type for AttributeExists expression"""
input AiDecisionsAttributeExistsInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!
}

"""
Validation and data handling rules to be applied to deployment input data.
"""
input ChangeTrackingDataHandlingRules {
  """Flags for validation, for example, ‘FAIL_ON_FIELD_LENGTH’."""
  validationFlags: [ChangeTrackingValidationFlag!]
}

"""AppSync"""
input CloudAwsAppsyncIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Type that define the rules for account subscription."""
enum NerdpackSubscriptionModel {
  """Product nerdpacks displayed to everybody, no subscription required ."""
  CORE

  """Any NR user can subscribe to the nerdpack."""
  GLOBAL

  """Only owner, master and allowed accounts can subscribe to the nerdpack."""
  OWNER_AND_ALLOWED
}

"""Input for deleting multiple trace filter rules by id"""
input EdgeDeleteTraceFilterRulesInput {
  """One or more SpanAttributeRule id(s) to be deleted."""
  spanAttributeRuleIds: [Int!]
}

"""Response type for create operations over entities."""
type ReferenceEntityCreateRepositoryResult {
  """The list of entities guids that have been created correctly."""
  created: [EntityGuid!]!

  """List of failures for the create operation."""
  failures: [ReferenceEntityCreateRepositoryError!]!

  """The list of entities guids that have been updated correctly."""
  updated: [EntityGuid!]!
}

"""Result of a mutation."""
type NerdStorageVaultDeleteSecretResult {
  """Any errors that happend during the mutation."""
  errors: [NerdStorageVaultResultError!]

  """The status of the mutation."""
  status: NerdStorageVaultResultStatus!
}

"""
The status of the workload, which is derived from the static and the automatic statuses configured. Any static status always overrides any other status values calculated automatically.
"""
enum WorkloadStatusValue {
  """The status of the workload is degraded."""
  DEGRADED

  """The status of the workload is disrupted."""
  DISRUPTED

  """The status of the workload is operational."""
  OPERATIONAL

  """The status of the workload is unknown."""
  UNKNOWN
}

"""The object contains the filters to be applied to the search."""
input ChangeTrackingSearchFilter {
  """
  Maximum number of deployments to be returned. Default value is 100 deployments.
  There is a maximum limit value of 2,000. If you set the limit greater than 2,000, the service will only return the latest 2,000 deployments."
  """
  limit: Int

  """
  Deployment search query string. The query string can search for a match on users and deployment IDs, and any other deployment event attributes.
  
  Operators available: Any valid NRQL operators, other than subqueries. For example, =, OR, AND, IN, LIKE, RLIKE, NO.
  
  For the full list of operators, see the where clause documentation [here](https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/get-started/nrql-syntax-clauses-functions/#sel-where)
  
  Note: Do not include keywords like SELECT, WHERE, SINCE, FACET, and TIMESERIES.
  
  Examples:
  
      • "user = 'Test User'"
      • "user LIKE '%Test User%' AND deploymentType IN ('BLUE_GREEN', 'CANARY')"
      • "user RLIKE r'Test.*|test.*'"
      • "version = '1.0' OR deploymentType IN ('BASIC')"
      • "deploymentId IN ('1234', '4567')"
      • "((user = 'Test User' AND version = '1.0') OR deploymentType in ('BLUE_GREEN', 'CANARY'))"
  """
  query: String

  """Search time window. If not specified, defaults to the past hour."""
  timeWindow: ChangeTrackingTimeWindowInputWithDefaults
}

"""
Transaction tracer settings related to APM applications. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.
"""
type AgentApplicationSettingsTransactionTracer {
  """DEPRECATED: Please use capture_memcache_keys on parent type."""
  captureMemcacheKeys: Boolean

  """
  If true, this enables the transaction tracer feature, enabling collection of transaction traces.
  """
  enabled: Boolean

  """
  If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately.
  """
  explainEnabled: Boolean

  """
  Relevant only when explain_enabled is true. Can be set to automatic configuration (APDEX_F) or manual (see explainThresholdValue).
  """
  explainThresholdType: AgentApplicationSettingsThresholdTypeEnum

  """
  Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explainEnabled is true and explainThresholdType is set to VALUE.
  """
  explainThresholdValue: Seconds

  """
  Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode.
  """
  logSql: Boolean

  """Obfuscation level for SQL queries reported in transaction trace nodes."""
  recordSql: AgentApplicationSettingsRecordSqlEnum

  """
  Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold.
  """
  stackTraceThreshold: Seconds

  """
  Relevant only when TransactionTracer is enabled. Can be set to automatic configuration (APDEX_F) or manual (see TransactionThresholdValue).
  """
  transactionThresholdType: AgentApplicationSettingsThresholdTypeEnum

  """
  Threshold (in seconds) that transactions with a duration longer than this threshold are eligible for transaction traces.  Relevant only when transaction tracer is enabled and transaction_threshold_type is set to VALUE.
  """
  transactionThresholdValue: Seconds
}

"""Result for bulk retention copy to an account"""
type DataManagementBulkCopyResult {
  """The failure destination accounts"""
  failure: [Int]

  """The successful destination accounts"""
  success: [Int]
}

"""Azure SQL Database"""
input CloudAzureSqlIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Settings that are applicable to APM applications and their agents."""
type AgentApplicationSettingsApmBase {
  """The name for the application"""
  alias: String

  """Access general settings for the application."""
  apmConfig: AgentApplicationSettingsApmConfig!

  """Enable or disable the capture of memcache keys."""
  captureMemcacheKeys: Boolean

  """
  Access error collector settings for the application. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing.
  """
  errorCollector: AgentApplicationSettingsErrorCollector

  """
  Access enabled state for the Java Flight Recorder. This is available only for the Java language agent version 8.0.0 or later.
  """
  jfr: AgentApplicationSettingsJfr

  """The name originally given to the application for reporting."""
  originalName: String

  """
  In APM, when transaction traces are collected, there may be additional Slow query data available.
  """
  slowSql: AgentApplicationSettingsSlowSql

  """
  Measures wall clock time, CPU time, and method call counts in your application's threads as they run.
  """
  threadProfiler: AgentApplicationSettingsThreadProfiler

  """
  Type of tracer used. APM's cross application tracing links transactions between APM apps in your service-oriented architecture (SOA).  Distributed tracing is an improvement on the cross application tracing feature, and is recommended for large, distributed systems.
  """
  tracerType: AgentApplicationSettingsTracer

  """Access transaction tracer settings for the application."""
  transactionTracer: AgentApplicationSettingsTransactionTracer
}

"""Step Functions"""
input CloudAwsStatesIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Configuration per environment"""
type AiIssuesConfigurationByEnvironment {
  """Configuration"""
  config: AiIssuesEnvironmentConfiguration
}

"""The `id` and data to update one or more keys."""
input ApiAccessUpdateUserKeyInput {
  """The `id` of the key you want to update."""
  keyId: String!

  """The name you want to assign to the key."""
  name: String

  """The notes you want to assign to the key."""
  notes: String
}

"""Azure Monitor metrics Integration"""
type CloudAzureMonitorIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """Specify if integration is active"""
  enabled: Boolean

  """
  Specify resource tags (in 'key:value' form) associated with the resources that you want to exclude from monitoring. Exclusion takes precedence over inclusion.
  """
  excludeTags: [String]

  """The cloud service integration identifier."""
  id: Int

  """
  Specify resource tags (in 'key:value' form) associated with the resources that you want to monitor. If empty, all resources will be monitored.
  """
  includeTags: [String]

  """The polling interval for metadata and tags, in seconds."""
  inventoryPollingInterval: Int

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The polling interval for metrics, in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """Specify each Azure resource type that you want to monitor."""
  resourceTypes: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""General Properties related to browser applications."""
type AgentApplicationSettingsBrowserProperties {
  """
  The configuration required to run the npm version of the JS agent. This is the "pure" JSON configuration block without surrounding HTML <script> tags.
  """
  jsConfig: AgentApplicationSettingsRawJsConfiguration

  """
  The configuration block required to run the npm version of the JS agent. This includes the HTML <script> tags.
  """
  jsConfigScript: String

  """
  The snippet of JavaScript used to copy/paste into your JavaScript app if you aren’t using an auto-instrumentating agent on the backend.
  """
  jsLoaderScript: String
}

"""
The result of which submitted events to metrics rules were successfully and unsuccessfully update.
"""
type EventsToMetricsUpdateRuleResult {
  """Rules that failed to get updated."""
  failures: [EventsToMetricsUpdateRuleFailure]

  """Rules that were successfully enabled or disabled."""
  successes: [EventsToMetricsRule]
}

"""Front Door Integration"""
type CloudAzureFrontdoorIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input object to lookup a feature setting"""
input DataManagementFeatureSettingLookup {
  """Key of the feature setting"""
  key: String
}

"""Criteria for applying filters to a search"""
input Nr1CatalogSearchFilter {
  """Filter the search results that match any in a list of category terms"""
  categories: [String!]

  """Filter the search results by a particular category"""
  category: String

  """Filter the search results that contain a set of component types"""
  components: [Nr1CatalogSearchComponentType!]

  """Filter the search results to those that match all keywords in the list"""
  keywords: [String!]

  """
  Filter the search results by install recipe name. This will be applied in an OR fashion. Schema is defined in the Open Install Library's recipe spec: https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition.
  """
  recipeNames: [String!]

  """Filter the search results that are of a specific type"""
  types: [Nr1CatalogSearchResultType!]
}

"""A Simple (ping) monitor resulting from a Simple monitor mutation"""
type SyntheticsSimpleMonitor {
  """The monitor advanced options"""
  advancedOptions: SyntheticsSimpleMonitorAdvancedOptions

  """The creation time of the monitor in millis"""
  createdAt: EpochMilliseconds

  """The unique client identifier for the Synthetics Monitor in New Relic"""
  guid: EntityGuid

  """The unique identifier of the monitor within the Synthetics domain"""
  id: ID

  """The locations the monitor runs from"""
  locations: SyntheticsLocations

  """The last modification time of the monitor in millis"""
  modifiedAt: EpochMilliseconds

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The uri the monitor runs against"""
  uri: String
}

"""The result of creating a mobile application."""
type AgentApplicationCreateMobileResult {
  """The application's account ID."""
  accountId: Int!

  """The mobile application's token."""
  applicationToken: SecureValue!

  """Additional information about the mobile application."""
  entityOutline: EntityOutline

  """The new mobile application's GUID."""
  guid: EntityGuid!

  """The application's name."""
  name: String!
}

"""This scalar represents a NerdStorage document."""
scalar NerdStorageDocument

"""The pipeline configuration for an account, with metadata."""
type LogConfigurationsPipelineConfiguration {
  """The account id."""
  accountId: Int!

  """Whether or not enrichment is disabled."""
  enrichmentDisabled: Boolean!

  """Whether or not JSON parsing is disabled."""
  jsonParsingDisabled: Boolean!

  """Whether or not obfuscation is disabled."""
  obfuscationDisabled: Boolean!

  """Whether or not parsing is disabled."""
  parsingDisabled: Boolean!

  """Whether or not patterns are enabled."""
  patternsEnabled: Boolean!

  """Whether or not recursive JSON parsing is disabled."""
  recursiveJsonParsingDisabled: Boolean!

  """Whether or not transformation is disabled."""
  transformationDisabled: Boolean!

  """
  Identifies the date and time when the configuration was last updated, or null if this has never been changed from the defaults.
  """
  updatedAt: DateTime

  """
  Identifies the user who has updated the configuration, or null if this has never been changed from the defaults.
  """
  updatedBy: UserReference
}

"""The day of the week used to configure a WEEKLY scheduled MutingRule"""
enum AlertsDayOfWeek {
  """Friday"""
  FRIDAY

  """Monday"""
  MONDAY

  """Saturday"""
  SATURDAY

  """Sunday"""
  SUNDAY

  """Thursday"""
  THURSDAY

  """Tuesday"""
  TUESDAY

  """Wednesday"""
  WEDNESDAY
}

"""The service level defined for a specific entity."""
type ServiceLevelDefinition {
  """The SLIs attached to the entity."""
  indicators: [ServiceLevelIndicator!]
}

"""Represents JSON nerdlet state data"""
scalar Nr1CatalogRawNerdletState

"""Destination statuses"""
enum AiNotificationsDestinationStatus {
  """Auth Error destination status"""
  AUTH_ERROR

  """Authentication Error destination status"""
  AUTHENTICATION_ERROR

  """Authorization Error destination status"""
  AUTHORIZATION_ERROR

  """Authorization Warning destination status"""
  AUTHORIZATION_WARNING

  """Configuration Error destination status"""
  CONFIGURATION_ERROR

  """Default destination status"""
  DEFAULT

  """Draft channel status"""
  DRAFT @deprecated(reason: "unused status")

  """Error channel status"""
  ERROR @deprecated(reason: "unused status")

  """External Server Error destination status"""
  EXTERNAL_SERVER_ERROR

  """Temporary Warning destination status"""
  TEMPORARY_WARNING

  """Tested channel status"""
  TESTED @deprecated(reason: "unused status")

  """Throttled channel status"""
  THROTTLED @deprecated(reason: "unused status")

  """Throttling Warning destination status"""
  THROTTLING_WARNING

  """Timeout Error destination status"""
  TIMEOUT_ERROR

  """Uninstalled destination status"""
  UNINSTALLED

  """Unknown Error destination status"""
  UNKNOWN_ERROR
}

"""
The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.
"""
type AgentApplicationSettingsErrorCollector {
  """Enables error collector."""
  enabled: Boolean

  """
  Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM.
  """
  expectedErrorClasses: [String!]

  """
  An array of individual HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score.
  """
  expectedErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]

  """
  Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM.
  """
  ignoredErrorClasses: [String!]

  """
  An array of individual HTTP status codes that should not be treated as errors.
  """
  ignoredErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]
}

"""A filter for Sharing Mode"""
input OrganizationAccountSharingModeFilterInput {
  """A Sharing Mode for the account."""
  eq: OrganizationSharingMode!
}

type IncidentIntelligenceEnvironmentActorStitchedFields {
  """
  A list of potential environments is returned based on the authorized accounts list
  """
  authorizedEnvironments(
    """Which environment kind to support when evaluating the query"""
    kind: IncidentIntelligenceEnvironmentSupportedEnvironmentKind
  ): [IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment!]

  """
  Retrieves a list of authorized accounts the user is authorized for that have been marked with consent by an admin of that account.
  """
  consentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  """
  Retrieves the incident intelligence environment based on the user's authentication and product entitlement, if an account id is not provided, the environment is detected based on the authorized accounts.In cases where a user have more then one potential environment, the account must be provided.
  """
  currentEnvironment(
    """Which environment kind to support when evaluating the query"""
    kind: IncidentIntelligenceEnvironmentSupportedEnvironmentKind
  ): IncidentIntelligenceEnvironmentCurrentEnvironmentResult
}

"""Result of create operation."""
type DashboardCreateResult {
  """Dashboard creation result."""
  entityResult: DashboardEntityResult

  """Expected errors while processing request."""
  errors: [DashboardCreateError]
}

"""
List of all potential error types that an entity create operation might return.
"""
enum ReferenceEntityCreateRepositoryErrorType {
  """Forbidden request"""
  FORBIDDEN

  """Invalid input"""
  INVALID_INPUT
}

"""
Represents the different types of content available when searching by news.
"""
enum WhatsNewContentType {
  """News the content of which is type of announcement."""
  ANNOUNCEMENT
}

"""Information about a facet count on a component"""
type Nr1CatalogComponentFacet {
  """The type of component"""
  component: Nr1CatalogSearchComponentType!

  """The count of results for this component"""
  count: Int!
}

"""Different scopes that can be used to filter the returned users."""
input UsersUserSearchScope {
  """
  Filter by string that will partially match a User's `email`.  Same as `name` it will partially match and case is ignored.
  """
  email: String

  """
  Filter by string that will partially match a User's `name`. So argument `name='Ste'` will match `name='Steve'` and case is ignored so `name='Koester'` would also match.
  """
  name: String

  """
  Will match both a User's `email` and `name`.  So argument `search='ple'`  will match `name='Johnny Appleseed'` and `email='mary@example.com'`.
  """
  search: String

  """
  List of 1 or more userIds to filter by. Will only return data for users with ids that match the full ID, no partial matching. (so 2 ids provided will yield at most 2 users)
  """
  userIds: [ID!]
}

"""Expected error types that can be returned by update operation."""
enum DashboardUpdateErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT
}

"""
Information about an event-to-metric rule which creates metrics from events.
"""
type EventsToMetricsRule {
  """Account with the event and where the metrics will be placed."""
  accountId: Int!

  """The time at which the rule was created"""
  createdAt: DateTime!

  """Additional information about the rule."""
  description: String

  """
  True means this rule is enabled. False means the rule is currently not creating metrics.
  """
  enabled: Boolean!

  """The id, uniquely identifying the rule."""
  id: ID!

  """The name of the rule. This must be unique within an account."""
  name: String!

  """Explains how to create metrics from events."""
  nrql: String!

  """The time at which the rule was updated"""
  updatedAt: DateTime!
}

"""Mutation result for the given acccount."""
type NerdpackMutationResultPerAccount {
  """Given account ID."""
  accountId: Int!

  """Error type if mutation failed."""
  reason: NerdpackMutationErrorType

  """Mutation result for the given acccount."""
  result: NerdpackMutationResult!
}

"""Trusted Advisor Integration"""
type CloudTrustedadvisorIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Cloud Spanner"""
input CloudGcpSpannerIntegrationInput {
  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""A user of New Relic scoped to an authentication domain."""
type UserManagementUser {
  """Email address of the user."""
  email: String

  """
  One of: "Not Verifiable", "Verified", and "Pending".
  
  Not Verifiable: the user's email does not require verification.
  
  Verified: the user's email requires verification and has been.
  
  Pending: the user's email requires verification and has not been.
  """
  emailVerificationState: String!

  """container for groups enabling cursor based pagination"""
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]
  ): UserManagementUserGroups

  """a value that uniquely identifies this object"""
  id: ID!

  """The last active date of the user."""
  lastActive: DateTime

  """The full name of the user."""
  name: String

  """The pending upgrade request for the user (if any)."""
  pendingUpgradeRequest: UserManagementPendingUpgradeRequest

  """
  Time zone of the user in IANA Time Zone database format, also known as the "Olson" time zone database format (for exmaple, "America/Los_Angeles").
  """
  timeZone: String

  """
  A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
  """
  type: UserManagementUserType!
}

"""A user defined group of entities."""
type WorkloadCollection {
  """The account the workload belongs to."""
  account: AccountReference

  """
  The moment when the object was created, represented in milliseconds since the Unix epoch.
  """
  createdAt: EpochMilliseconds!

  """The user who created the workload."""
  createdBy: UserReference

  """Relevant information about the workload."""
  description: String

  """
  A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.
  """
  entities: [WorkloadEntityRef!]

  """
  A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.
  """
  entitySearchQueries: [WorkloadEntitySearchQuery!]

  """The entity search query that returns the full collection of entities."""
  entitySearchQuery: String

  """The unique entity identifier of the workload in New Relic."""
  guid: EntityGuid!

  """The unique identifier of the workload."""
  id: Int!

  """The workload's name."""
  name: String!

  """The URL of the workload."""
  permalink: String!

  """Accounts that will be used to get entities from."""
  scopeAccounts: WorkloadScopeAccounts!

  """Status of the workload."""
  status: WorkloadWorkloadStatus!

  """
  The configuration that defines how the status of the workload is calculated.
  """
  statusConfig: WorkloadStatusConfig

  """
  The moment when the object was last updated, represented in milliseconds since the Unix epoch.
  """
  updatedAt: EpochMilliseconds

  """The user who last updated the workload."""
  updatedBy: UserReference
}

"""Memcache"""
input CloudGcpMemcacheIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Return type for queries given an account ID."""
type MetricNormalizationAccountStitchedFields {
  """Retrieves a rule."""
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  """Retrieves the rules for the account."""
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]
}

"""
An object that represents the golden metrics scoped by domain and type mutation result
"""
type EntityGoldenMetricsDomainTypeScopedResponse {
  """The list of the errors"""
  errors: [EntityGoldenGoldenMetricsError!]

  """The metrics results of the mutations"""
  metrics: EntityGoldenMetricsDomainTypeScoped
}

"""Input type for FixedGreaterThanOrEqual expression"""
input AiDecisionsFixedGreaterThanOrEqualInput {
  """Value to be used in comparison."""
  compared: Float!

  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!
}

"""Authentication interface"""
union AiNotificationsAuth = AiNotificationsBasicAuth | AiNotificationsOAuth2Auth | AiNotificationsTokenAuth

"""Details about a streaming rule"""
type StreamingExportRule {
  """The account associated to this streaming rule"""
  account: AccountReference

  """The AWS information configured for the streaming rule"""
  aws: StreamingExportAwsDetails

  """The Azure information configured for the streaming rule"""
  azure: StreamingExportAzureDetails

  """The time at which the process of creating the streaming rule began"""
  createdAt: EpochMilliseconds!

  """Additional information about the streaming rule"""
  description: String

  """The rule ID for this streaming rule"""
  id: ID!

  """A message returned by the latest API call"""
  message: String

  """The name of this streaming rule"""
  name: String!

  """NRQL used to select data to be exported"""
  nrql: Nrql

  """
  Whether or not to compress payloads before exporting them, and what compression format to use if so
  """
  payloadCompression: StreamingExportPayloadCompression

  """The state of this streaming rule"""
  status: StreamingExportStatus!

  """The last time the status of the streaming rule was updated"""
  updatedAt: EpochMilliseconds!
}

"""The Amazon Web Services cloud provider"""
type CloudAwsProvider implements CloudProvider {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud provider icon name."""
  icon: String!

  """The cloud provider identifier in NewRelic."""
  id: Int!

  """The cloud provider name."""
  name: String!

  """The New Relic AWS Account ID that will use the Role."""
  roleAccountId: String!

  """The external ID required to assume the Role by the New Relic Account."""
  roleExternalId: String!

  """Get details of one cloud provider service."""
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  """
  Get details of all the cloud provider services available for integration.
  """
  services: [CloudService!]!

  """The cloud provider short name."""
  slug: String!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Information pertaining to a specific step in the installation plan"""
type Nr1CatalogInstallPlanStep {
  """A short form description for the install plan step"""
  description: String

  """The human-readable name for the install plan step"""
  displayName: String!

  """
  Provides context about how the fallback install plan step should proceed
  """
  fallback: Nr1CatalogInstallPlanDirective

  """Used as a heading for the install plan step"""
  heading: String!

  """The unique identifier for the install plan step"""
  id: ID!

  """
  Provides context about how the primary install plan step should proceed
  """
  primary: Nr1CatalogInstallPlanDirective!

  """Provides context about where the install will occur"""
  target: Nr1CatalogInstallPlanTarget!
}

"""Provides all the available filters on the organization id"""
input OrganizationContractOrganizationIdInputFilter {
  """performs an equals operation"""
  eq: ID!
}

"""The input to delete keys."""
input ApiAccessDeleteInput {
  """A list of the ingest key `id`s that you want to delete."""
  ingestKeyIds: [String]

  """A list of the user key `id`s that you want to delete."""
  userKeyIds: [String]
}

"""
Missing constraint error. Constraints can be retrieved using suggestion api
"""
type AiNotificationsConstraintError {
  """Names of other constraints this constraint is dependent on"""
  dependencies: [String!]!

  """Name of the missing constraint"""
  name: String!
}

"""
An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
"""
type AuthorizationManagementAuthenticationDomain {
  """container for groups enabling cursor based pagination"""
  groups(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """an optional list of ids to filter by"""
    id: [ID!]
  ): AuthorizationManagementGroupSearch!

  """a value that uniquely identifies this object"""
  id: ID!

  """the name of the object"""
  name: String!
}

"""S3 Integration"""
type CloudS3Integration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input object for setting the type of tracing performed."""
input AgentApplicationSettingsTracerTypeInput {
  """The type of tracing being done."""
  value: AgentApplicationSettingsTracer
}

"""Error details about the rule that failed to be deleted and why."""
type NrqlDropRulesDeleteDropRuleFailure {
  """Information about why the delete failed."""
  error: NrqlDropRulesError!

  """Input information about on what was unable to be deleted."""
  submitted: NrqlDropRulesDeleteDropRuleSubmission!
}

"""Raw JSON payload with full configuration of a widget."""
scalar DashboardWidgetRawConfiguration

"""An input object used to represent an automatic status configuration."""
input WorkloadUpdateAutomaticStatusInput {
  """Whether the automatic status configuration is enabled or not."""
  enabled: Boolean!

  """
  An additional meta-rule that can consider all entities that haven't been evaluated by any other rule.
  """
  remainingEntitiesRule: WorkloadRemainingEntitiesRuleInput

  """A list of rules."""
  rules: [WorkloadUpdateRegularRuleInput!]
}

"""
The `Account` object provides general data about the account, as well as
being the entry point into more detailed data about a single account.

Account configuration data is queried through this object, as well as
telemetry data that is specific to a single account.
"""
type Account {
  """This field provides access to AgentEnvironment data."""
  agentEnvironment: AgentEnvironmentAccountStitchedFields

  """This field provides access to AiDecisions data."""
  aiDecisions: AiDecisionsAccountStitchedFields

  """This field provides access to AiIssues data."""
  aiIssues: AiIssuesAccountStitchedFields

  """This field provides access to AiNotifications data."""
  aiNotifications: AiNotificationsAccountStitchedFields

  """This field provides access to AiTopology data."""
  aiTopology: AiTopologyAccountStitchedFields

  """This field provides access to AiWorkflows data."""
  aiWorkflows: AiWorkflowsAccountStitchedFields

  """This field provides access to Alerts data."""
  alerts: AlertsAccountStitchedFields

  """
  The `cloud` field provides access to cloud integrations configuration data.
  
  For details and query examples visit
  [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
  """
  cloud: CloudAccountFields

  """This field provides access to DataManagement data."""
  dataManagement: DataManagementAccountStitchedFields

  """This field provides access to Edge data."""
  edge: EdgeAccountStitchedFields

  """This field provides access to EventsToMetrics data."""
  eventsToMetrics: EventsToMetricsAccountStitchedFields

  """This field provides access to HistoricalDataExport data."""
  historicalDataExport: HistoricalDataExportAccountStitchedFields
  id: Int

  """This field provides access to IncidentIntelligenceEnvironment data."""
  incidentIntelligenceEnvironment: IncidentIntelligenceEnvironmentAccountStitchedFields

  """This field provides access to Installation data."""
  installation: InstallationAccountStitchedFields
  licenseKey: String @deprecated(reason: "Please use `actor.apiAccess.keySearch` to access your license keys.")

  """This field provides access to LogConfigurations data."""
  logConfigurations: LogConfigurationsAccountStitchedFields

  """This field provides access to MetricNormalization data."""
  metricNormalization: MetricNormalizationAccountStitchedFields
  name: String

  """
  NerdStorage is a document database that is accessible within the New Relic One interface.
  This allows for persistence of Nerdpack data including users' configuration settings and preferences
  (like favorites), or any other small data sets.
  
  Conceptually, you can imagine NerdStorage as a nested key-value map.
  
  For information on New Relic NerdStorage, visit [our docs](https://developer.newrelic.com/build-tools/new-relic-one-applications/nerdstorage).
  
  To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
  """
  nerdStorage: NerdStorageAccountScope

  """
  Make a query to NRDB with a NRQL string.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  
  Example NRQL query:
  ```
  SELECT count(*) FROM Transaction TIMESERIES
  ```
  
  For more details on how to use NRQL in the GraphQL API, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api)
  """
  nrql(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrqlQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    query: Nrql!

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """This field provides access to NrqlDropRules data."""
  nrqlDropRules: NrqlDropRulesAccountStitchedFields

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrqlQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """This field provides access to Pixie data."""
  pixie: PixieAccountStitchedFields

  """This field provides access to StreamingExport data."""
  streamingExport: StreamingExportAccountStitchedFields

  """This field provides access to Synthetics data."""
  synthetics: SyntheticsAccountStitchedFields

  """This field provides access to Workload data."""
  workload: WorkloadAccountStitchedFields
}

"""List of integrations"""
input CloudAwsGovcloudDisableIntegrationsInput {
  """ALB/NLB integration"""
  alb: [CloudDisableAccountIntegrationInput]

  """API Gateway integration"""
  apigateway: [CloudDisableAccountIntegrationInput]

  """AutoScaling integration"""
  autoscaling: [CloudDisableAccountIntegrationInput]

  """Direct Connect integration"""
  awsDirectconnect: [CloudDisableAccountIntegrationInput]

  """Step Functions integration"""
  awsStates: [CloudDisableAccountIntegrationInput]

  """CloudTrail integration"""
  cloudtrail: [CloudDisableAccountIntegrationInput]

  """DynamoDB integration"""
  dynamodb: [CloudDisableAccountIntegrationInput]

  """EBS integration"""
  ebs: [CloudDisableAccountIntegrationInput]

  """EC2 integration"""
  ec2: [CloudDisableAccountIntegrationInput]

  """Elasticsearch Service integration"""
  elasticsearch: [CloudDisableAccountIntegrationInput]

  """ELB (Classic) integration"""
  elb: [CloudDisableAccountIntegrationInput]

  """EMR integration"""
  emr: [CloudDisableAccountIntegrationInput]

  """IAM integration"""
  iam: [CloudDisableAccountIntegrationInput]

  """Lambda integration"""
  lambda: [CloudDisableAccountIntegrationInput]

  """RDS integration"""
  rds: [CloudDisableAccountIntegrationInput]

  """Redshift integration"""
  redshift: [CloudDisableAccountIntegrationInput]

  """Route 53 integration"""
  route53: [CloudDisableAccountIntegrationInput]

  """S3 integration"""
  s3: [CloudDisableAccountIntegrationInput]

  """SNS integration"""
  sns: [CloudDisableAccountIntegrationInput]

  """SQS integration"""
  sqs: [CloudDisableAccountIntegrationInput]
}

"""Elemental MediaConvert Integration"""
type CloudAwsMediaconvertIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The automatic status configuration."""
type WorkloadAutomaticStatus {
  """Whether the automatic status configuration is enabled or not."""
  enabled: Boolean!

  """
  An additional meta-rule that can consider all entities that haven't been evaluated by any other rule.
  """
  remainingEntitiesRule: WorkloadRemainingEntitiesRule

  """A list of rules."""
  rules: [WorkloadRegularRule!]!
}

"""
The object that's returned from successfully revoking a shared account.
"""
type OrganizationRevokeSharedAccountResponse {
  """Information about the revoked shared account."""
  sharedAccount: OrganizationSharedAccount
}

"""Information about the result of the write secret mutation"""
type NerdStorageVaultWriteSecretResult {
  """Any errors that happend during the mutation."""
  errors: [NerdStorageVaultResultError!]

  """The status of the mutation."""
  status: NerdStorageVaultResultStatus!
}

"""A cloud services provider."""
interface CloudProvider {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud provider icon name."""
  icon: String!

  """The cloud provider identifier in NewRelic."""
  id: Int!

  """The cloud provider name."""
  name: String!

  """Get details of one cloud provider service."""
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  """
  Get details of all the cloud provider services available for integration.
  """
  services: [CloudService!]!

  """The cloud provider short name."""
  slug: String!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""An enum that represent the installation state."""
enum InstallationInstallStateType {
  """Defines a completed installation."""
  COMPLETED

  """Defines an installation that has been started."""
  STARTED
}

"""Memcache Integration"""
type CloudGcpMemcacheIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Live URL error type."""
enum DashboardLiveUrlErrorType {
  """General operation failure."""
  OPERATION_FAILURE

  """Unauthorized error."""
  UNAUTHORIZED

  """Not supported error."""
  UNSUPPORTED

  """URL not found in the system."""
  URL_NOT_FOUND
}

"""
The errors that can be returned when recording the Pixie terms of service acceptance
"""
enum PixieRecordPixieTosAcceptanceErrorType {
  """
  Some required data to record the Pixie terms of service acceptance is missing
  """
  MISSING_DATA
}

"""Google App Engine"""
input CloudGcpAppengineIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
NerdStorageVault data will only be visible to the User that created them.
"""
enum NerdStorageVaultActorScope {
  """Store and retrieve NerdStorageVault data for the current user."""
  CURRENT_USER
}

"""An organization's shared accounts, both given and received."""
type OrganizationAccountShareCollection {
  """An organization's shared accounts, both given and received."""
  items: [OrganizationAccountShare!]

  """
  an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

type NerdStorageActorScope {
  """
  Nerdpack documents are stored inside a collection.
  A collection can be thought of as a key-value storage where each document is one of these key-value pairs.
  
  To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
  """
  collection(
    """The collection from which documents will be retrieved."""
    collection: String!
  ): [NerdStorageCollectionMember]

  """
  A Nerdpack document is formed by an identifier (called documentId) and a set of data associated with it.
  
  To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
  """
  document(
    """The collection that the document belongs to."""
    collection: String!

    """The documentId to be retrieved."""
    documentId: String!
  ): NerdStorageDocument
}

"""Input type for FixedGreaterThan expression"""
input AiDecisionsFixedGreaterThanInput {
  """Value to be used in comparison."""
  compared: Float!

  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!
}

"""Cost Management"""
input CloudAzureCostmanagementIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify if additional cost data per tag should be collected. This field is case sensitive.
  """
  tagKeys: [String]
}

"""Tag entries for the monitor"""
input SyntheticsTag {
  """Name of the tag key"""
  key: String!

  """Values associated with the tag key"""
  values: [String]!
}

"""Configuration options for when a monthly monitor downtime should run"""
input SyntheticsMonitorDowntimeMonthlyFrequency {
  """
  Which dates a monitor downtime is run (only 1 of these can be selected)
  """
  daysOfMonth: [Int]

  """
  Which weekdays in the month the monitor downtime will run (only 1 of these can be selected)
  """
  daysOfWeek: SyntheticsDaysOfWeek
}

""""""
type AlertsAccountStitchedFields {
  """Retrieve a muting rule for Alerts violations."""
  mutingRule(
    """Muting rule identifier."""
    id: ID!
  ): AlertsMutingRule

  """List the muting rules for an account."""
  mutingRules: [AlertsMutingRule]

  """Retrieve a notification channel."""
  notificationChannel(
    """Notification channel identifier."""
    id: ID!
  ): AlertsNotificationChannel @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`destinations` query](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  """List the notification channels for an account."""
  notificationChannels(
    """
    Cursor for pagination. Supplied by a previous `notificationChannels` query.
    """
    cursor: String
  ): AlertsNotificationChannelsResultSet @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`destinations` query](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  """Retrieve a specific NRQL condition."""
  nrqlCondition(
    """NRQL condition identifier."""
    id: ID!
  ): AlertsNrqlCondition

  """List NRQL conditions according to search criteria."""
  nrqlConditionsSearch(
    """
    Cursor for pagination. Supplied by a previous `NrqlConditionsSearch` query.
    """
    cursor: String

    """Search criteria used to filter the returned list NRQL conditions."""
    searchCriteria: AlertsNrqlConditionsSearchCriteriaInput
  ): AlertsNrqlConditionsSearchResultSet

  """List Alerts policies according to search criteria."""
  policiesSearch(
    """Cursor for pagination. Supplied by a previous `PoliciesSearch` query."""
    cursor: String

    """Search criteria used to filter the returned list of policies."""
    searchCriteria: AlertsPoliciesSearchCriteriaInput
  ): AlertsPoliciesSearchResultSet

  """Retrieve a specific Alerts policy."""
  policy(
    """Policy identifier."""
    id: ID!
  ): AlertsPolicy
}

"""
Input data that maps hosts to alias names for grouping and identification purposes.
"""
input AgentApplicationSettingsNetworkAliasesInput {
  """An alternative name that can be used to reference the hostnames."""
  alias: String!

  """A list of hostnames to associate with an alias."""
  hosts: [String!]!
}

"""
A rule for setting a data retention value for a particular event namespace on an account
"""
type DataManagementRule {
  """The UNIX timestamp when the event retention rule went into effect"""
  createdAt: EpochSeconds

  """The New Relic ID of the user who created the event retention rule"""
  createdById: Int

  """The UNIX timestamp when the event retention rule was deleted"""
  deletedAt: EpochSeconds

  """The New Relic ID of the user who deleted the event retention rule"""
  deletedById: Int

  """The event retention rule's unique identifier"""
  id: ID

  """The namespace the event retention rule applies to"""
  namespace: String

  """Length of time data will be retained (in days)"""
  retentionInDays: Int
}

"""Composer Integration"""
type CloudGcpComposerIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

type NerdStorageVaultActorStitchedFields {
  """Fetch a single secret by key."""
  secret(
    """The unique identifier used to look up the secret value"""
    key: String!
  ): NerdStorageVaultSecret

  """
  List the keys and values of all secrets
  you have access to for the current scope and nerdpack.
  """
  secrets: [NerdStorageVaultSecret!]!
}

"""Compute Engine Integration"""
type CloudGcpVmsIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Filter issues"""
input AiIssuesFilterIssues {
  """A list of condition ids associated with an issue."""
  conditionIds: [Int!]

  """
  A string to filter results that includes this string on key issue attributes (examples: condition, entity, ...). Case sensitive.
  """
  contains: String

  """Entity guids associated with an issue."""
  entityGuids: [EntityGuid!]

  """Entity types associated with an issue."""
  entityTypes: [String!]

  """A list of unique issue identifiers."""
  ids: [ID!]

  """For acknowledged issues"""
  isAcknowledged: Boolean

  """For correlated issues"""
  isCorrelated: Boolean

  """Filtering for muting states"""
  mutingStates: [AiIssuesIssueMutingState!]

  """A list of policy ids associated with an issue."""
  policyIds: [Int!]

  """
  A list of priorities associated with an issue. Can be: 'CRITICAL', 'HIGH', 'MEDIUM' or 'LOW'
  """
  priority: [String!]

  """
  A list of sources associated with an issue.
  Sources can be:
  - 'newrelic' (indicating data originating from the NewRelic platform)
  - 'rest' (indicating data originating from external sources via api)
  """
  sources: [String!]

  """A list of states associated with an issue."""
  states: [AiIssuesIssueState!]
}

"""A collection of permissions"""
type MultiTenantAuthorizationPermissionCollection {
  """collection of permissions"""
  items: [MultiTenantAuthorizationPermission!]!

  """
  an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

"""A Granted Role represents the access given to a group."""
type AuthorizationManagementGrantedRole {
  """the account that this role grants access to"""
  accountId: Int

  """the name of the object"""
  displayName: String

  """the group that this role grants access to"""
  groupId: ID

  """a value that uniquely identifies this object"""
  id: ID!

  """the name of the object"""
  name: String!

  """the organization this role grants access to"""
  organizationId: ID

  """the role that defines this access"""
  roleId: Int!

  """the type of the role"""
  type: ID!
}

"""Provides the available values for authentication type"""
enum OrganizationAuthenticationTypeEnum {
  """Authentication not configured"""
  DISABLED

  """Heroku Single Sign-On"""
  HEROKU_SSO

  """Username and password authentication"""
  PASSWORD

  """SAML Single Sign-On"""
  SAML_SSO
}

"""A secure credential entity outline."""
type SecureCredentialEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The description of the entity."""
  description: String

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The domain-specific identifier for the entity."""
  secureCredentialId: ID

  """Summary statistics for the Synthetic Monitor Secure Credential."""
  secureCredentialSummary: SecureCredentialSummaryData

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String

  """The time at which the entity was last updated."""
  updatedAt: EpochMilliseconds
}

"""Input type for FixedLevenshtein expression"""
input AiDecisionsFixedLevenshteinInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Int!

  """Value to be used in comparison."""
  value: String!
}

"""Possible options to sort search results"""
enum Nr1CatalogSearchSortOption {
  """Sort the search results alphabetically"""
  ALPHABETICAL

  """Sort the search results by most popular"""
  POPULARITY

  """Sort the search results by the most relevant to the search query"""
  RELEVANCE

  """Sort the search results alphabetically in reverse order"""
  REVERSE_ALPHABETICAL
}

"""Input for creating an obfuscation action on a rule being created."""
input LogConfigurationsCreateObfuscationActionInput {
  """
  Attribute names for action. An empty list applies the action to all the attributes.
  """
  attributes: [String!]!

  """Expression Id for action."""
  expressionId: ID!

  """Obfuscation method to use."""
  method: LogConfigurationsObfuscationMethod!
}

"""
A structured representation of a handled exception in a mobile application.
"""
type StackTraceMobileExceptionStackTrace {
  """Stack trace frames."""
  frames: [StackTraceMobileExceptionStackTraceFrame]
}

"""
Expected default error types as result of mutating an existing parsing rule.
"""
enum LogConfigurationsParsingRuleMutationErrorType {
  """Invalid Grok"""
  INVALID_GROK

  """Number format error. ID should be convertible to int."""
  INVALID_ID

  """Invalid NRQL"""
  INVALID_NRQL

  """Couldn't find the specified parsing rule."""
  NOT_FOUND
}

"""Input condition to select query records."""
input QueryHistoryQueryHistoryOptionsInput {
  """Total number of query records to be returned."""
  limit: Int
}

"""An allowed action"""
type MultiTenantAuthorizationPermission {
  """The kind of access"""
  category: MultiTenantAuthorizationPermissionCategoryEnum

  """The feature the permission controls access to"""
  feature: String

  """a value that uniquely identifies this object"""
  id: ID!

  """Name of the permission if category is OTHER"""
  name: String

  """The product the permission controls access to"""
  product: String
}

"""
The type of ingest key, which dictates what types of agents can use it to report.
"""
enum ApiAccessIngestKeyType {
  """
  Ingest keys of type `BROWSER` mean browser agents will use them to report data to New Relic.
  """
  BROWSER

  """
  For ingest keys of type `LICENSE`: APM and Infrastructure agents use the key to report data to New Relic.
  """
  LICENSE
}

"""User assigned to an error group."""
type ErrorsInboxAssignment {
  """Email address of the user."""
  email: String

  """Additional user data for New Relic users."""
  userInfo: UserReference
}

"""The specific type of entity"""
enum EntityType {
  """An APM Application"""
  APM_APPLICATION_ENTITY

  """A database instance seen by an APM Application"""
  APM_DATABASE_INSTANCE_ENTITY

  """An external service seen by an APM Application"""
  APM_EXTERNAL_SERVICE_ENTITY

  """A Browser Application"""
  BROWSER_APPLICATION_ENTITY

  """A Dashboard entity"""
  DASHBOARD_ENTITY

  """
  An External entity. For more information about defining External entities, see the [open source documentation](https://github.com/newrelic-experimental/entity-synthesis-definitions).
  """
  EXTERNAL_ENTITY

  """A Generic entity with no detailed data"""
  GENERIC_ENTITY

  """An Infrastructure entity"""
  GENERIC_INFRASTRUCTURE_ENTITY

  """An Infrastructure Integration AWS Lambda Function entity"""
  INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY

  """An Infrastructure Host entity"""
  INFRASTRUCTURE_HOST_ENTITY

  """A Key Transaction entity"""
  KEY_TRANSACTION_ENTITY

  """A Mobile Application"""
  MOBILE_APPLICATION_ENTITY

  """A Secure Credential entity"""
  SECURE_CREDENTIAL_ENTITY

  """A Synthetic Monitor entity"""
  SYNTHETIC_MONITOR_ENTITY

  """A Team Entity"""
  TEAM_ENTITY

  """A Third Party Service entity"""
  THIRD_PARTY_SERVICE_ENTITY

  """A entity that is unavailable"""
  UNAVAILABLE_ENTITY

  """A Workload entity"""
  WORKLOAD_ENTITY
}

"""Available keys for sorting groups"""
enum UserManagementGroupSortKey {
  """Sort by display name"""
  DISPLAY_NAME

  """Sort by ID"""
  ID
}

"""Agent Release Filter"""
enum AgentReleasesFilter {
  ANDROID
  BROWSER
  DOTNET
  ELIXIR
  GO
  INFRASTRUCTURE
  IOS
  JAVA
  NODEJS
  PHP
  PYTHON
  RUBY
  SDK
}

"""Visualization configuration."""
type DashboardWidgetVisualization {
  """
  This field can either have a known type like `viz.area` or `<nerdpack-id>.<visualization-id>` in the case of custom visualizations.
  """
  id: String
}

"""Type of Filter"""
enum AiWorkflowsOperator {
  """String or list attribute contains this value"""
  CONTAINS

  """String or list attribute does not contain this value"""
  DOES_NOT_CONTAIN

  """String or Numeric attribute does not equal this value"""
  DOES_NOT_EQUAL

  """Element in list attribute does not exactly match this value"""
  DOES_NOT_EXACTLY_MATCH

  """String attribute ends with this value"""
  ENDS_WITH

  """String or Numeric attribute equals this value"""
  EQUAL

  """Element in list attribute exactly matches this value"""
  EXACTLY_MATCHES

  """Numeric attribute is greater or equal to this value"""
  GREATER_OR_EQUAL

  """Numeric attribute is greater than this value"""
  GREATER_THAN

  """Boolean attribute equals value"""
  IS

  """Boolean attribute does not equal value"""
  IS_NOT

  """Numeric attribute is less or equal to this value"""
  LESS_OR_EQUAL

  """Numeric attribute is less than this value"""
  LESS_THAN

  """String attribute starts with this value"""
  STARTS_WITH
}

"""The settings of a browser application."""
type AgentApplicationApmBrowserSettings {
  """Configure cookies. The default is enabled: true."""
  cookiesEnabled: Boolean!

  """
  Configure distributed tracing in browser apps. The default is enabled: true.
  """
  distributedTracingEnabled: Boolean!

  """
  Determines which browser loader will be configured. The default is "SPA".
  """
  loaderType: AgentApplicationBrowserLoader!
}

"""The definition of a remaining entities rule."""
type WorkloadRemainingEntitiesRule {
  """The rollup strategy."""
  rollup: WorkloadRemainingEntitiesRuleRollup!
}

"""Represents the location of an install"""
type Nr1CatalogInstallPlanTarget {
  """Provides context on the location the install will take place"""
  destination: Nr1CatalogInstallPlanDestination!

  """Provides context for the operating system that will be targeted"""
  os: [Nr1CatalogInstallPlanOperatingSystem!]!

  """Provides context for the type of installation that will take place"""
  type: Nr1CatalogInstallPlanTargetType!
}

"""Input type for RelativeCommonPrefix expression"""
input AiDecisionsRelativeCommonPrefixInput {
  """Value to be used in comparison."""
  value: String!
}

"""The details that were submitted when creating a drop rule."""
type NrqlDropRulesCreateDropRuleSubmission {
  """The account the targeted data report to."""
  accountId: Int!

  """
  The type of drop rule you want. This changes the way your NRQL string is interpreted.
  """
  action: NrqlDropRulesAction!

  """Additional information about the rule."""
  description: String

  """
  The NRQL string used to match data you want to take the specified action on.
  """
  nrql: String!
}

"""Revoke live URL result."""
type DashboardRevokeLiveUrlResult {
  """The list of errors, if any."""
  errors: [DashboardLiveUrlError]

  """
  The unique identifier of the public live URL if revoked successfully, null otherwise.
  """
  uuid: ID
}

"""An account's current retention values for a namespace"""
type DataManagementRenderedRetention {
  """The account id for the event retention"""
  accountId: Int

  """The namespace for the event retention"""
  namespace: String

  """Base retention value for an event namespace"""
  namespaceLevelRetention: DataManagementNamespaceLevelRetention

  """The UNIX timestamp when the retention was last updated"""
  updatedAt: EpochSeconds
}

"""Dashboard input."""
input DashboardInput {
  """Brief text describing the dashboard."""
  description: String

  """The name of the dashboard."""
  name: String!

  """A nested block of all pages belonging to the dashboard."""
  pages: [DashboardPageInput!]!

  """Permissions to set level of visibility & editing."""
  permissions: DashboardPermissions!

  """Dashboard-local variable definitions."""
  variables: [DashboardVariableInput!]
}

"""A decision used to compare incidents and subsequently merge issues."""
type AiDecisionsDecision {
  """Internal data associated with this decision."""
  annotations: [AiDecisionsAnnotationEntry!]!

  """Length of the window in which incidents are compared."""
  correlationWindowLength: Milliseconds

  """Time decision was created."""
  createdAt: EpochMilliseconds!

  """Creator of decision."""
  creator: UserReference

  """Expression to use to compare incidents."""
  decisionExpression: AiDecisionsRuleExpression!

  """Type of decision."""
  decisionType: AiDecisionsDecisionType!

  """Description of decision."""
  description: String

  """ID of decision."""
  id: ID!

  """External data associated with this decision."""
  metadata: AiDecisionsRuleMetadata!

  """Number of correlations within a window required to merge issues."""
  minCorrelationThreshold: Int!

  """Name of decision."""
  name: String!

  """Configuration to allow decision to override issue properties."""
  overrideConfiguration: AiDecisionsOverrideConfiguration

  """Creation source of decision."""
  source: AiDecisionsRuleSource!

  """Current state of decision."""
  state: AiDecisionsDecisionState!

  """Time decision was last updated."""
  updatedAt: EpochMilliseconds!
}

"""A human-readable definition of an NRDB Event Type Attribute"""
type EventAttributeDefinition {
  """This attribute's category"""
  category: String @deprecated(reason: "This field no longer returns data.")

  """A short description of this attribute"""
  definition: String

  """The New Relic docs page for this attribute"""
  documentationUrl: String

  """The human-friendly formatted name of the attribute"""
  label: String

  """The name of the attribute"""
  name: String
}

"""Error object for Synthetics monitor update request"""
type SyntheticsMonitorUpdateError {
  """String description of error"""
  description: String!

  """Enum of error that was returned during monitor update"""
  type: SyntheticsMonitorUpdateErrorType!
}

"""Autogenerated return type of RenameAccount"""
type CloudRenameAccountPayload {
  """The list of errors."""
  errors: [CloudAccountMutationError!]!

  """The updated linked accounts."""
  linkedAccounts: [CloudLinkedAccount!]!
}

"""Overview of a graph; all edges and vertices."""
type AiTopologyGraph {
  """List of all edges in this graph."""
  edges: [AiTopologyEdge!]!

  """List of all vertices in this graph."""
  vertices: [AiTopologyVertex!]!
}

"""
Details tracing summary data for the provided `EntityGuid` that occurred during the provided `startTime` and `endTime`
"""
type DistributedTracingEntityTracingSummary {
  """The number of traces where this entity produced an error"""
  errorTraceCount: Int

  """
  The percentage of error traces produced by this entity compared to all error traces in the system
  """
  percentOfAllErrorTraces: Float
}

"""The location(s) from which a non-scripted monitor runs"""
input SyntheticsLocationsInput {
  """Existing private location(s) in which the monitor will run"""
  private: [String]

  """
  Publicly available location(s) in which the monitor will run. For formatting tips, see [this link](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-synthetics-tutorial/#location-field)
  """
  public: [String]
}

"""Available keys for sorting users"""
enum MultiTenantIdentityUserSortKey {
  """User email address"""
  EMAIL

  """User id"""
  ID

  """User last active date"""
  LAST_ACTIVE

  """User name"""
  NAME
}

"""Indicates where this collection is used"""
enum EntityCollectionType {
  """Collections that define the entities that belong to a team"""
  TEAM

  """Collections that define the entities that belong to a workload"""
  WORKLOAD

  """
  Collections that define the entity groups that are used to calculate the status of a workload
  """
  WORKLOAD_STATUS_RULE_GROUP
}

"""Configuration options for a monitor downtime that runs daily"""
input SyntheticsMonitorDowntimeDailyConfig {
  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  endRepeat: SyntheticsDateWindowEndConfig

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""Agent Feature Filter"""
enum AgentFeaturesFilter {
  DOTNET
  ELIXIR
  GO
  HTML
  JAVA
  MOBILE
  NODEJS
  PHP
  PYTHON
  RUBY
  SDK
}

"""Autogenerated return type of CreateUser."""
type UserManagementCreateUserPayload {
  """The user that was created"""
  createdUser: UserManagementCreatedUser
}

"""An async organization creation result"""
type OrganizationOrganizationCreateAsyncResult {
  """Organization Creation Async Job Customer"""
  customer: OrganizationOrganizationCreateAsyncCustomerResult

  """Organization Creation Async Job Result"""
  job: OrganizationOrganizationCreateAsyncJobResult!

  """Organization Creation Async Job Organization"""
  organization: OrganizationOrganizationCreateAsyncOrganizationResult
}

type LogConfigurationsAccountStitchedFields {
  """Look up for all data partition rules for a given account."""
  dataPartitionRules: [LogConfigurationsDataPartitionRule!]

  """Look up for all obfuscation expressions for a given account"""
  obfuscationExpressions: [LogConfigurationsObfuscationExpression!]

  """Look up for all obfuscation rules for a given account."""
  obfuscationRules: [LogConfigurationsObfuscationRule!]

  """Look up for all parsing rules for a given account."""
  parsingRules: [LogConfigurationsParsingRule!]

  """Look up pipeline configuration for a given account."""
  pipelineConfiguration: LogConfigurationsPipelineConfiguration

  """Test a Grok pattern against a list of log lines."""
  testGrok(
    """The Grok pattern to test."""
    grok: String!

    """The log lines to test the Grok pattern against."""
    logLines: [String!]!
  ): [LogConfigurationsGrokTestResult!]
}

"""
An input object used to represent an automatic status configuration. If not provided, a status configuration will be created by default.
"""
input WorkloadAutomaticStatusInput {
  """Whether the automatic status configuration is enabled or not."""
  enabled: Boolean!

  """
  An additional meta-rule that can consider all entities that haven't been evaluated by any other rule.
  """
  remainingEntitiesRule: WorkloadRemainingEntitiesRuleInput

  """A list of rules."""
  rules: [WorkloadRegularRuleInput!]
}

"""Filters for the suggestions object"""
enum AiNotificationsSuggestionFilterType {
  """Contains specific string"""
  CONTAINS

  """Starts with a specific string"""
  STARTSWITH
}

"""A Dashboard entity outline."""
type DashboardEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The date and time the dashboard was created"""
  createdAt: DateTime

  """The parent entity `guid` of the dashboard."""
  dashboardParentGuid: EntityGuid

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The owner information of the dashboard."""
  owner: DashboardEntityOwnerInfo

  """The url to the entity."""
  permalink: String

  """The permissions of the dashboard."""
  permissions: DashboardEntityPermissions

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String

  """The date and time the dashboard was updated"""
  updatedAt: DateTime
}

"""Channel statuses"""
enum AiNotificationsChannelStatus {
  """Configuration Error channel status"""
  CONFIGURATION_ERROR

  """Configuration Warning channel status"""
  CONFIGURATION_WARNING

  """Default channel status"""
  DEFAULT

  """Draft channel status"""
  DRAFT @deprecated(reason: "unused status")

  """Error channel status"""
  ERROR @deprecated(reason: "unused status")

  """Tested channel status"""
  TESTED @deprecated(reason: "unused status")

  """Throttled channel status"""
  THROTTLED @deprecated(reason: "unused status")

  """Unknown Error channel status"""
  UNKNOWN_ERROR
}

"""The time window when the MutingRule should actively mute violations."""
type AlertsMutingRuleSchedule {
  """
  The datetime stamp when the MutingRule schedule should stop repeating.
  This is in ISO 8601 format with offset.
  
  Example: `'2020-07-10T15:00:00-07:00'`
  
  Note: Either `endRepeat` or `repeatCount` should be used to end a MutingRule schedule.
  Both fields should not be provided together.
  """
  endRepeat: DateTime

  """
  The datetime stamp representing when the MutingRule should end.
  This is in ISO 8601 format with offset.
  
  Example: `'2020-07-10T15:00:00-07:00'`
  """
  endTime: DateTime

  """
  The datetime stamp representing the next scheduled end of a recurring MutingRule.
  This is in ISO 8601 format with offset.
  
  Example: `'2020-07-08T14:30:00-07:00'`
  
  Note: If a MutingRule is not set to recur, this will match the `endTime` field.
  """
  nextEndTime: DateTime

  """
  The datetime stamp representing the next scheduled start of a recurring MutingRule.
  This is in ISO 8601 format with offset.
  
  Example: `'2020-07-08T14:30:00-07:00'`
  
  Note: If a MutingRule is not set to recur, this will match the `startTime` field.
  """
  nextStartTime: DateTime

  """
  The frequency the MutingRule schedule repeats.
  If the MutingRule repeats `WEEKLY`, be sure to set `weeklyRepeatDays`.
  If the MutingRule does not repeat, use `null`.
  
  Example: `DAILY`
  """
  repeat: AlertsMutingRuleScheduleRepeat

  """
  The number of times the MutingRule schedule should repeat.
  
  Note: Either `repeatCount` or `endRepeat` should be used to end a MutingRule schedule.
  Both fields should not be provided together.
  """
  repeatCount: Int

  """
  The datetime stamp representing when the MutingRule should start.
  This is in ISO 8601 format with offset.
  
  Example: `'2020-07-08T14:30:00-07:00'`
  """
  startTime: DateTime

  """
  The time zone that applies to the MutingRule schedule.
  
  Example: `'America/Los_Angeles'`
  
  See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
  """
  timeZone: String!

  """
  The day(s) of the week that a MutingRule should repeat when the repeat field is set to `WEEKLY`.
  
  Example: `[MONDAY, WEDNESDAY]`
  """
  weeklyRepeatDays: [AlertsDayOfWeek!]
}

"""Settings that are applicable to mobile applications."""
type AgentApplicationSettingsMobileBase {
  """Network settings associated with the mobile application."""
  networkSettings: AgentApplicationSettingsMobileNetworkSettings

  """Enables viewing in-depth reports for mobile application crashes."""
  useCrashReports: Boolean
}

"""Issue priority"""
enum AiIssuesPriority {
  """Critical priority"""
  CRITICAL

  """High priority"""
  HIGH

  """Low priority"""
  LOW

  """Medium priority"""
  MEDIUM
}

"""A filter for OrganizationID"""
input OrganizationAccountOrganizationIdFilterInput {
  """An Organization ID"""
  eq: ID!
}

"""Represents a possible default value item."""
type DashboardVariableDefaultItem {
  """The value of this default item."""
  value: DashboardVariableDefaultValue
}

"""A grouping of users governed by the same user management settings"""
type OrganizationAuthenticationDomain {
  """Method of authenticating users"""
  authenticationType: OrganizationAuthenticationTypeEnum!

  """The authentication domain id"""
  id: ID!

  """The authentication domain name"""
  name: String!

  """The organization the authentication domain belongs to"""
  organizationId: ID!

  """Method of provisioning users"""
  provisioningType: OrganizationProvisioningTypeEnum!
}

"""Filter Object"""
type AiWorkflowsFilter {
  """Account Id of this Filter"""
  accountId: Int!

  """Filter Id"""
  id: ID!

  """Name of the Filter"""
  name: String!

  """Expressions that determine which issues will be handled"""
  predicates: [AiWorkflowsPredicate!]!

  """The type of the Filter"""
  type: AiWorkflowsFilterType!
}

"""The Group and Role another Group should have access to"""
input AuthorizationManagementGroupAccessGrant {
  """The Group ID the Role will grant access to"""
  groupId: ID!

  """The Role ID that will define the access"""
  roleId: ID!
}

"""Type that wraps the errors from a entity create operation."""
type ReferenceEntityCreateRepositoryError {
  """Guid related to the error."""
  guid: EntityGuid

  """User-friendly message describing the error."""
  message: String!

  """
  Describes all potential error types that a create operation might return.
  """
  type: ReferenceEntityCreateRepositoryErrorType!
}

"""Elastic Beanstalk Integration"""
type CloudElasticbeanstalkIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""MediaPackage VOD"""
input CloudAwsMediapackagevodIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""The `Seconds` scalar represents a duration in seconds"""
scalar Seconds

"""
Period of time from which the data to be displayed on the dashboard will be obtained.
"""
input DashboardSnapshotUrlTimeWindowInput {
  """
  The starting time of the time window. If specified, an endTime or a duration must also be specified.
  """
  beginTime: EpochMilliseconds

  """The duration of the time window."""
  duration: Milliseconds

  """
  The end time of the time window. If specified, a beginTime or a duration must also be specified.
  """
  endTime: EpochMilliseconds
}

"""Configure additional browser settings here."""
input AgentApplicationBrowserSettingsInput {
  """Configure cookies. The default is enabled: true."""
  cookiesEnabled: Boolean

  """
  Configure distributed tracing in browser apps. The default is enabled: true.
  """
  distributedTracingEnabled: Boolean

  """Determines which browser loader is configured. The default is "SPA"."""
  loaderType: AgentApplicationBrowserLoader
}

"""Channel object"""
type AiNotificationsChannel {
  """The accountId of the creator of the channel"""
  accountId: Int!

  """Is channel active"""
  active: Boolean!

  """Channel creation time"""
  createdAt: DateTime!

  """Related destination type"""
  destinationId: ID!

  """Channel id"""
  id: ID!

  """Channel name"""
  name: String!

  """Related product type"""
  product: AiNotificationsProduct!

  """List of destination property types"""
  properties: [AiNotificationsProperty!]!

  """Channel Status"""
  status: AiNotificationsChannelStatus!

  """Channel type"""
  type: AiNotificationsChannelType!

  """Channel last update time"""
  updatedAt: DateTime!

  """Message template creator userId"""
  updatedBy: Int!
}

"""
A suggested NRQL facet. Facet suggestions may be either a single attribute, or
a list of attributes in the case of multi-attribute facet suggestions.
"""
type NrqlFacetSuggestion {
  """
  A list of attribute names comprising the suggested facet.
  
  Raw attribute names will be returned here. Attribute names may need to be
  backtick-quoted before inclusion in a NRQL query.
  """
  attributes: [String]

  """
  A modified version of the input NRQL, with a `FACET ...` clause appended.
  If the original NRQL had a `FACET` clause already, it will be replaced.
  """
  nrql: Nrql
}

"""MySQL Flexible Server Integration"""
type CloudAzureMysqlflexibleIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Allow lists have two different types. They are either internal lists or user lists.
"""
enum AgentApplicationSegmentsListType {
  """INTERNAL refers to a list that has been generated by New Relic."""
  INTERNAL

  """USER refers to a list that has been generated by the customer."""
  USER
}

"""AWS Health"""
input CloudHealthIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Filter the allow lists by fields specified in this object."""
input AgentApplicationSegmentsSegmentAllowListFilters {
  """INTERNAL or USER. Defaults to USER"""
  listType: AgentApplicationSegmentsListType
}

"""The type of entity"""
enum EntitySearchQueryBuilderType {
  """An application"""
  APPLICATION

  """A dashboard"""
  DASHBOARD

  """A host"""
  HOST

  """A monitor"""
  MONITOR

  """A workload"""
  WORKLOAD
}

"""
Information for generating the condition NRQL query.
The output of data from this NRQL query will be compared to the condition terms to detect violations.
"""
input AlertsNrqlConditionQueryInput {
  """
  Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.
  
  By default, we evaluate the NRQL query in one-minute time windows. Start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.
  
  This value is the number of time windows we look back at the aggregated.
  
  Example: With an `evaluationOffset` of 3, the NRQL time window applied to your query will be:
  
  `SINCE 3 minutes ago UNTIL 2 minutes ago`
  """
  evaluationOffset: Int

  """NRQL syntax that defines the query."""
  query: Nrql!
}

"""Expected errors that can be returned by updateWidgetsInPage operation."""
type DashboardUpdateWidgetsInPageError {
  """Error description."""
  description: String

  """Error type."""
  type: DashboardUpdateWidgetsInPageErrorType!
}

"""
Configuration setting to apply either the show or hide strategy for network filtering.
"""
enum AgentApplicationSettingsNetworkFilterMode {
  """Disables both show and hide confurations."""
  DISABLED

  """Use the hide list configuration."""
  HIDE

  """Use the show list configuration."""
  SHOW
}

"""The result of a secure credential mutation"""
type SyntheticsSecureCredentialMutationResult {
  """
  The moment when the secure credential was created, represented in milliseconds since the Unix epoch.
  """
  createdAt: EpochMilliseconds

  """Description of the secure credential, if available"""
  description: String

  """An array containing errors, if any"""
  errors: [SyntheticsError]

  """The unique identifier of the secure credential, if available"""
  key: String

  """
  The moment when the secure credential was last updated, represented in milliseconds since the Unix epoch.
  """
  lastUpdate: EpochMilliseconds
}

"""The source generating the event data"""
type DataDictionaryDataSource {
  """Name of the source"""
  name: String!
}

"""Paginated information about Quickstarts"""
type Nr1CatalogQuickstartsListing {
  """Cursor used to fetch the next set of results"""
  nextCursor: String

  """The list of quickstart results"""
  results: [Nr1CatalogQuickstart!]!

  """The total number of quickstart results"""
  totalCount: Int!
}

"""A customer"""
type OrganizationCustomerContract {
  """The customer contract''s billing structure"""
  billingStructure: OrganizationBillingStructure

  """The customers id"""
  customerId: String!

  """The customer contracts ID"""
  id: ID!

  """The customer contracts organization groups"""
  organizationGroups(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationOrganizationGroupFilterInput
  ): OrganizationOrganizationGroupWrapper!

  """The customer contracts''s telemetry id"""
  telemetryId: String
}

"""
A `SpanAttributeRule` applies a filtering rule (keep or discard) to traces within a particular `TraceObserver`
"""
type EdgeSpanAttributeRule {
  """
  The action that this filter takes if it matches the provided attribute name and value
  """
  action: EdgeTraceFilterAction!

  """Globally unique identifier of this trace filter."""
  id: Int!

  """Name of the attribute that this filter matches on"""
  key: String!

  """Type of match to apply to the attribute name (EQUALS, LIKE)."""
  keyOperator: EdgeSpanAttributeKeyOperator!

  """Value of the attribute that this filter matches on."""
  value: String

  """
  Type of match to apply to the attribute value (EQUALS, LIKE, IS_NOT_NULL).
  """
  valueOperator: EdgeSpanAttributeValueOperator!
}

"""Collection of policies with pagination information."""
type AlertsPoliciesSearchResultSet {
  """
  Cursor pointing to the end of the current page of policy records. Null if final page.
  """
  nextCursor: String

  """Set of policies returned for the supplied cursor and criteria."""
  policies: [AlertsPolicy!]!

  """Total number of policy records for the given search criteria."""
  totalCount: Int!
}

"""The result of the entityRelationshipUserDefinedDelete mutation."""
type EntityRelationshipUserDefinedDeleteResult {
  """The list of errors that occurred when executing the mutation."""
  errors: [EntityRelationshipUserDefinedDeleteResultError!]
}

"""A list of rule details to be returned."""
type EventsToMetricsListRuleResult {
  """Event-to-metric rules to be returned."""
  rules: [EventsToMetricsRule]
}

"""Input type for FixedContains expression"""
input AiDecisionsFixedContainsInput {
  """Incident selector to be used in comparison."""
  container: AiDecisionsIncidentObjectInput!

  """Value to be used in comparison."""
  value: String!
}

"""A grouping of similar error events with all fields."""
type ErrorsInboxErrorGroup implements ErrorsInboxErrorGroupBase {
  """User assigned to the error group"""
  assignedUser: UserReference @deprecated

  """User assigned to the error group"""
  assignment: ErrorsInboxAssignment

  """Source entity Guid"""
  entityGuid: EntityGuid

  """NRQL formatted query for retrieving error events"""
  eventsQuery: Nrql

  """Time of first occurrence"""
  firstSeenAt: EpochMilliseconds

  """
  Versions running within 30 min after this error was first seen, ordered alphanumerically
  Note: This field requires additional queries that may slow down the response
  """
  firstSeenVersions: [ErrorsInboxVersion!]

  """A unique identifier for the error group"""
  id: ID!

  """
  Indicates whether this error group was custom generated.
  - false = this is a system-generated error group
  - true = this is a custom error group, created and sent by the end user
  """
  isCustom: Boolean

  """Time of last occurrence"""
  lastSeenAt: EpochMilliseconds

  """
  Versions running within 30 min before this error was last seen, ordered alphanumerically
  Note: This field requires additional queries that may slow down the response
  """
  lastSeenVersions: [ErrorsInboxVersion!]

  """Error group message"""
  message: String

  """Error group name"""
  name: String

  """The occurrences of this error group."""
  occurrences: ErrorsInboxOccurrences

  """Time of regression occurrence for regressed error groups"""
  regressedAt: EpochMilliseconds

  """List of resources associated with this error group"""
  resources(
    """Current query cursor"""
    cursor: String

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxResourceFilterInput
  ): ErrorsInboxResourcesResponse!

  """The source event of the error group."""
  source: String

  """Value to indicate the current state of the group."""
  state: ErrorsInboxErrorGroupState

  """The public URL of the error group detail view."""
  url: String
}

"""Cost Management Integration"""
type CloudAzureCostmanagementIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify if additional cost data per tag should be collected. This field is case sensitive.
  """
  tagKeys: [String]

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The time window when the MutingRule should actively mute violations."""
input AlertsMutingRuleScheduleUpdateInput {
  """
  The datetime stamp when the MutingRule schedule should stop repeating.
  This is in local ISO 8601 format without an offset.
  
  Example: `'2020-07-10T15:00:00'`
  
  Note: Either `endRepeat` or `repeatCount` should be used to end a MutingRule schedule.
  Both fields should not be provided together.
  """
  endRepeat: NaiveDateTime

  """
  The datetime stamp representing when the MutingRule should end.
  This is in local ISO 8601 format without an offset.
  
  Example: `'2020-07-10T15:00:00'`
  """
  endTime: NaiveDateTime

  """
  The frequency the MutingRule schedule repeats.
  If the MutingRule repeats `WEEKLY`, be sure to set `weeklyRepeatDays`.
  If the MutingRule does not repeat, use `null`.
  
  Example: `DAILY`
  """
  repeat: AlertsMutingRuleScheduleRepeat

  """
  The number of times the MutingRule schedule should repeat.
  
  Note: Either `repeatCount` or `endRepeat` should be used to end a MutingRule schedule.
  Both fields should not be provided together.
  """
  repeatCount: Int

  """
  The datetime stamp representing when the MutingRule should start.
  This is in local ISO 8601 format without an offset.
  
  Example: `'2020-07-08T14:30:00'`
  """
  startTime: NaiveDateTime

  """
  The time zone that applies to the MutingRule schedule.
  
  Example: `'America/Los_Angeles'`
  
  See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
  """
  timeZone: String

  """
  The day(s) of the week that a MutingRule should repeat when the repeat field is set to `WEEKLY`.
  
  Example: `[MONDAY, WEDNESDAY]`
  """
  weeklyRepeatDays: [AlertsDayOfWeek!]
}

"""A grant within the system"""
type MultiTenantAuthorizationGrant {
  """The group associated to the grant"""
  group: MultiTenantAuthorizationGrantGroup!

  """The id of the grant"""
  id: Int!

  """The role associated to the grant"""
  role: MultiTenantAuthorizationGrantRole!

  """The scope associated to the grant"""
  scope: MultiTenantAuthorizationGrantScope!
}

"""The monitor values that can be updated on a Cert Check monitor"""
input SyntheticsUpdateCertCheckMonitorInput {
  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The domain of the host that will have its certificate checked"""
  domain: String

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput

  """The human readable identifier for the monitor"""
  name: String

  """
  The desired number of remaining days until the certificate expires to trigger a monitor failure
  """
  numberDaysToFailBeforeCertExpires: Int

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""Results of the nerdpack versions query."""
type NerdpackVersionsResult {
  """Cursor that can be used to retrieve the next results page."""
  nextCursor: String

  """List of nerdpack version objects."""
  results: [NerdpackVersion]

  """
  Total amount of available version objects for the given nerdpack (including the ones not showed in the current page)
  """
  totalCount: Int
}

"""Information about an install plan component in a quickstart"""
type Nr1CatalogQuickstartInstallPlan implements Nr1CatalogQuickstartComponent {
  """Metadata associated with the install plan"""
  metadata: Nr1CatalogQuickstartInstallPlanMetadata! @deprecated(reason: "This field is no longer supported. Please use installer instead.")
}

"""Represents all the visualization types available for embedded charts."""
enum EmbeddedChartType {
  APDEX
  AREA
  BAR
  BASELINE
  BILLBOARD
  BULLET
  EMPTY
  EVENT_FEED
  FUNNEL
  HEATMAP
  HISTOGRAM
  JSON
  LINE
  MARKDOWN
  PIE
  SCATTER
  STACKED_HORIZONTAL_BAR
  TABLE
  TRAFFIC_LIGHT
  VERTICAL_BAR
}

"""
The list of operators to be used in a MutingRuleCondition. Each operator is limited to one value in the `values` list unless otherwise specified.
"""
enum AlertsMutingRuleConditionOperator {
  """Where attribute is any."""
  ANY

  """Where attribute contains value."""
  CONTAINS

  """Where attribute ends with value."""
  ENDS_WITH

  """Where attribute equals value."""
  EQUALS

  """Where attribute in values. (Limit 500)"""
  IN

  """Where attribute is blank."""
  IS_BLANK

  """Where attribute is not blank."""
  IS_NOT_BLANK

  """Where attribute does not contain value."""
  NOT_CONTAINS

  """Where attribute does not end with value."""
  NOT_ENDS_WITH

  """Where attribute does not equal value."""
  NOT_EQUALS

  """Where attribute not in values. (Limit 500)"""
  NOT_IN

  """Where attribute does not start with value."""
  NOT_STARTS_WITH

  """Where attribute starts with value."""
  STARTS_WITH
}

"""Types of errors that can be returned from a Monitor mutation request"""
enum SyntheticsMonitorUpdateErrorType {
  """Received a request missing required fields or containing invalid data"""
  BAD_REQUEST

  """An unknown error occurred while processing request to mutate monitor"""
  INTERNAL_SERVER_ERROR

  """
  Monitor not found for given guid (monitor does not exist on account or has already been deleted)
  """
  NOT_FOUND

  """Monitor update exceeds account subscription limits"""
  PAYMENT_REQUIRED

  """An error occurred while updating monitor script"""
  SCRIPT_ERROR

  """Monitor tags were not updated."""
  TAGGING_ERROR

  """User does not have authorization to perform monitor mutation."""
  UNAUTHORIZED

  """An unknown error occurred while processing request to update monitor"""
  UNKNOWN_ERROR
}

"""Information about a launcher in a Nerdpack"""
type Nr1CatalogLauncher implements Nr1CatalogNerdpackItem {
  """The unique identifier for the launcher."""
  id: ID!

  """Metadata associated with the launcher"""
  metadata: Nr1CatalogLauncherMetadata
}

"""Input type for RelativeGreaterThan expression"""
input AiDecisionsRelativeGreaterThanInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""We have three types of browser agents: Lite, Pro, and Pro+SPA."""
enum AgentApplicationSettingsBrowserLoaderInput {
  """Use PRO instead."""
  FULL @deprecated(reason: "Browsers which historically had the FULL loader will now return PRO as the loader type.")

  """
  Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
  """
  LITE

  """Don't use an agent."""
  NONE

  """
  Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
  """
  PRO

  """
  Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
  """
  SPA
}

"""Input type for FixedFuzzyWuzzyPartialRatio expression"""
input AiDecisionsFixedFuzzyWuzzyPartialRatioInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Value to be used in comparison."""
  value: String!
}

"""Result of a connection test"""
type AiNotificationsDestinationTestResponse {
  """Extra details (if available)"""
  details: String

  """Test response error"""
  error: AiNotificationsError

  """Deprecated list of errors"""
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """Test result - success or failure"""
  result: AiNotificationsResult!
}

"""Options applied to the variable"""
input DashboardVariableOptionsInput {
  """
  Only applies to variables of type NRQL. With this turned on, the time range for the NRQL query will override the time picker on dashboards and other pages. Turn this off to use the time picker as normal.
  """
  ignoreTimeRange: Boolean
}

"""Webhook basic auth"""
type AlertsWebhookBasicAuthInput {
  """Password"""
  password: SecureValue!

  """Username"""
  username: String!
}

"""A Synthetic Monitor entity outline."""
type SyntheticMonitorEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The Synthetic Monitor ID"""
  monitorId: ID

  """Summary statistics for the Synthetic Monitor."""
  monitorSummary: SyntheticMonitorSummaryData

  """The Synthetic Monitor type"""
  monitorType: SyntheticMonitorType

  """The URL being monitored by a `SIMPLE` or `BROWSER` monitor type."""
  monitoredUrl: String

  """The name of this entity."""
  name: String

  """The duration in minutes between Synthetic Monitor runs."""
  period: Minutes

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Pixie Project keys linked to a New Relic account"""
type PixiePixieProject {
  """Pixie API key"""
  apiKey: SecureValue

  """Pixie Deploy key"""
  deployKey: SecureValue
}

"""The input for creating a new Email notification channel."""
input AlertsEmailNotificationChannelCreateInput {
  """List of email recipients."""
  emails: [String!]!

  """Include details about the violation as a JSON attachment."""
  includeJson: Boolean!

  """Notification channel name."""
  name: String!
}

"""The result of a Script Browser monitor update mutation"""
type SyntheticsScriptBrowserMonitorUpdateMutationResult {
  """Errors that occurred during Script Browser monitor update mutation"""
  errors: [SyntheticsMonitorUpdateError]!

  """The resulting script browser monitor"""
  monitor: SyntheticsScriptBrowserMonitor
}

"""An object that represents the golden metrics scoped by domain and type"""
type EntityGoldenMetricsDomainTypeScoped {
  """Context for the golden metric"""
  context: EntityGoldenContext!

  """Domain type for the golden metrics"""
  domainType: DomainType!

  """Metrics for the domain and type"""
  metrics: [EntityGoldenMetric!]!
}

"""Configuration for variables of type NRQL."""
type DashboardVariableNrqlQuery {
  """New Relic account ID(s) to issue the query against."""
  accountIds: [Int]

  """NRQL formatted query."""
  query: Nrql!
}

"""An object that represents the golden tags scoped by domain and type"""
type EntityGoldenTagsDomainTypeScoped {
  """Context for the golden tags"""
  context: EntityGoldenContext!

  """Domain type for the golden tags"""
  domainType: DomainType!

  """Tags for the domain and type"""
  tags: [EntityGoldenTag!]!
}

"""The attributes for updating an account."""
input AccountManagementUpdateInput {
  """The ID for the account being updated."""
  id: Int!

  """The new account name."""
  name: String!
}

"""The advanced options inputs available for a Step monitor"""
input SyntheticsStepMonitorAdvancedOptionsInput {
  """Capture a screenshot during job execution"""
  enableScreenshotOnFailureAndScript: Boolean
}

"""A customer organization"""
type OrganizationCustomerOrganization {
  """The ID of the organization group"""
  contractId: ID

  """The ID of the customer"""
  customerId: String

  """The ID of the organization"""
  id: ID!

  """The name of the organization"""
  name: String
}

"""An Infrastructure entity outline."""
type GenericInfrastructureEntityOutline implements AlertableEntityOutline & EntityOutline & InfrastructureIntegrationEntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds
  integrationTypeCode: String

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Information about an Agent release"""
type AgentRelease {
  """Patch for a bug"""
  bugs: [String]

  """The date of the release"""
  date: Date

  """Link to agent distribution"""
  downloadLink: String

  """
  The date the release will reach the end of its life. See [New Relic's EOL Policy](https://docs.newrelic.com/docs/licenses/end-of-life/notification-changes-new-relic-saas-features-distributed-software/) for details
  """
  eolDate: Date

  """New feature or instrumentation"""
  features: [String]

  """Fix for a security vulnerability"""
  security: [String]

  """
  The release note's location on the docs website. The full URL would be prefixed with [https://docs.newrelic.com](https://docs.newrelic.com/)
  """
  slug: String

  """The version of the release"""
  version: String
}

"""
Application of an obfuscation expression with specific a replacement method.
"""
type LogConfigurationsObfuscationAction {
  """
  Log record attributes to apply this expression to. An empty list applies the action to all the attributes.
  """
  attributes: [String!]!

  """Obfuscation expression applied by this action."""
  expression: LogConfigurationsObfuscationExpression!

  """The id of the obfuscation action."""
  id: ID!

  """How to obfuscate matches for the applied expression."""
  method: LogConfigurationsObfuscationMethod!
}

"""Azure Service Bus"""
input CloudAzureServicebusIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Campfire notification channel."""
type AlertsCampfireNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet! @deprecated(reason: "This channel type is deprecated")

  """Campfire channel specific configuration."""
  config: AlertsCampfireNotificationChannelConfig! @deprecated(reason: "This channel type is deprecated")

  """Channel ID."""
  id: ID! @deprecated(reason: "This channel type is deprecated")

  """Channel name."""
  name: String! @deprecated(reason: "This channel type is deprecated")

  """Channel type."""
  type: AlertsNotificationChannelType! @deprecated(reason: "This channel type is deprecated")
}

"""Object for constraints errors"""
type AiNotificationsConstraintsError {
  """List of missing constraints for channel creation"""
  constraints: [AiNotificationsConstraintError!]!
}

"""Information about a targeted install plan directive"""
type Nr1CatalogNerdletInstallPlanDirective implements Nr1CatalogInstallPlanDirective {
  """The mode of the install plan directive"""
  mode: Nr1CatalogInstallPlanDirectiveMode!

  """The nerdlet ID used to guide the user through installation"""
  nerdletId: ID!

  """The nerdlet state used to intialize the nerdlet"""
  nerdletState: Nr1CatalogRawNerdletState
}

"""The rollup strategy."""
type WorkloadRemainingEntitiesRuleRollup {
  """The grouping to be applied to the remaining entities."""
  groupBy: WorkloadGroupRemainingEntitiesRuleBy!

  """The rollup strategy that is applied to a group of entities."""
  strategy: WorkloadRollupStrategy!

  """
  Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
  """
  thresholdType: WorkloadRuleThresholdType

  """
  Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
  """
  thresholdValue: Int
}

"""
Configuration options for a monthly monitor downtime that runs on days of the week
"""
type SyntheticsDaysOfWeekOutput {
  """Which occurrence of the day selected within the month"""
  ordinalDayOfMonth: SyntheticsMonitorDowntimeDayOfMonthOrdinal

  """Which day of the week the monitor downtime runs"""
  weekDay: SyntheticsMonitorDowntimeWeekDays
}

"""Information about removed tag"""
type NerdpackRemovedTagInfo {
  """UUID of the nerdpack"""
  nerdpackId: ID

  """Tag removed"""
  tagName: NerdpackTagName

  """Version affected"""
  version: SemVer
}

"""Container for conditions with associated notifications channels."""
input AlertsPolicyInput {
  """
  Determines how incidents are created for critical violations of the conditions contained in the policy.
  """
  incidentPreference: AlertsIncidentPreference!

  """Description of the policy."""
  name: String!
}

"""Input type for FixedLessThan expression"""
input AiDecisionsFixedLessThanInput {
  """Value to be used in comparison."""
  compared: Float!

  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!
}

type AuthorizationManagementOrganizationStitchedFields {
  """list of authentication domains"""
  authenticationDomains(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """an optional list of ids to filter by"""
    id: [ID!]
  ): AuthorizationManagementAuthenticationDomainSearch

  """list of roles"""
  roles(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """an optional list of ids to filter by"""
    id: [ID!]
  ): AuthorizationManagementRoleSearch
}

"""Attributes for updating an account share."""
input OrganizationUpdateSharedAccountInput {
  """The id of the account share to be updated"""
  id: String!

  """The id of the limiting role to be updated"""
  limitingRoleId: Int!
}

"""NRQL condition terms determine when a violation will be opened."""
input AlertsNrqlDynamicConditionTermsInput {
  """Operator used to compare against the threshold."""
  operator: AlertsNrqlDynamicConditionTermsOperator!

  """
  Priority determines how much attention your incidents need. Your workflow settings then tell us when and where to send notifications for different priorities.
  """
  priority: AlertsNrqlConditionPriority!

  """Value that triggers a violation."""
  threshold: Float!

  """
  The duration, in seconds, that the threshold must violate in order to create a violation.
  Value must be within 120-86400 seconds and a multiple of the aggregation window for baseline conditions.
  (Default aggregation window duration is 60 seconds.)
  """
  thresholdDuration: Int!

  """
  How many data points must be in violation for the specified threshold duration.
  """
  thresholdOccurrences: AlertsNrqlConditionThresholdOccurrences!
}

"""A contact channel where users can get support via the community"""
type Nr1CatalogCommunityContactChannel {
  """The URL linking to a website for support"""
  url: String!
}

"""Information about a dashboard template"""
type Nr1CatalogDashboardTemplate {
  """The unique identifier for the dashboard template"""
  id: ID!

  """Metadata associated with the dashboard template"""
  metadata: Nr1CatalogDashboardTemplateMetadata!

  """Level of support expected for the dashboard template"""
  supportLevel: Nr1CatalogSupportLevel!

  """
  A timestamp that indicates when the dashboard template was last updated
  """
  updatedAt: DateTime!
}

"""An object that represents the golden metrics scoped by context"""
type EntityGoldenContextScopedGoldenMetrics {
  """Context for the golden metric"""
  context: EntityGoldenContext!

  """Metrics for the domain and type"""
  metrics: [EntityGoldenMetric!]!
}

"""Channel schema object"""
type AiNotificationsChannelSchemaResult {
  """Error while querying channelSchema"""
  error: AiNotificationsError

  """Deprecated list of errors"""
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """Result of channelSchema query"""
  result: AiNotificationsResult!

  """Possible fields for the channel"""
  schema: AiNotificationsSchema
}

"""Test Workflow input object"""
input AiWorkflowsTestWorkflowInput {
  """destinationConfigurations"""
  destinationConfigurations: [AiWorkflowsDestinationConfigurationInput!]!

  """enrichments"""
  enrichments: AiWorkflowsTestEnrichmentsInput

  """issuesFilter"""
  issuesFilter: AiWorkflowsFilterInput
}

"""Mutation result."""
enum NerdpackMutationResult {
  """Error executing mutation."""
  ERROR

  """Successful mutation execution."""
  OK
}

"""RDS Integration"""
type CloudRdsIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Reason details union"""
union IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails = IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable | IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount | IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount

"""The time window when the MutingRule should actively mute violations."""
input AlertsMutingRuleScheduleInput {
  """
  The datetime stamp when the MutingRule schedule should stop repeating.
  This is in local ISO 8601 format without an offset.
  
  Example: `'2020-07-10T15:00:00'`
  
  Note: Either `endRepeat` or `repeatCount` should be used to end a MutingRule schedule.
  Both fields should not be provided together.
  """
  endRepeat: NaiveDateTime

  """
  The datetime stamp representing when the MutingRule should end.
  This is in local ISO 8601 format without an offset.
  
  Example: `'2020-07-10T15:00:00'`
  """
  endTime: NaiveDateTime

  """
  The frequency the MutingRule schedule repeats.
  If the MutingRule repeats `WEEKLY`, be sure to set `weeklyRepeatDays`.
  If the MutingRule does not repeat, use `null`.
  
  Example: `DAILY`
  """
  repeat: AlertsMutingRuleScheduleRepeat

  """
  The number of times the MutingRule schedule should repeat.
  
  Note: Either `repeatCount` or `endRepeat` should be used to end a MutingRule schedule.
  Both fields should not be provided together.
  """
  repeatCount: Int

  """
  The datetime stamp representing when the MutingRule should start.
  This is in local ISO 8601 format without an offset.
  
  Example: `'2020-07-08T14:30:00'`
  """
  startTime: NaiveDateTime

  """
  The time zone that applies to the MutingRule schedule.
  
  Example: `'America/Los_Angeles'`
  
  See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
  """
  timeZone: String!

  """
  The day(s) of the week that a MutingRule should repeat when the repeat field is set to `WEEKLY`.
  
  Example: `[MONDAY, WEDNESDAY]`
  """
  weeklyRepeatDays: [AlertsDayOfWeek!]
}

"""
Value determining whether to open a critical or warning incident for a NrqlCondition.
"""
enum AlertsNrqlConditionPriority {
  """
  Our highest priority. Use a critical priority when system behavior needs immediate attention.
  """
  CRITICAL

  """
  Lower priority. Use a warning priority when system behavior is noteworthy but not degraded enough to cause problems yet.
  """
  WARNING
}

"""
An object that represents a status error whenever an recipe has failed to install.
"""
input InstallationStatusErrorInput {
  """Error details, if any."""
  details: String

  """The actual error message."""
  message: String
}

"""Result of updatePage operation."""
type DashboardUpdatePageResult {
  """
  Expected errors while processing request. No errors means successful request.
  """
  errors: [DashboardUpdatePageError]
}

"""
Successfully deleted span attribute trace filter rule, or one or more error responses if there were issues.
"""
type EdgeDeleteSpanAttributeRuleResponse {
  """
  Errors that may occur when deleting a `SpanAttributeRule`. Defaults to `null` in case of success.
  """
  errors: [EdgeDeleteSpanAttributeRuleResponseError]

  """
  The trace filter rule that was deleted. Defaults to `null` in case of failure.
  """
  rule: EdgeSpanAttributeRule
}

"""Input for creating an obfuscation action on a rule being updated."""
input LogConfigurationsUpdateObfuscationActionInput {
  """
  Attribute names for action. An empty list applies the action to all the attributes.
  """
  attributes: [String!]!

  """Expression Id for action."""
  expressionId: ID!

  """Obfuscation method to use."""
  method: LogConfigurationsObfuscationMethod!
}

"""The definition of a collection."""
type EntityCollectionDefinition {
  """
  A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.
  """
  entityGuids: [EntityGuid]

  """The Entity Search query that returns the full collection of entities."""
  entitySearchQuery: String

  """The Accounts that will be used to scope the collection."""
  scopeAccounts: EntityCollectionScopeAccounts

  """
  A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.
  """
  searchQueries: [String]
}

"""The resulting allow list after the modifications have been made."""
type AgentApplicationSegmentsBrowserSegmentAllowListResult {
  """The NR1 entity guid."""
  entityGuid: EntityGuid!

  """The aggregate result of the segments in the modified list or lists."""
  segments: [String]
}

"""Provides the operations available on the account id"""
input OrganizationAccountIdInput {
  """An account id"""
  eq: Int!
}

"""Response for error groups."""
type ErrorsInboxErrorGroupsResponse {
  """Cursor to get the next page of results."""
  nextCursor: String

  """List of error groups."""
  results: [ErrorsInboxErrorGroupOutline!]

  """Total error groups matching query"""
  totalCount: Int
}

"""Response for user action"""
type AiIssuesIssueUserActionResponse {
  """Error, if any"""
  error: String

  """User operation performed with an issue"""
  result: AiIssuesIssueUserActionResult
}

"""List of integrations"""
input CloudGcpIntegrationsInput {
  """Vertex AI integration"""
  gcpAiplatform: [CloudGcpAiplatformIntegrationInput]

  """AlloyDB integration"""
  gcpAlloydb: [CloudGcpAlloydbIntegrationInput]

  """App Engine integration"""
  gcpAppengine: [CloudGcpAppengineIntegrationInput]

  """BigQuery integration"""
  gcpBigquery: [CloudGcpBigqueryIntegrationInput]

  """Bigtable integration"""
  gcpBigtable: [CloudGcpBigtableIntegrationInput]

  """Composer integration"""
  gcpComposer: [CloudGcpComposerIntegrationInput]

  """Dataflow integration"""
  gcpDataflow: [CloudGcpDataflowIntegrationInput]

  """Dataproc integration"""
  gcpDataproc: [CloudGcpDataprocIntegrationInput]

  """Datastore integration"""
  gcpDatastore: [CloudGcpDatastoreIntegrationInput]

  """Firebase Database integration"""
  gcpFirebasedatabase: [CloudGcpFirebasedatabaseIntegrationInput]

  """Firebase Hosting integration"""
  gcpFirebasehosting: [CloudGcpFirebasehostingIntegrationInput]

  """Firebase Storage integration"""
  gcpFirebasestorage: [CloudGcpFirebasestorageIntegrationInput]

  """Firestore integration"""
  gcpFirestore: [CloudGcpFirestoreIntegrationInput]

  """Cloud Functions integration"""
  gcpFunctions: [CloudGcpFunctionsIntegrationInput]

  """Interconnect integration"""
  gcpInterconnect: [CloudGcpInterconnectIntegrationInput]

  """Kubernetes Engine integration"""
  gcpKubernetes: [CloudGcpKubernetesIntegrationInput]

  """Cloud Load Balancing integration"""
  gcpLoadbalancing: [CloudGcpLoadbalancingIntegrationInput]

  """Memcache integration"""
  gcpMemcache: [CloudGcpMemcacheIntegrationInput]

  """Cloud Pub/Sub integration"""
  gcpPubsub: [CloudGcpPubsubIntegrationInput]

  """Redis integration"""
  gcpRedis: [CloudGcpRedisIntegrationInput]

  """Router integration"""
  gcpRouter: [CloudGcpRouterIntegrationInput]

  """Run integration"""
  gcpRun: [CloudGcpRunIntegrationInput]

  """Cloud Spanner integration"""
  gcpSpanner: [CloudGcpSpannerIntegrationInput]

  """Cloud SQL integration"""
  gcpSql: [CloudGcpSqlIntegrationInput]

  """Cloud Storage integration"""
  gcpStorage: [CloudGcpStorageIntegrationInput]

  """Compute Engine integration"""
  gcpVms: [CloudGcpVmsIntegrationInput]

  """VPC Access integration"""
  gcpVpcaccess: [CloudGcpVpcaccessIntegrationInput]
}

"""Router"""
input CloudGcpRouterIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Anomaly incident"""
type AiIssuesAnomalyIncident implements AiIssuesIIncident {
  """account"""
  account: AccountReference

  """An account id this incident is stored in"""
  accountIds: String!

  """The anomaly id"""
  anomalyId: String

  """The time the incident was closed"""
  closedAt: EpochMilliseconds

  """The time the incident was created"""
  createdAt: EpochMilliseconds!

  """The description provided through API"""
  description: [String!]!

  """A list of unique entity identifiers"""
  entityGuids: EntityGuid

  """A list of entity names"""
  entityNames: String

  """A list of entity types"""
  entityTypes: String

  """See our documentation to learn about environments"""
  environmentId: Int! @deprecated(reason: "Use account")

  """Incident identifier"""
  incidentId: ID!

  """Incident priority"""
  priority: AiIssuesPriority!

  """Incident state"""
  state: AiIssuesIncidentState!

  """Incident event timestamp"""
  timestamp: EpochMilliseconds!

  """
  The description the user gave the condition if provided. Otherwise the incident description
  """
  title: String!

  """The time the incident was last updated"""
  updatedAt: EpochMilliseconds!
}

type CloudActorFields {
  """Get all linked cloud provider accounts scoped to the Actor."""
  linkedAccounts(
    """The cloud provider short name."""
    provider: String
  ): [CloudLinkedAccount]
}

"""
An arbitrary key:value object containing additional data related to the environment where the installation occurred.
"""
scalar InstallationRawMetadata

"""Delete response object"""
type AiNotificationsDeleteResponse {
  """Error in object deletion"""
  error: AiNotificationsResponseError

  """Deprecated list of errors"""
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """Deleted object ids"""
  ids: [ID!]
}

"""Information about an item in a Nerdpack"""
interface Nr1CatalogNerdpackItem {
  """The unique identifier for the Nerdpack item."""
  id: ID!

  """Metadata associated with the Nerdpack item"""
  metadata: Nr1CatalogNerdpackItemMetadata
}

"""The status of the jobs to search for"""
input OrganizationOrganizationCreateJobStatusInput {
  """a job status to search for"""
  eq: OrganizationOrganizationCreateJobStatusEnum

  """a set of job statuses to search for"""
  in: [OrganizationOrganizationCreateJobStatusEnum!]
}

"""Account stitched fields to enable autostitching in NerdGraph"""
type EventsToMetricsAccountStitchedFields {
  """List all rules for your account."""
  allRules: EventsToMetricsListRuleResult

  """List rules for your account by id."""
  rulesById(
    """Rule ids you want to list (as strings)."""
    ruleIds: [ID]!
  ): EventsToMetricsListRuleResult
}

"""Billing Integration"""
type CloudBillingIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Filters by user email address"""
input MultiTenantIdentityUserEmailInput {
  """Part of an email address"""
  contains: String

  """An email address"""
  eq: String
}

"""Issues data"""
type AiIssuesIssueData {
  """Issues"""
  issues: [AiIssuesIssue!]!

  """Cursor to get the next batch of results"""
  nextCursor: String
}

"""Possible visibilities for the Nerdpack"""
enum Nr1CatalogNerdpackVisibility {
  """Indicates the Nerdpack is available globally across all accounts"""
  GLOBAL

  """
  Indicates the Nerdpack is only available to the owning and allowed accounts
  """
  OWNER_AND_ALLOWED
}

"""Possible modes for an install plan directive"""
enum Nr1CatalogInstallPlanDirectiveMode {
  """Directs the installation toward an external link"""
  LINK

  """
  Directs the installation to open a stacked Nerdlet to perform the installation
  """
  NERDLET

  """Directs the installation toward a specific target"""
  TARGETED
}

"""Autogenerated return type of GrantAccess"""
type AuthorizationManagementGrantAccessPayload {
  """the roles that were granted to this group"""
  roles: [AuthorizationManagementGrantedRole!]!
}

"""Amazon ElastiCache"""
input CloudElasticacheIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Information about results returned from a search"""
type Nr1CatalogSearchResponse {
  """Get count information about the filters"""
  facets: Nr1CatalogSearchFacets!

  """Cursor used to fetch the next set of results"""
  nextCursor: String

  """The list of search results"""
  results: [Nr1CatalogSearchResult!]!

  """The total number of results that match the search"""
  totalCount: Int!
}

"""An object representing details about a query's time window."""
type NrdbMetadataTimeWindow {
  """Timestamp marking the query begin time."""
  begin: EpochMilliseconds

  """A clause representing the comparison time window."""
  compareWith: String

  """Timestamp marking the query end time."""
  end: EpochMilliseconds

  """SINCE clause resulting from the query"""
  since: String

  """UNTIL clause resulting from the query"""
  until: String
}

"""Delete error description"""
type AiWorkflowsDeleteResponseError implements AiWorkflowsResponseError {
  """The error description"""
  description: String!

  """The error type"""
  type: AiWorkflowsDeleteErrorType!
}

"""Attribute belonging to a loaded module."""
type AgentEnvironmentLoadedModuleAttribute {
  """Name of the module attribute."""
  name: String!

  """Value of the module attribute."""
  value: String!
}

type WorkloadAccountStitchedFields {
  """[DEPRECATED] Retrieves a workload."""
  collection(
    """The GUID of the workload."""
    guid: EntityGuid!
  ): WorkloadCollection @deprecated(reason: "Use the entity-specific alternatives like entity(guid).")

  """[DEPRECATED] Retrieves a list of workloads."""
  collections: [WorkloadCollectionWithoutStatus!] @deprecated(reason: "Use the entity-specific alternatives like entitySearch(query).")

  """[DEPRECATED] Status and breakdown preview."""
  statusBreakdownPreview(
    """The entity search query that returns the full collection of entities."""
    entitySearchQuery: String!

    """Accounts that will be used to get entities from."""
    scopeAccounts: WorkloadScopeAccountsInput!

    """
    The configuration that defines how the status of the workload is calculated.
    """
    statusConfig: WorkloadStatusConfigInput!
  ): WorkloadWorkloadStatus @deprecated(reason: "This field is subject to breaking changes.")

  """
  [DEPRECATED] Retrieves all the accounts from the same organization that user has access to.
  """
  validAccounts: WorkloadValidAccounts @deprecated(reason: "This field is subject to breaking changes.")
}

"""
Measures wall clock time, CPU time, and method call counts in your application's threads as they run.
"""
type AgentApplicationSettingsThreadProfiler {
  """Whether or not the Thread Profiler is enabled for your application."""
  enabled: Boolean
}

"""Blueprint for rule creation."""
input AiDecisionsRuleBlueprint {
  """Length of the window in which incidents are compared."""
  correlationWindowLength: Milliseconds

  """Creator of rule."""
  creator: String

  """Description of rule."""
  description: String

  """Number of correlations within a window required to merge issues."""
  minCorrelationThreshold: Int

  """Name of rule."""
  name: String!

  """Configuration to allow rule to override issue properties."""
  overrideConfiguration: AiDecisionsOverrideConfigurationInput

  """Expression to use to compare incidents."""
  ruleExpression: AiDecisionsRuleExpressionInput!

  """Type of rule."""
  ruleType: AiDecisionsRuleType!

  """Creation source of rule."""
  source: AiDecisionsRuleSource!
}

"""The location(s) from which the monitor runs"""
type SyntheticsLocations {
  """Existing private location(s) in which the monitor will run"""
  private: [String]

  """
  Publicly available location(s) in which the monitor will run. For formatting tips, see [this link](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-synthetics-tutorial/#location-field)
  """
  public: [String]
}

"""Live URLs input."""
input DashboardLiveUrlsFilterInput {
  """Live URL type."""
  type: DashboardLiveUrlType

  """The unique identifier of a public live URL."""
  uuid: ID
}

"""A Type of resource"""
enum ErrorsInboxResourceType {
  """A JIRA issue"""
  JIRA_ISSUE
}

"""
Provides all the available filters on the organization group organization id
"""
input OrganizationOrganizationGroupOrganizationIdInputFilter {
  """performs an equals operation"""
  eq: ID!
}

"""Google Cloud Functions"""
input CloudGcpFunctionsIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Result details union"""
union IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails = IncidentIntelligenceEnvironmentEnvironmentAlreadyExists | IncidentIntelligenceEnvironmentEnvironmentCreated

"""Filters on the grants role id"""
input MultiTenantAuthorizationGrantRoleIdInputFilter {
  """Performs an equals operation"""
  eq: Int

  """Performs an in operation"""
  in: [Int!]
}

"""Result from sending a test push notification."""
type MobilePushNotificationSendPushResult {
  """The success or failure message from the attempted test push."""
  message: String
}

"""Represents the resulting details from a search of news."""
type WhatsNewSearchResult {
  """
  The next cursor, used for pagination. If a cursor is present, it means more content can be fetched.
  """
  nextCursor: String

  """A list of news."""
  results: [WhatsNewContent!]

  """The total amount of news available that satisfies the search criteria."""
  totalCount: Int!
}

"""
Specific Cloud provider information required to link the Cloud provider account to a NewRelic account.
"""
input CloudLinkCloudAccountsInput {
  """Aws provider"""
  aws: [CloudAwsLinkAccountInput!]

  """AwsGovCloud provider"""
  awsGovcloud: [CloudAwsGovCloudLinkAccountInput!]

  """Azure provider"""
  azure: [CloudAzureLinkAccountInput!]

  """Gcp provider"""
  gcp: [CloudGcpLinkAccountInput!]
}

"""A list of dynamic variables used by the Channel"""
input AiNotificationsDynamicVariable {
  """exampleValue"""
  exampleValue: AiNotificationsExampleValue

  """name"""
  name: String!
}

"""Available filtering types for names"""
input UserManagementNameInput {
  """Part of a user name"""
  contains: String

  """A user name"""
  eq: String
}

"""Available filtering types for email verification states"""
input UserManagementEmailVerificationStateInput {
  """An email verification state"""
  pending: Boolean!
}

"""Result of addWidgetsToPage operation."""
type DashboardAddWidgetsToPageResult {
  """
  Expected errors while processing request. No errors means successful request.
  """
  errors: [DashboardAddWidgetsToPageError]
}

"""
The input object representing parameters for the authentication domain ID filter
"""
input MultiTenantIdentityAuthenticationDomainIdInput {
  """An authentication domain ID"""
  eq: ID!
}

"""Information about a visualization in a Nerdpack"""
type Nr1CatalogVisualization implements Nr1CatalogNerdpackItem {
  """The unique identifier for the visualization."""
  id: ID!

  """Metadata associated with the visualization"""
  metadata: Nr1CatalogVisualizationMetadata
}

"""
Identifying information about the events to metrics rule you want to update.
"""
input EventsToMetricsUpdateRuleInput {
  """A submitted account id."""
  accountId: Int!

  """Changes the state of the rule as being enabled or disabled."""
  enabled: Boolean!

  """A submitted rule id."""
  ruleId: ID!
}

"""Configure notification policy error"""
type ErrorsInboxUpdateErrorGroupStateError implements ErrorsInboxResponseError {
  """The description of the error"""
  description: String!

  """The error type"""
  type: ErrorsInboxUpdateErrorGroupStateErrorType!
}

"""
An environment will be populated only if the user is attached to a single environment.
"""
type IncidentIntelligenceEnvironmentCurrentEnvironmentResult {
  """The current environment attached to the user"""
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment

  """The explanation for the environment field result"""
  reason: IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason

  """The current environment result details"""
  reasonDetails: IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails
}

"""Sort users"""
input MultiTenantIdentityUserSortInput {
  """Direction to sort in"""
  direction: MultiTenantIdentitySortDirection

  """User attribute to sort on"""
  key: MultiTenantIdentityUserSortKey
}

"""The result after upserting pipeline configuration for an account."""
type LogConfigurationsUpsertPipelineConfigurationResponse {
  """The updated pipeline configuration."""
  pipelineConfiguration: LogConfigurationsPipelineConfiguration
}

"""An object containing metadata about the query and result."""
type NrdbMetadata {
  """A list of the event types that were queried."""
  eventTypes: [String]

  """A list of facets that were queried."""
  facets: [String]

  """Messages from NRDB included with the result."""
  messages: [String]

  """Details about the query time window."""
  timeWindow: NrdbMetadataTimeWindow
}

"""
Type of connection established with the trace observer. Currently, only `PUBLIC` is supported.
"""
enum EdgeEndpointType {
  """PUBLIC: the endpoint is reachable on the internet."""
  PUBLIC
}

"""The different types of errors the API can return."""
enum TaggingMutationErrorType {
  """
  Too many concurrent tasks for the same GUID are being sent and we cannot process. Please serialize your requests for the given GUID.
  """
  CONCURRENT_TASK_EXCEPTION

  """
  Domain Type invalid. The decoded domain type from the provided GUID is not valid. Please provide a correct GUID.
  """
  INVALID_DOMAIN_TYPE

  """
  We could not decode the provided GUID. Entity guid needs to be base64 encoded.
  """
  INVALID_ENTITY_GUID

  """
  The tag key is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
  """
  INVALID_KEY

  """
  The tag value is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
  """
  INVALID_VALUE

  """The given GUID or tag you're looking for does not exist."""
  NOT_FOUND

  """
  You've attempted to do something your Domain/EntityType is not permitted to do. Its also possible that an api key is required.
  """
  NOT_PERMITTED

  """One of the query filters exceeds the character limit."""
  TOO_MANY_CHARS_QUERY_FILTER

  """
  The given entity has reached its tag key count limit. You will need to delete existing tags for the given GUID before continuing.
  """
  TOO_MANY_TAG_KEYS

  """
  The given entity has reached its tag value count limit. You will need to delete existing values for the given GUID before continuing.
  """
  TOO_MANY_TAG_VALUES

  """The changes will be reflected in the entity with some delay"""
  UPDATE_WILL_BE_DELAYED
}

"""
A configuration setting that maps hosts to alias names for grouping and identification purposes.
"""
type AgentApplicationSettingsNetworkAlias {
  """An alternative name that can be used to reference the hostnames."""
  alias: String

  """A list of hostnames to associate with an alias."""
  hosts: [String!]
}

"""Firebase Storage"""
input CloudGcpFirebasestorageIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Set of streaming rules states"""
enum StreamingExportStatus {
  """
  Status set for a streaming rule that could not be created due to an error
  """
  CREATION_FAILED

  """Status set for a streaming rule being set up"""
  CREATION_IN_PROGRESS

  """Status set for a streaming rule when it is deleted"""
  DELETED

  """Status set for a streaming rule when it is disabled"""
  DISABLED

  """Status set for a streaming rule when it is enabled"""
  ENABLED
}

"""An objective definition."""
type ServiceLevelObjective {
  """The description of the SLO."""
  description: String

  """The name of the SLO."""
  name: String

  """The resulting NRQL queries that help consume the metrics of the SLO."""
  resultQueries: ServiceLevelObjectiveResultQueries

  """The target percentage of the SLO."""
  target: Float!

  """The time window configuration of the SLO."""
  timeWindow: ServiceLevelObjectiveTimeWindow!
}

"""OpsGenie data center region"""
enum AlertsOpsGenieDataCenterRegion {
  """EU data center region"""
  EU

  """US data center region"""
  US
}

"""List of providers"""
input CloudDisableIntegrationsInput {
  """Aws provider"""
  aws: CloudAwsDisableIntegrationsInput

  """AwsGovcloud provider"""
  awsGovcloud: CloudAwsGovcloudDisableIntegrationsInput

  """Azure provider"""
  azure: CloudAzureDisableIntegrationsInput

  """Gcp provider"""
  gcp: CloudGcpDisableIntegrationsInput
}

"""
Specifies fields required for types that implement the ability to determine the level of supported entity types.
"""
interface Nr1CatalogSupportedEntityTypes {
  """Determines the supported entity type mode."""
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"""Input data for creating a new nerdpack."""
input NerdpackCreationInput {
  """
  Nerdpack owner account ID. If not provided it will use the account ID specified in the header.
  """
  ownerAccount: Int
}

"""
Contains files and information associated with a specific version of a Nerdpack.
"""
type NerdpackVersion {
  """List of assets present on this Nerdpack version."""
  assets: [NerdpackAssetInfo]

  """Version of the CLI used to generate the Nerdpack."""
  cliVersion: SemVer

  """Timestamp for the creation on the Nerdpack version."""
  createdAt: DateTime!

  """Unique identifier of the user who created the version."""
  createdByUser: Int!

  """A brief description of the artifact."""
  description: String

  """Human-readable Nerdpack's name."""
  displayName: String

  """Icon URL of Package"""
  icon: String

  """Unique uuid V5 that identifies the Nerdpack."""
  nerdpackId: ID

  """URL to the repository with the Nerdpack source code."""
  repositoryUrl: String

  """Version of the SDK used to generate the Nerdpack."""
  sdkVersion: String

  """Nerdpack subscription model to filter."""
  subscriptionModel: NerdpackSubscriptionModel

  """List of tags associated with the Nerdpack version."""
  tags: [NerdpackTagName]!

  """Semver-compliant Nerdpack version."""
  version: SemVer!
}

"""The different types of errors the API can return."""
enum MetricNormalizationRuleErrorType {
  """Creation Error."""
  CREATION_ERROR

  """Edition Error."""
  EDITION_ERROR

  """Rule does not exist."""
  RULE_NOT_FOUND

  """Validation error"""
  VALIDATION_ERROR
}

"""Span attribute value operator types"""
enum EdgeSpanAttributeValueOperator {
  """Matches on an exact value"""
  EQUALS

  """Matches on any value"""
  IS_NOT_NULL

  """
  Matches on a value that starts-with and/or ends-with the provided value
  """
  LIKE
}

"""
Error details about the events to metrics rule that failed to be updated and why.
"""
type EventsToMetricsUpdateRuleFailure {
  """Information about why the update failed."""
  errors: [EventsToMetricsError]

  """Input information about a failed update."""
  submitted: EventsToMetricsUpdateRuleSubmission
}

"""
This is the root of all GraphQL queries. The fields in this object
are available at the top level of a query.
"""
type RootQueryType {
  """
  The `actor` field is the top-level entry into all data that is scoped
  to the API user's access level.
  """
  actor: Actor

  """
  The `customerAdministration` field is the place for managing the configuration that defines the business relationships between New Relic, partners, and customers.
  """
  customerAdministration: CustomerAdministration

  """Access to structured New Relic documentation data"""
  docs: DocumentationFields

  """
  The `requestContext` field provides contextual information about the API request itself.
  """
  requestContext: RequestContext
}

"""Google Kubernetes Engine"""
input CloudGcpKubernetesIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Visualization configuration."""
input DashboardWidgetVisualizationInput {
  """
  This field can either have a known type like `viz.area` or `<nerdpack-id>.<visualization-id>` in the case of [custom visualizations](https://developer.newrelic.com/explore-docs/custom-viz/build-visualization/). Check out [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-schema) for more info.
  """
  id: String
}

"""Type of create error"""
enum AiWorkflowsCreateErrorType {
  """We couldn't find a channel with the given id"""
  CHANNEL_NOT_FOUND

  """A workflow with this name already exists"""
  DUPLICATE

  """One or more of the parameters you provided are incorrect"""
  INVALID_PARAMETER

  """Reached the maximum number of workflows per account"""
  LIMIT_REACHED

  """
  This account is missing the required entitlement(s) to perform this action
  """
  MISSING_ENTITLEMENT

  """This account in not authorized to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """The given channel id represents an unsupported channel type"""
  UNSUPPORTED_CHANNEL_TYPE

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR
}

"""The possible types why an error may have occurred."""
enum NerdStorageVaultErrorType {
  """
  Indicates the client performing the operation does not have sufficient
  permission.
  """
  ACCESS_DENIED

  """
  Indicates the mutation has malformed input and needs to be corrected before
  the mutation can be processed.
  """
  BAD_INPUT

  """Indicates that the resource does not exist."""
  NOT_FOUND

  """Indicates the mutation has failed validation."""
  VALIDATION_FAILED
}

"""Configuration for overriding properties of issues created by merges."""
type AiDecisionsOverrideConfiguration {
  """Description merged issues should take."""
  description: String

  """Priority merged issues should take."""
  priority: AiDecisionsIssuePriority

  """Title merged issues should take."""
  title: String
}

"""The monitor input values needed to create a Simple Browser monitor"""
input SyntheticsCreateSimpleBrowserMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsSimpleBrowserMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput!

  """The human readable identifier for the monitor"""
  name: String!

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod!

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntimeInput

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus!

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]

  """The uri the monitor runs against"""
  uri: String!
}

"""Configuration for visualization type 'viz.area'"""
type DashboardAreaWidgetConfiguration {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"""Metadata information for an item in a Nerdpack"""
interface Nr1CatalogNerdpackItemMetadata {
  """A short form description for the Nerdpack item."""
  description: String

  """The human-readable name for the Nerdpack item."""
  displayName: String

  """A list of previews for the Nerdpack item, such as screenshots."""
  previews: [Nr1CatalogPreview!]!
}

"""Provides the operations available on the id"""
input OrganizationIdInput {
  """An authentication domain id"""
  eq: ID!
}

"""The attributes of an organization."""
type OrganizationInformation {
  """The ID of the organization."""
  id: String!

  """The name of the organization."""
  name: String!
}

"""The `Milliseconds` scalar represents a duration in milliseconds"""
scalar Milliseconds

"""Error object for Synthetics monitor creation request"""
type SyntheticsMonitorCreateError {
  """String description of error"""
  description: String!

  """Enum of error that was returned during monitor creation"""
  type: SyntheticsMonitorCreateErrorType!
}

"""Information about how a quickstart is installed"""
interface Nr1CatalogInstaller {
  """The type of installer"""
  type: Nr1CatalogInstallerType!
}

"""Event Hub"""
input CloudAzureEventhubIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""The location(s) from which the scripted monitor runs."""
input SyntheticsScriptedMonitorLocationsInput {
  """The private location(s) that the monitor will run jobs from"""
  private: [SyntheticsPrivateLocationInput!]

  """The public location(s) that the monitor will run jobs from"""
  public: [String!]
}

"""Input type for RelativeEqual expression"""
input AiDecisionsRelativeEqualInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""A New Relic user"""
type MultiTenantIdentityUser {
  """The authentication domain the user belongs to."""
  authenticationDomainId: ID!

  """Email address of the user."""
  email: String

  """If the user has verified their email address or not."""
  emailVerificationState: MultiTenantIdentityEmailVerificationState!

  """container for groups enabling cursor based pagination"""
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String
  ): MultiTenantIdentityUserGroups

  """The user id."""
  id: ID!

  """The last active date of the user."""
  lastActive: DateTime

  """The full name of the user."""
  name: String

  """The pending upgrade request for the user (if any)."""
  pendingUpgradeRequest: MultiTenantIdentityPendingUpgradeRequest

  """
  Time zone of the user in IANA Time Zone database format, also known as the "Olson" time zone database format (for exmaple, "America/Los_Angeles").
  """
  timeZone: String

  """
  A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
  """
  type: MultiTenantIdentityUserType!
}

"""Information about the publicly accessible screenshot"""
type Nr1CatalogScreenshot implements Nr1CatalogPreview {
  """The publicly accessible URL for the screenshot"""
  url: String!
}

"""AWS Billing"""
input CloudBillingIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
The input object containing accounts that will be used to get entities from.
"""
input WorkloadScopeAccountsInput {
  """A list of accounts that will be used to get entities from."""
  accountIds: [Int!]!
}

"""A user defined group of entities without Status"""
type WorkloadCollectionWithoutStatus {
  """The account the workload belongs to."""
  account: AccountReference

  """
  The moment when the object was created, represented in milliseconds since the Unix epoch.
  """
  createdAt: EpochMilliseconds!

  """The user who created the workload."""
  createdBy: UserReference

  """Relevant information about the workload."""
  description: String

  """
  A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.
  """
  entities: [WorkloadEntityRef!]

  """
  A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.
  """
  entitySearchQueries: [WorkloadEntitySearchQuery!]

  """The entity search query that returns the full collection of entities."""
  entitySearchQuery: String

  """The unique entity identifier of the workload in New Relic."""
  guid: EntityGuid!

  """The unique identifier of the workload."""
  id: Int!

  """The workload's name."""
  name: String!

  """The URL of the workload."""
  permalink: String!

  """Accounts that will be used to get entities from."""
  scopeAccounts: WorkloadScopeAccounts!

  """
  The configuration that defines how the status of the workload is calculated.
  """
  statusConfig: WorkloadStatusConfig

  """
  The moment when the object was last updated, represented in milliseconds since the Unix epoch.
  """
  updatedAt: EpochMilliseconds

  """The user who last updated the workload."""
  updatedBy: UserReference
}

"""Possible entity sorting criterion with direction"""
input SortCriterionWithDirection {
  """Sort entities by attribute. Mutally exclusive with the `tag` argument"""
  attribute: EntitySearchSortCriteria

  """The direction to sort results"""
  direction: SortBy = ASC

  """Sort entities by tag. Mutally exclusive with the `attribute` argument"""
  tag: String
}

"""
Obfuscation level for SQL queries reported in transaction trace nodes.

When turned on, the New Relic agent will attempt to remove values from SQL qeries.

For example:

```
SELECT * FROM Table WHERE ssn='123-45-6789'
```

might become:

```
SELECT * FROM Table WHERE ssn=?
```

This can behave differently for differnet applications and frameworks. Please test for your specific case.
Note: RAW collection is not campatible with High Security mode and cannot be set if your agent is running in that mode.
"""
enum AgentApplicationSettingsRecordSqlEnum {
  """
  This is the default value. This setting strips string literals and numeric sequences from your queries and replaces them with the ? character. For example: the query select * from table where ssn='123-45-6789' would become select * from table where ssn=?.
  """
  OBFUSCATED

  """Query collection is turned off entirely."""
  OFF

  """
  If you are confident that full query data collection will not impact your data security or your users' privacy, you can change the setting to RAW, which will record all query values. NOTE: 'RAW' is not permitted when 'High security mode' is enabled.
  """
  RAW
}

"""The types of Synthetic Monitors."""
enum SyntheticMonitorType {
  BROKEN_LINKS
  BROWSER
  CERT_CHECK
  SCRIPT_API
  SCRIPT_BROWSER
  SIMPLE
  STEP_MONITOR
}

"""xMatters notification channel."""
type AlertsXMattersNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """xMatters channel specific configuration."""
  config: AlertsXMattersNotificationChannelConfig!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

type ApiAccessActorStitchedFields {
  """Fetch a single key by ID and type."""
  key(
    """
    The `id` of the key. This can be used to identify a key without revealing the key itself (used to update and delete).
    """
    id: ID!

    """The type of key."""
    keyType: ApiAccessKeyType!
  ): ApiAccessKey

  """
  A list of keys scoped to the current actor and filter arguments. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).
  """
  keySearch(
    """The cursor."""
    cursor: String

    """The criteria for the key search."""
    query: ApiAccessKeySearchQuery!
  ): ApiAccessKeySearchResult
}

"""A Key Transaction entity outline."""
type KeyTransactionEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""This field provides access to Tracing data."""
type EdgeTracing {
  """Lists the existing trace observers for this account family."""
  traceObservers(
    """Optional IDs of trace observers to return."""
    ids: [Int!]
  ): [EdgeTraceObserver!]
}

"""Database for PostgreSQL"""
input CloudAzurePostgresqlIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""
Rule for identifying a set of log data to apply specific obfuscation actions to.
"""
type LogConfigurationsObfuscationRule {
  """Obfuscation actions to take if a record passes the matching criteria."""
  actions: [LogConfigurationsObfuscationAction!]

  """Identifies the date and time when the rule was created."""
  createdAt: DateTime!

  """Identifies the user who has created the rule."""
  createdBy: UserReference

  """Description of the obfuscation rule."""
  description: String

  """Whether the rule should be applied to incoming logs"""
  enabled: Boolean!

  """
  NRQL filter to determine if a log record should have obfuscation actions applied.
  """
  filter: Nrql!

  """The id of the obfuscation rule."""
  id: ID!

  """Name of the obfuscation rule."""
  name: String!

  """Identifies the date and time when the rule was last updated."""
  updatedAt: DateTime!

  """Identifies the user who has last updated the rule."""
  updatedBy: UserReference
}

"""Enums for region codes"""
enum OrganizationRegionCodeEnum {
  """Region code for EU"""
  EU01

  """Region code for US"""
  US01
}

"""
Browser privacy. See [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/page-load-timing-resources/cookie-collection-session-tracking/) for further information.
"""
type AgentApplicationSettingsBrowserPrivacy {
  """Whether or not cookies are enabled."""
  cookiesEnabled: Boolean!
}

"""Information about a documentation component in a quickstart"""
type Nr1CatalogQuickstartDocumentation implements Nr1CatalogQuickstartComponent {
  """Metadata associated with the dashboard"""
  metadata: Nr1CatalogQuickstartDocumentationMetadata!
}

"""A new parsing rule."""
input LogConfigurationsParsingRuleConfiguration {
  """
  The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
  """
  attribute: String

  """A description of what this parsing rule represents."""
  description: String!

  """Whether or not this rule is enabled."""
  enabled: Boolean!

  """The Grok of what to parse."""
  grok: String!

  """The Lucene to match events to the parsing rule."""
  lucene: String!

  """The NRQL to match events to the parsing rule."""
  nrql: Nrql!
}

"""The monitor input values needed to create a Script Api monitor"""
input SyntheticsCreateScriptApiMonitorInput {
  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsScriptedMonitorLocationsInput!

  """The human readable identifier for the monitor"""
  name: String!

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod!

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntimeInput

  """The script that the monitor runs"""
  script: String!

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus!

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""A filter for customer organizations"""
input OrganizationCustomerOrganizationFilterInput {
  """The id of the owned account"""
  accountId: OrganizationOrganizationAccountIdInputFilter

  """The id of the authentication domain"""
  authenticationDomainId: OrganizationOrganizationAuthenticationDomainIdInputFilter

  """The id of the customer"""
  customerId: OrganizationOrganizationCustomerIdInputFilter

  """The id of the organization"""
  id: OrganizationOrganizationIdInputFilter

  """The name of the organization"""
  name: OrganizationOrganizationNameInputFilter
}

"""
The `DateTime` scalar represents a date and time. The `DateTime` appears as an ISO8601 formatted string.
"""
scalar DateTime

"""Configuration for PagerDuty notification channel."""
type AlertsPagerDutyNotificationChannelConfig {
  """API key."""
  apiKey: SecureValue!
}

"""A Dashboard entity."""
type DashboardEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """The date and time the dashboard was created"""
  createdAt: DateTime

  """The parent entity `guid` of the dashboard."""
  dashboardParentGuid: EntityGuid

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """Dashboard description."""
  description: String

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The owner information of the dashboard."""
  owner: DashboardEntityOwnerInfo

  """A nested block of all pages belonging to the dashboard."""
  pages: [DashboardPage]

  """The url to the entity."""
  permalink: String

  """The permissions of the dashboard."""
  permissions: DashboardEntityPermissions

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String

  """The date and time the dashboard was updated"""
  updatedAt: DateTime

  """Dashboard-local variable definitions."""
  variables: [DashboardVariable]
}

"""The entityRelationshipUserDefinedDelete result error."""
type EntityRelationshipUserDefinedDeleteResultError {
  """A message explaining what the error is about."""
  message: String!

  """The mutation error type."""
  type: EntityRelationshipUserDefinedDeleteErrorType!
}

"""Information about a facet count on a category"""
type Nr1CatalogCategoryFacet {
  """The count of results for this category"""
  count: Int!

  """The category's display name"""
  displayName: String!
}

"""A query suggestion based on historical query patterns."""
type SuggestedHistoryBasedNrqlQuery implements SuggestedNrqlQuery {
  """The NRQL string to run for the suggested query"""
  nrql: String!

  """A human-readable title describing what the query shows"""
  title: String!
}

"""Monitor downtime object returned to the customer for an edit mutation"""
type SyntheticsMonitorDowntimeMutationResult {
  """The account ID associated with the monitor downtime"""
  accountId: Int

  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  endRepeat: SyntheticsDateWindowEndOutput

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """
  Configuration options for which days of the month a monitor downtime will occur
  """
  frequency: SyntheticsMonitorDowntimeMonthlyFrequencyOutput

  """The entity GUID associated with the monitor downtime"""
  guid: EntityGuid

  """Days of the week the monitor downtime will run"""
  maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]

  """The monitor GUIDs associated with the monitor downtime"""
  monitorGuids: [EntityGuid]

  """The name of the monitor downtime"""
  name: String

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""List of integrations"""
input CloudAwsIntegrationsInput {
  """ALB/NLB integration"""
  alb: [CloudAlbIntegrationInput]

  """API Gateway integration"""
  apigateway: [CloudApigatewayIntegrationInput]

  """AutoScaling integration"""
  autoscaling: [CloudAutoscalingIntegrationInput]

  """AppSync integration"""
  awsAppsync: [CloudAwsAppsyncIntegrationInput]

  """Athena integration"""
  awsAthena: [CloudAwsAthenaIntegrationInput]

  """Cognito integration"""
  awsCognito: [CloudAwsCognitoIntegrationInput]

  """Connect integration"""
  awsConnect: [CloudAwsConnectIntegrationInput]

  """Direct Connect integration"""
  awsDirectconnect: [CloudAwsDirectconnectIntegrationInput]

  """DocumentDB integration"""
  awsDocdb: [CloudAwsDocdbIntegrationInput]

  """FSx integration"""
  awsFsx: [CloudAwsFsxIntegrationInput]

  """Glue integration"""
  awsGlue: [CloudAwsGlueIntegrationInput]

  """Kinesis Data Analytics integration"""
  awsKinesisanalytics: [CloudAwsKinesisanalyticsIntegrationInput]

  """Elemental MediaConvert integration"""
  awsMediaconvert: [CloudAwsMediaconvertIntegrationInput]

  """MediaPackage VOD integration"""
  awsMediapackagevod: [CloudAwsMediapackagevodIntegrationInput]

  """Fetch Metadata for AWS integrations integration"""
  awsMetadata: [CloudAwsMetadataIntegrationInput]

  """MQ integration"""
  awsMq: [CloudAwsMqIntegrationInput]

  """Managed Kafka integration"""
  awsMsk: [CloudAwsMskIntegrationInput]

  """Neptune integration"""
  awsNeptune: [CloudAwsNeptuneIntegrationInput]

  """QLDB integration"""
  awsQldb: [CloudAwsQldbIntegrationInput]

  """Route53 Resolver integration"""
  awsRoute53resolver: [CloudAwsRoute53resolverIntegrationInput]

  """Step Functions integration"""
  awsStates: [CloudAwsStatesIntegrationInput]

  """Fetch tags for all integrations integration"""
  awsTagsGlobal: [CloudAwsTagsGlobalIntegrationInput]

  """Transit Gateway integration"""
  awsTransitgateway: [CloudAwsTransitgatewayIntegrationInput]

  """WAF integration"""
  awsWaf: [CloudAwsWafIntegrationInput]

  """WAFV2 integration"""
  awsWafv2: [CloudAwsWafv2IntegrationInput]

  """X-Ray integration"""
  awsXray: [CloudAwsXrayIntegrationInput]

  """Billing integration"""
  billing: [CloudBillingIntegrationInput]

  """CloudFront integration"""
  cloudfront: [CloudCloudfrontIntegrationInput]

  """CloudTrail integration"""
  cloudtrail: [CloudCloudtrailIntegrationInput]

  """DynamoDB integration"""
  dynamodb: [CloudDynamodbIntegrationInput]

  """EBS integration"""
  ebs: [CloudEbsIntegrationInput]

  """EC2 integration"""
  ec2: [CloudEc2IntegrationInput]

  """ECS integration"""
  ecs: [CloudEcsIntegrationInput]

  """EFS integration"""
  efs: [CloudEfsIntegrationInput]

  """ElastiCache integration"""
  elasticache: [CloudElasticacheIntegrationInput]

  """Elastic Beanstalk integration"""
  elasticbeanstalk: [CloudElasticbeanstalkIntegrationInput]

  """Elasticsearch Service integration"""
  elasticsearch: [CloudElasticsearchIntegrationInput]

  """ELB (Classic) integration"""
  elb: [CloudElbIntegrationInput]

  """EMR integration"""
  emr: [CloudEmrIntegrationInput]

  """Health integration"""
  health: [CloudHealthIntegrationInput]

  """IAM integration"""
  iam: [CloudIamIntegrationInput]

  """IoT integration"""
  iot: [CloudIotIntegrationInput]

  """Kinesis Streams integration"""
  kinesis: [CloudKinesisIntegrationInput]

  """Kinesis Firehose integration"""
  kinesisFirehose: [CloudKinesisFirehoseIntegrationInput]

  """Lambda integration"""
  lambda: [CloudLambdaIntegrationInput]

  """RDS integration"""
  rds: [CloudRdsIntegrationInput]

  """Redshift integration"""
  redshift: [CloudRedshiftIntegrationInput]

  """Route 53 integration"""
  route53: [CloudRoute53IntegrationInput]

  """S3 integration"""
  s3: [CloudS3IntegrationInput]

  """SES integration"""
  ses: [CloudSesIntegrationInput]

  """SNS integration"""
  sns: [CloudSnsIntegrationInput]

  """SQS integration"""
  sqs: [CloudSqsIntegrationInput]

  """Trusted Advisor integration"""
  trustedadvisor: [CloudTrustedadvisorIntegrationInput]

  """VPC integration"""
  vpc: [CloudVpcIntegrationInput]
}

type DocumentationFields {
  """View a list of all features for a chosen Agent"""
  agentFeatures(
    """The Agent to view data for"""
    agentName: AgentFeaturesFilter!
  ): [AgentFeatures] @deprecated(reason: "This field is deprecated and does not return results.")

  """View a list of all releases for a chosen Agent"""
  agentReleases(
    """The Agent to view data for"""
    agentName: AgentReleasesFilter!
  ): [AgentRelease]

  """This field provides access to DataDictionary data."""
  dataDictionary: DataDictionaryDocsStitchedFields

  """A list of all the Time Zones from the IANA tz database"""
  timeZones: [TimeZoneInfo]

  """This field provides access to WhatsNew data."""
  whatsNew: WhatsNewDocsStitchedFields
}

"""Available filtering types for email addresses"""
input UserManagementEmailInput {
  """Part of a user email"""
  contains: String

  """A user email"""
  eq: String
}

"""Expected errors that can be returned by updatePage operation."""
type DashboardUpdatePageError {
  """Error description."""
  description: String

  """Error type."""
  type: DashboardUpdatePageErrorType!
}

"""Incidents data"""
type AiIssuesIncidentData {
  """Incidents"""
  incidents: [AiIssuesIIncident!]!

  """Cursor to get the next batch of results"""
  nextCursor: String
}

"""Firebase Database"""
input CloudGcpFirebasedatabaseIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""An entity tag."""
input EntitySearchQueryBuilderTag {
  """
  The tag key. You can search using a `tags.` prefix or omit it and receive the same results.
  
  Examples: `tags.environment`, `environment`.
  """
  key: String!

  """The tag value."""
  value: String!
}

"""
How many data points must be in violation for a NrqlCondition term's threshold duration.
"""
enum AlertsNrqlConditionThresholdOccurrences {
  """All points must be in violation during a term's threshold duration."""
  ALL

  """
  At least one data point must be in violation during a term's threshold duration.
  """
  AT_LEAST_ONCE
}

"""Input type for RelativeSoundEx expression"""
input AiDecisionsRelativeSoundExInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Minimum distance threshold."""
  minDistance: Int!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""Input type for RelativeHammingDistance expression"""
input AiDecisionsRelativeHammingDistanceInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Int!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

""""""
type AiWorkflowsAccountStitchedFields {
  """
  Returns a list of workflows with pagination cursor according to account id and filters
  """
  workflows(
    """Cursor used to get the next page of results"""
    cursor: String

    """Query filters"""
    filters: AiWorkflowsFilters
  ): AiWorkflowsWorkflows
}

"""Permisions that represent visibility & editability"""
enum DashboardEntityPermissions {
  """Private"""
  PRIVATE

  """Public read only"""
  PUBLIC_READ_ONLY

  """Public read & write"""
  PUBLIC_READ_WRITE
}

"""The user is not authorized for this account"""
type IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount {
  """
  The account id the user is not authorized to receive an environment for
  """
  accountId: Int!
}

"""The input configuration for creating a notification channel."""
input AlertsNotificationChannelCreateConfiguration {
  """The input configuration for creating an Email notification channel."""
  email: AlertsEmailNotificationChannelCreateInput

  """The input configuration for creating an OpsGenie notification channel."""
  opsGenie: AlertsOpsGenieNotificationChannelCreateInput

  """The input configuration for creating a PagerDuty notification channel."""
  pagerDuty: AlertsPagerDutyNotificationChannelCreateInput

  """The input configuration for creating a Slack notification channel."""
  slack: AlertsSlackNotificationChannelCreateInput

  """The input configuration for creating a VictorOps notification channel."""
  victorOps: AlertsVictorOpsNotificationChannelCreateInput

  """The input configuration for creating a Webhook notification channel."""
  webhook: AlertsWebhookNotificationChannelCreateInput

  """The input configuration for creating an xMatters notification channel."""
  xMatters: AlertsXMattersNotificationChannelCreateInput
}

"""Detailed information about the status of a workload."""
type WorkloadStatus {
  """
  A description that provides additional details about the status of the workload.
  """
  description: String

  """Indicates where the status value derives from."""
  statusSource: WorkloadStatusSource

  """The status of the workload."""
  statusValue: WorkloadStatusValue

  """A short description of the status of the workload."""
  summary: String
}

"""EBS Integration"""
type CloudEbsIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Filter object by property"""
input AiNotificationsPropertyFilter {
  """key"""
  key: String!

  """value"""
  value: String!
}

"""Metadata associated with the documentation component in a quickstart"""
type Nr1CatalogQuickstartDocumentationMetadata implements Nr1CatalogQuickstartComponentMetadata {
  """A short form description for the documentation component."""
  description: String

  """The human-readable name for the documentation component."""
  displayName: String

  """The documentation URL"""
  url: String!
}

"""
A query suggestion based on analysis of events within a specific anomalous time
range vs. nearby events outside of that time range.
"""
type SuggestedAnomalyBasedNrqlQuery implements SuggestedNrqlQuery {
  """Information about the anomaly upon which this suggestion is based"""
  anomaly: SuggestedNrqlQueryAnomaly!

  """The NRQL string to run for the suggested query"""
  nrql: String!

  """A human-readable title describing what the query shows"""
  title: String!
}

"""Suggestion filter object"""
input AiNotificationsSuggestionFilter {
  """type"""
  type: AiNotificationsSuggestionFilterType!

  """value"""
  value: String!
}

"""Custom header for monitor jobs"""
type SyntheticsCustomHeader {
  """Header name"""
  name: String!

  """Header value"""
  value: String!
}

"""Input for error events."""
input ErrorsInboxErrorEventInput {
  """Guid of entity that generated the event."""
  entityGuid: EntityGuid!

  """A set of attributes representing an event associated with an error"""
  event: ErrorsInboxRawEvent

  """Error event message."""
  message: String

  """Error event name."""
  name: String

  """Source of error event (ex: TransactionError, Span)"""
  source: ErrorsInboxEventSource
}

"""
The input object representing parameters for the organization ID filter
"""
input MultiTenantIdentityOrganizationIdInput {
  """An organization ID"""
  eq: ID!
}

"""
The result of which submitted events to metrics rules were successfully and unsuccessfully created
"""
type EventsToMetricsCreateRuleResult {
  """Rules that were not created and why."""
  failures: [EventsToMetricsCreateRuleFailure]

  """Rules that were successfully created."""
  successes: [EventsToMetricsRule]
}

"""The query that represents the events to fetch."""
type ServiceLevelEventsQuery {
  """The NRDB event to fetch the data from."""
  from: Nrql!

  """The NRQL SELECT clause to aggregate events."""
  select: ServiceLevelEventsQuerySelect

  """The NRQL condition to filter the events."""
  where: Nrql
}

type AiDecisionsAccountStitchedFields {
  """Fetch a decision by ID."""
  decision(
    """Decision ID."""
    decisionId: ID!
  ): AiDecisionsDecision

  """Returns a paginated list of decisions."""
  decisions(
    """Cursor to paginate forwards."""
    after: String

    """Cursor to paginate backwards."""
    before: String

    """List of decision states."""
    decisionStates: [AiDecisionsDecisionState!]

    """List of decision types."""
    decisionTypes: [AiDecisionsDecisionType!]

    """Number of elements in page."""
    pageSize: Int

    """Sorting method."""
    sortMethod: AiDecisionsDecisionSortMethod
  ): AiDecisionsDecisionListing!
}

"""A Script Api monitor resulting from a Script Api mutation"""
type SyntheticsScriptApiMonitor {
  """The creation time of the monitor in millis"""
  createdAt: EpochMilliseconds

  """The unique client identifier for the Synthetics Monitor in New Relic"""
  guid: EntityGuid

  """The unique identifier of the monitor within the Synthetics domain"""
  id: ID

  """The locations the monitor runs from"""
  locations: SyntheticsLocations

  """The last modification time of the monitor in millis"""
  modifiedAt: EpochMilliseconds

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntime

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus
}

"""VPC Access Integration"""
type CloudGcpVpcaccessIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""ALB/NLB Integration"""
type CloudAlbIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """
  Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
  """
  loadBalancerPrefixes: [String]

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Available directions for sorting"""
enum UserManagementSortDirection {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"""
Operator used to compare against the threshold for `NrqlConditions`. Only `ABOVE` is allowed for baseline NRQL conditions.
"""
enum AlertsNrqlDynamicConditionTermsOperator {
  """For comparing values above a threshold."""
  ABOVE
}

"""Input type for FixedEqual expression"""
input AiDecisionsFixedEqualInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Value to be used in comparison."""
  value: String!
}

"""Input type for RelativeFuzzyWuzzyTokenSetRatio expression"""
input AiDecisionsRelativeFuzzyWuzzyTokenSetRatioInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""Fetch tags for all integrations"""
input CloudAwsTagsGlobalIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
A correlation rule used to compare incidents and subsequently merge issues.
"""
type AiDecisionsRule {
  """Internal data associated with this rule."""
  annotations: [AiDecisionsAnnotationEntry!]!

  """Length of the window in which incidents are compared."""
  correlationWindowLength: Milliseconds

  """Time rule was created."""
  createdAt: EpochMilliseconds!

  """Creator of rule."""
  creator: UserReference

  """Description of rule."""
  description: String

  """ID of rule."""
  id: ID!

  """External data associated with this rule."""
  metadata: AiDecisionsRuleMetadata!

  """Number of correlations within a window required to merge issues."""
  minCorrelationThreshold: Int!

  """Name of rule."""
  name: String!

  """Configuration to allow rule to override issue properties."""
  overrideConfiguration: AiDecisionsOverrideConfiguration

  """Expression to use to compare incidents."""
  ruleExpression: AiDecisionsRuleExpression!

  """Type of rule."""
  ruleType: AiDecisionsRuleType!

  """Creation source of rule."""
  source: AiDecisionsRuleSource!

  """Current state of rule."""
  state: AiDecisionsRuleState!

  """Time rule was last updated."""
  updatedAt: EpochMilliseconds!
}

"""Metadata associated with the install plan in a quickstart"""
type Nr1CatalogQuickstartInstallPlanMetadata implements Nr1CatalogQuickstartComponentMetadata {
  """A short form description for the documentation component."""
  description: String @deprecated(reason: "This field is no longer supported. Please use installer instead.")

  """The human-readable name for the install plan component."""
  displayName: String @deprecated(reason: "This field is no longer supported. Please use installer instead.")
}

"""Input for updating an outlier NRQL condition."""
input AlertsNrqlConditionUpdateOutlierInput {
  """The custom violation description."""
  description: String

  """Whether the NRQL condition is enabled."""
  enabled: Boolean

  """Number of groups expected in the returned values for the condition."""
  expectedGroups: Int

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpirationInput

  """Name of the NRQL condition."""
  name: String

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionUpdateQueryInput

  """Whether overlapping groups should produce a violation."""
  openViolationOnGroupOverlap: Boolean

  """Runbook URL."""
  runbookUrl: String

  """
  Configuration that defines the signal that the NRQL condition will use to evaluate.
  """
  signal: AlertsNrqlConditionSignalInput

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlDynamicConditionTermsInput!]

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes. Default is THIRTY_DAYS.
  """
  violationTimeLimit: AlertsViolationTimeLimit

  """
  Duration after which a violation automatically closes in seconds.
  Accepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).
  
  Default is 3 days (259200 seconds).
  """
  violationTimeLimitSeconds: Seconds
}

"""
The `EpochSeconds` scalar represents the number of seconds since the Unix epoch
"""
scalar EpochSeconds

"""
Specifies fields required for types that implement the ability to display a media preview in the New Relic One Catalog
"""
interface Nr1CatalogPreview {
  """The publicly accessible URL for the preview"""
  url: String!
}

"""The input for creating a new Slack notification channel."""
input AlertsSlackNotificationChannelCreateInput {
  """Notification channel name."""
  name: String!

  """Slack channel name."""
  teamChannel: String

  """Slack channel URL."""
  url: SecureValue!
}

"""
For users on our New Relic One user model, a "group" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.
"""
type UserManagementUserGroup {
  """the name of the object"""
  displayName: String!

  """a value that uniquely identifies this object"""
  id: ID!
}

"""This object exposes contextual information about an API request."""
type RequestContext {
  """The API key used to make this request"""
  apiKey: String

  """The id of the user making this request"""
  userId: ID
}

"""Authentication types"""
enum AiNotificationsAuthType {
  """Basic user and password authentication"""
  BASIC

  """OAuth based authentication"""
  OAUTH2

  """Token based authentication"""
  TOKEN
}

"""container for groups enabling cursor based pagination"""
type UserManagementUserGroups {
  """container for groups enabling cursor based pagination"""
  groups: [UserManagementUserGroup!]!

  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""Details needed to create a NRQL drop rule."""
input NrqlDropRulesCreateDropRuleInput {
  """
  The type of drop rule you want. This changes the way your NRQL string is interpreted.
  """
  action: NrqlDropRulesAction!

  """Additional information about the rule."""
  description: String

  """
  The NRQL string used to match data you want to take the specified action on.
  """
  nrql: String!
}

"""App Gateway Integration"""
type CloudAzureAppgatewayIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Success response for deleting an Alerts condition."""
type AlertsConditionDeleteResponse {
  """ID of the deleted Alerts condition."""
  id: ID!
}

"""
Error details about the events to metrics rule that failed to be deleted and why.
"""
type EventsToMetricsDeleteRuleFailure {
  """Information about why the delete failed."""
  errors: [EventsToMetricsError]

  """
  Input information about a submitted rule that was unable to be deleted.
  """
  submitted: EventsToMetricsDeleteRuleSubmission
}

"""Information about any errors encountered while updating values."""
type AgentApplicationSettingsUpdateError {
  """A 'human readable' description of the error."""
  description: String

  """The category of the error."""
  errorClass: AgentApplicationSettingsUpdateErrorClass

  """The field that was being updated when the error was encountered."""
  field: String
}

"""A cloud account linked to a NewRelic account."""
type CloudLinkedAccount {
  """
  The credential. This is a Role ARN for AWS, an application ID for Azure and a service account ID or user account email for GCP.
  """
  authLabel: String!

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """Indicates whether the account disabled."""
  disabled: Boolean

  """
  The cloud account identifier. This is the Account ID in AWS, the Subscription ID in Azure and the Project ID in GCP.
  """
  externalId: String

  """The linked account identifier in NewRelic."""
  id: Int!

  """Get details of one cloud service integration."""
  integration(
    """The cloud service integration identifier."""
    id: Int!
  ): CloudIntegration!

  """Get details of all cloud service integrations."""
  integrations(
    """The cloud integration service slug."""
    service: String
  ): [CloudIntegration!]!

  """Indicate how the metrics will be collected (PUSH/PULL)"""
  metricCollectionMode: CloudMetricCollectionMode!

  """The linked account name in NewRelic."""
  name: String!

  """The New Relic account identifier."""
  nrAccountId: Int!

  """The cloud provider."""
  provider: CloudProvider!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Provides the available values of possible fields that can be sorted"""
enum OrganizationSortKeyEnum {
  """Authentication domain id"""
  ID

  """Authentication domain name"""
  NAME
}

"""The alert severity of the entity."""
enum EntityAlertSeverity {
  """Indicates an entity has a critical violation in progress."""
  CRITICAL

  """Indicates an entity has no violations and therefore is not alerting."""
  NOT_ALERTING

  """Indicates an entity is not configured for alerting."""
  NOT_CONFIGURED

  """Indicates an entity  has a warning violation in progress."""
  WARNING
}

"""The `AccountOutline` object provides basic data about an account."""
type AccountOutline {
  id: Int
  name: String

  """Returns event types that are currently reporting in the account."""
  reportingEventTypes(
    """Filter results to a chosen set of event types."""
    filter: [String]
    timeWindow: TimeWindowInput
  ): [String]
}

"""Email notification channel."""
type AlertsEmailNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """Email channel specific configuration."""
  config: AlertsEmailNotificationChannelConfig!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

"""Webhook header"""
type AlertsWebhookCustomHeaderInput {
  """Header name"""
  name: String!

  """Header value"""
  value: SecureValue!
}

"""Wrapper object for customizable retention namespaces"""
type DataManagementCustomizableRetention {
  """List of customizable event namespaces"""
  eventNamespaces: [DataManagementEventNamespaces]
}

"""SQL Managed Instances"""
input CloudAzureSqlmanagedIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""The group associated to the grant"""
type MultiTenantAuthorizationGrantGroup {
  """The id of the group"""
  id: ID!
}

"""A user-readable error"""
type OrganizationError {
  """A description of the error."""
  message: String!

  """A description of the type of error."""
  type: OrganizationUpdateErrorType!
}

"""
The status of whether data is being sent to the trace observer for a particular data source.
"""
enum EdgeDataSourceStatusType {
  """The data source telemetry is being sent to this trace observer."""
  ACTIVE

  """The data source telemetry is *not* being sent to this trace observer."""
  INACTIVE
}

"""Information about a Time Zone"""
type TimeZoneInfo {
  """The name of the Time Zone"""
  name: String

  """The offset in seconds from UTC"""
  offset: Seconds
}

enum SyntheticMonitorStatus {
  DELETED
  DISABLED
  ENABLED
  FAULTY
  MUTED
  PAUSED
}

"""Firebase Storage Integration"""
type CloudGcpFirebasestorageIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The monitor input values needed to create a Cert Check monitor"""
input SyntheticsCreateCertCheckMonitorInput {
  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The domain of the host that will have its certificate checked"""
  domain: String!

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput!

  """The human readable identifier for the monitor"""
  name: String!

  """
  The desired number of remaining days until the certificate expires to trigger a monitor failure
  """
  numberDaysToFailBeforeCertExpires: Int!

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod!

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus!

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""The input object representing the filter parameters for groups"""
input MultiTenantIdentityGroupFilterInput {
  """Filter groups by capabilities"""
  allowsCapability: MultiTenantIdentityAllowsCapabilityInput

  """Filter groups by authentication domain"""
  authenticationDomainId: MultiTenantIdentityAuthenticationDomainIdInput

  """Filter groups by ID"""
  id: MultiTenantIdentityGroupIdInput

  """Filter groups that contain specific members"""
  members: MultiTenantIdentityGroupMemberIdInput

  """Filter groups by display name"""
  name: MultiTenantIdentityGroupNameInput

  """An organization ID to filter groups by"""
  organizationId: MultiTenantIdentityOrganizationIdInput!
}

"""
A data structure that contains the results of the multi account NRDB query along
with other capabilities that enhance those results.

Direct query results are available through `results`, `totalResult` and
`otherResult`. The query you made is accessible through `nrql`, along with
`metadata` about the query itself.
"""
type CrossAccountNrdbResultContainer {
  """
  In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.
  """
  currentResults: [NrdbResult]

  """Metadata about the query and result."""
  metadata: NrdbMetadata

  """
  The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query that was executed to yield these results.
  """
  nrql: Nrql

  """
  In a `FACET` query, the `otherResult` contains the aggregates representing the events _not_
  contained in an individual `results` facet.
  """
  otherResult: NrdbResult

  """
  In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.
  """
  previousResults: [NrdbResult]

  """Metadata about the execution of an asynchronous NRQL query."""
  queryProgress: NrdbQueryProgress

  """
  The raw query results exactly as they are returned from NRDB. NerdGraph provides no additional transformation.
  """
  rawResponse: NrdbRawResults

  """
  The query results. This is a flat list of objects who's structure matches the query submitted.
  """
  results: [NrdbResult]

  """
  In a `FACET` query, the `totalResult` contains the aggregates representing _all_ the events,
  whether or not they are contained in an individual `results` facet.
  """
  totalResult: NrdbResult
}

"""An entity outline that is unavailable."""
type UnavailableEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""A structured representation of a stack trace for an APM application."""
type StackTraceApmStackTrace {
  """Stack trace frames."""
  frames: [StackTraceApmStackTraceFrame]
}

"""The flamegraph built from the strack trace samples"""
type JavaFlightRecorderFlamegraph {
  """List of stack frames for the flamegraph"""
  allFrames: [JavaFlightRecorderStackFrame]!
}

"""The rolling time window configuration of the SLO."""
input ServiceLevelObjectiveRollingTimeWindowUpdateInput {
  """The count of time units. Accepted values are 1, 7 and 28 days."""
  count: Int!

  """The time unit."""
  unit: ServiceLevelObjectiveRollingTimeWindowUnit!
}

"""An outline of a created alert policy"""
type Nr1CatalogAlertPolicyOutline {
  """A list of created alert conditions under this policy"""
  conditions: [Nr1CatalogAlertConditionOutline!]

  """The id of the created alert policy"""
  id: ID!
}

"""Input type for RelativeRegularExpression expression"""
input AiDecisionsRelativeRegularExpressionInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!

  """Value to be used in comparison."""
  value: String!
}

"""
Determines whether a threshold is statically configured or dynamically configured.
"""
enum AgentApplicationSettingsThresholdTypeEnum {
  """Configures the threshold to be 4 times the value of APDEX_T."""
  APDEX_F

  """
  Threshold will be statically configured via the corresponding "value" field.
  """
  VALUE
}

"""Status of the workload."""
type WorkloadWorkloadStatus {
  """
  A description that provides additional details about the status of the workload.
  """
  description: String

  """Indicates where the status value derives from."""
  source: WorkloadStatusSource!

  """
  The details of the statuses that were involved in the calculation of the workload status.
  """
  statusDetails: [WorkloadStatusResult!]

  """A short description of the status of the workload."""
  summary: String

  """The status of the workload."""
  value: WorkloadStatusValue!
}

"""An object representing a stack trace segment"""
type StackTraceApmStackTraceFrame {
  """Frame filepath"""
  filepath: String

  """Formatted frame"""
  formatted: String!

  """Frame line number"""
  line: Int

  """Frame name"""
  name: String
}

"""Destinations result object"""
type AiNotificationsDestinationsResponse {
  """Destination entities"""
  entities: [AiNotificationsDestination!]!

  """Error in destinations entities fetching"""
  error: AiNotificationsResponseError

  """Deprecated list of errors"""
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """Cursor to get the next batch of results"""
  nextCursor: String

  """Count of all destination entities"""
  totalCount: Int!
}

"""Test error description"""
type AiWorkflowsTestResponseError implements AiWorkflowsResponseError {
  """The error description"""
  description: String!

  """The error type"""
  type: AiWorkflowsTestErrorType!
}

"""Input for creating an obfuscation rule."""
input LogConfigurationsCreateObfuscationRuleInput {
  """
  Actions for the rule. The actions will be applied in the order specified by this list.
  """
  actions: [LogConfigurationsCreateObfuscationActionInput!]!

  """Description of rule."""
  description: String

  """Whether the rule should be applied or not to incoming data."""
  enabled: Boolean!

  """
  NRQL for determining whether a given log record should have obfuscation actions applied.
  """
  filter: Nrql!

  """Name of rule."""
  name: String!
}

"""MQ Integration"""
type CloudAwsMqIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.
"""
interface ApmBrowserApplicationEntity {
  apmBrowserSummary: ApmBrowserApplicationSummaryData
}

"""Browser Ajax."""
type AgentApplicationSettingsBrowserAjax {
  """List of domains excluded from Ajax traces by the browser agent."""
  denyList: [String!]
}

"""
The `EpochMilliseconds` scalar represents the number of milliseconds since the Unix epoch
"""
scalar EpochMilliseconds

"""
A baseline NRQL condition is a self-adjusting condition based on the past behavior of a monitored NRQL query.
"""
type AlertsNrqlBaselineCondition implements AlertsNrqlCondition {
  """Direction in which the baseline is set on condition."""
  baselineDirection: AlertsNrqlBaselineDirection!

  """The custom violation description."""
  description: String

  """Whether the condition is enabled."""
  enabled: Boolean!

  """The Entity associated with the NRQL Condition"""
  entity: EntityOutline

  """The condition's entity GUID"""
  entityGuid: EntityGuid!

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpiration!

  """Condition ID."""
  id: ID!

  """Name of the condition."""
  name: String!

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionQuery!

  """Alerts policy ID."""
  policyId: ID!

  """Runbook URL."""
  runbookUrl: String

  """Settings that determine how the NRQL results are evaluated"""
  signal: AlertsNrqlConditionSignal!

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlConditionTerms!]!

  """Type of NRQL condition."""
  type: AlertsNrqlConditionType!

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes.
  """
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  """Duration after which a violation automatically closes in seconds."""
  violationTimeLimitSeconds: Seconds
}

"""EC2 Integration"""
type CloudEc2Integration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size
  """
  duplicateEc2Tags: Boolean

  """Specify if IP addresses of ec2 instance should be collected"""
  fetchIpAddresses: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""A list of all keys scoped to the current actor."""
type ApiAccessKeySearchResult {
  """The total number of keys found in scope, irrespective of pagination."""
  count: Int

  """A list of all keys scoped to the current actor."""
  keys: [ApiAccessKey]

  """
  The next cursor, used for pagination. If a cursor is present, it means more keys can be fetched.
  """
  nextCursor: String
}

"""An entity that is unavailable."""
type UnavailableEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""An account share's source or target organization"""
type OrganizationAccountShareOrganizationWrapper {
  """id"""
  id: ID

  """name"""
  name: String
}

"""Predicate Object"""
type AiWorkflowsPredicate {
  """Field name in the issue event"""
  attribute: String!

  """Type of operator used to match the values"""
  operator: AiWorkflowsOperator!

  """Values to compare"""
  values: [String!]!
}

"""Represents a number of opinions."""
type AiDecisionsOpinionEntry {
  """Number of this type of opinion."""
  count: Int!

  """Type of opinion."""
  opinion: AiDecisionsOpinion!
}

"""
Monitor downtime object returned to the customer once a monitor downtime is deleted
"""
type SyntheticsMonitorDowntimeDeleteResult {
  """The entity guid of the deleted MonitorDowntime"""
  guid: EntityGuid
}

"""A Cloud Provider service available for monitoring."""
type CloudService {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service dashboard templates."""
  dashboards: [CloudDashboardTemplate!]!

  """The cloud service icon name."""
  icon: String!

  """The cloud service identifier in NewRelic."""
  id: Int!

  """Shows if the cloud service is enabled for integrating."""
  isEnabled: Boolean!

  """The cloud service name."""
  name: String!

  """The cloud provider."""
  provider: CloudProvider!

  """The cloud service unique short name."""
  slug: String!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""A Key Transaction entity."""
type KeyTransactionEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """
  The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).
  """
  apdexTarget: Float!

  """The application associated with this key transaction"""
  application: KeyTransactionApplication!

  """
  The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
  """
  browserApdexTarget: Float

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of the metric underlying this key transaction."""
  metricName: String!

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Channel fields to filter by"""
enum AiNotificationsChannelFields {
  """active field"""
  ACTIVE

  """created timestamp field"""
  CREATED_AT

  """default field"""
  DEFAULT

  """destination id field"""
  DESTINATION_ID

  """name field"""
  NAME

  """product field"""
  PRODUCT

  """status field"""
  STATUS

  """type field"""
  TYPE

  """updated timestamp field"""
  UPDATED_AT

  """updated_by field"""
  UPDATED_BY
}

"""Data required to delete a trace observer."""
input EdgeDeleteTraceObserverInput {
  """Globally unique identifier of the trace observer being deleted."""
  id: Int!
}

"""Bigtable Integration"""
type CloudGcpBigtableIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Interconnect Integration"""
type CloudGcpInterconnectIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Information about the mutation result when installing a dashboard template
"""
type Nr1CatalogInstallDashboardTemplateResult {
  """An outline of the created dashboard"""
  createdDashboard: Nr1CatalogDashboardOutline!

  """The template that was used for the installation"""
  dashboardTemplate: Nr1CatalogDashboardTemplate!
}

"""State of suggestion"""
enum AiDecisionsSuggestionState {
  """Suggestion is accepted"""
  ACCEPTED

  """Suggestion is declined"""
  DECLINED

  """Suggestion is postponed"""
  POSTPONED

  """Suggestion is undecided"""
  UNDECIDED
}

"""The field type for stitching into the NerdGraph schema."""
type AccountManagementOrganizationStitchedFields {
  """Admin-level info about the accounts in an organization."""
  managedAccounts(
    """Input for filtering by canceled status"""
    isCanceled: Boolean
  ): [AccountManagementManagedAccount!]
}

"""Categories of errors that could occur while attempting updates."""
enum AgentApplicationSettingsUpdateErrorClass {
  """You are not authorized to update this field."""
  ACCESS_DENIED

  """The given value for the field is not valid or out of range."""
  INVALID_INPUT

  """No record could be found using the given input value."""
  NOT_FOUND
}

"""Variable fields to filter by"""
enum AiNotificationsVariableFields {
  """active field"""
  ACTIVE

  """default field"""
  DEFAULT

  """description field"""
  DESCRIPTION

  """example field"""
  EXAMPLE

  """key field"""
  KEY

  """label field"""
  LABEL

  """name field"""
  NAME

  """product field"""
  PRODUCT

  """type field"""
  TYPE
}

"""The type of error."""
enum ApiAccessUserKeyErrorType {
  """
  Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
  """
  FORBIDDEN

  """
  Occurs when the action taken on a key did not successfully pass validation.
  """
  INVALID

  """Occurs when the requested key `id` was not found."""
  NOT_FOUND
}

"""Amazon API Gateway"""
input CloudApigatewayIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.
  """
  stagePrefixes: [String]

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""NRQL type enrichment input object"""
input AiWorkflowsNrqlEnrichmentInput {
  """configuration"""
  configuration: [AiWorkflowsNrqlConfigurationInput!]!

  """name"""
  name: String!
}

"""The result of a Script Api monitor update mutation"""
type SyntheticsScriptApiMonitorUpdateMutationResult {
  """Errors that occurred during Script Api monitor update mutation"""
  errors: [SyntheticsMonitorUpdateError]!

  """The resulting Script Api monitor"""
  monitor: SyntheticsScriptApiMonitor
}

"""Type of deployment."""
enum ChangeTrackingDeploymentType {
  """A vanilla deployment"""
  BASIC

  """Blue-green deployment"""
  BLUE_GREEN

  """Canary deployment"""
  CANARY

  """Other types of deployment."""
  OTHER

  """Rolling deployment."""
  ROLLING

  """Shadow deployment"""
  SHADOW
}

"""
A result set containing multiple notification channels and pagination info.
"""
type AlertsNotificationChannelsResultSet {
  """A set of channels."""
  channels: [AlertsNotificationChannel!]!

  """
  Cursor pointing to the end of the current page of channels. Null if final page.
  """
  nextCursor: String

  """Total number of channels available."""
  totalCount: Int!
}

"""
The input object used to represent the configuration of a static status.
"""
input WorkloadStaticStatusInput {
  """
  A description that provides additional details about the status of the workload.
  """
  description: String

  """Whether the static status configuration is enabled or not."""
  enabled: Boolean!

  """The status of the workload."""
  status: WorkloadStatusValueInput!

  """A short description of the status of the workload."""
  summary: String
}

"""Details about if or how frequently a MutingRule's schedule repeats."""
enum AlertsMutingRuleScheduleRepeat {
  """Schedule repeats once per calendar day"""
  DAILY

  """Schedule repeats once per calendar month"""
  MONTHLY

  """Schedule repeats once per specified day per calendar week"""
  WEEKLY
}

"""The success response for deleting a MutingRule."""
type AlertsMutingRuleDeleteResponse {
  """The id of the deleted MutingRule."""
  id: ID!
}

"""The Accounts used to scope a collection."""
type EntityCollectionScopeAccounts {
  """The Account IDs that make up the account scoping."""
  accountIds: [Int]
}

"""A generic entity."""
type GenericEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""The input object representing the filter parameters for user groups"""
input MultiTenantIdentityGroupUserFilterInput {
  """Filter users by IDs"""
  id: MultiTenantIdentityUserIdInput
}

"""Filter on relationship types."""
input EntityRelationshipEdgeTypeFilter {
  """
  Filter the relationships to those that are not of specific relationship types.
  """
  exclude: [EntityRelationshipEdgeType!]

  """Filter the relationships to those of specific relationship types."""
  include: [EntityRelationshipEdgeType!]
}

"""
The `CustomerAdministration` object contains fields for managing the configuration that defines the business relationships between New Relic, partners, and customers.
"""
type CustomerAdministration {
  """Accessible account shares"""
  accountShares(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationAccountShareFilterInput!

    """Sort account share results"""
    sort: [OrganizationAccountShareSortInput!]
  ): OrganizationAccountShareCollection

  """accounts"""
  accounts(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationAccountFilterInput!

    """Sort Accounts"""
    sort: [OrganizationAccountSortInput!]
  ): OrganizationAccountCollection

  """Authentication domains"""
  authenticationDomains(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """Filter authentication domain results"""
    filter: OrganizationAuthenticationDomainFilterInput!

    """Order authentication domain results"""
    sort: [OrganizationAuthenticationDomainSortInput!]
  ): OrganizationAuthenticationDomainCollection

  """
  The `consumption` field is the entry point into a customer's consumption data that is scoped to the ID of the customer.
  """
  consumption(
    """The ID of the customer."""
    customerId: ID!
  ): Consumption

  """Accessible contracts"""
  contracts(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationCustomerContractFilterInput
  ): OrganizationCustomerContractWrapper

  """list of grants"""
  grants(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """allows filtering of the data"""
    filter: MultiTenantAuthorizationGrantFilterInputExpression!

    """allows sorting of the data"""
    sort: [MultiTenantAuthorizationGrantSortInput!]
  ): MultiTenantAuthorizationGrantCollection

  """Named sets of New Relic users within an authentication domain"""
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter groups"""
    filter: MultiTenantIdentityGroupFilterInput!

    """Sort groups"""
    sort: [MultiTenantIdentityGroupSortInput!]
  ): MultiTenantIdentityGroupCollection

  """
  This provides access to fields you can use to check the status of asynchronous jobs related to customer administration.
  """
  jobs: CustomerAdministrationJobs

  """Accessible organizations"""
  organizations(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """The filter"""
    filter: OrganizationCustomerOrganizationFilterInput
  ): OrganizationCustomerOrganizationWrapper

  """list of permissions"""
  permissions(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """allows filtering of the data"""
    filter: MultiTenantAuthorizationPermissionFilter
  ): MultiTenantAuthorizationPermissionCollection

  """list of roles"""
  roles(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """allows filtering of the data"""
    filter: MultiTenantAuthorizationRoleFilterInputExpression!

    """allows sorting of the data"""
    sort: [MultiTenantAuthorizationRoleSortInput!]
  ): MultiTenantAuthorizationRoleCollection

  """The authenticated `User` who made this request."""
  user: User

  """A collection of New Relic users"""
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter users"""
    filter: MultiTenantIdentityUserFilterInput!

    """Sort users"""
    sort: [MultiTenantIdentityUserSortInput!]
  ): MultiTenantIdentityUserCollection
}

"""Cloud Spanner Integration"""
type CloudGcpSpannerIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Configuration that defines the signal that the NRQL condition will use to evaluate.
"""
input AlertsNrqlConditionSignalInput {
  """
  How long we wait for data that belongs in each aggregation window. Depending
  on your data, a longer delay may increase accuracy but delay notifications.
  
  Use `aggregationDelay` with the `EVENT_FLOW` and `CADENCE` methods. The maximum
  delay is **1200 seconds** (20 minutes) when using `EVENT_FLOW` and **3600 seconds**
  (60 minutes) when using `CADENCE`. In both cases, the minimum delay is **0 seconds**
  and the default is **120 seconds**.
  
  When using `aggregationDelay`, do **not** use `evaluationOffset`.
  """
  aggregationDelay: Seconds

  """
  The method that determines when we consider an aggregation window to be complete
  so that we can evaluate the signal for violations. Default is `EVENT_FLOW`.
  
  When using any `aggregationMethod`, do **not** use `evaluationOffset`.
  
  When using the `aggregationMethod` with `EVENT_TIMER`, use `aggregationTimer`.
  For `EVENT_FLOW` and `CADENCE`, use `aggregationDelay`.
  """
  aggregationMethod: AlertsSignalAggregationMethod

  """
  How long we wait after each data point arrives to make sure we've processed
  the whole batch.
  
  Use `aggregationTimer` with the `EVENT_TIMER` method. The timer value can range
  from **5 seconds** to **1200 seconds** (20 minutes); the default is **60 seconds**.
  
  When using `aggregationTimer`, do **not** use `evaluationOffset`.
  """
  aggregationTimer: Seconds

  """
  Aggregation window controls the duration of the time window used to evaluate the NRQL query, in seconds.
  The value must be at least 30 seconds, and no more than 6 hours (21600 seconds). Default is 60 seconds.
  """
  aggregationWindow: Seconds

  """
  How long we wait until the signal starts evaluating. The maximum delay is **7200 seconds** (120 minutes).
  """
  evaluationDelay: Seconds

  """
  Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.
  
  By default, we evaluate the NRQL query in one-minute time windows. The start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.
  
  This value is the number of time windows we look back at the aggregated data.
  
  Example: With an `evaluationOffset` of 3 and a 1 minute aggregation window, the NRQL time window applied to your query will be:
  
  `SINCE 3 minutes ago UNTIL 2 minutes ago`
  """
  evaluationOffset: Int

  """
  Option that determines the type of value that should be used to fill gaps (empty windows). Defaults to STATIC.
  
  Outlier NRQL conditions may only use NONE.
  """
  fillOption: AlertsFillOption

  """
  If using the static fill option, this the value used for filling. Defaults to 0.
  """
  fillValue: Float

  """
  This setting gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends.
  
  The `slideBy` value is specified in seconds and must be **smaller than** and **a factor of** the `aggregationWindow`.
  
  Cannot be used with:
  - Outlier NRQL conditions
  """
  slideBy: Seconds
}

"""
Description of errors that may occur while attempting to create a span attribute trace filter rule.
"""
type EdgeCreateSpanAttributeRuleResponseError {
  """Error message, with further detail to help resolve the issue."""
  message: String!

  """Error that may occur while attempting to create a trace filter rule."""
  type: EdgeCreateSpanAttributeRuleResponseErrorType!
}

"""
Expected default error types as result of mutating an existing data partition rule.
"""
enum LogConfigurationsDataPartitionRuleMutationErrorType {
  """Number format error. ID should be convertible to int."""
  INVALID_ID

  """Partition rule must be specified with a valid nrql where clause"""
  INVALID_RULE

  """Couldn't find the provided data partition rule."""
  NOT_FOUND
}

"""
Configuration for visualization type 'viz.billboard'. Learn more about [billboard](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#billboard) widget.
"""
input DashboardBillboardWidgetConfigurationInput {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]

  """
  Array of thresholds to categorize the results of the query in different groups.
  """
  thresholds: [DashboardBillboardWidgetThresholdInput!]
}

"""Destination types"""
enum AiNotificationsDestinationType {
  """Email destination type"""
  EMAIL

  """EventBridge destination type"""
  EVENT_BRIDGE

  """Jira destination type"""
  JIRA

  """Mobile push destination type"""
  MOBILE_PUSH

  """PagerDuty destination type"""
  PAGERDUTY_ACCOUNT_INTEGRATION

  """PagerDuty destination type}"""
  PAGERDUTY_SERVICE_INTEGRATION

  """ServiceNow destination type"""
  SERVICE_NOW

  """ServiceNow app destination type"""
  SERVICE_NOW_APP

  """Slack destination type"""
  SLACK

  """Slack Collaboration destination type"""
  SLACK_COLLABORATION

  """Legacy Slack destination type based on Incoming Webhooks"""
  SLACK_LEGACY

  """WebHook destination type"""
  WEBHOOK
}

"""The result of a Cert Check monitor update mutation"""
type SyntheticsCertCheckMonitorUpdateMutationResult {
  """Errors that occurred during Cert Check monitor update mutation"""
  errors: [SyntheticsMonitorUpdateError]!

  """The resulting Cert Check monitor"""
  monitor: SyntheticsCertCheckMonitor
}

"""A notification channel."""
interface AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

"""
Input data that maps ignore status codes associated with different hosts.
"""
input AgentApplicationSettingsIgnoredStatusCodeRuleInput {
  """An array of hosts to apply the status code rule to."""
  hosts: [String!]!

  """An array of status codes to be be ignored on these hosts."""
  statusCodes: [String!]!
}

"""Billboard widget threshold input."""
input DashboardBillboardWidgetThresholdInput {
  """Severity of the alert."""
  alertSeverity: DashboardAlertSeverity

  """Value of the alert."""
  value: Float
}

"""An object for updating an existing data partition rule."""
input LogConfigurationsUpdateDataPartitionRuleInput {
  """The description of the data partition rule."""
  description: String

  """Whether or not this data partition rule is enabled."""
  enabled: Boolean

  """Unique data partition rule identifier."""
  id: ID!

  """The criteria of the data partition rule."""
  matchingCriteria: LogConfigurationsDataPartitionRuleMatchingCriteriaInput

  """
  The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.
  """
  nrql: Nrql
}

"""Available filtering types for pending upgrade requests"""
input MultiTenantIdentityPendingUpgradeRequestInput {
  """Whether a request exists or not"""
  exists: Boolean!
}

"""Configure mobile settings here."""
input AgentApplicationSettingsMobileSettingsInput {
  """Input arguments for network settings."""
  networkSettings: AgentApplicationSettingsNetworkSettingsInput

  """
  Sets if application should use crash report or not for mobile settings.
  """
  useCrashReports: Boolean
}

"""Reusable obfuscation expression."""
type LogConfigurationsObfuscationExpression {
  """Identifies the date and time when the expression was created."""
  createdAt: DateTime!

  """Identifies the user who has created the expression."""
  createdBy: UserReference

  """Description of the expression."""
  description: String

  """The id of the obfuscation expression."""
  id: ID!

  """Name of the expression."""
  name: String!

  """
  Regular expression for this obfuscation expression. Capture groups will be obscured on matching.
  """
  regex: String!

  """Identifies the date and time when the expression was last updated."""
  updatedAt: DateTime!

  """Identifies the user who has last updated the expression."""
  updatedBy: UserReference
}

"""Cloud SQL Integration"""
type CloudGcpSqlIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The information common to all endpoints."""
interface EdgeEndpointDetail {
  """Full host name that is used to connect to the endpoint."""
  host: String!

  """Port that is used to connect to the endpoint."""
  port: Int!
}

"""Sort order"""
enum AiNotificationsSortOrder {
  """Ascending sort order"""
  ASC

  """Descending sort order"""
  DESC
}

"""
Details about the contact channel where users can get support via email
"""
input Nr1CatalogEmailContactChannelInput {
  """The email address where users can get email support"""
  address: String!
}

"""Schema field object"""
type AiNotificationsSchemaField {
  """UI Component details"""
  component: AiNotificationsUiComponent!

  """Field key"""
  key: String!

  """Field label shown in the UI"""
  label: String!

  """Is the field mandatory"""
  mandatory: Boolean!
}

"""Attributes to match a specific nerdpack versions."""
input NerdpackOverrideVersionRules {
  """Nerdpack uuid."""
  nerdpackId: ID!

  """Nerdpack version tag."""
  tag: NerdpackTagName

  """Semver-compliant Nerdpack version."""
  version: SemVer
}

"""Provides all the available filters on the role name"""
input MultiTenantAuthorizationRoleNameInputFilter {
  """performs an equals operation"""
  eq: String!
}

"""The Amazon Web Services cloud provider (GovCloud)"""
type CloudAwsGovCloudProvider implements CloudProvider {
  """The AWS Account ID"""
  awsAccountId: String!

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud provider icon name."""
  icon: String!

  """The cloud provider identifier in NewRelic."""
  id: Int!

  """The cloud provider name."""
  name: String!

  """Get details of one cloud provider service."""
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  """
  Get details of all the cloud provider services available for integration.
  """
  services: [CloudService!]!

  """The cloud provider short name."""
  slug: String!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Browser monitoring's page load timing feature can track sessions by using cookies that contain a simple session identifier.
"""
input AgentApplicationSettingsBrowserPrivacyInput {
  """If enabled, enables cookies."""
  cookiesEnabled: Boolean
}

"""
Notification channel types that are available for create and update operations.
"""
union AlertsNotificationChannelMutation = AlertsEmailNotificationChannel | AlertsOpsGenieNotificationChannel | AlertsPagerDutyNotificationChannel | AlertsSlackNotificationChannel | AlertsVictorOpsNotificationChannel | AlertsWebhookNotificationChannel | AlertsXMattersNotificationChannel

"""Information about an alert in a quickstart"""
type Nr1CatalogQuickstartAlert implements Nr1CatalogQuickstartComponent {
  """The unique identifier for the alert"""
  id: ID! @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")

  """Metadata associated with the alert"""
  metadata: Nr1CatalogQuickstartAlertMetadata! @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")
}

"""A group of MutingRuleConditions combined by an operator."""
type AlertsMutingRuleConditionGroup {
  """The individual MutingRuleConditions within the group."""
  conditions: [AlertsMutingRuleCondition!]!

  """
  The operator used to combine all the MutingRuleConditions within the group.
  """
  operator: AlertsMutingRuleConditionGroupOperator!
}

"""
The status of a MutingRule based on whether it is Enabled and has a Schedule
"""
enum AlertsMutingRuleStatus {
  """Muting is enabled and active."""
  ACTIVE

  """Muting is enabled, but no longer active (there's no future schedule)."""
  ENDED

  """Muting is disabled."""
  INACTIVE

  """Muting is enabled but not active yet (there's a future schedule)."""
  SCHEDULED
}

"""App Service Integration"""
type CloudAzureAppserviceIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Filter on entity domain-types."""
input EntityRelationshipEntityDomainTypeFilter {
  """
  Filter the relationships to those between entities that are not of specific domain-types.
  """
  exclude: [DomainTypeInput!]

  """
  Filter the relationships to those between entities of specific domain-types.
  """
  include: [DomainTypeInput!]
}

"""Metadata associated with the alert policy template"""
type Nr1CatalogAlertPolicyTemplateMetadata {
  """A list of authors that created the alert policy template"""
  authors: [Nr1CatalogAuthor!]!

  """
  The list of categories for filtering, searching, and grouping associated with the alert policy template
  """
  categories: [Nr1CatalogCategory!]!

  """The list of category terms associated with the alert policy template"""
  categoryTerms: [String!]!

  """
  The list of alert condition templates attached to the alert policy template
  """
  conditions: [Nr1CatalogAlertConditionTemplate!]!

  """The human-readable name for the alert policy template"""
  displayName: String

  """The corresponding icon for the alert policy template"""
  icon: Nr1CatalogIcon

  """
  A list of required data sources needed to populate data in the alert policy.
  """
  requiredDataSources: [Nr1CatalogDataSource!]!
}

"""Permissions that represent visibility & editing."""
enum DashboardPermissions {
  """Only you can see the dashboard. Everything but the metadata is hidden."""
  PRIVATE

  """
  All users are able to see the dashboard, but only you have full rights to work with the dashboard. Other users can access the dashboard but are not able to edit or delete it, although they can duplicate it.
  """
  PUBLIC_READ_ONLY

  """All users have full rights to the dashboard."""
  PUBLIC_READ_WRITE
}

"""Expected error types as result of creating a new data partition rule."""
enum LogConfigurationsCreateDataPartitionRuleErrorType {
  """A data partition rule with the provided name already exists."""
  DUPLICATE_DATA_PARTITION_RULE_NAME

  """The provided data partition does not match the validation requirements"""
  INVALID_DATA_PARTITION_INPUT

  """
  Customer has reached the maximum number of allowed data partition rules.
  """
  MAX_DATA_PARTITION_RULES
}

"""The response for deleting a notification channel."""
type AlertsNotificationChannelDeleteResponse {
  """Error."""
  error: AlertsNotificationChannelDeleteError

  """Notification channel ID."""
  id: ID!
}

"""Represents a date time window."""
type DateTimeWindow {
  """The end date and time expressed as an ISO8601 formatted string"""
  endTime: DateTime

  """The start date and time expressed as an ISO8601 formatted string"""
  startTime: DateTime
}

"""Information about a nerdlet install directive"""
type Nr1CatalogNerdletInstallDirective {
  """The nerdlet ID used to guide the user through installation"""
  nerdletId: ID!

  """The nerdlet state used to intialize the nerdlet"""
  nerdletState: Nr1CatalogRawNerdletState

  """
  Determines if an account selection needs to be made prior to installation
  """
  requiresAccount: Boolean!
}

"""
The groupings and counts of entities returned for the specified criteria.
"""
type EntitySearchCounts {
  """The number of entities that match the specified criteria."""
  count: Int

  """The group of entities returned for the specified criteria."""
  facet: AttributeMap
}

"""Event object that contains data about the event and its attributes"""
type DataDictionaryEvent {
  """List of attributes in this event"""
  attributes: [DataDictionaryAttribute!]!

  """List of places where this event comes from"""
  dataSources: [DataDictionaryDataSource!]!

  """A description of the event"""
  definition(
    """Specify the text format for the definition"""
    format: DataDictionaryTextFormat = PLAIN
  ): String

  """The official name of this event"""
  name: String!
}

"""The resulting NRQL SELECT clause to aggregate events."""
type ServiceLevelEventsQuerySelect {
  """The attribute used in the selected function."""
  attribute: String

  """The function to use in the SELECT clause."""
  function: ServiceLevelEventsQuerySelectFunction!

  """The threshold used in the selected function."""
  threshold: Float
}

"""container for users enabling cursor based pagination"""
type UserManagementGroupUsers {
  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!

  """container for users enabling cursor based pagination"""
  users: [UserManagementGroupUser!]!
}

"""Mobile application summary data"""
type MobileAppSummaryData {
  """The number of times the app has been launched."""
  appLaunchCount: Int

  """The number of crashes."""
  crashCount: Int

  """Crash rate is percentage of crashes per sessions."""
  crashRate: Float

  """Error rate is the percentage of http errors per successful requests."""
  httpErrorRate: Float

  """The number of http requests."""
  httpRequestCount: Int

  """The rate of http requests per minute."""
  httpRequestRate: Float

  """The average response time for all http calls."""
  httpResponseTimeAverage: Seconds

  """The number of mobile sessions."""
  mobileSessionCount: Int

  """
  Network failure rate is the percentage of network failures per successful requests.
  """
  networkFailureRate: Float

  """The number of users affected by crashes."""
  usersAffectedCount: Int
}

"""AWS input parameters for a new streaming rule"""
input StreamingExportAwsInput {
  """The AWS account to which the target firehose belongs"""
  awsAccountId: ID!

  """The name of the delivery stream to write events to"""
  deliveryStreamName: String!

  """The AWS region the delivery stream is located in"""
  region: String!

  """The role configured for New Relic to assume"""
  role: String!
}

"""Status of the test notification"""
enum AiWorkflowsTestNotificationResponseStatus {
  """The test notification failed"""
  FAILURE

  """The test notification succeeded"""
  SUCCESS
}

"""Azure App Service"""
input CloudAzureAppserviceIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""A group of MutingRuleConditions combined by an operator."""
input AlertsMutingRuleConditionGroupInput {
  """The individual MutingRuleConditions within the group."""
  conditions: [AlertsMutingRuleConditionInput!]!

  """
  The operator used to combine all the MutingRuleConditions within the group.
  """
  operator: AlertsMutingRuleConditionGroupOperator!
}

"""UI component object"""
type AiNotificationsUiComponent {
  """Should we allow variables rendering in this component"""
  allowTemplateVariables: Boolean!

  """Which data validation is applied to this component"""
  dataValidation: AiNotificationsUiComponentValidation!

  """Default value of this component"""
  defaultValue: AiNotificationsSuggestion

  """Additional options for SELECT type components"""
  selectOptions: AiNotificationsSelectComponentOptions

  """Component type"""
  type: AiNotificationsUiComponentType!

  """Is this component a part of the default fields"""
  visibleByDefault: Boolean!
}

"""Autogenerated return type of DeleteGroup."""
type UserManagementDeleteGroupPayload {
  """The group that was deleted"""
  group: UserManagementGroup
}

"""Enum of monitor period types"""
enum SyntheticsMonitorPeriod {
  """10 minute monitor period"""
  EVERY_10_MINUTES

  """12 hour monitor period (720 minutes)"""
  EVERY_12_HOURS

  """15 minute monitor period"""
  EVERY_15_MINUTES

  """30 minute monitor period"""
  EVERY_30_MINUTES

  """5 minute monitor period"""
  EVERY_5_MINUTES

  """6 hour monitor period (360 minutes)"""
  EVERY_6_HOURS

  """1 day monitor period (1440 minutes)"""
  EVERY_DAY

  """1 hour monitor period (60 minutes)"""
  EVERY_HOUR

  """1 minute monitor period"""
  EVERY_MINUTE
}

"""A container specifying the various types support channels"""
input Nr1CatalogSupportInput {
  """A support channel where users can get support via the community"""
  community: Nr1CatalogCommunityContactChannelInput

  """A support channel where users can get support via email"""
  email: Nr1CatalogEmailContactChannelInput

  """A support channel where users can get support via issues"""
  issues: Nr1CatalogIssuesContactChannelInput
}

"""Amazon Virtual Private Cloud (VPC)"""
input CloudVpcIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchNatGateway: Boolean

  """
  Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchVpn: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Metadata associated with the alert condition template"""
type Nr1CatalogAlertConditionTemplateMetadata {
  """A short form description for the alert condition template"""
  description: String

  """The human-readable name for the alert condition template"""
  displayName: String

  """Determines the type of alert condition template that will be created"""
  type: Nr1CatalogAlertConditionType!
}

"""BigQuery Integration"""
type CloudGcpBigqueryIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """Fetch BigQuery Table metrics, disabled by default"""
  fetchTableMetrics: Boolean

  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Windowed view of an account's decisions."""
type AiDecisionsDecisionListing {
  """Number of decisions in this window."""
  count: Int!

  """List of decisions in this window."""
  decisions: [AiDecisionsDecision!]!

  """Cursor used to fetch next page."""
  nextCursor: String

  """Cursor used to fetch previous page."""
  prevCursor: String
}

"""A customers organization groups"""
type OrganizationOrganizationGroupWrapper {
  """A customers organization groups"""
  items: [OrganizationOrganizationGroup!]

  """
  an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

"""
Error details about the events to metrics rule that failed to be created and why.
"""
type EventsToMetricsCreateRuleFailure {
  """Information about why the create failed."""
  errors: [EventsToMetricsError]

  """
  Input information about a submitted rule that was unable to be created.
  """
  submitted: EventsToMetricsCreateRuleSubmission
}

"""A workload entity."""
type WorkloadEntity implements AlertableEntity & CollectionEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]
  collection(
    """The name of the collection to fetch."""
    name: String!
  ): EntityCollection

  """When the workload was created."""
  createdAt: EpochMilliseconds

  """The user that created the workload."""
  createdByUser: UserReference

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String

  """When the workload was last updated."""
  updatedAt: EpochMilliseconds

  """Status of the workload."""
  workloadStatus: WorkloadStatus
}

"""Delete workflow mutation response including errors"""
type AiWorkflowsDeleteWorkflowResponse {
  """
  A list of errors that occurred while performing the delete workflow action
  """
  errors: [AiWorkflowsDeleteResponseError!]!

  """Id of the successfully deleted workflow"""
  id: ID
}

"""Provides the operations available on the target id"""
input OrganizationTargetIdInput {
  """An organization id"""
  eq: ID!
}

"""Input data for allow list handling."""
input NerdpackAllowListInput {
  """
  List of accounts that will be allow to subscribe. They must belong to the user's authorized account list.
  """
  accountIds: [Int]!
}

"""Autogenerated return type of RevokeAccess"""
type AuthorizationManagementRevokeAccessPayload {
  """the roles that were revoked from this group"""
  roles: [AuthorizationManagementGrantedRole!]!
}

"""Provides all the available filters on the organization group name"""
input OrganizationOrganizationGroupNameInputFilter {
  """performs a contains operation"""
  contains: String

  """performs an equals operation"""
  eq: String
}

"""Event namespace"""
type DataManagementEventNamespaces {
  """The upper limit for the retention value"""
  maxRetentionInDays: Int

  """The lower limit for the retention value"""
  minRetentionInDays: Int

  """The name of a namespace"""
  namespace: String
}

"""The monitor values that can be updated on a Broken Links monitor"""
input SyntheticsUpdateBrokenLinksMonitorInput {
  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]

  """The uri the monitor runs against"""
  uri: String
}

"""CloudTrail Integration"""
type CloudCloudtrailIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""container for users enabling cursor based pagination"""
type UserManagementUsers {
  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!

  """container for users enabling cursor based pagination"""
  users: [UserManagementUser!]!
}

"""Datastore"""
input CloudGcpDatastoreIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""The return object for an update mutation."""
type OrganizationUpdateResponse {
  """A description of any errors with the mutation."""
  errors: [OrganizationError!]!

  """Information about the updated organization."""
  organizationInformation: OrganizationInformation
}

"""Fetch Metadata for AWS integrations"""
input CloudAwsMetadataIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Input type used to define the context for the golden metrics."""
input EntityGoldenContextInput {
  """Account context."""
  account: Int

  """Collection guid context."""
  guid: EntityGuid
}

"""
A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
"""
type MultiTenantIdentityUserType {
  """The id of the user type."""
  id: ID!

  """The name of the user type."""
  name: String!
}

"""The return object for an update-account mutation."""
type AccountManagementUpdateResponse {
  """Information about an updated account"""
  managedAccount: AccountManagementManagedAccount
}

"""A Browser Application entity outline."""
type BrowserApplicationEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The type of Browser agent installed for this application."""
  agentInstallType: BrowserAgentInstallType

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The ID of the Browser App."""
  applicationId: Int

  """Summary statistics about the Browser App."""
  browserSummary: BrowserApplicationSummaryData

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The running versions of the agent in the Browser App."""
  runningAgentVersions: BrowserApplicationRunningAgentVersions

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """The ID of the APM Application that serves this Browser App."""
  servingApmApplicationId: Int

  """Configuration settings for the Browser App"""
  settings: BrowserApplicationSettings

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""
An operator used to combine MutingRuleConditions within a MutingRuleConditionGroup.
"""
enum AlertsMutingRuleConditionGroupOperator {
  """Match conditions by AND"""
  AND

  """Match conditions by OR"""
  OR
}

"""A Team entity outline."""
type TeamEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""
Summary statistics about the Browser App injected by the APM Application.
"""
type ApmBrowserApplicationSummaryData {
  """The number of AJAX requests per minute"""
  ajaxRequestThroughput: Float

  """The average AJAX response time in seconds."""
  ajaxResponseTimeAverage: Seconds

  """The percentage of page views with a JS error."""
  jsErrorRate: Float

  """The number of page loads per minute"""
  pageLoadThroughput: Float

  """The average page view time in seconds."""
  pageLoadTimeAverage: Float
}

"""The retention policy for the data partition data."""
enum LogConfigurationsDataPartitionRuleRetentionPolicyType {
  """
  The alternative data retention policy, 30 days of data retention since the log data is ingested.
  """
  SECONDARY

  """
  The maximum retention period associated with the account. This is determined by the customer’s subscription/contract with New Relic.
  """
  STANDARD
}

"""
A notification channel ID - temporarily until addToPolicy will support returning full notification channels.
"""
type AlertsNotificationChannelId {
  """Channel ID."""
  id: ID! @deprecated(reason: "This type will be removed once we add the ability to return full notification channels in addToPolicy")
}

"""Filter destination object"""
input AiNotificationsDestinationFilter {
  """active"""
  active: Boolean

  """authType"""
  authType: AiNotificationsAuthType

  """id"""
  id: ID

  """ids"""
  ids: [ID!]

  """name"""
  name: String

  """property"""
  property: AiNotificationsPropertyFilter

  """type"""
  type: AiNotificationsDestinationType

  """updatedAt"""
  updatedAt: DateTime
}

"""Load Balancer Integration"""
type CloudAzureLoadbalancerIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""An ingest key error. Each error maps to a single key input."""
type ApiAccessIngestKeyError implements ApiAccessKeyError {
  """The account ID of the key."""
  accountId: Int

  """The error type of the error."""
  errorType: ApiAccessIngestKeyErrorType

  """The `id` of the key being updated."""
  id: String

  """The ingest type of the key."""
  ingestType: ApiAccessIngestKeyType

  """A message about why the key creation failed."""
  message: String

  """The type of the key."""
  type: ApiAccessKeyType
}

"""An single issue in JIRA"""
type ErrorsInboxJiraIssue implements ErrorsInboxResource {
  """Unique resource identifier"""
  id: ID!

  """Issue Id in JIRA"""
  issueId: ID!

  """Url to access the issue in JIRA"""
  url: String!
}

"""ElastiCache Integration"""
type CloudElasticacheIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
The errors that can be returned when linking a New Relic account and Pixie project
"""
enum PixieLinkPixieProjectErrorType {
  """There is already a linked Pixie project for this New Relic account."""
  ALREADY_LINKED

  """Automatic Pixie project creation not supported."""
  AUTO_CREATION_NOT_SUPPORTED

  """The provided account is not valid."""
  INVALID_NEWRELIC_ACCOUNT

  """The provided Pixie API key is not valid."""
  INVALID_PIXIE_API_KEY

  """Unlinking is not supported."""
  UNLINKING_NOT_SUPPORTED
}

"""Input for creating multiple trace filter rules"""
input EdgeCreateTraceFilterRulesInput {
  """
  One or more `CreateSpanAttributeRuleInput` that describe the span attribute trace filter rule(s) to be created.
  """
  spanAttributeRules: [EdgeCreateSpanAttributeRuleInput!]
}

"""Type of delete error"""
enum AiWorkflowsDeleteErrorType {
  """One or more of the parameters you provided are incorrect"""
  INVALID_PARAMETER

  """This account in not authorized to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR
}

"""Success response when deleting an Alerts policy."""
type AlertsPolicyDeleteResponse {
  """ID of the deleted policy."""
  id: ID!
}

"""IAM Integration"""
type CloudIamIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The query that represents the events to fetch."""
input ServiceLevelEventsQueryCreateInput {
  """The NRDB event to fetch the data from."""
  from: Nrql!

  """The NRQL SELECT clause to aggregate events. Default is COUNT(*)."""
  select: ServiceLevelEventsQuerySelectCreateInput

  """The NRQL condition to filter the events."""
  where: Nrql
}

"""An APM application deployment marker"""
type ApmApplicationDeployment {
  """The changelog of the deployment"""
  changelog: String

  """Description of the deployment"""
  description: String

  """A link to view the deployment in the UI"""
  permalink: String

  """The revision of the app that was deployed"""
  revision: String

  """The moment the deployment occured"""
  timestamp: EpochMilliseconds

  """The user who triggered the deployment"""
  user: String
}

"""Sort order direction"""
enum ErrorsInboxDirection {
  """Descending sort order"""
  DESC
}

"""An External entity."""
type ExternalEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""
A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
"""
type UserManagementUserType {
  """the name of the object"""
  displayName: String!

  """a value that uniquely identifies this object"""
  id: ID!
}

"""Status of an operation."""
enum AiDecisionsResultType {
  """Failed operation"""
  FAILURE

  """Successful operation"""
  SUCCESS
}

"""Attributes for creating a shared account."""
input OrganizationCreateSharedAccountInput {
  """The id of the account to be shared"""
  accountId: Int!

  """The id of the limiting role"""
  limitingRoleId: Int!

  """The name of the shared account"""
  name: String

  """The id of the target organization"""
  targetOrganizationId: ID!
}

"""A vertex in an entity relationship edge."""
type EntityRelationshipVertex {
  """The account ID of the relationship node."""
  accountId: Int!

  """The entity of the relationship node."""
  entity: EntityOutline

  """The entity guid of the relationship node."""
  guid: EntityGuid!
}

"""
The input object used to provide the configuration that defines how the status of the workload is calculated.
"""
input WorkloadUpdateStatusConfigInput {
  """An input object used to represent an automatic status configuration."""
  automatic: WorkloadUpdateAutomaticStatusInput

  """
  A list of static status configurations. You can only configure one static status for a workload.
  """
  static: [WorkloadUpdateStaticStatusInput!]
}

"""Available filtering types for group display names"""
input UserManagementDisplayNameInput {
  """Part of a display name"""
  contains: String

  """A display name"""
  eq: String
}

"""Assign error group error"""
type ErrorsInboxAssignErrorGroupError implements ErrorsInboxResponseError {
  """The description of the error"""
  description: String!

  """The error type"""
  type: ErrorsInboxAssignErrorGroupErrorType!
}

"""The input configuration for updating a notification channel."""
input AlertsNotificationChannelUpdateConfiguration {
  """The input configuration for updating an Email notification channel."""
  email: AlertsEmailNotificationChannelUpdateInput

  """The input configuration for updating an OpsGenie notification channel."""
  opsGenie: AlertsOpsGenieNotificationChannelUpdateInput

  """The input configuration for updating a PagerDuty notification channel."""
  pagerDuty: AlertsPagerDutyNotificationChannelUpdateInput

  """The input configuration for updating a Slack notification channel."""
  slack: AlertsSlackNotificationChannelUpdateInput

  """The input configuration for updating a VictorOps notification channel."""
  victorOps: AlertsVictorOpsNotificationChannelUpdateInput

  """The input configuration for updating a Webhook notification channel."""
  webhook: AlertsWebhookNotificationChannelUpdateInput

  """The input configuration for updating an xMatters notification channel."""
  xMatters: AlertsXMattersNotificationChannelUpdateInput
}

"""A Step monitor resulting from a Step monitor mutation"""
type SyntheticsStepMonitor {
  """The monitor advanced options"""
  advancedOptions: SyntheticsStepMonitorAdvancedOptions

  """The creation time of the monitor in millis"""
  createdAt: EpochMilliseconds

  """The unique client identifier for the Synthetics Monitor in New Relic"""
  guid: EntityGuid

  """The unique identifier of the monitor within the Synthetics domain"""
  id: ID

  """The locations the monitor runs from"""
  locations: SyntheticsLocations

  """The last modification time of the monitor in millis"""
  modifiedAt: EpochMilliseconds

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The steps that make up the script the monitor will run"""
  steps: [SyntheticsStep]
}

"""Expected errors that can be returned by update operation."""
type DashboardUpdateError {
  """Error description."""
  description: String

  """Error type."""
  type: DashboardUpdateErrorType!
}

"""
Configuration for visualization type 'viz.table'.  Learn more about [table](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#table) widget.
"""
input DashboardTableWidgetConfigurationInput {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"""
An entity search query used to dynamically retrieve a group of entities.
"""
type WorkloadEntitySearchQuery {
  """
  The moment when the object was created, represented in milliseconds since the Unix epoch.
  """
  createdAt: EpochMilliseconds!

  """The user who created the entity search query."""
  createdBy: UserReference

  """The unique identifier of the entity search query."""
  id: Int!

  """
  The entity search query that is used to perform the search of a group of entities.
  """
  query: String!

  """
  The moment when the object was last updated, represented in milliseconds since the Unix epoch.
  """
  updatedAt: EpochMilliseconds
}

"""Direction for a baseline NRQL condition."""
enum AlertsNrqlBaselineDirection {
  """Only lower direction."""
  LOWER_ONLY

  """Both upper and lower direction."""
  UPPER_AND_LOWER

  """Only upper direction."""
  UPPER_ONLY
}

"""The settings of a browser application. Includes loader script."""
type AgentApplicationBrowserSettings {
  """Configure cookies. The default is enabled: true."""
  cookiesEnabled: Boolean!

  """
  Configure distributed tracing in browser apps. The default is enabled: true.
  """
  distributedTracingEnabled: Boolean!

  """
  The snippet of JavaScript used to copy/paste into your JavaScript app if you aren't using an auto-instrumenting agent on the backend. Note that the resulting snippet will be a JSON string that will need to be parsed before using in your browser application.
  """
  loaderScript: String

  """
  Determines which browser loader will be configured. The default is "SPA".
  """
  loaderType: AgentApplicationBrowserLoader!
}

"""Configuration for HipChat notification channel."""
type AlertsHipChatNotificationChannelConfig {
  """Authentication token."""
  authToken: SecureValue! @deprecated(reason: "This channel type is deprecated")

  """Base URL."""
  baseUrl: String! @deprecated(reason: "This channel type is deprecated")

  """Room ID."""
  roomId: String! @deprecated(reason: "This channel type is deprecated")
}

"""Page input used when updating an individual page."""
input DashboardUpdatePageInput {
  """Page description."""
  description: String

  """Page name."""
  name: String!

  """Page widgets."""
  widgets: [DashboardWidgetInput!]!
}

"""Configuration options for a monitor downtime that runs once"""
input SyntheticsMonitorDowntimeOnceConfig {
  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""FSx"""
input CloudAwsFsxIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""The advanced options inputs available for a Simple Browser monitor"""
input SyntheticsSimpleBrowserMonitorAdvancedOptionsInput {
  """Custom headers to use in monitor job"""
  customHeaders: [SyntheticsCustomHeaderInput]

  """Emulate a device"""
  deviceEmulation: SyntheticsDeviceEmulationInput

  """Capture a screenshot during job execution"""
  enableScreenshotOnFailureAndScript: Boolean

  """Validation text for monitor to search for at given URI"""
  responseValidationText: String

  """Monitor should validate SSL certificate chain"""
  useTlsValidation: Boolean
}

"""Result of a private location mutation"""
type SyntheticsPrivateLocationMutationResult {
  """The account associated to the private location"""
  accountId: Int

  """A description of the private location"""
  description: String

  """The private location globally unique identifier"""
  domainId: String

  """An array container errors resulting from the mutation, if any"""
  errors: [SyntheticsPrivateLocationMutationError]

  """
  The unique client identifier for the Synthetics private location in New Relic
  """
  guid: EntityGuid

  """The private locations key"""
  key: String

  """An alternate identifier based on name"""
  locationId: String

  """The name of the private location"""
  name: String

  """
  Specifies whether the private location requires a password for scripted monitors
  """
  verifiedScriptExecution: Boolean
}

"""Input for creating a baseline NRQL condition."""
input AlertsNrqlConditionBaselineInput {
  """Direction in which the baseline is set on condition."""
  baselineDirection: AlertsNrqlBaselineDirection!

  """The custom violation description."""
  description: String

  """Whether the NRQL condition is enabled."""
  enabled: Boolean!

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpirationInput

  """The name of the NRQL condition."""
  name: String!

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionQueryInput!

  """Runbook URL."""
  runbookUrl: String

  """
  Configuration that defines the signal that the NRQL condition will use to evaluate.
  """
  signal: AlertsNrqlConditionSignalInput

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlDynamicConditionTermsInput!]!

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes. Default is THIRTY_DAYS.
  """
  violationTimeLimit: AlertsViolationTimeLimit

  """
  Duration after which a violation automatically closes in seconds.
  Accepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).
  
  Default is 3 days (259200 seconds).
  """
  violationTimeLimitSeconds: Seconds
}

"""Input type for Not expression"""
input AiDecisionsNotInput {
  """Child expression."""
  child: AiDecisionsRuleExpressionInput!
}

"""The input for creating a new OpsGenie notification channel."""
input AlertsOpsGenieNotificationChannelCreateInput {
  """API key."""
  apiKey: SecureValue!

  """OpsGenie data center region."""
  dataCenterRegion: AlertsOpsGenieDataCenterRegion!

  """Notification channel name."""
  name: String!

  """List of email recipients."""
  recipients: [String!]

  """Tags."""
  tags: [String!]

  """Teams."""
  teams: [String!]
}

"""FSx Integration"""
type CloudAwsFsxIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The data to be stored in NerdStorageVault."""
input NerdStorageVaultWriteSecretInput {
  """The unique identifier of the secret."""
  key: String!

  """The value of the secret."""
  value: SecureValue!
}

"""
Metadata associated with the Nerdpack that will be available in the New Relic One Catalog
"""
input Nr1CatalogSubmitMetadataInput {
  """Additional information relevant for the Nerdpack"""
  additionalInfo: String

  """
  A list of terms for category grouping when filtering and searching the Nerdpack
  """
  categoryTerms: [String!]

  """
  A long form description used in the catalog to detail the functionality of the Nerdpack
  """
  details: String

  """Additional documentation relevant for the Nerdpack"""
  documentation: String

  """A list of keywords for filtering and searching the Nerdpack"""
  keywords: [String!]

  """
  A URL that links to the repository where the source code for this Nerdpack can be found
  """
  repository: String

  """
  Support channels where users can contact you to get support for the Nerdpack
  """
  support: Nr1CatalogSupportInput

  """A tagline for the Nerdpack"""
  tagline: String

  """The version of the Nerdpack that will be associated with this metadata"""
  version: SemVer!

  """
  A description of changes describing what changed for this version of the Nerdpack
  """
  whatsNew: String
}

"""
The `Entity` interface allows fetching detailed entity information for a single entity.

To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
"""
interface Entity implements AlertableEntity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Amazon Elastic Block Store (EBS)"""
input CloudEbsIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Autogenerated return type of UpdateUser."""
type UserManagementUpdateUserPayload {
  """The user that was updated"""
  user: UserManagementUser
}

"""The definition of the metric."""
type EntityGoldenMetricDefinition {
  """
  The field used to filter the entity in the metric. This will be added to the WHERE by default.
  """
  eventId: String!

  """
  Indicates if the eventId field references a GUID, a domainId or an entity name.
  """
  eventObjectId: EntityGoldenEventObjectId!

  """The field to FACET by."""
  facet: String!

  """The FROM clause of the query."""
  from: String!

  """The SELECT clause of the query."""
  select: String!

  """
  If a complementary WHERE clause is required to identify the entity type this field will contain it.
  """
  where: String
}

"""Firebase Database Integration"""
type CloudGcpFirebasedatabaseIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""A Synthetic Monitor entity."""
type SyntheticMonitorEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Assets produced during the execution of the check, such as screenshots"""
  assets(
    """The unique identifer of the monitor check"""
    checkId: String!
  ): [SyntheticsSyntheticMonitorAsset]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The Synthetic Monitor ID"""
  monitorId: ID

  """Summary statistics for the Synthetic Monitor."""
  monitorSummary: SyntheticMonitorSummaryData

  """The Synthetic Monitor type"""
  monitorType: SyntheticMonitorType

  """The URL being monitored by a `SIMPLE` or `BROWSER` monitor type."""
  monitoredUrl: String

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The duration in minutes between Synthetic Monitor runs."""
  period: Minutes

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Enumerations of role scopes"""
enum MultiTenantAuthorizationRoleScopeEnum {
  """Account scoped role"""
  ACCOUNT

  """Organization scoped role"""
  ORGANIZATION
}

"""Possible entity sorting criteria."""
enum EntitySearchSortCriteria {
  """Sort by alert severity."""
  ALERT_SEVERITY

  """Sort by entity domain."""
  DOMAIN

  """Sort by relevance. Note that these results can't be paginated."""
  MOST_RELEVANT

  """Sort by entity name."""
  NAME

  """Sort by reporting state."""
  REPORTING

  """Sort by entity type."""
  TYPE
}

"""State of decision."""
enum AiDecisionsDecisionState {
  """Decision state is disabled"""
  DISABLED

  """Decision state is enabled"""
  ENABLED
}

"""Available filtering types for group IDs"""
input UserManagementGroupIdInput {
  """A group ID"""
  eq: ID

  """An array of group IDs"""
  in: [ID!]
}

"""List of integrations"""
input CloudAzureIntegrationsInput {
  """Api Management integration"""
  azureApimanagement: [CloudAzureApimanagementIntegrationInput]

  """App Gateway integration"""
  azureAppgateway: [CloudAzureAppgatewayIntegrationInput]

  """App Service integration"""
  azureAppservice: [CloudAzureAppserviceIntegrationInput]

  """Containers integration"""
  azureContainers: [CloudAzureContainersIntegrationInput]

  """Cosmos DB integration"""
  azureCosmosdb: [CloudAzureCosmosdbIntegrationInput]

  """Cost Management integration"""
  azureCostmanagement: [CloudAzureCostmanagementIntegrationInput]

  """Data Factory integration"""
  azureDatafactory: [CloudAzureDatafactoryIntegrationInput]

  """Event Hub integration"""
  azureEventhub: [CloudAzureEventhubIntegrationInput]

  """Express Route integration"""
  azureExpressroute: [CloudAzureExpressrouteIntegrationInput]

  """Firewalls integration"""
  azureFirewalls: [CloudAzureFirewallsIntegrationInput]

  """Front Door integration"""
  azureFrontdoor: [CloudAzureFrontdoorIntegrationInput]

  """Functions integration"""
  azureFunctions: [CloudAzureFunctionsIntegrationInput]

  """Key Vault integration"""
  azureKeyvault: [CloudAzureKeyvaultIntegrationInput]

  """Load Balancer integration"""
  azureLoadbalancer: [CloudAzureLoadbalancerIntegrationInput]

  """Logic Apps integration"""
  azureLogicapps: [CloudAzureLogicappsIntegrationInput]

  """Machine Learning integration"""
  azureMachinelearning: [CloudAzureMachinelearningIntegrationInput]

  """Database for MariaDB integration"""
  azureMariadb: [CloudAzureMariadbIntegrationInput]

  """Azure Monitor metrics integration"""
  azureMonitor: [CloudAzureMonitorIntegrationInput]

  """Database for MySQL integration"""
  azureMysql: [CloudAzureMysqlIntegrationInput]

  """MySQL Flexible Server integration"""
  azureMysqlflexible: [CloudAzureMysqlflexibleIntegrationInput]

  """Database for PostgreSQL integration"""
  azurePostgresql: [CloudAzurePostgresqlIntegrationInput]

  """PostgreSQL Flexible Server integration"""
  azurePostgresqlflexible: [CloudAzurePostgresqlflexibleIntegrationInput]

  """Power BI Dedicated integration"""
  azurePowerbidedicated: [CloudAzurePowerbidedicatedIntegrationInput]

  """Redis Cache integration"""
  azureRediscache: [CloudAzureRediscacheIntegrationInput]

  """Service Bus integration"""
  azureServicebus: [CloudAzureServicebusIntegrationInput]

  """SQL Database integration"""
  azureSql: [CloudAzureSqlIntegrationInput]

  """SQL Managed Instances integration"""
  azureSqlmanaged: [CloudAzureSqlmanagedIntegrationInput]

  """Storage integration"""
  azureStorage: [CloudAzureStorageIntegrationInput]

  """Virtual machine scale sets integration"""
  azureVirtualmachine: [CloudAzureVirtualmachineIntegrationInput]

  """Virtual Network integration"""
  azureVirtualnetworks: [CloudAzureVirtualnetworksIntegrationInput]

  """Virtual Machines integration"""
  azureVms: [CloudAzureVmsIntegrationInput]

  """VPN Gateways integration"""
  azureVpngateways: [CloudAzureVpngatewaysIntegrationInput]
}

"""
This scalar represents a map of attributes in the form of key-value pairs.
"""
scalar AttributeMap

"""MediaPackage VOD Integration"""
type CloudAwsMediapackagevodIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The different rule actions for customers."""
enum MetricNormalizationCustomerRuleAction {
  """Deny new metrics (only for NR Administrators)"""
  DENY_NEW_METRICS

  """Ignore matching metrics."""
  IGNORE

  """Replace metrics."""
  REPLACE
}

"""Autogenerated return type of CreateGroup."""
type UserManagementCreateGroupPayload {
  """The group that was created"""
  group: UserManagementGroup
}

"""Enumerations of role types"""
enum MultiTenantAuthorizationRoleTypeEnum {
  """Custom role"""
  CUSTOM

  """Standard role"""
  STANDARD
}

"""An AWS Lambda Function entity outline."""
type InfrastructureAwsLambdaFunctionEntityOutline implements AlertableEntityOutline & EntityOutline & InfrastructureIntegrationEntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds
  integrationTypeCode: String

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean
  runtime: String

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""List of providers"""
input CloudIntegrationsInput {
  """Aws provider"""
  aws: CloudAwsIntegrationsInput

  """AwsGovcloud provider"""
  awsGovcloud: CloudAwsGovcloudIntegrationsInput

  """Azure provider"""
  azure: CloudAzureIntegrationsInput

  """Gcp provider"""
  gcp: CloudGcpIntegrationsInput
}

"""Widget input."""
input DashboardWidgetInput {
  """
  Typed widgets are area, bar, billboard, line, markdown, pie, and table. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-typed) for more info.
  """
  configuration: DashboardWidgetConfigurationInput

  """
  ID of the widget. If null, a new widget will be created and added to a dashboard.
  """
  id: ID

  """The widget's position and size in the dashboard."""
  layout: DashboardWidgetLayoutInput

  """
  Entities related to the widget. Currently only supports one Dashboard entity guid, but may allow other cases in the future.
  """
  linkedEntityGuids: [EntityGuid!]

  """
  Untyped widgets are all other widgets, such as bullet, histogram, inventory, etc. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#widget-untyped) for more info.
  """
  rawConfiguration: DashboardWidgetRawConfiguration

  """A title for the widget."""
  title: String

  """
  Specifies how this widget will be visualized. If null, the WidgetConfigurationInput will be used to determine the visualization.
  """
  visualization: DashboardWidgetVisualizationInput
}

"""A time window input with default values."""
input ChangeTrackingTimeWindowInputWithDefaults {
  """
  The end time of the time window. If not specified, it defaults to the current time.
  """
  endTime: EpochMilliseconds

  """
  The start time of the time window. If not specified, it defaults to 60 minutes before the endTime.
  """
  startTime: EpochMilliseconds
}

"""Alert severity."""
enum DashboardAlertSeverity {
  """CRITICAL."""
  CRITICAL

  """NOT_ALERTING."""
  NOT_ALERTING

  """WARNING."""
  WARNING
}

"""NRQL query used by a widget."""
input DashboardWidgetNrqlQueryInput {
  """New Relic account ID to issue the query against."""
  accountId: Int!

  """NRQL formatted query."""
  query: Nrql!
}

"""
Monitor downtime object returned to the customer for a downtime run weekly
"""
type SyntheticsWeeklyMonitorDowntimeMutationResult {
  """The account ID associated with the monitor downtime"""
  accountId: Int

  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  endRepeat: SyntheticsDateWindowEndOutput

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """The entity GUID associated with the monitor downtime"""
  guid: EntityGuid

  """Days of the week the monitor downtime will run"""
  maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]

  """The monitor GUIDs associated with the monitor downtime"""
  monitorGuids: [EntityGuid]

  """The name of the monitor downtime"""
  name: String

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""
The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.
"""
input AgentApplicationSettingsErrorCollectorInput {
  """Enables error collector."""
  enabled: Boolean

  """
  Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM.
  """
  expectedErrorClasses: [String!]

  """
  An array of individual HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score.
  """
  expectedErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]

  """
  Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM.
  """
  ignoredErrorClasses: [String!]

  """
  An array of individual HTTP status codes that should not be treated as errors.
  """
  ignoredErrorCodes: [AgentApplicationSettingsErrorCollectorHttpStatus!]
}

"""An outline of a created dashboard"""
type Nr1CatalogDashboardOutline {
  """The guid of the created dashboard"""
  dashboardGuid: EntityGuid!
}

"""Property object"""
input AiNotificationsPropertyInput {
  """displayValue"""
  displayValue: String

  """key"""
  key: String!

  """label"""
  label: String

  """value"""
  value: String!
}

"""Glue"""
input CloudAwsGlueIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""A key error. Each error maps to a single key input."""
interface ApiAccessKeyError {
  """A message about why the key creation failed."""
  message: String

  """The type of the key."""
  type: ApiAccessKeyType
}

"""User information returned for UserSearch"""
type UsersUserSearch {
  """The email of the user."""
  email: String

  """The full name of the user."""
  name: String

  """The unique identifier of the user."""
  userId: ID
}

"""Type of Filter"""
enum AiWorkflowsFilterType {
  """Standard Filter type"""
  FILTER

  """View Filter type"""
  VIEW
}

"""A collection of user defined Entities and Entity Search queries."""
type EntityCollection {
  """The account the collection is part of"""
  account: AccountReference

  """The user who created the collection"""
  createdBy: UserReference

  """The definition of the collection."""
  definition: EntityCollectionDefinition

  """The GUID of the Entity"""
  guid: EntityGuid

  """The result of searching for the members of the collection."""
  members: EntitySearch

  """The name of the collection."""
  name: String

  """The type of Collection"""
  type: EntityCollectionType
}

"""Widget layout."""
type DashboardWidgetLayout {
  """Column position of widget from top left, starting at 1."""
  column: Int

  """
  Height of the widget. Valid values are 1 to 12 inclusive. Defaults to 3.
  """
  height: Int

  """Row position of widget from top left, starting at 1."""
  row: Int

  """
  Width of the widget. Valid values are 1 to 12 inclusive. Defaults to 4.
  """
  width: Int
}

"""
The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.

To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
"""
interface EntityOutline implements AlertableEntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Newrelic incident"""
type AiIssuesNewRelicIncident implements AiIssuesIIncident {
  """account"""
  account: AccountReference

  """An account id this incident is stored in"""
  accountIds: String!

  """The time the incident was closed"""
  closedAt: EpochMilliseconds

  """The condition id"""
  conditionFamilyId: String

  """The time the incident was created"""
  createdAt: EpochMilliseconds!

  """
  The description is generated from the policy name and the condition name
  """
  description: [String!]!

  """A list of unique entity identifiers"""
  entityGuids: EntityGuid

  """A list of entity names"""
  entityNames: String

  """A list of entity types"""
  entityTypes: String

  """See our documentation to learn about environments"""
  environmentId: Int! @deprecated(reason: "Use account")

  """Incident identifier"""
  incidentId: ID!

  """The policy id"""
  policyIds: String

  """Incident priority"""
  priority: AiIssuesPriority!

  """Incident state"""
  state: AiIssuesIncidentState!

  """Incident event timestamp"""
  timestamp: EpochMilliseconds!

  """
  The description the user gave the condition if provided. Otherwise the incident description
  """
  title: String!

  """The time the incident was last updated"""
  updatedAt: EpochMilliseconds!
}

"""
The `Actor` object contains fields that are scoped to the API user's access level.
"""
type Actor {
  """
  The `account` field is the entry point into data that is scoped to a single account.
  """
  account(
    """The New Relic account ID you want to query."""
    id: Int!
  ): Account

  """
  The `accounts` field returns all accounts that the Actor is authorized to view.
  """
  accounts(scope: RegionScope = IN_REGION): [AccountOutline]

  """This field provides access to ApiAccess data."""
  apiAccess: ApiAccessActorStitchedFields

  """
  The `cloud` field provides access to cloud integrations configuration data scoped to the Actor.
  """
  cloud: CloudActorFields

  """This field provides access to Dashboard data."""
  dashboard: DashboardActorStitchedFields

  """This field provides access to DistributedTracing data."""
  distributedTracing: DistributedTracingActorStitchedFields

  """
  Fetch a list of entities.
  
  You can fetch a max of 25 entities in one query.
  
  For more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
  """
  entities(
    """A list of unique entity identifiers."""
    guids: [EntityGuid]!
  ): [Entity]

  """
  Fetch a single entity.
  
  For more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
  """
  entity(
    """A unique entity identifier."""
    guid: EntityGuid!
  ): Entity

  """
  Search for entities using a custom query.
  
  For more details on how to create a custom query
  and what entity data you can request, visit our
  [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
  
  Note: you must supply either a `query` OR a `queryBuilder` argument, not both.
  """
  entitySearch(
    """Additional options to apply to the entity search."""
    options: EntitySearchOptions

    """
    Entity search query string.
    The query string can search for an exact or fuzzy match on name, as well as searching several other attributes.
    
    Note: you must supply either a `query` OR a `queryBuilder` argument, not both.
    
    Operators available: `=`, `AND`, `IN`, `LIKE`
    
    Special characters (`.,;:*-_`) are treated as whitespace. For example, name LIKE ':aws:' will match `-aws.` or `foo aws.`
    
    Tags can be referenced in multiple ways with or without backticks.
    
    Examples:
    - `"name = 'MyApp (Staging)'`
    - `"name LIKE 'MyApp' AND type IN ('APPLICATION')"`
    - `"reporting = 'false' AND type IN ('HOST')"`
    - `"domain IN ('INFRA', 'APM')"`
    - `tags.Environment = 'staging' AND type IN ('APPLICATION')`
    """
    query: String

    """
    The query builder object can be used to discover and create the entity search query argument.
    
    This should be used as a means to discover, but it has limited functionality. For example, it can only search for one entity `type` at a time.
    
    The `queryBuilder` parameters do not include all possible entity `type`s, entity `domain`s, or `infrastructureIntegrationType`s.
    
    To see the query string that is generated by your `queryBuilder` search, ask for the `query` field in the result object. You can then use this to build a more complex query supplied to the `query` argument and remove your `queryBuilder`.
    
    Note: you must supply either a `query` OR a `queryBuilder` argument, not both.
    """
    queryBuilder: EntitySearchQueryBuilder

    """
    The criteria used to sort your entity search results. If both are provided, `sortByWithDirection` will take precedence over `sortBy`.
    """
    sortBy: [EntitySearchSortCriteria] = [NAME]

    """
    Sort by criteria and direction. If both are provided, `sortByWithDirection` will take precedence over `sortBy`.
    """
    sortByWithDirection: [SortCriterionWithDirection]
  ): EntitySearch

  """This field provides access to ErrorsInbox data."""
  errorsInbox: ErrorsInboxActorStitchedFields

  """This field provides access to IncidentIntelligenceEnvironment data."""
  incidentIntelligenceEnvironment: IncidentIntelligenceEnvironmentActorStitchedFields

  """This field provides access to MobilePushNotification data."""
  mobilePushNotification: MobilePushNotificationActorStitchedFields

  """
  NerdStorage is a document database that is accessible within the New Relic One interface.
  This allows for persistence of Nerdpack data including users' configuration settings and preferences
  (like favorites), or any other small data sets.
  
  Conceptually, you can imagine NerdStorage as a nested key-value map.
  
  For information on New Relic NerdStorage, visit [our docs](https://developer.newrelic.com/build-tools/new-relic-one-applications/nerdstorage).
  
  To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
  """
  nerdStorage: NerdStorageActorScope

  """This field provides access to NerdStorageVault data."""
  nerdStorageVault: NerdStorageVaultActorStitchedFields

  """
  Nerdpacks registry. Provides queries for nerdpacks by different conditions
  """
  nerdpacks: NerdpackNerdpacks

  """This field provides access to Nr1Catalog data."""
  nr1Catalog: Nr1CatalogActorStitchedFields

  """
  Make a query to NRDB with a NRQL string.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  
  Example NRQL query:
  ```
  SELECT count(*) FROM Transaction TIMESERIES
  ```
  
  For more details on how to use NRQL in the GraphQL API, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api)
  """
  nrql(
    """
    List of account IDs to return NRDB results from. Max of 5 can be supplied.
    """
    accounts: [Int!]!

    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrqlQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    query: Nrql!

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): CrossAccountNrdbResultContainer

  """A historical log of NRQL queries executed by you."""
  nrqlQueryHistory: [NrqlHistoricalQuery] @deprecated(reason: "This field is deprecated. Please use `queryHistory`.\n")

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrqlQueryProgress(
    """
    List of account IDs associated with `queryId`. Must match the account IDs of the original asynchronous query. Max of 5 can be supplied.
    """
    accounts: [Int!]!

    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): CrossAccountNrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """
  The `organization` field is the entry point into data that is scoped to the user's organization.
  """
  organization: Organization

  """This field provides access to Pixie data."""
  pixie: PixieActorStitchedFields

  """This field provides access to QueryHistory data."""
  queryHistory: QueryHistoryActorStitchedFields

  """The authenticated `User` who made this request."""
  user: User

  """This field provides access to Users data."""
  users: UsersActorStitchedFields
}

"""Token based authentication"""
type AiNotificationsTokenAuth {
  """Authentication Type - Token or Oauth2"""
  authType: AiNotificationsAuthType!

  """Token Prefix"""
  prefix: String!
}

"""Mutation error information."""
type NerdStorageVaultResultError {
  """The error message."""
  message: String

  """The type of error that occured when performing the mutation."""
  type: NerdStorageVaultErrorType!
}

"""The rolling time window configuration of the SLO."""
input ServiceLevelObjectiveRollingTimeWindowCreateInput {
  """The count of time units. Accepted values are 1, 7 and 28 days."""
  count: Int!

  """The time unit."""
  unit: ServiceLevelObjectiveRollingTimeWindowUnit!
}

"""A filter for authentication domains"""
input OrganizationAuthenticationDomainFilterInput {
  """Filter authentication domains by id"""
  id: OrganizationIdInput

  """Filter authentication domains by name"""
  name: OrganizationNameInput

  """Filter authentication domains by organization"""
  organizationId: OrganizationOrganizationIdInput!
}

"""The events that define the SLI."""
input ServiceLevelEventsUpdateInput {
  """The definition of bad events."""
  badEvents: ServiceLevelEventsQueryUpdateInput

  """The definition of good events."""
  goodEvents: ServiceLevelEventsQueryUpdateInput

  """The definition of valid events."""
  validEvents: ServiceLevelEventsQueryUpdateInput!
}

"""Firewalls Integration"""
type CloudAzureFirewallsIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The error type for creating a notification channel."""
enum AlertsNotificationChannelCreateErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"""A structured representation of an exception for a Browser application."""
type StackTraceBrowserException {
  """The top level message associated to the stack trace."""
  message: String

  """The stack trace associated with the exception."""
  stackTrace: StackTraceBrowserStackTrace
}

"""The error for creating a notification channel."""
type AlertsNotificationChannelCreateError {
  """Error description."""
  description: String!

  """Error type."""
  errorType: AlertsNotificationChannelCreateErrorType!
}

"""Set browser monitoring application settings."""
input AgentApplicationSettingsBrowserMonitoringInput {
  """Browser monitoring's page load Ajax requests."""
  ajax: AgentApplicationSettingsBrowserAjaxInput

  """
  If you use browser to monitor end-user browser activity, you can now see end-user-originating browser-side traces in distributed tracing.
  """
  distributedTracing: AgentApplicationSettingsBrowserDistributedTracingInput

  """Determines which browser loader will be configured."""
  loader: AgentApplicationSettingsBrowserLoaderInput

  """
  Specify the semantic version of the browser agent that you would like your app to use. Leave this blank to use the most recent version. Use 'x' in place of a numeric digit to represent the latest release within the version range. For example, '1.x.x'
  """
  pinnedVersion: String

  """
  Browser monitoring's page load timing feature can track sessions by using cookies that contain a simple session identifier.
  """
  privacy: AgentApplicationSettingsBrowserPrivacyInput
}

"""Provides all the available filters on the account id"""
input OrganizationOrganizationAccountIdInputFilter {
  """performs an equals operation"""
  eq: Int!
}

"""
The `SecureValue` scalar represents a secure value, ie a password, an API key, etc.
"""
scalar SecureValue

"""The result of a monitor delete mutation"""
type SyntheticsMonitorDeleteMutationResult {
  """The unique identifier of the deleted monitor"""
  deletedGuid: EntityGuid
}

"""Sort key and direction for accounts"""
input OrganizationAccountSortInput {
  """Direction to sort in"""
  direction: OrganizationAccountSortDirectionEnum

  """Account share attribute to sort on"""
  key: OrganizationAccountSortKeyEnum
}

"""
An array containing errors from the deletion of a private location, if any
"""
type SyntheticsPrivateLocationDeleteResult {
  """An array container errors resulting from the mutation, if any"""
  errors: [SyntheticsPrivateLocationMutationError]
}

"""The input object representing the access to revoke for the group"""
input AuthorizationManagementRevokeAccess {
  """
  The Role and the Account the Target Group should no longer have access to
  """
  accountAccessGrants: [AuthorizationManagementAccountAccessGrant!]

  """
  The Role and the Group the Target Group should no longer have access to
  """
  groupAccessGrants: [AuthorizationManagementGroupAccessGrant!]

  """The Group ID that will have access revoked"""
  groupId: ID!

  """
  The Role and the Organization the Target Group should no longer have access to
  """
  organizationAccessGrants: [AuthorizationManagementOrganizationAccessGrant!]
}

"""Result of an operation."""
type AiDecisionsOperationResult {
  """Status of the operation."""
  result: AiDecisionsResultType!
}

"""Database for MySQL"""
input CloudAzureMysqlIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

interface InfrastructureIntegrationEntityOutline {
  integrationTypeCode: String
}

"""Which environment kinds the request will provide"""
enum IncidentIntelligenceEnvironmentSupportedEnvironmentKind {
  """
  Will return environments that are cross account (based on the parent-account and sub-account)
  """
  CROSS_ACCOUNT

  """
  Will return environments that are cross account (based on the parent-account and sub-account) and single accounts
  """
  SINGLE_AND_CROSS_ACCOUNT
}

"""Known error codes and messages for `UpdateTraceObserverResponseError`."""
enum EdgeUpdateTraceObserverResponseErrorType {
  """Invalid input provided."""
  INVALID_INPUT

  """No trace observer was found with the id given."""
  NOT_FOUND
}

"""The runtime that a monitor runs"""
type SyntheticsRuntime {
  """The runtime type that the monitor will run"""
  runtimeType: String

  """The specific version of the runtime type selected"""
  runtimeTypeVersion: SemVer!

  """The programing language that should execute the script"""
  scriptLanguage: String
}

"""The result of a Step monitor create mutation"""
type SyntheticsStepMonitorCreateMutationResult {
  """Errors that occurred during Step monitor create mutation"""
  errors: [SyntheticsMonitorCreateError]!

  """The resulting Step monitor"""
  monitor: SyntheticsStepMonitor
}

"""container for groups enabling cursor based pagination"""
type AuthorizationManagementGroupSearch {
  """contains roles granted to users's groups"""
  groups: [AuthorizationManagementGroup!]!

  """
  an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""The input object that represents an objective definition."""
input ServiceLevelObjectiveCreateInput {
  """The description of the SLO."""
  description: String

  """The name of the SLO."""
  name: String

  """The target percentage of the SLO. Maximum value is 100."""
  target: Float!

  """The time window configuration of the SLO."""
  timeWindow: ServiceLevelObjectiveTimeWindowCreateInput!
}

"""Input type for FixedStartsWith expression"""
input AiDecisionsFixedStartsWithInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Value to be used in comparison."""
  value: String!
}

"""Secret key and value."""
type NerdStorageVaultSecret {
  """The unique identifier of the secret."""
  key: String!

  """The value of the secret."""
  value: SecureValue!
}

type NerdStorageDeleteResult {
  deleted: Int
}

"""Input type for RelativeFuzzyWuzzyRatio expression"""
input AiDecisionsRelativeFuzzyWuzzyRatioInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""Provides the directions data can be sorted"""
enum MultiTenantAuthorizationSortDirectionEnum {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"""
Creates a new Incident Intelligence Environment,
will fail if an environment is already attached to the same parent account
"""
type IncidentIntelligenceEnvironmentCreateEnvironment {
  """The created environment"""
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment @deprecated(reason: "Environment moved to the result details field")

  """The outcome of the creation"""
  result: IncidentIntelligenceEnvironmentCreateEnvironmentResult!

  """Additional result details"""
  resultDetails: IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails
}

"""Status of the trace observer."""
enum EdgeTraceObserverStatus {
  """The trace observer has been created and is available for use."""
  CREATED

  """
  The trace observer has been deleted and is no longer available for use.
  """
  DELETED
}

"""Widget layout input."""
input DashboardWidgetLayoutInput {
  """Column position of widget from top left, starting at 1."""
  column: Int

  """
  Height of the widget. Valid values are 1 to 12 inclusive. Defaults to 3.
  """
  height: Int

  """Row position of widget from top left, starting at 1."""
  row: Int

  """
  Width of the widget. Valid values are 1 to 12 inclusive. Defaults to 4.
  """
  width: Int
}

"""State of rule."""
enum AiDecisionsRuleState {
  """Rule state is disabled"""
  DISABLED

  """Rule state is enabled"""
  ENABLED
}

"""VPN Gateways Integration"""
type CloudAzureVpngatewaysIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

type UserManagementOrganizationStitchedFields {
  """
  An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
  """
  authenticationDomains(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]
  ): UserManagementAuthenticationDomains

  """User Types available for this organization"""
  types: [UserManagementOrganizationUserType!]
}

"""Possible creation sources for rules."""
enum AiDecisionsRuleSource {
  """Created by ADMIN"""
  ADMIN

  """Created by GENERATED"""
  GENERATED

  """Created by SYSTEM"""
  SYSTEM

  """Created by USER"""
  USER
}

"""An attribute that was extracted from a Grok test."""
type LogConfigurationsGrokTestExtractedAttribute {
  """The attribute name."""
  name: String!

  """
  A string representation of the extracted value (which might not be a String).
  """
  value: String!
}

"""IoT Integration"""
type CloudIotIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Available values for Type"""
enum UserManagementTypeEnum {
  """Basic type"""
  BASIC

  """Core type"""
  CORE

  """Full type"""
  FULL_PLATFORM
}

"""The monitor values that can be updated on a Script Browser monitor"""
input SyntheticsUpdateScriptBrowserMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsScriptBrowserMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsScriptedMonitorLocationsInput

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntimeInput

  """The script that the monitor runs"""
  script: String

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""A collection of New Relic users"""
type MultiTenantIdentityUserCollection {
  """Users"""
  items: [MultiTenantIdentityUser!]!

  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """
  The total number of users found.
   Note: Not necessarily the same as number of users returned, due to pagination.
  """
  totalCount: Int!
}

"""Kinesis Streams Integration"""
type CloudKinesisIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchShards: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Possible entity search count facets."""
enum EntitySearchCountsFacet {
  """Facet by account id."""
  ACCOUNT_ID

  """Facet by alert severity."""
  ALERT_SEVERITY

  """Facet by entity domain."""
  DOMAIN

  """Facet by entity domain and entity type."""
  DOMAIN_TYPE

  """Facet by entity name"""
  NAME

  """Facet by reporting state."""
  REPORTING

  """Facet by entity type."""
  TYPE
}

type PixieActorStitchedFields {
  """Details for the linked Pixie projects"""
  linkedPixieProjects: [PixieLinkedPixieProject]!
}

"""
A data structure that contains the results of the NRDB query along
with other capabilities that enhance those results.

Direct query results are available through `results`, `totalResult` and
`otherResult`. The query you made is accessible through `nrql`, along with
`metadata` about the query itself. Enhanced capabilities include
`eventDefinitions`, `suggestedFacets` and more.
"""
type NrdbResultContainer {
  """
  In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.
  """
  currentResults: [NrdbResult]

  """
  Generate a publicly sharable Embedded Chart URL for the NRQL query.
  
  For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api#embeddable-charts).
  """
  embeddedChartUrl(
    """
    The type of chart visualization you want rendered.
    
    We will default to the best fit for the provided NRQL query if omitted.
    """
    chartType: EmbeddedChartType
  ): String

  """
  Retrieve a list of event type definitions, providing descriptions
  of the event types returned by this query, as well as details
  of their attributes.
  """
  eventDefinitions: [EventDefinition]

  """Metadata about the query and result."""
  metadata: NrdbMetadata

  """
  The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query that was executed to yield these results.
  """
  nrql: Nrql

  """
  In a `FACET` query, the `otherResult` contains the aggregates representing the events _not_
  contained in an individual `results` facet.
  """
  otherResult: NrdbResult

  """
  In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.
  """
  previousResults: [NrdbResult]

  """Metadata about the execution of an asynchronous NRQL query."""
  queryProgress: NrdbQueryProgress

  """
  The raw query results exactly as they are returned from NRDB. NerdGraph provides no additional transformation.
  """
  rawResponse: NrdbRawResults

  """
  The query results. This is a flat list of objects who's structure matches the query submitted.
  """
  results: [NrdbResult]

  """Generate a publicly sharable static chart URL for the NRQL query."""
  staticChartUrl(
    """
    The type of static chart visualization you want rendered.
    
    We will default to the best fit for the provided NRQL query if omitted.
    """
    chartType: ChartImageType

    """The type of static chart format you want rendered."""
    format: ChartFormatType = PNG

    """The height of static chart format you want rendered."""
    height: Int

    """The width of static chart format you want rendered."""
    width: Int
  ): String

  """
  Retrieve a list of suggested NRQL facets for this NRDB query, to be used with
  the `FACET` keyword in NRQL.
  
  Results are based on historical query behaviors.
  
  If the query already has a `FACET` clause, it will be ignored for the purposes
  of suggesting facets.
  
  For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/nerdgraph-graphiql-nrql-tutorial#suggest-facets).
  """
  suggestedFacets: [NrqlFacetSuggestion]

  """
  Suggested queries that could help explain an anomaly in your timeseries based on either statistical differences in the data or historical usage.
  
  If no `anomalyTimeWindow` is supplied, we will attempt to detect a spike in the NRQL results. If no spike is found, the suggested query results will be empty.
  
  Input NRQL must be a TIMESERIES query and must have exactly one result.
  """
  suggestedQueries(
    """
    The time window of a specific anomaly in milliseconds since Epoch time.
    """
    anomalyTimeWindow: TimeWindowInput
  ): SuggestedNrqlQueryResponse

  """
  In a `FACET` query, the `totalResult` contains the aggregates representing _all_ the events,
  whether or not they are contained in an individual `results` facet.
  """
  totalResult: NrdbResult
}

"""Information realating to a private location"""
input SyntheticsPrivateLocationInput {
  """The unique identifier for the Synthetics private location in New Relic"""
  guid: ID!

  """
  The location's Verified Script Execution password (Only necessary if Verified Script Execution is enabled for the location)
  """
  vsePassword: SecureValue
}

"""Response type for delete operations over entities."""
type EntityDeleteResult {
  """List that contains the guids of the deleted entities"""
  deletedEntities: [EntityGuid!]!

  """List of failures for the delete operation."""
  failures: [EntityDeleteError!]!
}

"""Set of filters for scoping error group searches"""
input ErrorsInboxErrorGroupSearchFilterInput {
  """Filter error groups by account ID"""
  accountIds: [Int!]

  """Filter error groups by the version of the application"""
  applicationVersions: [String!]

  """Filter error groups by assignment"""
  assignment: [ErrorsInboxAssignmentSearchFilterInput!]

  """Filter error groups by id"""
  ids: [ID!]

  """Filter error groups by assignment status"""
  isAssigned: Boolean

  """Filter error groups by error group states"""
  states: [ErrorsInboxErrorGroupState!]
}

"""
A structured representation of a crash occurring in a mobile application.
"""
type StackTraceMobileCrash {
  """
  A structured representation of a stack trace for a crash that occurs on a mobile application.
  """
  stackTrace: StackTraceMobileCrashStackTrace
}

"""
Contains all of the data that is used to sample traces based on their attributes.
"""
type EdgeSpanAttributesTraceFilter {
  """
  The list of rules that determine whether to keep or drop a trace based on a span attribute.
  """
  spanAttributeRules: [EdgeSpanAttributeRule!]!
}

"""
Represents the currently running agent versions in a Browser App.
An app could be running multiple versions of an agent (across different browsers, for example).
"""
type BrowserApplicationRunningAgentVersions {
  """
  The maximum (newest) agent version running in the Browser App, represented as a semantic version string.
  """
  maxSemanticVersion: SemVer

  """The maximum (newest) agent version running in the Browser App."""
  maxVersion: Int

  """
  The minimum (oldest) agent version running in the Browser App, represented as a semantic version string.
  """
  minSemanticVersion: SemVer

  """The minimum (oldest) agent version running in the Browser App."""
  minVersion: Int
}

"""Blueprint for edge creation."""
input AiTopologyCollectorEdgeBlueprint {
  """Whether or not from and to have any semantic meaning."""
  directed: Boolean

  """The source vertex name."""
  fromVertexName: String!

  """The destination vertex name."""
  toVertexName: String!
}

"""Methods for replacing obfuscated values."""
enum LogConfigurationsObfuscationMethod {
  """Replace the matched data with a SHA256 hash."""
  HASH_SHA256

  """Replace the matched data with a static value."""
  MASK
}

"""The attributes of an account share."""
type OrganizationSharedAccount {
  """The ID of the account being shared."""
  accountId: Int!

  """The ID of the account share."""
  id: String!

  """The ID of the limiting role for the account share."""
  limitingRoleId: Int!

  """The name of the account share."""
  name: String

  """The ID of the organization sending the account share."""
  sourceOrganizationId: ID!

  """The name of the organization sending the account share."""
  sourceOrganizationName: String

  """The ID of the organization receiving the account share."""
  targetOrganizationId: ID!

  """The name of the organization receiving the account share."""
  targetOrganizationName: String
}

"""Span attribute key operator types"""
enum EdgeSpanAttributeKeyOperator {
  """Matches on an exact value"""
  EQUALS

  """
  Matches on a value that starts-with and/or ends-with the provided value
  """
  LIKE
}

"""The NRQL SELECT clause to aggregate events."""
input ServiceLevelEventsQuerySelectCreateInput {
  """
  The attribute used in the selected function. Only use it in combination with the SUM, GET_FIELD and GET_CDF_COUNT functions.
  """
  attribute: String

  """The function to use in the SELECT clause."""
  function: ServiceLevelEventsQuerySelectFunction!

  """
  The threshold used in the selected function. Only use it in combination with the GET_CDF_COUNT function.
  """
  threshold: Float
}

"""
The name of a log data partition. Has to start with 'Log_' prefix and can only contain alphanumeric characters and underscores.
"""
scalar LogConfigurationsLogDataPartitionName

"""Metadata information for a visualization"""
type Nr1CatalogVisualizationMetadata implements Nr1CatalogNerdpackItemMetadata {
  """A short form description for the visualization."""
  description: String

  """The human-readable name for the visualization."""
  displayName: String

  """A list of previews for the visualization, such as screenshots."""
  previews: [Nr1CatalogPreview!]!
}

"""HipChat notification channel."""
type AlertsHipChatNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet! @deprecated(reason: "This channel type is deprecated")

  """HipChat channel specific configuration."""
  config: AlertsHipChatNotificationChannelConfig! @deprecated(reason: "This channel type is deprecated")

  """Channel ID."""
  id: ID! @deprecated(reason: "This channel type is deprecated")

  """Channel name."""
  name: String! @deprecated(reason: "This channel type is deprecated")

  """Channel type."""
  type: AlertsNotificationChannelType! @deprecated(reason: "This channel type is deprecated")
}

"""Error object"""
union AiNotificationsError = AiNotificationsConstraintsError | AiNotificationsDataValidationError | AiNotificationsResponseError | AiNotificationsSuggestionError

"""Configuration for Slack notification channel."""
type AlertsSlackNotificationChannelConfig {
  """Slack channel name."""
  teamChannel: String

  """Slack channel URL."""
  url: SecureValue!
}

"""OpsGenie notification channel."""
type AlertsOpsGenieNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """OpsGenie channel specific configuration."""
  config: AlertsOpsGenieNotificationChannelConfig!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

"""Vertex AI"""
input CloudGcpAiplatformIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
The details that were submitted when creating an events to metrics conversion rule.
"""
type EventsToMetricsCreateRuleSubmission {
  """The account where the events exist and the metrics will be put."""
  accountId: Int!

  """Provides additional information about the rule."""
  description: String

  """The name of the rule. This must be unique within a given account."""
  name: String!

  """Explains how to create one or more metrics from events."""
  nrql: String!
}

"""An async organization creation result organization"""
type OrganizationOrganizationCreateAsyncOrganizationResult {
  """Organization ID"""
  id: ID

  """Organization name"""
  name: String
}

"""
The Nerdpack root object. Contains the Nerdpack information including the list of versions and subscriptions.
"""
type NerdpackData {
  """Unique identifier of the account that owns the Nerdpack."""
  accountId: Int!

  """
  Get the list of accounts specified on the allow list.
  If the user is authorized to the nerdpack owner account all the allowed accounts will be displayed,
  otherwise, only the intersection of allowed accounts and user authorized accounts will be displayed.
  """
  allowedAccounts: [NerdpackAllowedAccount]

  """Unique V5 uuid that identifies the Nerdpack."""
  id: ID!

  """Type that defines the rules for account subscription."""
  subscriptionModel: NerdpackSubscriptionModel

  """List of subscriptions on versions of the given Nerdpack."""
  subscriptions: [NerdpackSubscription]

  """Retrieve the versions for the given Nerdpack."""
  versions(
    """Pagination cursor. Defaults to first page"""
    cursor: String

    """Version filter"""
    filter: NerdpackVersionFilter
  ): NerdpackVersionsResult
}

type DistributedTracingActorStitchedFields {
  """
  Look up the details of a trace based upon the traceId and optional start time.
  """
  trace(
    """
    The start time of the trace. This will default to 1 hour ago and will look for traces within that window. If you are looking for a preserved trace then it is required to pass in a timestamp.
    """
    timestamp: EpochMilliseconds

    """Unique identifier shared by all spans within a single trace."""
    traceId: String!
  ): DistributedTracingTrace
}

"""
Configuration settings related to how a browser agent handles Ajax requests.
"""
input AgentApplicationSettingsBrowserAjaxInput {
  """
  A list of host destinations that will not record AjaxRequest events when requested.
  """
  denyList: [String!]
}

"""An error object for tag mutations."""
type TaggingMutationError {
  """A message explaining what the errors is about."""
  message: String

  """The type of error."""
  type: TaggingMutationErrorType
}

"""Sort key and direction for authentication domains"""
input OrganizationAuthenticationDomainSortInput {
  """Direction to sort in"""
  direction: OrganizationSortDirectionEnum

  """Authentication domain attribute to sort on"""
  key: OrganizationSortKeyEnum
}

"""Service Bus Integration"""
type CloudAzureServicebusIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

type InstallationAccountStitchedFields {
  """
  Look up the install event for a given account.
  - An install event is a representation for when the newrelic-cli has attempted an installation."
  """
  installStatus: InstallationInstallStatus

  """
  Look up all recipe events for a given account.
  - Recipe events are stored in our cache for any given account.
  - Recipe events are used in the nr1-install-newrelic nerdlet to provide an overview of all the attempted installation statuses.
  """
  recipeEvents: [InstallationRecipeEvent!]

  """Look up recipe events for a given account by installId."""
  recipes(
    """
    used to fetch next page of results.  If not present, most recent events (first page) will be returned
    """
    cursor: String

    """
    installId associated to recipe events.  If not present, all recipe events will be returned for the email provided from the service gateway email header
    """
    installId: String
  ): InstallationRecipeEventResult

  """Look up install statuses for a given account by installId."""
  statuses(
    """
    used to fetch next page of results.  If not present, most recent install statuses (first page) will be returned
    """
    cursor: String

    """
    installId associated to recipe events.  If not present, all install statuses will be returned for the email provided from the service gateway email header
    """
    installId: String
  ): InstallationInstallStatusResult
}

"""Input type for WholeCosineDistance expression"""
input AiDecisionsWholeCosineDistanceInput {
  """Maximum distance threshold."""
  maxDistance: Float!
}

"""User action for issue"""
type AiIssuesIncidentUserActionResponse {
  """account id"""
  accountId: Int!

  """Error, if any"""
  error: String

  """Incident id"""
  incidentId: ID!
}

"""Accounts"""
type OrganizationAccountCollection {
  """Accounts"""
  items: [OrganizationAccount!]

  """
  an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""
A static status that was involved in the calculation of the workload status.
"""
type WorkloadStaticStatusResult implements WorkloadStatusResult {
  """
  A description that provides additional details about the status of the workload.
  """
  description: String

  """Indicates where the status value derives from."""
  source: WorkloadStatusSource!

  """A short description of the status of the workload."""
  summary: String

  """The value of a static status."""
  value: WorkloadStatusValue!
}

"""Key value type"""
type AiIssuesKeyValue {
  """key"""
  key: String!

  """value"""
  value: String!
}

"""
Successfully deleted trace observers, or one or more error responses if there were issues.
"""
type EdgeDeleteTraceObserverResponse {
  """
  Errors that may occur when deleting a `TraceObserver`. Defaults to `null` in case of success.
  """
  errors: [EdgeDeleteTraceObserverResponseError]

  """
  The trace observer that was deleted. Defaults to `null` in case of failure.
  """
  traceObserver: EdgeTraceObserver
}

"""Page input."""
input DashboardPageInput {
  """Brief text describing the page."""
  description: String

  """
  Unique entity identifier of the Page to be updated. When null, it means a new Page will be created.
  """
  guid: EntityGuid

  """The name of the page."""
  name: String!

  """A nested block of all widgets belonging to the page."""
  widgets: [DashboardWidgetInput!]!
}

"""The error type for updating a notification channel."""
enum AlertsNotificationChannelUpdateErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"""Summary statistics about the Browser App."""
type BrowserApplicationSummaryData {
  """The number of AJAX requests per minute"""
  ajaxRequestThroughput: Float

  """The average AJAX response time in seconds."""
  ajaxResponseTimeAverage: Seconds

  """The percentage of page views with a JS error."""
  jsErrorRate: Float

  """The number of page loads per minute"""
  pageLoadThroughput: Float

  """The average page view time in seconds."""
  pageLoadTimeAverage: Float

  """The median page view time in seconds."""
  pageLoadTimeMedian: Float

  """The average SPA response time in seconds."""
  spaResponseTimeAverage: Seconds

  """The median SPA response time in seconds."""
  spaResponseTimeMedian: Seconds
}

"""Filter issues events"""
input AiIssuesFilterIssuesEvents {
  """entityGuids"""
  entityGuids: [EntityGuid!]

  """entityTypes"""
  entityTypes: [String!]

  """ids"""
  ids: [ID!]
}

"""The type of error."""
enum ApiAccessIngestKeyErrorType {
  """
  Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
  """
  FORBIDDEN

  """
  Occurs when the action taken on a key did not successfully pass validation.
  """
  INVALID

  """Occurs when the requested key `id` was not found."""
  NOT_FOUND
}

"""Provides the types of account statuses available"""
enum OrganizationAccountStatus {
  """Accounts that are not in canceled status"""
  ACTIVE

  """Accounts that have been canceled"""
  CANCELED
}

"""Blueprint for suggestion creation."""
input AiDecisionsSuggestionBlueprint {
  """Length of the window in which incidents are compared."""
  correlationWindowLength: Milliseconds

  """Description of suggestion."""
  description: String

  """Hash of suggestion."""
  hash: String!

  """Number of correlations within a window required to merge issues."""
  minCorrelationThreshold: Int

  """Name of suggestion."""
  name: String!

  """Configuration to allow rule to override issue properties."""
  overrideConfiguration: AiDecisionsOverrideConfigurationInput

  """Expression to use to compare incidents."""
  ruleExpression: AiDecisionsRuleExpressionInput!

  """Service/user that created this suggestion."""
  suggester: String!

  """Support for suggestion."""
  support: String
}

"""The input object representing the user being updated"""
input UserManagementUpdateUser {
  """The new email address to be updated on the user"""
  email: String

  """The ID of the user to be updated"""
  id: ID!

  """The full name of the user to be updated"""
  name: String

  """
  The user time zone to be updated, in IANA zoneinfo format, e.g. 'America/Chicago'
  """
  timeZone: String

  """The new user type to be updated on the user"""
  userType: UserManagementRequestedTierName
}

"""WAF"""
input CloudAwsWafIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Data Factory Integration"""
type CloudAzureDatafactoryIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
A data structure that contains the detailed response of an entity search.

The direct search result is available through `results`. Information about the
query itself is available through `query`, `types`, and `count`.
"""
type EntitySearch {
  """The number of entities returned by the entity search."""
  count: Int

  """
  A count of the Entity Search results faceted by a chosen set of criteria.
  
  Note: Unlike a NRQL facet, the facet results do not include entities where the facet value does not exist. Additionally, entities can be tagged with multiple tag values for one tag key. For these reasons, depending on the facet values chosen, the `counts` field will not always equal the `entitySearch.count` field.
  """
  counts(
    """
    A list of criteria to facet entities by.
    
    This can be combined with the `facetTags` argument to facet by a combination of criteria and tags.
    """
    facet: [EntitySearchCountsFacet!]

    """
    A list of tags to facet entities by. For example: `"environment"`, `"region"`.
    
    This can be combined with the `facet` argument to facet by a combination of criteria and tags.
    
    Note: If a tag does not exist on an entity, the entity will not be counted in the facet results. If an entity tag has multiple values, it will be counted in all facets that apply.
    """
    facetTags: [String!]
  ): [EntitySearchCounts]

  """
  The entity search query string that was generated by the `query` argument or the `queryBuilder` argument.
  """
  query: String

  """The paginated results of the entity search."""
  results(
    """The cursor to fetch paginated entity search results."""
    cursor: String
  ): EntitySearchResult

  """The entity types returned by the entity search."""
  types: [EntitySearchTypes]
}

"""Accessible customers"""
type OrganizationCustomerContractWrapper {
  """Accessible customers"""
  items: [OrganizationCustomerContract!]!

  """
  an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

"""This scalar represents an event"""
scalar ErrorsInboxRawEvent

"""The input for updating an existing VictorOps notification channel."""
input AlertsVictorOpsNotificationChannelUpdateInput {
  """Key."""
  key: SecureValue

  """Notification channel name."""
  name: String

  """Route key."""
  routeKey: String
}

"""Type of Enrichment"""
enum AiWorkflowsEnrichmentType {
  """NRQL Enrichment type"""
  NRQL
}

type NerdStorageEntityScope {
  collection(collection: String!, scopeByActor: Boolean): [NerdStorageCollectionMember]
  document(collection: String!, documentId: String!, scopeByActor: Boolean): NerdStorageDocument
}

type DataManagementAccountStitchedFields {
  """List all customizable event namespaces"""
  customizableRetention: DataManagementCustomizableRetention

  """Get the event retention policies for an account"""
  eventRetentionPolicies: [DataManagementRenderedRetention]

  """
  Get the event retention rule for a namespace on an account, if it exists
  """
  eventRetentionRule(
    """Namespace of the requested event retention rule"""
    namespace: String!
  ): DataManagementRule

  """List all the event retention rules for an account"""
  eventRetentionRules: [DataManagementRule]

  """Query for all feature settings"""
  featureSettings: [DataManagementFeatureSetting]

  """Query for all limits"""
  limits: [DataManagementAccountLimit]

  """Audit of retention values per namespace for an account"""
  retentionAudit: [DataManagementRetentionValues]

  """List of all namespaces"""
  retentions: [DataManagementRetention]
}

"""
Expected error types that can be returned by addWidgetsToPage operation.
"""
enum DashboardAddWidgetsToPageErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT

  """Page not found in the system."""
  PAGE_NOT_FOUND
}

"""The response of the key delete mutation."""
type ApiAccessDeleteKeyResponse {
  """
  The `id`s of the successfully deleted ingest keys and any errors that occurred when deleting keys.
  """
  deletedKeys: [ApiAccessDeletedKey]

  """
  Lists all errors for keys that could not be deleted. Each error maps to a single key input.
  """
  errors: [ApiAccessKeyError]
}

"""A node in an Entity relationship."""
type EntityRelationshipNode {
  """The Account ID for the relationship node."""
  accountId: Int @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")
  entity: EntityOutline

  """The `EntityType` of the relationship node."""
  entityType: EntityType @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The Entity `guid` for the relationship node."""
  guid: EntityGuid @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")
}

"""NRQL condition terms determine when a violation will be opened."""
type AlertsNrqlConditionTerms {
  """Operator used to compare against the threshold."""
  operator: AlertsNrqlConditionTermsOperator!

  """
  Priority determines how much attention your incidents need. Your workflow settings then tell us when and where to send notifications for different priorities.
  """
  priority: AlertsNrqlConditionPriority!

  """Value that triggers a violation."""
  threshold: Float!

  """
  Duration, in seconds, that the condition must violate the threshold before creating a violation.
  """
  thresholdDuration: Int!

  """
  How many data points must be in violation for the specified threshold duration.
  """
  thresholdOccurrences: AlertsNrqlConditionThresholdOccurrences!
}

"""Configure mobile network settings here."""
input AgentApplicationSettingsNetworkSettingsInput {
  """
  Input data that maps hosts to alias names for grouping and identification purposes.
  """
  aliases: [AgentApplicationSettingsNetworkAliasesInput!]

  """
  Configuration setting to apply either the show or hide strategy for network filtering.
  """
  filterMode: AgentApplicationSettingsNetworkFilterMode

  """
  A list of hostnames that would be applied to our filter settings when the filterMode is 'HIDE.'
  """
  hideList: [String!]

  """
  Input data that maps ignore status codes associated with different hosts.
  """
  ignoredStatusCodeRules: [AgentApplicationSettingsIgnoredStatusCodeRuleInput!]

  """
  A list of hostnames that would be applied to our filter settings when the filterMode is 'SHOW.'
  """
  showList: [String!]
}

"""The input object that represents an objective definition."""
input ServiceLevelObjectiveUpdateInput {
  """The description of the SLO."""
  description: String

  """The name of the SLO."""
  name: String

  """The target percentage of the SLO. Maximum value is 100."""
  target: Float!

  """The time window configuration of the SLO."""
  timeWindow: ServiceLevelObjectiveTimeWindowUpdateInput!
}

"""The query that represents the events to fetch."""
input ServiceLevelEventsQueryUpdateInput {
  """The NRDB event to fetch the data from."""
  from: Nrql!

  """The NRQL SELECT clause to aggregate events. Default is COUNT(*)."""
  select: ServiceLevelEventsQuerySelectUpdateInput

  """The NRQL condition to filter the events."""
  where: Nrql
}

"""Criteria for the resource filter"""
input ErrorsInboxResourceFilterInput {
  """Types of resources to include in the query"""
  types: [ErrorsInboxResourceType!]
}

"""Query object for UserSearch."""
input UsersUserSearchQuery {
  """The scope to filter the search response by."""
  scope: UsersUserSearchScope
}

"""Configuration for visualization type 'viz.area'"""
input DashboardAreaWidgetConfigurationInput {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"""Autogenerated return type of UnlinkAccount"""
type CloudUnlinkAccountPayload {
  """The list of errors."""
  errors: [CloudAccountMutationError!]!

  """The unlinked accounts."""
  unlinkedAccounts: [CloudLinkedAccount!]!
}

"""A secure credential entity."""
type SecureCredentialEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The description of the entity."""
  description: String

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The domain-specific identifier for the entity."""
  secureCredentialId: ID

  """Summary statistics for the Synthetic Monitor Secure Credential."""
  secureCredentialSummary: SecureCredentialSummaryData

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String

  """The time at which the entity was last updated."""
  updatedAt: EpochMilliseconds
}

"""Amazon DynamoDB"""
input CloudDynamodbIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Type of access to the subscribed Nerdpack."""
enum NerdpackSubscriptionAccessType {
  """Direct subscription with user account."""
  DIRECT

  """Master account subscription."""
  INHERITED
}

"""Configuration for visualization type 'viz.billboard'"""
type DashboardBillboardWidgetConfiguration {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQuery]

  """
  Array of thresholds to categorize the results of the query in different groups.
  """
  thresholds: [DashboardBillboardWidgetThreshold]
}

"""The Google Cloud Platform cloud provider"""
type CloudGcpProvider implements CloudProvider {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud provider icon name."""
  icon: String!

  """The cloud provider identifier in NewRelic."""
  id: Int!

  """The cloud provider name."""
  name: String!

  """Get details of one cloud provider service."""
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  """
  The service account identifier used to link the GCP project to NewRelic.
  """
  serviceAccountId: String!

  """
  Get details of all the cloud provider services available for integration.
  """
  services: [CloudService!]!

  """The cloud provider short name."""
  slug: String!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Destination fields"""
enum AiNotificationsDestinationFields {
  """active field"""
  ACTIVE

  """created_at field"""
  CREATED_AT

  """default field"""
  DEFAULT

  """last_sent field"""
  LAST_SENT

  """name field"""
  NAME

  """status field"""
  STATUS

  """type field"""
  TYPE

  """updated_at field"""
  UPDATED_AT

  """updated_by field"""
  UPDATED_BY
}

"""Expected errors as a result of mutating a parsing rule."""
type LogConfigurationsParsingRuleMutationError {
  """The message with the error cause."""
  message: String

  """Type of error."""
  type: LogConfigurationsParsingRuleMutationErrorType
}

"""The resulting NRQL queries that help consume the metrics of the SLO."""
type ServiceLevelObjectiveResultQueries {
  """The NRQL query that measures the attainment of the SLO target."""
  attainment: ServiceLevelResultQuery!
}

"""Input type for FixedSoundEx expression"""
input AiDecisionsFixedSoundExInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Minimum distance threshold."""
  minDistance: Int!

  """Value to be used in comparison."""
  value: String!
}

"""Data required to create a trace observer."""
input EdgeCreateTraceObserverInput {
  """
  Optional list of compliance types (e.g., FedRAMP) applied to this trace observer.
  """
  complianceTypes: [EdgeComplianceTypeCode!]

  """
  When set to `true` a trace observer will write trace metrics to the current account.
  """
  monitoring: Boolean

  """Name of the trace observer."""
  name: String!

  """
  Provider and region where the trace observer must run. Currently, only AWS regions are supported.
  """
  providerRegion: EdgeProviderRegion!
}

"""Filter on the workflow objects"""
input AiWorkflowsFilters {
  """channelId"""
  channelId: ID

  """destinationType"""
  destinationType: AiWorkflowsDestinationType

  """enrichmentId"""
  enrichmentId: ID

  """filterId"""
  filterId: ID

  """guid"""
  guid: EntityGuid

  """id"""
  id: ID

  """name"""
  name: String

  """nameLike"""
  nameLike: String

  """workflowEnabled"""
  workflowEnabled: Boolean
}

type PixieAccountStitchedFields {
  """Details for the linked Pixie project"""
  linkedPixieProject: PixiePixieProject

  """Get a Pixie access token"""
  pixieAccessToken: SecureValue
}

"""Input data for nerdpack version tagging."""
input NerdpackTagVersionInput {
  """Tag to be added to the version."""
  tag: NerdpackTagName

  """Nerdpack version."""
  version: SemVer
}

"""Input type for WholeJaccardSimilarity expression"""
input AiDecisionsWholeJaccardSimilarityInput {
  """Threshold for comparison."""
  threshold: Float!
}

"""The definition of the SLI."""
type ServiceLevelIndicator {
  """
  The date when the SLI was created represented in the number of milliseconds since the Unix epoch.
  """
  createdAt: EpochMilliseconds!

  """The user who created the SLI."""
  createdBy: UserReference

  """The description of the SLI."""
  description: String

  """The entity which the SLI is attached to."""
  entityGuid: EntityGuid!

  """The events that define the SLI."""
  events: ServiceLevelEvents!

  """The unique entity identifier of the SLI."""
  guid: EntityGuid!

  """The unique identifier of the SLI."""
  id: ID!

  """The name of the SLI."""
  name: String!

  """A list of objective definitions."""
  objectives: [ServiceLevelObjective!]

  """The resulting NRQL queries that help consume the metrics of the SLI."""
  resultQueries: ServiceLevelIndicatorResultQueries

  """
  [DEPRECATED] The slug is deprecated and it will be removed from the schema as soon as possible.
  """
  slug: String! @deprecated(reason: "The slug is deprecated and it will be removed from the schema as soon as possible.")

  """
  The date when the SLI was last updated represented in the number of milliseconds since the Unix epoch.
  """
  updatedAt: EpochMilliseconds

  """The user who last update the SLI."""
  updatedBy: UserReference
}

"""container for roles enabling cursor based pagination"""
type AuthorizationManagementGrantedRoleSearch {
  """
  an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the roles granted to this group"""
  roles: [AuthorizationManagementGrantedRole!]!

  """the total number of results"""
  totalCount: Int!
}

"""An enum specifying the specific types of errors that may be returned."""
enum OrganizationUpdateErrorType {
  """Returned when the attributes provided for an object are invalid."""
  INVALID_RECORD

  """
  Returned when the actor has insufficient capabilties to fulfill the request.
  """
  NOT_AUTHORIZED
}

"""Basic user and password authentication"""
type AiNotificationsBasicAuth {
  """Authentication Type - Basic"""
  authType: AiNotificationsAuthType!

  """Username"""
  user: String!
}

"""Amazon Simple Storage Service (S3)"""
input CloudS3IntegrationInput {
  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Autogenerated return type of UpdateGroup."""
type UserManagementUpdateGroupPayload {
  """The group that was updated"""
  group: UserManagementGroup
}

"""Live URL type."""
enum DashboardLiveUrlType {
  """Dashboard."""
  DASHBOARD

  """Widget."""
  WIDGET
}

"""Notification response according to channel id"""
type AiWorkflowsTestNotificationResponse {
  """The id of the tested channel"""
  channelId: ID!

  """Evidence for a successful test notification"""
  evidence: String

  """Whether the test notification succeeded"""
  status: AiWorkflowsTestNotificationResponseStatus!
}

"""Input for creating an outlier NRQL condition."""
input AlertsNrqlConditionOutlierInput {
  """The custom violation description."""
  description: String

  """Whether the NRQL condition is enabled."""
  enabled: Boolean!

  """Number of groups expected in the returned values for the condition."""
  expectedGroups: Int!

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpirationInput

  """Name of the NRQL condition."""
  name: String!

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionQueryInput!

  """Whether overlapping groups should produce a violation."""
  openViolationOnGroupOverlap: Boolean!

  """Runbook URL."""
  runbookUrl: String

  """
  Configuration that defines the signal that the NRQL condition will use to evaluate.
  """
  signal: AlertsNrqlConditionSignalInput

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlDynamicConditionTermsInput!]!

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes. Default is THIRTY_DAYS.
  """
  violationTimeLimit: AlertsViolationTimeLimit

  """
  Duration after which a violation automatically closes in seconds.
  Accepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).
  
  Default is 3 days (259200 seconds).
  """
  violationTimeLimitSeconds: Seconds
}

"""Webhook header"""
input AlertsWebhookCustomHeaderMutationInput {
  """Header name"""
  name: String!

  """Header value"""
  value: SecureValue!
}

"""An entity relationship"""
type EntityRelationship {
  """The source entity of the relationship."""
  source: EntityRelationshipNode @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The target entity of the relationship."""
  target: EntityRelationshipNode @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """
  The type of the relationship. For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  type: EntityRelationshipType
}

"""The object that's returned from successfully creating an organization."""
type OrganizationCreateOrganizationResponse {
  """
  The job id of the organization creation task; query this job id to get latest state
  """
  jobId: String!
}

"""Expected errors as a result of creating a new data partition rule."""
type LogConfigurationsCreateDataPartitionRuleError {
  """The message with the error cause."""
  message: String

  """Type of error."""
  type: LogConfigurationsCreateDataPartitionRuleErrorType
}

"""enum of of script step types"""
enum SyntheticsStepType {
  """Assert on element accessed by ID, CSS, or x-path"""
  ASSERT_ELEMENT

  """Assert on modal exists"""
  ASSERT_MODAL

  """Assert on text accessed by ID, CSS, or x-path"""
  ASSERT_TEXT

  """Assert on title of page"""
  ASSERT_TITLE

  """Click on an element by ID, CSS, or x-path"""
  CLICK_ELEMENT

  """Preform actions on a modal to dismiss"""
  DISMISS_MODAL

  """Double click on an element by ID, CSS, or x-path"""
  DOUBLE_CLICK_ELEMENT

  """Hover over an element by x-path"""
  HOVER_ELEMENT

  """Navigate to the specified url"""
  NAVIGATE

  """Input secure credential into element accessed by ID, CSS, or x-path"""
  SECURE_TEXT_ENTRY

  """Select a dropdown element by value, text, ID, CSS, or x-path"""
  SELECT_ELEMENT

  """Input text into element accessed by ID, CSS, or x-path"""
  TEXT_ENTRY
}

"""A reference to a New Relic entity."""
type WorkloadEntityRef {
  """The unique entity identifier in New Relic."""
  guid: EntityGuid
}

"""Provides all the available filters on the organization id"""
input OrganizationOrganizationIdInputFilter {
  """performs an equals operation"""
  eq: ID!
}

"""
The input object used to represent the entity search query to be created.
"""
input WorkloadEntitySearchQueryInput {
  """
  The entity search query that is used to perform the search of a group of entities.
  """
  query: String!
}

"""Error description"""
interface AiWorkflowsResponseError {
  """The error description"""
  description: String!
}

"""
The scope of keys to be returned. Note that some filters only apply to certain key types.
"""
input ApiAccessKeySearchScope {
  """A list of key account IDs."""
  accountIds: [Int]

  """
  The ingest type of the key. Only applies to ingest keys, and does not affect user key filtering.
  """
  ingestTypes: [ApiAccessIngestKeyType]

  """
  A list of key user ids. Only applies to user keys, and does not affect ingest key filtering.
  """
  userIds: [Int]
}

"""Amazon Elastic Container Service (ECS)"""
input CloudEcsIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""MQ"""
input CloudAwsMqIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
Public schema - `DashboardEntity` result representation for mutations. It's a subset of the `DashboardEntity` that inherits from the Entity type, but a complete different type.
"""
type DashboardEntityResult {
  """The New Relic account where the dashboard is created."""
  accountId: Int

  """Dashboard creation timestamp."""
  createdAt: DateTime

  """Brief text describing the dashboard."""
  description: String

  """Unique entity identifier."""
  guid: EntityGuid

  """The name of the dashboard."""
  name: String

  """Information of the user that owns the dashboard."""
  owner: DashboardOwnerInfo

  """A nested block of all pages belonging to the dashboard."""
  pages: [DashboardPage]

  """Dashboard permissions configuration."""
  permissions: DashboardPermissions

  """Dashboard update timestamp."""
  updatedAt: DateTime

  """Dashboard-local variable definitions."""
  variables: [DashboardVariable]
}

"""Elastic Load Balancing - Application Load Balancer (ALB)"""
input CloudAlbIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """
  Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
  """
  loadBalancerPrefixes: [String]

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""
For users on our New Relic One user model, a "group" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.
"""
type UserManagementGroup {
  """the name of the object"""
  displayName: String!

  """a value that uniquely identifies this object"""
  id: ID!

  """container for users enabling cursor based pagination"""
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]
  ): UserManagementGroupUsers
}

"""
Represents the type of the rule that the resulting group of entities belongs to.
"""
enum WorkloadResultingGroupType {
  """
  The rule considers the entities within a specific group in the workload.
  """
  REGULAR_GROUP

  """
  The rule considers all the entities within the workload that aren’t evaluated in any other rule.
  """
  REMAINING_ENTITIES
}

"""Available filtering types for pending upgrade requests"""
input UserManagementPendingUpgradeRequestInput {
  """Whether a request exists or not"""
  exists: Boolean!
}

"""AppSync Integration"""
type CloudAwsAppsyncIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Details of an application instance such as host and language."""
type AgentEnvironmentApplicationInstanceDetails {
  """Host of the application instance."""
  host: String!

  """ID of the application instance."""
  id: ID!

  """Language of the application instance."""
  language: String!

  """Name of the application instance."""
  name: String!
}

"""Blueprint for vertex creation."""
input AiTopologyCollectorVertexBlueprint {
  """Attributes to define the vertex."""
  definingAttributes: [AiTopologyCollectorAttributeInput!]!

  """The name of the vertex."""
  name: String!

  """The class of the vertex."""
  vertexClass: AiTopologyCollectorVertexClass!
}

"""The error for associating notification channels with a policy."""
type AlertsNotificationChannelsAddToPolicyError {
  """Error description."""
  description: String!

  """Error type."""
  errorType: AlertsNotificationChannelsAddToPolicyErrorType!

  """Notification channel ID."""
  notificationChannelId: ID!
}

"""An object containing your network settings."""
type AgentApplicationSettingsMobileNetworkSettings {
  """
  A list of configuration settings that map host to alias names for grouping and identification purposes.
  """
  aliases: [AgentApplicationSettingsNetworkAlias!]

  """
  Configuration setting to apply either the show or hide strategy for network filtering.
  """
  filterMode: AgentApplicationSettingsNetworkFilterMode

  """
  A list of hostnames that would be applied to our filter settings when the filterMode is 'HIDE.'
  """
  hideList: [String!]

  """
  A list of rules to ignore status codes associated with different hosts.
  """
  ignoredStatusCodeRules: [AgentApplicationSettingsIgnoredStatusCodeRule!]

  """
  A list of hostnames that would be applied to our filter settings when the filterMode is 'SHOW.'
  """
  showList: [String!]
}

"""A MutingRule for New Relic Alerts Violations."""
type AlertsMutingRule {
  """The account id of the MutingRule."""
  accountId: Int!

  """The condition that defines which violations to target."""
  condition: AlertsMutingRuleConditionGroup!

  """The timestamp of when the MutingRule was created."""
  createdAt: DateTime!

  """The user id that created the MutingRule."""
  createdBy: ID! @deprecated(reason: "Please use 'createdByUser'.")

  """The user information that created the MutingRule."""
  createdByUser: UserReference

  """The description of the MutingRule."""
  description: String

  """Whether the MutingRule is enabled"""
  enabled: Boolean!

  """The unique identifier for the MutingRule."""
  id: ID!

  """The name of the MutingRule."""
  name: String!

  """The time window when the MutingRule should actively mute violations."""
  schedule: AlertsMutingRuleSchedule

  """
  The status of a MutingRule based on whether it is Enabled and has a Schedule.
  """
  status: AlertsMutingRuleStatus!

  """The timestamp of when the MutingRule was last modified."""
  updatedAt: DateTime!

  """The user id that last modified the MutingRule."""
  updatedBy: ID! @deprecated(reason: "Please use 'updatedByUser'.")

  """The user information that last modified the MutingRule."""
  updatedByUser: UserReference
}

"""The input object representing the sort parameters for groups"""
input UserManagementGroupSortInput {
  """Sort groups in this direction"""
  direction: UserManagementSortDirection

  """Sort groups by this key"""
  key: UserManagementGroupSortKey
}

"""Valid request types for user change requests"""
enum UserManagementRequestedTierName {
  """basic tier"""
  BASIC_USER_TIER

  """core tier"""
  CORE_USER_TIER

  """full tier"""
  FULL_USER_TIER
}

"""Information needed to create a repository entity."""
input ReferenceEntityCreateRepositoryInput {
  """The account id this repository will live under."""
  accountId: Int!

  """The name of the repository."""
  name: String!

  """The url of the repository."""
  url: String!
}

"""Azure Monitor metrics"""
input CloudAzureMonitorIntegrationInput {
  """Specify if integration is active"""
  enabled: Boolean

  """
  Specify resource tags (in 'key:value' form) associated with the resources that you want to exclude from monitoring. Exclusion takes precedence over inclusion.
  """
  excludeTags: [String]

  """
  Specify resource tags (in 'key:value' form) associated with the resources that you want to monitor. If empty, all resources will be monitored.
  """
  includeTags: [String]

  """The polling interval for metadata and tags, in seconds."""
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The polling interval for metrics, in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """Specify each Azure resource type that you want to monitor."""
  resourceTypes: [String]
}

"""Possible strategies when replacing variables in a NRQL query."""
enum DashboardVariableReplacementStrategy {
  """Replace the variable based on its automatically-inferred type."""
  DEFAULT

  """Replace the variable value as an identifier."""
  IDENTIFIER

  """Replace the variable value as a number."""
  NUMBER

  """Replace the variable value as a string."""
  STRING
}

"""Type of Destination Configuration"""
enum AiWorkflowsDestinationType {
  """Email Destination Configuration type"""
  EMAIL

  """Event Bridge Destination Configuration type"""
  EVENT_BRIDGE

  """Jira Destination Configuration type"""
  JIRA

  """New Relic Mobile Push Destination Configuration type"""
  MOBILE_PUSH @deprecated(reason: "This type is under development")

  """Pager Duty Destination Configuration type"""
  PAGERDUTY @deprecated(reason: "Unused destination type")

  """Pager Duty with account integration Destination Configuration type"""
  PAGERDUTY_ACCOUNT_INTEGRATION

  """Pager Duty with service integration Destination Configuration type"""
  PAGERDUTY_SERVICE_INTEGRATION

  """Service Now Destination Configuration type"""
  SERVICE_NOW

  """ServiceNow official NewRelic app Configuration type"""
  SERVICE_NOW_APP

  """Slack Destination Configuration type"""
  SLACK

  """Slack legacy Destination Configuration type"""
  SLACK_LEGACY

  """Webhook Destination Configuration type"""
  WEBHOOK
}

"""The data partition rule matching criteria."""
input LogConfigurationsDataPartitionRuleMatchingCriteriaInput {
  """
  The attribute name against which this matching condition will be evaluated.
  """
  attributeName: String!

  """The matching expression of the data partition rule definition."""
  matchingExpression: String!

  """The matching method of the data partition rule definition."""
  matchingMethod: LogConfigurationsDataPartitionRuleMatchingOperator!
}

"""The result of a tag mutation"""
type TaggingMutationResult {
  """
  An array containing errors, if any. These are expected errors listed in TagMutationErrorType which a request should be capable of handling appropriately.
  """
  errors: [TaggingMutationError]
}

"""A query that represents a criteria for searching news."""
input WhatsNewContentSearchQuery {
  """Criteria to narrow the scope of the search to a specific type of news."""
  contentType: WhatsNewContentType

  """
  Criteria to narrow the scope of the search to only those news that are unread by the current user.
  """
  unreadOnly: Boolean
}

"""Provides the field and direction the result should be sorted"""
input MultiTenantAuthorizationRoleSortInput {
  """The direction the field should be sorted"""
  direction: MultiTenantAuthorizationSortDirectionEnum

  """The field which should be sorted"""
  key: MultiTenantAuthorizationRoleSortEnum!
}

"""A key-value entry."""
type AiDecisionsAnnotationEntry {
  """Key of entry."""
  key: String!

  """Value of entry."""
  value: String!
}

"""Live URL result."""
type DashboardLiveUrlResult {
  """The list of errors, if any."""
  errors: [DashboardLiveUrlError]

  """Live URL."""
  liveUrls: [DashboardLiveUrl]
}

"""Destination input object"""
input AiNotificationsDestinationInput {
  """auth"""
  auth: AiNotificationsCredentialsInput

  """name"""
  name: String!

  """properties"""
  properties: [AiNotificationsPropertyInput!]!

  """type"""
  type: AiNotificationsDestinationType!
}

"""Information about an author"""
type Nr1CatalogAuthor {
  """The name of the author"""
  name: String!
}

"""Datastore Integration"""
type CloudGcpDatastoreIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Represents the rollup strategy that is applied to a group of entities."""
enum WorkloadRollupStrategy {
  """
  The group status matches the less critical status of all belonging entities.
  """
  BEST_STATUS_WINS

  """
  The group status matches the most critical status of all belonging entities.
  """
  WORST_STATUS_WINS
}

"""An encoded Entity GUID"""
scalar EntityGuid

"""The function to use in the SELECT clause."""
enum ServiceLevelEventsQuerySelectFunction {
  """Use on events and unaggregated data."""
  COUNT

  """Use on distribution metric types."""
  GET_CDF_COUNT

  """Use in valid events combined with GET_CDF_COUNT."""
  GET_FIELD

  """Use on aggregated counts."""
  SUM
}

"""Status of the endpoint."""
enum EdgeEndpointStatus {
  """The endpoint has been created and is available for use."""
  CREATED

  """The endpoint has been deleted and is no longer available for use."""
  DELETED
}

"""Response for error group state mutation."""
type ErrorsInboxUpdateErrorGroupStateResponse {
  """List of errors encountered."""
  errors: [ErrorsInboxUpdateErrorGroupStateError!] @deprecated

  """Updated state value."""
  state: ErrorsInboxErrorGroupState
}

"""
Typed configuration for known visualizations. At most one may be populated.
"""
input DashboardWidgetConfigurationInput {
  """Configuration for visualization type 'viz.area'"""
  area: DashboardAreaWidgetConfigurationInput

  """Configuration for visualization type 'viz.bar'"""
  bar: DashboardBarWidgetConfigurationInput

  """Configuration for visualization type 'viz.billboard'"""
  billboard: DashboardBillboardWidgetConfigurationInput

  """Configuration for visualization type 'viz.line'"""
  line: DashboardLineWidgetConfigurationInput

  """Configuration for visualization type 'viz.markdown'"""
  markdown: DashboardMarkdownWidgetConfigurationInput

  """Configuration for visualization type 'viz.pie'"""
  pie: DashboardPieWidgetConfigurationInput

  """Configuration for visualization type 'viz.table'"""
  table: DashboardTableWidgetConfigurationInput
}

"""Route53 Resolver"""
input CloudAwsRoute53resolverIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
Description of errors that may occur while attempting to delete a span attribute trace filter.
"""
type EdgeDeleteSpanAttributeRuleResponseError {
  """Error message, with further detail to help resolve the issue."""
  message: String!

  """
  Error that may occur while attempting to delete a span attribute trace filter.
  """
  type: EdgeDeleteSpanAttributeRuleResponseErrorType!
}

"""Dataflow"""
input CloudGcpDataflowIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""A new data partition rule."""
input LogConfigurationsCreateDataPartitionRuleInput {
  """The description of the data partition rule."""
  description: String

  """Whether or not this data partition rule is enabled."""
  enabled: Boolean!

  """The matching criteria of the data partition rule."""
  matchingCriteria: LogConfigurationsDataPartitionRuleMatchingCriteriaInput

  """
  The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.
  """
  nrql: Nrql

  """The retention policy of the data partition data."""
  retentionPolicy: LogConfigurationsDataPartitionRuleRetentionPolicyType!

  """
  The name of the data partition where logs will be allocated once the rule is enabled.
  """
  targetDataPartition: LogConfigurationsLogDataPartitionName!
}

"""Information related to the metadata attached to a quickstart component"""
interface Nr1CatalogQuickstartComponentMetadata {
  """A short form description for the quickstart component."""
  description: String

  """The human-readable name for the quickstart component."""
  displayName: String
}

"""Sorting method for decisions."""
enum AiDecisionsDecisionSortMethod {
  """Sort decisions by id"""
  ID

  """Sort decisions by latest_created"""
  LATEST_CREATED

  """Sort decisions by state_last_modified"""
  STATE_LAST_MODIFIED
}

"""
Configuration for visualization type 'viz.markdown'. Learn more about [markdown](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#markdown) widget.
"""
input DashboardMarkdownWidgetConfigurationInput {
  """Markdown content of the widget."""
  text: String!
}

"""A deployment."""
type ChangeTrackingDeployment {
  """A URL to the changelog or, if not linkable, a list of changes."""
  changelog: String

  """The commit identifier, for example, a Git commit SHA."""
  commit: String

  """A link to the system that generated the deployment."""
  deepLink: String

  """A unique deployment identifier."""
  deploymentId: String

  """The type of deployment, for example, ‘Blue green’ or ‘Rolling’."""
  deploymentType: ChangeTrackingDeploymentType

  """A description of the deployment."""
  description: String

  """The NR entity that was deployed."""
  entityGuid: EntityGuid!

  """An identifier used to correlate two or more events."""
  groupId: String

  """
  The start time of the deployment as the number of milliseconds since the Unix epoch.
  """
  timestamp: EpochMilliseconds!

  """The username of the deployer or bot."""
  user: String

  """
  The version of the deployed software, for example, something like v1.1.
  """
  version: String!
}

"""Input type for RelativeFuzzyWuzzyPartialRatio expression"""
input AiDecisionsRelativeFuzzyWuzzyPartialRatioInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""
In the Java agent (v8.0.0 or later), the Java Flight Recorder can be turned on to collect additional information about the application. This setting cannot be updated for non-java agents.
"""
input AgentApplicationSettingsJfrInput {
  """Whether or not JFR is enabled."""
  enabled: Boolean
}

"""A filter for an AccountID"""
input OrganizationAccountIdFilterInput {
  """An Account ID"""
  eq: Int!
}

"""Current state of the error group."""
enum ErrorsInboxErrorGroupState {
  """Error group is ignored."""
  IGNORED

  """Error group is resolved."""
  RESOLVED

  """Error group is unresolved."""
  UNRESOLVED
}

"""The result after updating a parsing rule."""
type LogConfigurationsUpdateParsingRuleResponse {
  """List of errors, if any."""
  errors: [LogConfigurationsParsingRuleMutationError]

  """The updated parsing rule."""
  rule: LogConfigurationsParsingRule
}

"""Webhook basic auth"""
input AlertsWebhookBasicAuthMutationInput {
  """Password"""
  password: SecureValue!

  """Username"""
  username: String!
}

"""An object that represent the context."""
type EntityGoldenContext {
  """Account context."""
  account: Int

  """Collection guid context."""
  guid: EntityGuid
}

"""Available directions for sorting"""
enum MultiTenantIdentitySortDirection {
  """Sort in ascending order"""
  ASCENDING

  """Sort in descending order"""
  DESCENDING
}

"""The rolling time window configuration of the SLO."""
type ServiceLevelObjectiveRollingTimeWindow {
  """The count of time units."""
  count: Int!

  """The time unit."""
  unit: ServiceLevelObjectiveRollingTimeWindowUnit!
}

"""Incident Intelligence environment kinds"""
enum IncidentIntelligenceEnvironmentEnvironmentKind {
  """
  The environment can contain more than one account so that cross-account correlation between accounts is supported
  """
  CROSS_ACCOUNT_ENVIRONMENT

  """The environment only contains a single account"""
  SINGLE_ACCOUNT_ENVIRONMENT
}

"""The monitor values that can be updated on a Script Api monitor"""
input SyntheticsUpdateScriptApiMonitorInput {
  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsScriptedMonitorLocationsInput

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntimeInput

  """The script that the monitor runs"""
  script: String

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""Information about a link install directive"""
type Nr1CatalogLinkInstallDirective {
  """
  The URL of the external link used to guide the user through installation
  """
  url: String!
}

"""The result of creating a browser application."""
type AgentApplicationCreateBrowserResult {
  """The GUID for the affected Entity."""
  guid: EntityGuid!

  """The name of the application."""
  name: String!

  """Fields related to browser settings."""
  settings: AgentApplicationBrowserSettings
}

interface AlertableEntity {
  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the timewindow or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int = 10
  ): [EntityAlertViolation]
}

"""Deletes an existing environment"""
type IncidentIntelligenceEnvironmentDeleteEnvironment {
  """The deletion outcome"""
  result: IncidentIntelligenceEnvironmentDeleteEnvironmentResult!
}

"""Provides the sorting options for grants"""
input MultiTenantAuthorizationGrantSortInput {
  """The direction which the field should be sorted"""
  direction: MultiTenantAuthorizationSortDirectionEnum

  """The field to be sorted"""
  key: MultiTenantAuthorizationGrantSortEnum!
}

"""Input for updating MutingRules for New Relic Alerts Violations."""
input AlertsMutingRuleUpdateInput {
  """The condition that defines which violations to target."""
  condition: AlertsMutingRuleConditionGroupInput

  """The description of the MutingRule."""
  description: String

  """Whether the MutingRule is enabled"""
  enabled: Boolean

  """The name of the MutingRule."""
  name: String

  """The time window when the MutingRule should actively mute violations."""
  schedule: AlertsMutingRuleScheduleUpdateInput
}

"""Credential input object"""
input AiNotificationsCredentialsInput {
  """basic"""
  basic: AiNotificationsBasicAuthInput

  """oauth2"""
  oauth2: AiNotificationsOAuth2AuthInput

  """token"""
  token: AiNotificationsTokenAuthInput

  """type"""
  type: AiNotificationsAuthType!
}

"""Error details about the rule that failed to be created and why."""
type NrqlDropRulesCreateDropRuleFailure {
  """Information about why the create failed."""
  error: NrqlDropRulesError!

  """
  Input information about a submitted rule that was unable to be created.
  """
  submitted: NrqlDropRulesCreateDropRuleSubmission!
}

"""The scope associated to the grant"""
type MultiTenantAuthorizationGrantScope {
  """The id of the resource in scope"""
  id: String!

  """The type of the resource in scope"""
  type: MultiTenantAuthorizationGrantScopeEnum!
}

"""
Represents one attribute from within the environment on which an agent is running.
"""
type AgentEnvironmentAttribute {
  """Environment attribute name."""
  attribute: String!

  """Value of the environment attribute."""
  value: String!
}

"""Database for MariaDB"""
input CloudAzureMariadbIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""VictorOps notification channel."""
type AlertsVictorOpsNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """VictorOps channel specific configuration."""
  config: AlertsVictorOpsNotificationChannelConfig!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

"""A filter for Accounts"""
input OrganizationAccountFilterInput {
  """Filter by account ID"""
  id: OrganizationAccountIdFilterInput

  """Filter by Account Name"""
  name: OrganizationAccountNameFilterInput

  """Filter by organization ID"""
  organizationId: OrganizationAccountOrganizationIdFilterInput!

  """Filter by Sharing Mode"""
  sharingMode: OrganizationAccountSharingModeFilterInput

  """Filter by an account status. By default filters to active accounts."""
  status: OrganizationAccountStatusFilterInput
}

"""Indicates where the status value derives from."""
enum WorkloadStatusSource {
  """Refers to the result of an automatic rule defined for a workload."""
  ROLLUP_RULE

  """Refers to a static status defined for a workload."""
  STATIC

  """Refers to an undetermined status source."""
  UNKNOWN

  """
  Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
  """
  WORKLOAD
}

"""An enum that represents the various recipe statuses."""
enum InstallationRecipeStatusType {
  """Defines an available recipe when attempting to install."""
  AVAILABLE

  """Defines a canceled recipe when attempting to install."""
  CANCELED

  """Defines when New Relic instrumentation compatibility is detected."""
  DETECTED

  """Defines a recipe that has failed during installation."""
  FAILED

  """Defines a recipe that has been installed."""
  INSTALLED

  """Defines a recipe currently being installed."""
  INSTALLING

  """Defines a recipe that has been recommended during installation."""
  RECOMMENDED

  """Defines a recipe that has been skipped during installation."""
  SKIPPED

  """Defines a recipe that is unsupported."""
  UNSUPPORTED
}

"""EMR Integration"""
type CloudEmrIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""NRQL type test enrichment input object"""
input AiWorkflowsNrqlTestEnrichmentInput {
  """configuration"""
  configuration: [AiWorkflowsNrqlConfigurationInput!]!

  """id"""
  id: ID

  """name"""
  name: String!
}

"""Athena Integration"""
type CloudAwsAthenaIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Cloud Load Balancing Integration"""
type CloudGcpLoadbalancingIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Configuration for Email notification channel."""
type AlertsEmailNotificationChannelConfig {
  """List of email recipients."""
  emails: [String!]!

  """Include details about the violation as a JSON attachment."""
  includeJson: Boolean!
}

"""List of integrations"""
input CloudGcpDisableIntegrationsInput {
  """Vertex AI integration"""
  gcpAiplatform: [CloudDisableAccountIntegrationInput]

  """AlloyDB integration"""
  gcpAlloydb: [CloudDisableAccountIntegrationInput]

  """App Engine integration"""
  gcpAppengine: [CloudDisableAccountIntegrationInput]

  """BigQuery integration"""
  gcpBigquery: [CloudDisableAccountIntegrationInput]

  """Bigtable integration"""
  gcpBigtable: [CloudDisableAccountIntegrationInput]

  """Composer integration"""
  gcpComposer: [CloudDisableAccountIntegrationInput]

  """Dataflow integration"""
  gcpDataflow: [CloudDisableAccountIntegrationInput]

  """Dataproc integration"""
  gcpDataproc: [CloudDisableAccountIntegrationInput]

  """Datastore integration"""
  gcpDatastore: [CloudDisableAccountIntegrationInput]

  """Firebase Database integration"""
  gcpFirebasedatabase: [CloudDisableAccountIntegrationInput]

  """Firebase Hosting integration"""
  gcpFirebasehosting: [CloudDisableAccountIntegrationInput]

  """Firebase Storage integration"""
  gcpFirebasestorage: [CloudDisableAccountIntegrationInput]

  """Firestore integration"""
  gcpFirestore: [CloudDisableAccountIntegrationInput]

  """Cloud Functions integration"""
  gcpFunctions: [CloudDisableAccountIntegrationInput]

  """Interconnect integration"""
  gcpInterconnect: [CloudDisableAccountIntegrationInput]

  """Kubernetes Engine integration"""
  gcpKubernetes: [CloudDisableAccountIntegrationInput]

  """Cloud Load Balancing integration"""
  gcpLoadbalancing: [CloudDisableAccountIntegrationInput]

  """Memcache integration"""
  gcpMemcache: [CloudDisableAccountIntegrationInput]

  """Cloud Pub/Sub integration"""
  gcpPubsub: [CloudDisableAccountIntegrationInput]

  """Redis integration"""
  gcpRedis: [CloudDisableAccountIntegrationInput]

  """Router integration"""
  gcpRouter: [CloudDisableAccountIntegrationInput]

  """Run integration"""
  gcpRun: [CloudDisableAccountIntegrationInput]

  """Cloud Spanner integration"""
  gcpSpanner: [CloudDisableAccountIntegrationInput]

  """Cloud SQL integration"""
  gcpSql: [CloudDisableAccountIntegrationInput]

  """Cloud Storage integration"""
  gcpStorage: [CloudDisableAccountIntegrationInput]

  """Compute Engine integration"""
  gcpVms: [CloudDisableAccountIntegrationInput]

  """VPC Access integration"""
  gcpVpcaccess: [CloudDisableAccountIntegrationInput]
}

"""Input type for FixedRegularExpression expression"""
input AiDecisionsFixedRegularExpressionInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Value to be used in comparison."""
  value: String!
}

"""
Event source type (note: this list includes events currently supported by errors inbox)
"""
enum ErrorsInboxEventSource {
  """AwsLambdaInvocationError events"""
  AWS_LAMBDA_INVOCATION_ERROR

  """ErrorTrace events"""
  ERROR_TRACE

  """JavaScriptError events"""
  JAVA_SCRIPT_ERROR

  """MobileCrash events"""
  MOBILE_CRASH

  """MobileHandledException events"""
  MOBILE_HANDLED_EXCEPTION

  """MobileRequestError events"""
  MOBILE_REQUEST_ERROR

  """Span events"""
  SPAN

  """TransactionError events"""
  TRANSACTION_ERROR
}

"""A user key error. Each error maps to a single key input."""
type ApiAccessUserKeyError implements ApiAccessKeyError {
  """The account ID of the key."""
  accountId: Int

  """The error type of the error."""
  errorType: ApiAccessUserKeyErrorType

  """The `id` of the key being updated."""
  id: String

  """A message about why the key creation failed."""
  message: String

  """The type of the key."""
  type: ApiAccessKeyType

  """The user ID of the key."""
  userId: Int
}

"""Destination update object"""
input AiNotificationsDestinationUpdate {
  """active"""
  active: Boolean

  """auth"""
  auth: AiNotificationsCredentialsInput

  """disableAuth"""
  disableAuth: Boolean

  """name"""
  name: String

  """properties"""
  properties: [AiNotificationsPropertyInput!]
}

"""Expected error types that can be returned by undelete operation."""
enum DashboardUndeleteErrorType {
  """Dashboard not found in the system."""
  DASHBOARD_NOT_FOUND

  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION
}

"""
Represent an account that is mark with consent for Incident Intelligence usage
"""
type IncidentIntelligenceEnvironmentConsentedAccount {
  """The account marked with consent"""
  account: AccountReference
}

"""
Input for updating an obfuscation rule.
Null fields are left untouched by mutation.
"""
input LogConfigurationsUpdateObfuscationRuleInput {
  """
  Actions for the rule. When non-null, this list of actions is used to replace
  the existing list of actions of the rule. The actions will be applied in the
  order specified by this list.
  """
  actions: [LogConfigurationsUpdateObfuscationActionInput!]

  """Description of rule."""
  description: String

  """Whether the rule should be applied or not to incoming data."""
  enabled: Boolean

  """
  NRQL for determining whether a given log record should have obfuscation actions applied.
  """
  filter: Nrql

  """Rule Id."""
  id: ID!

  """Name of rule."""
  name: String
}

type MobilePushNotificationActorStitchedFields {
  """
  A list of mobile devices the user has registered for push notifications.
  """
  devices: [MobilePushNotificationDevice]
}

"""Amazon CloudFront"""
input CloudCloudfrontIntegrationInput {
  """
  Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchLambdasAtEdge: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Amazon Elasticsearch Service"""
input CloudElasticsearchIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
  """
  fetchNodes: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""The time window configuration of the SLO."""
input ServiceLevelObjectiveTimeWindowCreateInput {
  """The rolling time window configuration of the SLO."""
  rolling: ServiceLevelObjectiveRollingTimeWindowCreateInput!
}

"""Summary statistics for the Synthetic Monitor Secure Credential."""
type SecureCredentialSummaryData {
  """
  The number of monitors that contain this secure credential and failed their last check.
  """
  failingMonitorCount: Int @deprecated(reason: "This field is deprecated and will not return valid data.")

  """The number of monitors that contain this secure credential."""
  monitorCount: Int @deprecated(reason: "This field is deprecated and will not return valid data.")
}

"""Represents a module loaded by the apm application."""
type AgentEnvironmentApplicationLoadedModule {
  """Extra module attributes."""
  attributes: [AgentEnvironmentLoadedModuleAttribute]!

  """Module name."""
  name: String!

  """Module version."""
  version: String
}

"""Webhook custom payload type"""
enum AlertsWebhookCustomPayloadType {
  """FORM payload type"""
  FORM

  """JSON payload type"""
  JSON
}

"""OAuth2 auth input object"""
input AiNotificationsOAuth2AuthInput {
  """accessTokenUrl"""
  accessTokenUrl: String!

  """authorizationUrl"""
  authorizationUrl: String!

  """clientId"""
  clientId: String!

  """clientSecret"""
  clientSecret: SecureValue!

  """prefix"""
  prefix: String

  """refreshInterval"""
  refreshInterval: Int

  """refreshToken"""
  refreshToken: SecureValue

  """refreshable"""
  refreshable: Boolean!

  """scope"""
  scope: String

  """token"""
  token: SecureValue!
}

"""
The result of which submitted events to metrics rules were successfully and unsuccessfully deleted.
"""
type EventsToMetricsDeleteRuleResult {
  """Information about the rules that could not be deleted."""
  failures: [EventsToMetricsDeleteRuleFailure]

  """Rules that were successfully deleted."""
  successes: [EventsToMetricsRule]
}

"""Token auth input object"""
input AiNotificationsTokenAuthInput {
  """prefix"""
  prefix: String

  """token"""
  token: SecureValue!
}

"""A newly created user of New Relic scoped to an authentication domain."""
type UserManagementCreatedUser {
  """Authentication domain of the created user."""
  authenticationDomainId: ID

  """Email address of the created user."""
  email: String!

  """The ID of the created user."""
  id: ID!

  """The full name of the created user."""
  name: String!

  """
  A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
  """
  type: UserManagementUserType!
}

"""Type of update error group state error."""
enum ErrorsInboxUpdateErrorGroupStateErrorType {
  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"""The result of updating a key transaction."""
type KeyTransactionUpdateResult {
  """
  The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).
  """
  apdexTarget: Float

  """The application associated with this key transaction"""
  application: KeyTransactionApplication!

  """
  The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
  """
  browserApdexTarget: Float

  """The name of the key transaction."""
  name: String
}

"""The error for updating a notification channel."""
type AlertsNotificationChannelUpdateError {
  """Error description."""
  description: String!

  """Error type."""
  errorType: AlertsNotificationChannelUpdateErrorType!

  """Notification channel ID."""
  notificationChannelId: ID!
}

type Nr1CatalogActorStitchedFields {
  """Information related to a alert policy template"""
  alertPolicyTemplate(
    """The ID associated with the alert policy template"""
    id: ID!
  ): Nr1CatalogAlertPolicyTemplate

  """List of available categories for filtering and searching"""
  categories: [Nr1CatalogCategory!]

  """Information related to a dashboard template"""
  dashboardTemplate(
    """The ID associated with the dashboard template"""
    id: ID!
  ): Nr1CatalogDashboardTemplate

  """Information related to a data source"""
  dataSource(
    """The ID associated with the data source"""
    id: ID!
  ): Nr1CatalogDataSource

  """Information related to a deployed Nerdpack"""
  nerdpack(
    """The ID associated with the Nerdpack"""
    id: ID!
  ): Nr1CatalogNerdpack

  """List of nerdpacks available in the catalog"""
  nerdpacks: [Nr1CatalogNerdpack!]

  """Catalog information related to a quickstart"""
  quickstart(
    """The ID associated with the quickstart"""
    id: ID!
  ): Nr1CatalogQuickstart

  """List of Quickstarts available in New Relic I/O"""
  quickstarts(
    """Cursor for pagination. Supplied by a previous Quickstarts query."""
    cursor: String
  ): Nr1CatalogQuickstartsListing

  """Search for items in the catalog"""
  search(
    """Cursor for pagination. Supplied by a previous search."""
    cursor: String

    """Set of filters to apply to the search"""
    filter: Nr1CatalogSearchFilter

    """Search query string"""
    query: String

    """Method used to sort the search results"""
    sortBy: Nr1CatalogSearchSortOption = ALPHABETICAL
  ): Nr1CatalogSearchResponse
}

""""""
type AiNotificationsAccountStitchedFields {
  """Fetch channel creation schema"""
  channelSchema(
    """Query by channelType"""
    channelType: AiNotificationsChannelType!

    """Channel creation constraints"""
    constraints: [AiNotificationsConstraint!]

    """Query by destinationId"""
    destinationId: ID!

    """Product type for schema personalization"""
    product: AiNotificationsProduct
  ): AiNotificationsChannelSchemaResult

  """Fetch a field suggestions list for Channel creation"""
  channelSuggestions(
    """Suggestions channel type"""
    channelType: AiNotificationsChannelType!

    """List of key/value pairs indicating field constraints"""
    constraints: [AiNotificationsConstraint!]

    """cursor to get the next batch of results"""
    cursor: String

    """Query by destinationId"""
    destinationId: ID!

    """Filter for the suggestions results"""
    filter: AiNotificationsSuggestionFilter

    """The field name for which the suggestions are"""
    key: String!
  ): AiNotificationsSuggestionsResponse

  """Fetch a Channel by product"""
  channels(
    """cursor to get the next batch of results"""
    cursor: String

    """Query filters"""
    filters: AiNotificationsChannelFilter

    """Sort object for results"""
    sorter: AiNotificationsChannelSorter
  ): AiNotificationsChannelsResponse

  """Fetch a field suggestions list for Destination creation"""
  destinationSuggestions(
    """List of key/value pairs indicating field constraints"""
    constraints: [AiNotificationsConstraint!]

    """cursor to get the next batch of results"""
    cursor: String

    """Suggestions destination type"""
    destinationType: AiNotificationsDestinationType!

    """Filter for the suggestions results"""
    filter: AiNotificationsSuggestionFilter

    """The field name for which the suggestions are"""
    key: String!
  ): AiNotificationsSuggestionsResponse

  """Fetch a Destinations by type"""
  destinations(
    """cursor to get the next batch of results"""
    cursor: String

    """Query filters"""
    filters: AiNotificationsDestinationFilter

    """Sort object for results"""
    sorter: AiNotificationsDestinationSorter
  ): AiNotificationsDestinationsResponse

  """Get an OAuth URL by destination type"""
  oAuthUrl(
    """Redirection URL"""
    redirectUrl: String

    """Destination type"""
    type: AiNotificationsDestinationType!
  ): AiNotificationsOAuthUrlResponse

  """Fetch a field suggestions list for Channel creation"""
  suggestions(
    """Suggestions channel type"""
    channelType: AiNotificationsChannelType!

    """List of key/value pairs indicating field constraints"""
    constraints: [AiNotificationsConstraint!]

    """cursor to get the next batch of results"""
    cursor: String

    """Query by destinationId"""
    destinationId: ID!

    """Filter for the suggestions results"""
    filter: AiNotificationsSuggestionFilter

    """The field name for which the suggestions are"""
    key: String!
  ): AiNotificationsSuggestionsResponse @deprecated(reason: "API is being deprecated in favor of channelSuggestions API")

  """Fetch a Variables by product"""
  variables(
    """cursor to get the next batch of results"""
    cursor: String

    """Query filters"""
    filters: AiNotificationsVariableFilter

    """Sort object for results"""
    sorter: AiNotificationsVariableSorter
  ): AiNotificationsVariableResult
}

"""account-scope schemas"""
type AgentEnvironmentAccountStitchedFields {
  """
  Contains environment attributes regarding the reported setting of the reporting agent at account level.
  """
  agentSettingsAttributes(
    """
    Cursor for fetching more results. Populate using result's nextCursor field.
    """
    cursor: String

    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): AgentEnvironmentAccountEnvironmentAttributesResults

  """
  Contains general environment attributes from the same environment where the application instance is running.
  """
  environmentAttributes(
    """
    Cursor for fetching more results. Populate using result's nextCursor field.
    """
    cursor: String

    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): AgentEnvironmentAccountEnvironmentAttributesResults

  """
  Contains environment attributes regarding modules loaded by the application instance. Used only by the Java agent.
  """
  modules(
    """
    Cursor for fetching more results. Populate using result's nextCursor field.
    """
    cursor: String

    """Filter to apply to results on module name field."""
    filter: AgentEnvironmentFilter
  ): AgentEnvironmentAccountApplicationLoadedModulesResults
}

"""container for roles enabling cursor based pagination"""
type AuthorizationManagementRoleSearch {
  """
  an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """control the access granted to groups"""
  roles: [AuthorizationManagementRole!]!

  """the total number of results"""
  totalCount: Int!
}

"""Cognito"""
input CloudAwsCognitoIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
enum of which day in the month a customer can have a monitor downtime run
"""
enum SyntheticsMonitorDowntimeDayOfMonthOrdinal {
  """First selected day of the month"""
  FIRST

  """Fourth selected day of the month"""
  FOURTH

  """Last selected day of the month"""
  LAST

  """Second selected day of the month"""
  SECOND

  """Third selected day of the month"""
  THIRD
}

"""The access level of the NerdStorage data."""
enum NerdStorageScope {
  """Account-level storage."""
  ACCOUNT

  """Actor-level storage."""
  ACTOR

  """Entity-level storage."""
  ENTITY
}

"""Array of responses, one for each trace observer update request."""
type EdgeUpdateTraceObserverResponses {
  """
  Array of trace observer update responses, one for each `UpdateTraceObserverInput`.
  """
  responses: [EdgeUpdateTraceObserverResponse!]!
}

"""
The input object used to represent the configuration of a static status.
"""
input WorkloadUpdateStaticStatusInput {
  """
  A description that provides additional details about the status of the workload.
  """
  description: String

  """Whether the static status configuration is enabled or not."""
  enabled: Boolean!

  """
  The unique identifier of the static status to be updated. If not provided, a new static status is created.
  """
  id: Int

  """The status of the workload."""
  status: WorkloadStatusValueInput!

  """A short description of the static status."""
  summary: String
}

"""Api Management"""
input CloudAzureApimanagementIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Test Enrichment input object"""
input AiWorkflowsTestEnrichmentsInput {
  """nrql"""
  nrql: [AiWorkflowsNrqlTestEnrichmentInput!]!
}

"""The type of tracing being done."""
enum AgentApplicationSettingsTracer {
  """Cross-application tracing feature enabled."""
  CROSS_APPLICATION_TRACER

  """Distributed tracing feature enabled."""
  DISTRIBUTED_TRACING

  """Both cross-application and distributed tracing disabled."""
  NONE
}

"""Compliance type codes that can be applied to a trace observer"""
enum EdgeComplianceTypeCode {
  """Fedramp compliant"""
  FEDRAMP
}

"""The input for creating a new xMatters notification channel."""
input AlertsXMattersNotificationChannelCreateInput {
  """Integration URL."""
  integrationUrl: SecureValue!

  """Notification channel name."""
  name: String!
}

"""An Infrastructure Host entity outline."""
type InfrastructureHostEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid
  hostSummary: InfrastructureHostSummaryData

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Base Provider Object"""
type CloudBaseProvider implements CloudProvider {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud provider icon name."""
  icon: String!

  """The cloud provider identifier in NewRelic."""
  id: Int!

  """The cloud provider name."""
  name: String!

  """Get details of one cloud provider service."""
  service(
    """The cloud provider short name."""
    slug: String!
  ): CloudService

  """
  Get details of all the cloud provider services available for integration.
  """
  services: [CloudService!]!

  """The cloud provider short name."""
  slug: String!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""A parsing rule for an account."""
type LogConfigurationsParsingRule {
  """The account id associated with the rule."""
  accountId: Int!

  """The parsing rule will apply to value of this attribute."""
  attribute: String!

  """Identifies the user who has created the rule."""
  createdBy: UserReference

  """Whether or not this rule is deleted."""
  deleted: Boolean!

  """A description of what this parsing rule represents."""
  description: String!

  """Whether or not this rule is enabled."""
  enabled: Boolean!

  """The Grok of what to parse."""
  grok: String!

  """Unique parsing rule identifier."""
  id: ID!

  """The Lucene to match events to the parsing rule."""
  lucene: String!

  """The NRQL to match events to the parsing rule."""
  nrql: Nrql!

  """Identifies the date and time when the rule was last updated."""
  updatedAt: DateTime

  """Identifies the user who has last updated the rule."""
  updatedBy: UserReference
}

"""Input for getting details about an entity type"""
input DomainTypeInput {
  """
  The domain of the entity.
  
  The domain must be a value matching /[A-Z][A-Z0-9_]{2,14}/.
  """
  domain: String!

  """
  The type of the entity.
  
  The type must be a value matching /[A-Z][A-Z0-9_]{2,49}/.
  
  Some examples are APPLICATION, HOST or CONTAINER.
  """
  type: String!
}

"""The `Minutes` scalar represents a duration in minutes"""
scalar Minutes

"""Authentication domains"""
type OrganizationAuthenticationDomainCollection {
  """Authentication domains"""
  items: [OrganizationAuthenticationDomain!]!

  """
  an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

"""An iterable collection of roles"""
type MultiTenantAuthorizationRoleCollection {
  """collection of roles"""
  items: [MultiTenantAuthorizationRole!]!

  """
  an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""Google Cloud Load Balancing"""
input CloudGcpLoadbalancingIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Elasticsearch Service Integration"""
type CloudElasticsearchIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
  """
  fetchNodes: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Azure Load Balancer"""
input CloudAzureLoadbalancerIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""The input for updating an existing Slack notification channel."""
input AlertsSlackNotificationChannelUpdateInput {
  """Notification channel name."""
  name: String

  """Slack channel name."""
  teamChannel: String

  """Slack channel URL."""
  url: SecureValue
}

type AiTopologyAccountStitchedFields {
  """Returns a list of edges."""
  edges(
    """The cursor to fetch paginated results."""
    cursor: String

    """List of edge IDs."""
    edgeIds: [ID!]
  ): AiTopologyEdgeListing!

  """Returns a graph."""
  graph: AiTopologyGraph!

  """Returns a paginated list of vertices."""
  vertices(
    """The cursor to fetch paginated results."""
    cursor: String

    """List of classes."""
    vertexClasses: [AiTopologyVertexClass!]

    """List of vertex IDs."""
    vertexIds: [ID!]
  ): AiTopologyVertexListing!
}

"""Transit Gateway"""
input CloudAwsTransitgatewayIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Variable object"""
type AiNotificationsVariable {
  """Is variable active"""
  active: Boolean!

  """Variable category"""
  category: AiNotificationsVariableCategory!

  """Variable creation time"""
  createdAt: DateTime!

  """Variable description"""
  description: String

  """Variable example"""
  example: String!

  """Variable id"""
  id: ID!

  """Variable key"""
  key: String!

  """Variable label"""
  label: String

  """Variable name"""
  name: String!

  """Related product type"""
  product: AiNotificationsProduct!

  """Variable type"""
  type: AiNotificationsVariableType!

  """Variable update time"""
  updatedAt: DateTime!

  """Variable creator userId"""
  updatedBy: Int!
}

"""The result after deleting a data partition rule."""
type LogConfigurationsDeleteDataPartitionRuleResponse {
  """List of errors, if any."""
  errors: [LogConfigurationsDataPartitionRuleMutationError]
}

"""A relationship between a parent and child span."""
type DistributedTracingSpanConnection {
  """The span identifier of the child for this connection."""
  child: String!

  """The span identifier of the parent for this connection."""
  parent: String!
}

"""
A contact channel where users can get support via the repository issues page
"""
type Nr1CatalogIssuesContactChannel {
  """The URL linking to the repository issues page"""
  url: String!
}

"""Input type for FixedJaroWinkler expression"""
input AiDecisionsFixedJaroWinklerInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Minimum distance threshold."""
  minDistance: Float!

  """Value to be used in comparison."""
  value: String!
}

"""Info about Nerdpack assets."""
type NerdpackAssetInfo {
  """Name of the asset."""
  name: String

  """Size of the asset, in Bytes."""
  sizeInBytes: Int
}

"""
The details that were submitted when updating an events to metrics conversion rule.
"""
type EventsToMetricsUpdateRuleSubmission {
  """A submitted account id."""
  accountId: Int!

  """Changes the state of the rule as being enabled or disabled."""
  enabled: Boolean!

  """A submitted rule id."""
  ruleId: ID!
}

"""Category of a limit"""
enum DataManagementCategory {
  """Limits on Alerting"""
  ALERTING

  """Limits on Ingest"""
  INGEST

  """Limits on Query"""
  QUERY
}

"""VPC Access"""
input CloudGcpVpcaccessIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Filter incidents events"""
input AiIssuesFilterIncidentsEvents {
  """entityGuids"""
  entityGuids: [EntityGuid!]

  """entityTypes"""
  entityTypes: [String!]

  """ids"""
  ids: [ID!]
}

"""Database for MySQL Integration"""
type CloudAzureMysqlIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Result status of delete operation."""
enum DashboardDeleteResultStatus {
  """FAILURE."""
  FAILURE

  """SUCCESS."""
  SUCCESS
}

"""Input type for RelativeLongestCommonSubsequenceDistance expression"""
input AiDecisionsRelativeLongestCommonSubsequenceDistanceInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""An object that represents a golden metrics error"""
enum EntityGoldenGoldenMetricsErrorType {
  """The context defined in the request is not valid."""
  INVALID_CONTEXT

  """The domain type defined in the request is not valid."""
  INVALID_DOMAIN_TYPE

  """There is some parameter validation that has failed"""
  INVALID_QUERY_PARAMS

  """Number of metrics defined in the requests exceeds the limit."""
  LIMIT_EXCEEDED

  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"""An object representing a stack trace segment"""
type StackTraceMobileExceptionStackTraceFrame {
  """Frame filepath"""
  filepath: String

  """Formatted frame"""
  formatted: String!

  """Frame line number"""
  line: Int

  """Frame name"""
  name: String
}

"""The result object for UserSearch."""
type UsersUserSearchResult {
  """The cursor for the next page."""
  nextCursor: String

  """
  The total number of users found.
   Note: Not necessarily the same as number of users returned, due to pagination.
  """
  totalCount: Int!

  """Set of all users returned from the query."""
  users: [UsersUserSearch!]!
}

"""List of APM application instances with pagination data."""
type AgentEnvironmentApplicationInstancesResult {
  """List of APM application instances ."""
  applicationInstances: [AgentEnvironmentApplicationInstance!]

  """
  If nextCursor is a String value, set it to the cursor input field while searching in order to get the next page of results.
  """
  nextCursor: String
}

"""
Cloud integrations related data, including configured integrations and
all available cloud provider service integrations.
"""
type CloudAccountFields {
  """Get one linked provider account."""
  linkedAccount(
    """The linked cloud provider account's ID."""
    id: Int
  ): CloudLinkedAccount

  """Get all linked cloud provider accounts."""
  linkedAccounts: [CloudLinkedAccount]

  """Get one cloud provider by short name."""
  provider(
    """
    The cloud provider short name.
    
    Values include `aws`, `gcp`, foobar?
    """
    slug: String
  ): CloudProvider

  """Get all available cloud providers."""
  providers: [CloudProvider]
}

"""An input that represents a golden tag"""
input EntityGoldenTagInput {
  """The golden tag key."""
  key: String!
}

"""Functions Integration"""
type CloudAzureFunctionsIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""A third party service entity outline."""
type ThirdPartyServiceEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Removed Tag response"""
type NerdpackRemovedTagResponse {
  """Optional removed tag information"""
  removedTagInfo: NerdpackRemovedTagInfo

  """The status of the response. Tells is the tag was deleted or not"""
  status: NerdpackRemovedTagResponseType
}

"""Issue"""
type AiIssuesIssue {
  """account"""
  account: AccountReference

  """
  A list of account Ids. As an issue could be correlated with others from other accounts.
  """
  accountIds: [Int!]!

  """The time the issue was acknowledged"""
  acknowledgedAt: EpochMilliseconds

  """The user that acknowledged the issue"""
  acknowledgedBy: String

  """The time the issue was activated"""
  activatedAt: EpochMilliseconds

  """The time the issue was closed"""
  closedAt: EpochMilliseconds

  """The user that manually closed the issue"""
  closedBy: String

  """A list of condition ids associated with this issue"""
  conditionFamilyId: [Int!]

  """A list of condition text descriptions associated with this issue"""
  conditionName: [String!]

  """
  A list of New Relic products connected to the conditions associated with this issue
  """
  conditionProduct: [String!]

  """
  A list of correlation rule descriptions applied to correlate this issue to other issues
  """
  correlationRuleDescriptions: [String!]

  """
  A list of correlation rule ids applied to correlate this issue to other issues
  """
  correlationRuleIds: [Int!]

  """
  A list of correlation rule names applied to correlate this issue to other issues
  """
  correlationRuleNames: [String!]

  """The time the issue was created"""
  createdAt: EpochMilliseconds!

  """A list of ML data associated with this issue"""
  dataMlModules: [AiIssuesKeyValues!]

  """A list of urls into New Relic product page, scoped to this issue"""
  deepLinkUrl: [String!]

  """A list of incident descriptions"""
  description: [String!]!

  """A list of unique entity identifiers"""
  entityGuids: [EntityGuid!]

  """A list of entity names"""
  entityNames: [String!]

  """A list of entity types"""
  entityTypes: [String!]

  """See our documentation to learn about environments"""
  environmentId: Int! @deprecated(reason: "Use account")

  """
  An issue event that could be INCIDENT_ADDED, USER_ACTION, INCIDENT_CLOSED,...
  """
  eventType: String!

  """
  A list of incident IDs in this issue. Notice, in some cases there may be thousands of incidents in an issue
  """
  incidentIds: [String!]

  """True means that other issues were correlated to this one"""
  isCorrelated: Boolean!

  """See our documentation to learn about idle issues"""
  isIdle: Boolean!

  """Issue identifier"""
  issueId: ID!

  """The reason this issue was merged"""
  mergeReason: String

  """The issue muting state (supress notifications)"""
  mutingState: AiIssuesIssueMutingState

  """A list of origins of the incidents (violations, anomalies, external)"""
  origins: [String!]!

  """The merge id if this issue is part of the merge or null otherwise"""
  parentMergeId: String

  """A list of policy ids associated with this issue"""
  policyIds: [Int!]

  """A list of policy names associated with this issue"""
  policyName: [String!]

  """The issue priority"""
  priority: AiIssuesPriority!

  """A list of sources of the incidents (newrelic or external)"""
  sources: [String!]!

  """The issue state"""
  state: AiIssuesIssueState!

  """A list of underlying incident titles"""
  title: [String!]!

  """The count of underlying incidents"""
  totalIncidents: Int!

  """The time the issue was unacknowledged"""
  unAcknowledgedAt: EpochMilliseconds

  """The user that unacknowledged the issue"""
  unAcknowledgedBy: String

  """The time the issue was last updated"""
  updatedAt: EpochMilliseconds!

  """
  A list of wildcard expressions used for wildcard metrics associated with this issue
  """
  wildcard: [String!]
}

"""AWS Lambda"""
input CloudLambdaIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""A string representing a nerdpack tag."""
scalar NerdpackTagName

"""
In APM, when transaction traces are collected, there may be additional Slow query data available.
"""
type AgentApplicationSettingsSlowSql {
  """If true, the agent collects slow SQL queries."""
  enabled: Boolean
}

"""
An `Endpoint` describes access to an endpoint pointing to a trace observer. Currently, only one endpoint per trace observer is supported.
"""
type EdgeEndpoint {
  """Connection information related to the agent configuration."""
  agent: EdgeAgentEndpointDetail!

  """Type of the endpoint."""
  endpointType: EdgeEndpointType!

  """
  Connection information related to the Infinite Tracing Trace API (HTTP 1.1) configuration.
  """
  https: EdgeHttpsEndpointDetail!

  """Status of the endpoint."""
  status: EdgeEndpointStatus!
}

"""
The primary building block of a distributed trace.  An individual unit of work.
"""
type DistributedTracingSpan {
  """
  All attributes for this span. This field is a map of string keys to attributes values.
  """
  attributes: DistributedTracingSpanAttributes

  """
  When the span represents a call to another entity, clientType indicates the type of the entity that was called.
  """
  clientType: DistributedTracingSpanClientType

  """The duration of this span in milliseconds."""
  durationMs: Milliseconds

  """
  Unique identifier for the entity that created this span. This value has a corresponding entry in the entities field of the trace.
  """
  entityGuid: String

  """Unique identifier for this span."""
  id: String!

  """The name of this span."""
  name: String

  """
  The identifier of the caller of this span (null if this is the root span).
  """
  parentId: String

  """
  The position of a span with respect to the boundaries between processes in the trace.
  """
  processBoundary: DistributedTracingSpanProcessBoundary!

  """
  Anomalies detected for this span, compared to similar spans that occurred over the previous hours before this span occurred.
  """
  spanAnomalies: [DistributedTracingSpanAnomaly]

  """Epoch milliseconds timestamp represents this span's start time."""
  timestamp: EpochMilliseconds!

  """Unique identifier shared by all spans within a single trace."""
  traceId: String!
}

"""Direct Connect Integration"""
type CloudAwsDirectconnectIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Direct Connect"""
input CloudAwsDirectconnectIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""A result returned when executing a search"""
union Nr1CatalogSearchResult = Nr1CatalogAlertPolicyTemplate | Nr1CatalogDashboardTemplate | Nr1CatalogDataSource | Nr1CatalogNerdpack | Nr1CatalogQuickstart

"""
For users on our New Relic One user model, a "group" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.
"""
type AuthorizationManagementGroup {
  """the name of the object"""
  displayName: String!

  """a value that uniquely identifies this object"""
  id: ID!

  """container for roles enabling cursor based pagination"""
  roles(
    """the cursor from the previous request, to get   the next page"""
    cursor: String

    """a list of ids to filter returned objects by"""
    id: [ID!]

    """a list of ids to filter returned objects by"""
    roleId: [ID!]
  ): AuthorizationManagementGrantedRoleSearch!
}

"""The response for updating a notification channel."""
type AlertsNotificationChannelUpdateResponse {
  """Error."""
  error: AlertsNotificationChannelUpdateError

  """Notification channel."""
  notificationChannel: AlertsNotificationChannelMutation
}

"""Metadata about a decision."""
type AiDecisionsRuleMetadata {
  """Summary of user opinions for merges by this decision"""
  mergeOpinionCount: [AiDecisionsOpinionEntry!]!
}

"""Summary statistics about an External Service called by an APM App."""
type ApmExternalServiceSummaryData {
  """The average response time for external service calls in seconds."""
  responseTimeAverage: Seconds

  """The number of external service calls per minute."""
  throughput: Float
}

"""Select incident for comparison."""
enum AiDecisionsIncidentSelect {
  """Select first incident in comparison."""
  FIRST_INCIDENT

  """Select second incident in comparison."""
  SECOND_INCIDENT
}

"""An object representing a stack trace segment"""
type StackTraceBrowserStackTraceFrame {
  """Frame column number"""
  column: Int

  """Formatted frame"""
  formatted: String!

  """Frame line number"""
  line: Int

  """Frame name"""
  name: String
}

"""Object that represents a nrql metric with its metric selector"""
type EntityGoldenOriginalQueryWithSelector {
  """The golden metric NRQL query."""
  query: String!

  """
  The value of the selector. Currently, this is the value of the instrumentation provider.
  """
  selectorValue: String!
}

"""Key Vault"""
input CloudAzureKeyvaultIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""The result after creating a new parsing rule."""
type LogConfigurationsCreateParsingRuleResponse {
  """List of errors, if any."""
  errors: [LogConfigurationsParsingRuleMutationError]

  """The created parsing rule."""
  rule: LogConfigurationsParsingRule
}

"""
The position of a span with respect to the boundaries between processes in the trace.
"""
enum DistributedTracingSpanProcessBoundary {
  """The first span in a process."""
  ENTRY

  """
  A span that is the parent of an ENTRY span, or has an attribute name prefixed with either `db.` or `http.`, such as `db.statement` or `http.url`. If a span is both the first span in its process and has a `db.` or `http.`, its processBoundary value will be ENTRY.
  """
  EXIT

  """
  A span that is neither an ENTRY nor EXIT span. In-process spans are operations within each process, like internal method calls and functions.
  """
  IN_PROCESS
}

"""QLDB Integration"""
type CloudAwsQldbIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The pipeline configuration for an account."""
input LogConfigurationsPipelineConfigurationInput {
  """Whether or not enrichment is disabled."""
  enrichmentDisabled: Boolean

  """Whether or not JSON parsing is disabled."""
  jsonParsingDisabled: Boolean

  """Whether or not obfuscation is disabled."""
  obfuscationDisabled: Boolean

  """Whether or not parsing is disabled."""
  parsingDisabled: Boolean

  """Whether or not patterns are enabled."""
  patternsEnabled: Boolean

  """Whether or not recursive JSON parsing is disabled."""
  recursiveJsonParsingDisabled: Boolean

  """Whether or not transformation is disabled."""
  transformationDisabled: Boolean
}

"""Priority of issue."""
enum AiDecisionsIssuePriority {
  """Issue priority of critical"""
  CRITICAL

  """Issue priority of high"""
  HIGH

  """Issue priority of low"""
  LOW

  """Issue priority of medium"""
  MEDIUM
}

"""Applied rules"""
type DataManagementAppliedRules {
  """The account id for namespace rule"""
  accountId: Int

  """Length of time data will be retained (in days)"""
  retentionInDays: Int
}

"""The entityRelationshipUserDefinedCreateOrReplace result error."""
type EntityRelationshipUserDefinedCreateOrReplaceResultError {
  """A message explaining what the error is about."""
  message: String!

  """The mutation error type."""
  type: EntityRelationshipUserDefinedCreateOrReplaceErrorType!
}

"""Result options for account consent marking"""
enum IncidentIntelligenceEnvironmentConsentAccountsResult {
  """All of the accounts have been already marked with consent"""
  ALREADY_CONSENTED

  """Accounts were consented"""
  CONSENTED

  """The user is not authorized to consent due to a missing capability"""
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"""An Infrastructure Host entity."""
type InfrastructureHostEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid
  hostSummary: InfrastructureHostSummaryData

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""a role grants access on an account or organization to groups of users"""
type AuthorizationManagementRole {
  """the name of the object"""
  displayName: String

  """a value that uniquely identifies this object"""
  id: ID!

  """the name of the object"""
  name: String!

  """the scope of the role"""
  scope: String!

  """the type of the role"""
  type: ID!
}

"""
Attributes to filter a list of nerdpack versions. Restrictions: 'tags' attribute cannot combined with other attributes.
"""
input NerdpackVersionFilter {
  """
  Fallback version to return if no version matches the given filters. No version is returned by default.
  """
  fallback: NerdpackVersionFilterFallback

  """Get a version with the specified tag."""
  tag: NerdpackTagName

  """Get the versions with a tag from the tag list."""
  tags: [NerdpackTagName]

  """Nerdpack version."""
  version: SemVer
}

"""Class of vertex."""
enum AiTopologyCollectorVertexClass {
  """Vertex class is application"""
  APPLICATION

  """Vertex class is cloudservice"""
  CLOUDSERVICE

  """Vertex class is cluster"""
  CLUSTER

  """Vertex class is datastore"""
  DATASTORE

  """Vertex class is host"""
  HOST

  """Vertex class is team"""
  TEAM
}

"""Google Cloud SQL"""
input CloudGcpSqlIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Known error codes and messages for `CreateTraceObserverResponseError`."""
enum EdgeCreateTraceObserverResponseErrorType {
  """
  A trace observer already exists for this account family and provider region.
  """
  ALREADY_EXISTS

  """Trace observers aren’t available in provider region."""
  NO_AVAILABILITY_IN_REGION
}

"""
List of all potential error types that an entity delete operation might return.
"""
enum EntityDeleteErrorType {
  """Forbidden request"""
  FORBIDDEN

  """Internal error"""
  INTERNAL_ERROR

  """Invalid input"""
  INVALID_INPUT
}

"""Metadata information for a launcher"""
type Nr1CatalogLauncherMetadata implements Nr1CatalogNerdpackItemMetadata {
  """A short form description for the launcher."""
  description: String

  """The human-readable name for the launcher."""
  displayName: String

  """The corresponding icon for the launcher."""
  icon: Nr1CatalogIcon

  """A list of previews for the launcher, such as screenshots."""
  previews: [Nr1CatalogPreview!]!
}

"""A filter for organization create job results"""
input OrganizationOrganizationCreateAsyncResultFilterInput {
  """Filter organization create job results by customer ID"""
  customerId: OrganizationOrganizationCreateJobCustomerIdInput

  """Filter oganization create job results by id"""
  jobId: OrganizationOrganizationCreateJobIdInput

  """Filter organization create job results by status"""
  status: OrganizationOrganizationCreateJobStatusInput
}

"""OAuth URL response"""
type AiNotificationsOAuthUrlResponse {
  """OAuth response error"""
  error: AiNotificationsResponseError

  """Deprecated list of errors"""
  errors: [AiNotificationsResponseError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """Transaction id to track OAuth flow with"""
  transactionId: ID

  """OAuth URL for the user"""
  url: String!
}

"""Redis"""
input CloudGcpRedisIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Data of accounts to be unsubscribed."""
input NerdpackUnsubscribeAccountsInput {
  """List of accounts to be unsubscribed."""
  accountIds: [Int!]!
}

"""Metadata information for a Nerdlet"""
type Nr1CatalogNerdletMetadata implements Nr1CatalogNerdpackItemMetadata {
  """A short form description for the Nerdlet."""
  description: String

  """The human-readable name for the Nerdlet."""
  displayName: String

  """A list of previews for the Nerdlet, such as screenshots."""
  previews: [Nr1CatalogPreview!]!

  """The supported entity types by the Nerdlet."""
  supportedEntityTypes: Nr1CatalogSupportedEntityTypes
}

"""Sort key and direction for account shares"""
input OrganizationAccountShareSortInput {
  """Direction to sort in"""
  direction: OrganizationAccountShareSortDirectionEnum

  """Account share attribute to sort on"""
  key: OrganizationAccountShareSortKeyEnum
}

"""Live URL."""
type DashboardLiveUrl {
  """Creation date."""
  createdAt: EpochMilliseconds

  """
  Title that describes the source entity that is accessible through the public live URL.
  """
  title: String

  """Live URL type."""
  type: DashboardLiveUrlType

  """Public URL."""
  url: String!

  """The unique identifier of the public live URL."""
  uuid: ID!
}

"""The `id` and data to update one or more keys."""
input ApiAccessUpdateIngestKeyInput {
  """The `id` of the key you want to update."""
  keyId: String!

  """The name you want to assign to the key."""
  name: String

  """The notes you want to assign to the key."""
  notes: String
}

"""Virtual Network Integration"""
type CloudAzureVirtualnetworksIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The events that define the SLI."""
type ServiceLevelEvents {
  """The New Relic account to fetch the events from."""
  account: AccountReference

  """The definition of bad events."""
  badEvents: ServiceLevelEventsQuery

  """The definition of good events."""
  goodEvents: ServiceLevelEventsQuery

  """The definition of valid events."""
  validEvents: ServiceLevelEventsQuery!
}

"""Configuration for visualization type 'viz.table'"""
type DashboardTableWidgetConfiguration {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"""The input object used to represent the workload to be created."""
input WorkloadCreateInput {
  """Relevant information about the workload."""
  description: String

  """A list of entity GUIDs composing the workload."""
  entityGuids: [EntityGuid!]

  """
  A list of entity search queries used to retrieve the entities that compose the workload.
  """
  entitySearchQueries: [WorkloadEntitySearchQueryInput!]

  """The name of the workload."""
  name: String!

  """Accounts that will be used to get entities from."""
  scopeAccounts: WorkloadScopeAccountsInput

  """
  The configuration that defines how the status of the workload is calculated.
  """
  statusConfig: WorkloadStatusConfigInput
}

"""Input type for FixedCosineDistance expression"""
input AiDecisionsFixedCosineDistanceInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Float!

  """Value to be used in comparison."""
  value: String!
}

"""
An outlier NRQL condition looks for group behavior and values that are outliers from those
groups. Similar to a static NRQL condition, but requires a FACET clause.
"""
type AlertsNrqlOutlierCondition implements AlertsNrqlCondition {
  """The custom violation description."""
  description: String

  """Whether the condition is enabled."""
  enabled: Boolean!

  """The Entity associated with the NRQL Condition"""
  entity: EntityOutline

  """The condition's entity GUID"""
  entityGuid: EntityGuid!

  """Number of groups expected in the returned values for the condition."""
  expectedGroups: Int!

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpiration!

  """Condition ID."""
  id: ID!

  """Name of the condition."""
  name: String!

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionQuery!

  """Whether overlapping groups should produce a violation."""
  openViolationOnGroupOverlap: Boolean!

  """Alerts policy ID."""
  policyId: ID!

  """Runbook URL."""
  runbookUrl: String

  """Settings that determine how the NRQL results are evaluated"""
  signal: AlertsNrqlConditionSignal!

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlConditionTerms!]!

  """Type of NRQL condition."""
  type: AlertsNrqlConditionType!

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes.
  """
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  """Duration after which a violation automatically closes in seconds."""
  violationTimeLimitSeconds: Seconds
}

"""Expected error types that can be returned by delete operation."""
enum DashboardDeleteErrorType {
  """Dashboard not found in the system."""
  DASHBOARD_NOT_FOUND

  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION
}

"""Configuration for xMatters notification channel."""
type AlertsXMattersNotificationChannelConfig {
  """Integration URL."""
  integrationUrl: SecureValue!
}

"""Filter variable object"""
input AiNotificationsVariableFilter {
  """active"""
  active: Boolean

  """key"""
  key: String

  """label"""
  label: String

  """name"""
  name: String

  """product"""
  product: AiNotificationsProduct
}

"""
Successfully created trace observers, or one or more error responses if there were issues.
"""
type EdgeCreateTraceObserverResponse {
  """
  Errors that may occur when creating a `TraceObserver`. Defaults to `null` in case of success.
  """
  errors: [EdgeCreateTraceObserverResponseError]

  """
  The trace observer defined in `CreateTraceObserverInput`. Defaults to `null` in case of failure.
  """
  traceObserver: EdgeTraceObserver
}

"""Route 53 Integration"""
type CloudRoute53Integration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""An account share's limiting role"""
type OrganizationAccountShareLimitingRoleWrapper {
  """id"""
  id: ID!
}

"""The tags with metadata of the entity."""
type EntityTagWithMetadata {
  """The tag's key."""
  key: String

  """A list of tag values with metadata information."""
  values: [EntityTagValueWithMetadata]
}

"""Interface type representing a query suggestion."""
interface SuggestedNrqlQuery {
  """The NRQL string to run for the suggested query"""
  nrql: String!

  """A human-readable title describing what the query shows"""
  title: String!
}

"""
The user has access to more than one environment from the context of this account (only one is allowed)
"""
type IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable {
  """The multiple accounts the user has access to in this context"""
  accountIds: [Int]
}

"""A Team entity."""
type TeamEntity implements AlertableEntity & CollectionEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]
  collection(
    """The name of the collection to fetch."""
    name: String!
  ): EntityCollection

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Destination Configuration Object"""
type AiWorkflowsDestinationConfiguration {
  """Channel Id of the Destination Configuration"""
  channelId: ID!

  """Name of the Destination Configuration"""
  name: String!

  """Notification triggers of the Destination Configuration"""
  notificationTriggers: [AiWorkflowsNotificationTrigger!]

  """Type of the Destination Configuration"""
  type: AiWorkflowsDestinationType!
}

"""
A collection of spans with context describing those spans.  The trace represents the complete processing of a request.
"""
type DistributedTracingTrace {
  """
  The duration in milliseconds for the back-end part of this trace (not from a client such as a Browser application)
  """
  backendDurationMs: Milliseconds

  """The total duration of this trace in milliseconds."""
  durationMs: Milliseconds

  """All entities that are part of this trace."""
  entities: [EntityOutline!]!

  """The number of entities that are part of this trace."""
  entityCount: Int!

  """Unique identifier for this trace."""
  id: String!

  """
  Parent/child IDs that represent all of the span relationships within this trace.
  """
  spanConnections: [DistributedTracingSpanConnection]!

  """
  Spans associated with this trace. The maximum number of spans returned is limited to 10_000. This could be less than the actual number of spans sent for the trace.
  """
  spans: [DistributedTracingSpan!]!

  """Epoch milliseconds timestamp represents this trace's start time."""
  timestamp: EpochMilliseconds!
}

"""Represents all the format types available for static charts."""
enum ChartFormatType {
  PDF
  PNG
}

"""AWS CloudTrail"""
input CloudCloudtrailIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""The resulting NRQL queries that help consume the metrics of the SLI."""
type ServiceLevelIndicatorResultQueries {
  """The NRQL query that measures the good events."""
  goodEvents: ServiceLevelResultQuery!

  """The NRQL query that measures the value of the SLI."""
  indicator: ServiceLevelResultQuery!

  """The NRQL query that measures the valid events."""
  validEvents: ServiceLevelResultQuery!
}

"""Input object used to represent the rule to be created"""
input MetricNormalizationEditRuleInput {
  """Rule action."""
  action: MetricNormalizationCustomerRuleAction!

  """Is rule enabled?"""
  enabled: Boolean!

  """Rule evaluation order"""
  evalOrder: Int

  """Rule Id."""
  id: Int!

  """Metric Match Expression."""
  matchExpression: String!

  """Notes."""
  notes: String

  """Metric Replacement Expression."""
  replacement: String

  """Whether it terminates the evaluation chain or not"""
  terminateChain: Boolean
}

"""SQL Database Integration"""
type CloudAzureSqlIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

type NerdStorageAccountScope {
  """The collection to be retrieved."""
  collection(
    """The collection from which documents will be retrieved."""
    collection: String!
  ): [NerdStorageCollectionMember]

  """
  A Nerdpack document is formed by an identifier (called documentId) and a set of data associated with it.
  """
  document(
    """The collection that the document belongs to."""
    collection: String!

    """The documentId to be retrieved."""
    documentId: String!
  ): NerdStorageDocument
}

"""
This scalar represents a NRDB Result. It is a `Map` of `String` keys to values.

The shape of these objects reflect the query used to generate them, the contents
of the objects is not part of the GraphQL schema.
"""
scalar NrdbResult

"""Input type for FixedFuzzyWuzzyRatio expression"""
input AiDecisionsFixedFuzzyWuzzyRatioInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Value to be used in comparison."""
  value: String!
}

"""Notification Triggers for the Destination Configuration"""
enum AiWorkflowsNotificationTrigger {
  """Send a notification when the issue is acknowledged"""
  ACKNOWLEDGED

  """Send a notification when the issue is activated"""
  ACTIVATED

  """Send a notification when the issue is closed"""
  CLOSED

  """Sends notification when the issue has other updates"""
  OTHER_UPDATES

  """Send a notification when the issue's priority has changed"""
  PRIORITY_CHANGED
}

"""Amazon Relation Database Service (RDS)"""
input CloudRdsIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""The NRQL SELECT clause to aggregate events."""
input ServiceLevelEventsQuerySelectUpdateInput {
  """
  The attribute used in the selected function. Only use it in combination with the SUM, GET_FIELD and GET_CDF_COUNT functions.
  """
  attribute: String

  """The function to use in the SELECT clause."""
  function: ServiceLevelEventsQuerySelectFunction!

  """
  The threshold used in the selected function. Only use it in combination with the GET_CDF_COUNT function.
  """
  threshold: Float
}

"""Configuration for Campfire notification channel."""
type AlertsCampfireNotificationChannelConfig {
  """Room."""
  room: String! @deprecated(reason: "This channel type is deprecated")

  """Subdomain."""
  subdomain: String! @deprecated(reason: "This channel type is deprecated")

  """Authentication token."""
  token: SecureValue! @deprecated(reason: "This channel type is deprecated")
}

"""The occurrences of an error group"""
type ErrorsInboxOccurrences {
  """Total number of expected occurrences in the given time window."""
  expectedCount: Int

  """Time of first occurrence in the given time window."""
  firstSeenAt: EpochMilliseconds

  """Time of last occurrence in the given time window."""
  lastSeenAt: EpochMilliseconds

  """Total number of occurrences in the given time window."""
  totalCount: Int
}

"""Information about a targeted install plan directive"""
type Nr1CatalogTargetedInstallPlanDirective implements Nr1CatalogInstallPlanDirective {
  """The mode of the install plan directive"""
  mode: Nr1CatalogInstallPlanDirectiveMode!

  """The name of the recipe used for the installation"""
  recipeName: String!
}

"""Possible types of configured alert conditions"""
enum Nr1CatalogQuickstartAlertConditionType {
  """A baseline alert condition"""
  BASELINE

  """An outlier alert condition"""
  OUTLIER @deprecated(reason: "Outlier alert conditions are no longer supported")

  """A static alert condition"""
  STATIC
}

"""Represents the type of the threshold defined for a rule."""
enum WorkloadRuleThresholdType {
  """
  The worst status is rolled up only after a certain number of entities within the workload are not operational.
  """
  FIXED

  """
  The worst status is rolled up only after a certain percentage of entities within the workload are not operational.
  """
  PERCENTAGE
}

"""A group of data sources that are associated with this trace observer."""
type EdgeDataSourceGroup {
  """The list of data sources in this group."""
  dataSources: [EdgeDataSource!]!
}

"""Types of references for the default WHERE clause."""
enum EntityGoldenEventObjectId {
  """The WHERE clause will be done against a domainId."""
  DOMAIN_IDS

  """The WHERE clause will be done against a GUID."""
  ENTITY_GUIDS

  """The WHERE clause will be done against the name of the entity."""
  ENTITY_NAMES @deprecated(reason: "This use case will be removed in future versions.")
}

"""Data Factory"""
input CloudAzureDatafactoryIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Route53 Resolver Integration"""
type CloudAwsRoute53resolverIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Information on the owner of a dashboard or page."""
type DashboardOwnerInfo {
  """New Relic user email."""
  email: String

  """New Relic user ID."""
  userId: Int
}

"""A Mobile Application entity."""
type MobileApplicationEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """The ID of the Mobile App."""
  applicationId: Int

  """A Crash that occurred in your Mobile Application."""
  crash(
    """A unique identifer for an occurrence of a Mobile Crash."""
    occurrenceId: String!

    """
    The time window (60 minutes maximum) in which to search for the mobile crash. Defaults to standard NRQL query window.
    """
    timeWindow: TimeWindowInput
  ): StackTraceMobileCrash

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """A Handled Exception that occurred in your Mobile Application."""
  exception(
    """
    The fingerprint of a Mobile Handled Exception. The first handled exception matching the fingerprint will be returned.
    """
    fingerprint: String

    """
    A unique identifier for an occurrence of a Mobile Handled Exception. This is the 'handledExceptionUuid' attribute on the MobileHandledException events.
    """
    occurrenceId: String

    """
    The time window (60 minutes maximum) in which to search for the handled exception. Defaults to standard NRQL query window.
    """
    timeWindow: TimeWindowInput
  ): StackTraceMobileException

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """Retrieves the entity metric grouping issues."""
  metricGroupingIssues(
    """End time."""
    endTime: EpochMilliseconds

    """Metric normalization rule ids"""
    metricNormalizationRuleIds: [Int]

    """Start time."""
    startTime: EpochMilliseconds
  ): [MetricNormalizationRuleMetricGroupingIssue!]

  """Retrieves a rule."""
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  """Retrieves the rules for the application."""
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]

  """Access general properties for the application."""
  mobileProperties: AgentApplicationSettingsMobileProperties

  """Settings that are common across mobile applications."""
  mobileSettings: AgentApplicationSettingsMobileBase

  """Summary statistics about the Mobile App."""
  mobileSummary: MobileAppSummaryData

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""The input object representing parameters for the Members filter"""
input MultiTenantIdentityGroupMemberIdInput {
  """
  A list of user IDs. A group will be returned if all listed users are members.
  """
  contains: [ID!]!
}

"""Expected error types that can be returned by undelete operation."""
type DashboardUndeleteError {
  """Error description."""
  description: String

  """Error type."""
  type: DashboardUndeleteErrorType!
}

"""Input type for RelativeFuzzyWuzzyAdaptiveRatio expression"""
input AiDecisionsRelativeFuzzyWuzzyAdaptiveRatioInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

type EdgeAccountStitchedFields {
  """Provides access to Tracing data."""
  tracing: EdgeTracing
}

"""
The type of the notification channel which determines its configuration field.
"""
enum AlertsNotificationChannelType {
  """Campfire notification channel."""
  CAMPFIRE @deprecated(reason: "This channel type is deprecated")

  """Email notification channel."""
  EMAIL

  """HipChat notification channel."""
  HIP_CHAT @deprecated(reason: "This channel type is deprecated")

  """OpsGenie notification channel."""
  OPSGENIE

  """PagerDuty notification channel."""
  PAGERDUTY

  """Slack notification channel."""
  SLACK

  """User notification channel."""
  USER @deprecated(reason: "This channel type is deprecated")

  """VictorOps notification channel."""
  VICTOROPS

  """Webhook notification channel."""
  WEBHOOK

  """xMatters notification channel."""
  XMATTERS
}

"""Workflows query response"""
type AiWorkflowsWorkflows {
  """List of all workflows"""
  entities: [AiWorkflowsWorkflow!]!

  """Cursor to get the next batch of results"""
  nextCursor: String

  """Total count of all workflows"""
  totalCount: Int!
}

"""Possible types of configured alert conditions"""
enum Nr1CatalogAlertConditionType {
  """A baseline alert condition"""
  BASELINE

  """A static alert condition"""
  STATIC
}

"""Incident interface"""
interface AiIssuesIIncident {
  """account"""
  account: AccountReference

  """An account id this incident is stored in"""
  accountIds: String!

  """The time the incident was closed"""
  closedAt: EpochMilliseconds

  """The time the incident was created"""
  createdAt: EpochMilliseconds!

  """
  The description is generated from the policy name and the condition name or provided through API
  """
  description: [String!]!

  """A list of unique entity identifiers"""
  entityGuids: EntityGuid

  """A list of entity names"""
  entityNames: String

  """A list of entity types"""
  entityTypes: String

  """See our documentation to learn about environments"""
  environmentId: Int! @deprecated(reason: "Use account")

  """Incident identifier"""
  incidentId: ID!

  """Incident priority"""
  priority: AiIssuesPriority!

  """Incident state"""
  state: AiIssuesIncidentState!

  """Incident event timestamp"""
  timestamp: EpochMilliseconds!

  """
  The description the user gave the condition if provided. Otherwise the incident description
  """
  title: String!

  """The time the incident was last updated"""
  updatedAt: EpochMilliseconds!
}

"""Input type for FixedNumericalEqual expression"""
input AiDecisionsFixedNumericalEqualInput {
  """Value to be used in comparison."""
  compared: Float!

  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!
}

"""Dataproc Integration"""
type CloudGcpDataprocIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Attribute object that contains data about the attribute"""
type DataDictionaryAttribute {
  """Description of what this attribute represents, how it's measured, etc"""
  definition(
    """Specify the text format for the definition"""
    format: DataDictionaryTextFormat = PLAIN
  ): String!

  """URL of this attribute on the New Relic docs site"""
  docsUrl: String

  """List of events using this attribute"""
  events: [String!]!

  """The official name of this attribute"""
  name: String!

  """Unit this attribute is measuring (if applicable)"""
  units: DataDictionaryUnit
}

"""Cognito Integration"""
type CloudAwsCognitoIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The result after creating a new data partition rule."""
type LogConfigurationsCreateDataPartitionRuleResponse {
  """List of errors, if any."""
  errors: [LogConfigurationsCreateDataPartitionRuleError]

  """The created data partition rule."""
  rule: LogConfigurationsDataPartitionRule
}

"""The type of the relationship."""
enum EntityRelationshipEdgeType {
  """The target entity contains the code for the source entity."""
  BUILT_FROM

  """The source entity calls the target entity."""
  CALLS

  """The source entity has a connection to the target entity."""
  CONNECTS_TO

  """
  The source entity consumes messages from a target kafka topic or other queue systems.
  """
  CONSUMES

  """The source entity contains the target entity."""
  CONTAINS

  """The source entity hosts the target."""
  HOSTS

  """The source and target entities are perspectives on the same thing."""
  IS

  """
  The source entity manages the target, that represents a subsystem of the source.
  """
  MANAGES

  """The source entity is used to measure the target entity."""
  MEASURES

  """
  The source operates in the target entity, e.g. a region or a data center.
  """
  OPERATES_IN

  """The source entity owns the target entity."""
  OWNS

  """
  The source entity produces messages to a target kafka topic or other queue systems.
  """
  PRODUCES

  """
  The source is an Application that serves the target Browser application.
  """
  SERVES
}

"""Configuration for visualization type 'viz.markdown'"""
type DashboardMarkdownWidgetConfiguration {
  """Markdown content of the widget."""
  text: String!
}

"""Result options for environment creation"""
enum IncidentIntelligenceEnvironmentCreateEnvironmentResult {
  """The account is not marked with consent for environment creation"""
  ACCOUNT_NOT_CONSENTED

  """The account is not entitled to incident intelligence"""
  ACCOUNT_NOT_ENTITLED

  """
  The specified associated accounts are already associated to other environments
  """
  ACCOUNTS_ALREADY_ASSOCIATED

  """Action not allowed, please contact support"""
  ACTION_UNAUTHORIZED

  """
  The environment already exists and cannot be created again for the same parent account id tree
  """
  ALREADY_EXISTS

  """The specified associated accounts are not authorized to the user"""
  ASSOCIATED_ACCOUNTS_NOT_AUTHORIZED

  """The environment was created successfully"""
  CREATED

  """The user is not authorized to create an environment"""
  USER_NOT_AUTHORIZED

  """
  The user is not authorized to create the environment due to a missing capability
  """
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"""Channel type"""
enum AiNotificationsChannelType {
  """Email channel type"""
  EMAIL

  """Event Bridge channel type"""
  EVENT_BRIDGE

  """Jira Classic channel type"""
  JIRA_CLASSIC

  """Jira Nextgen channel type"""
  JIRA_NEXTGEN

  """Mobile push channel type"""
  MOBILE_PUSH

  """PagerDuty channel type"""
  PAGERDUTY_ACCOUNT_INTEGRATION

  """Pager Duty channel type"""
  PAGERDUTY_SERVICE_INTEGRATION

  """ServiceNow app channel type"""
  SERVICE_NOW_APP

  """Servicenow events channel type"""
  SERVICENOW_EVENTS

  """Servicenow incidents channel type"""
  SERVICENOW_INCIDENTS

  """Slack channel type"""
  SLACK

  """Slack Collaboration channel type"""
  SLACK_COLLABORATION

  """Legacy Slack channel type based on Incoming Webhooks"""
  SLACK_LEGACY

  """Webhook channel type"""
  WEBHOOK
}

"""Represents a date time window input."""
input DateTimeWindowInput {
  """The end date and time expressed as an ISO8601 formatted string"""
  endTime: DateTime!

  """The start date and time expressed as an ISO8601 formatted string"""
  startTime: DateTime!
}

"""Virtual Machines Integration"""
type CloudAzureVmsIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Attributes for creating an account."""
input AccountManagementCreateInput {
  """The name of the account."""
  name: String!

  """The id of the managed organization where the account will be created."""
  organizationId: ID

  """The data center region for the account"""
  regionCode: String
}

"""Managed Kafka Integration"""
type CloudAwsMskIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Information about an account present on the allow-list"""
type NerdpackAllowedAccount {
  """Allowed account id"""
  accountId: Int!
}

"""Type of test error"""
enum AiWorkflowsTestErrorType {
  """We couldn't find a channel with the given id"""
  CHANNEL_NOT_FOUND

  """Failed running test workflow"""
  FAILED_RUNNING_TEST

  """
  This account is missing the required entitlement(s) to perform this action
  """
  MISSING_ENTITLEMENT

  """This account is not allowed to preform this action"""
  UNAUTHORIZED_ACCOUNT

  """The given channel id represents an unsupported channel type"""
  UNSUPPORTED_CHANNEL_TYPE

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR

  """Failed to send a notification to the channel"""
  WARNING_FAILED_SENDING_NOTIFICATION

  """There are no issues that match this filter"""
  WARNING_NO_FILTERED_ISSUE_FOUND

  """There are no issues that match these dynamic variables"""
  WARNING_NO_MATCHING_DYNAMIC_VARIABLES_FOUND
}

"""A filter for customer contracts"""
input OrganizationCustomerContractFilterInput {
  """The id of the customer"""
  customerId: OrganizationContractCustomerIdInputFilter

  """The id of the organization"""
  organizationId: OrganizationContractOrganizationIdInputFilter
}

"""Result of an operation."""
type AiTopologyCollectorOperationResult {
  """Status of the operation."""
  result: AiTopologyCollectorResultType!
}

"""
A condition which describes how to target a New Relic Alerts Violation.
"""
type AlertsMutingRuleCondition {
  """
  The attribute on a violation. Expects one of:
  
  * **accountId** - The account id
  * **conditionId** - The alert condition id
  * **conditionName** - The alert condition name
  * **conditionRunbookUrl** - The alert condition's runbook url
  * **conditionType** - The alert condition type, such as `metric`
  * **entity.guid** - The entity GUID
  * **nrqlEventType** - The NRQL event type
  * **nrqlQuery** - The NRQL query string
  * **policyId** - The alert policy id
  * **policyName** - The alert policy name
  * **product** - The target product (e.g., `SYNTHETICS`)
  * **tags.<NAME>** - Arbitrary tags associated with some entity (e.g., FACET from a NRQL query, for example `tags.appName` or `tags.host`)
  * **targetId** - The ID of the alerts target
  * **targetName** - The name of the alerts target
  """
  attribute: String!

  """
  The operator used to compare the attribute's value with the supplied value(s).
  """
  operator: AlertsMutingRuleConditionOperator!

  """The value(s) to compare against the attribute's value."""
  values: [String]!
}

"""Provides the types of grant scopes available"""
enum MultiTenantAuthorizationGrantScopeEnum {
  """Grant scoped to an account"""
  ACCOUNT

  """Grant scoped to a group"""
  GROUP

  """Grant scoped to an organization"""
  ORGANIZATION
}

"""Pixie Project with the New Relic account"""
type PixieLinkedPixieProject {
  """The New Relic account id"""
  accountId: Int!

  """The linked Pixie Project"""
  pixieProject: PixiePixieProject!
}

"""Filter incidents"""
input AiIssuesFilterIncidents {
  """entityGuids"""
  entityGuids: [EntityGuid!]

  """entityTypes"""
  entityTypes: [String!]

  """ids"""
  ids: [ID!]

  """priority"""
  priority: [String!]

  """states"""
  states: [AiIssuesIncidentState!]
}

"""The response of the create keys mutation."""
type ApiAccessCreateKeyResponse {
  """Lists all successfully created keys."""
  createdKeys: [ApiAccessKey]

  """
  Lists all errors for keys that could not be created. Each error maps to a single key input.
  """
  errors: [ApiAccessKeyError]
}

"""
The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
"""
input ApiAccessCreateIngestKeyInput {
  """
  The account ID indicating which account you want to make the key for. This cannot be updated once created.
  """
  accountId: Int!

  """
  The type of ingest key you want to create. This cannot be updated once created.
  """
  ingestType: ApiAccessIngestKeyType!

  """The name of the key. This can be updated later."""
  name: String

  """Any notes about this ingest key. This can be updated later."""
  notes: String
}

"""
A condition which describes how to target a New Relic Alerts Violation.
"""
input AlertsMutingRuleConditionInput {
  """
  The attribute on a violation. Expects one of:
  
  * **accountId** - The account id
  * **conditionId** - The alert condition id
  * **conditionName** - The alert condition name
  * **conditionRunbookUrl** - The alert condition's runbook url
  * **conditionType** - The alert condition type, such as `metric`
  * **entity.guid** - The entity GUID
  * **nrqlEventType** - The NRQL event type
  * **nrqlQuery** - The NRQL query string
  * **policyId** - The alert policy id
  * **policyName** - The alert policy name
  * **product** - The target product (e.g., `SYNTHETICS`)
  * **tags.<NAME>** - Arbitrary tags associated with some entity (e.g., FACET from a NRQL query, for example `tags.appName` or `tags.host`)
  * **targetId** - The ID of the alerts target
  * **targetName** - The name of the alerts target
  """
  attribute: String!

  """
  The operator used to compare the attribute's value with the supplied value(s).
  """
  operator: AlertsMutingRuleConditionOperator!

  """The value(s) to compare against the attribute's value."""
  values: [String]!
}

"""Type of Validation required for this component"""
enum AiNotificationsUiComponentValidation {
  """Data should be a valid DATE ISO-8601 format"""
  DATE

  """Data should be a valid DATETIME ISO-8601 format"""
  DATETIME

  """Data should be a valid email"""
  EMAIL

  """Data should be a valid JSON"""
  JSON

  """No validation"""
  NONE

  """Data should be a valid number"""
  NUMBER

  """Data should be a valid URL"""
  URL
}

"""Health Integration"""
type CloudHealthIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The list of sortable fields"""
enum MultiTenantAuthorizationRoleSortEnum {
  """Id of the role"""
  ID

  """Name of the role"""
  NAME

  """Scope of the role"""
  SCOPE

  """Type of the role"""
  TYPE
}

"""Configuration settings for the APM Application"""
type ApmApplicationSettings {
  """The current Apdex target setting"""
  apdexTarget: Float

  """State of server-side configuration setting"""
  serverSideConfig: Boolean
}

"""SES Integration"""
type CloudSesIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The input for updating an existing xMatters notification channel."""
input AlertsXMattersNotificationChannelUpdateInput {
  """Integration URL."""
  integrationUrl: SecureValue

  """Notification channel name."""
  name: String
}

"""AWS Auto Scaling"""
input CloudAutoscalingIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Error types"""
enum AiNotificationsErrorType {
  """Unable to connect to external service to perform this action"""
  CONNECTION_ERROR

  """This operation could not be completed because the entity is in use"""
  ENTITY_IN_USE

  """An external server error has occurred"""
  EXTERNAL_SERVER_ERROR

  """Targeted account does not have access to this feature"""
  FEATURE_FLAG_DISABLED

  """The channel name doesn't exist"""
  INVALID_CHANNEL_NAME

  """The credentials provided were invalid, Please check them and try again"""
  INVALID_CREDENTIALS

  """Could not provide suggestions for this key"""
  INVALID_KEY

  """The parameter provided does not correspond to any valid entity"""
  INVALID_PARAMETER

  """Entities limit has been reached"""
  LIMIT_REACHED

  """User is missing capabilities"""
  MISSING_CAPABILITIES

  """This key requires additional constraints"""
  MISSING_CONSTRAINTS

  """At least one parameter is required to complete this action"""
  MISSING_PARAMETERS

  """This destination does not support OAuth authentication"""
  OAUTH_NOT_SUPPORTED

  """This destination does not provide any suggestions"""
  SUGGESTIONS_UNAVAILABLE

  """Request did not finish within time limit"""
  TIMEOUT_ERROR

  """The variable type is different from the example type"""
  TYPE_EXAMPLE_MISMATCH

  """This account is not allowed to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """Received one or more unexpected parameters"""
  UNEXPECTED_PARAMETER

  """The New Relic application was removed"""
  UNINSTALLED_DESTINATION

  """An unknown error has occurred"""
  UNKNOWN_ERROR
}

"""Input type for CategoricalClustering expression"""
input AiDecisionsCategoricalClusteringInput {
  """Threshold for comparison."""
  threshold: Float!
}

"""Base Integration Object"""
type CloudBaseIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input for creating an obfuscation expression."""
input LogConfigurationsCreateObfuscationExpressionInput {
  """Description of expression."""
  description: String

  """Name of expression."""
  name: String!

  """Regex of expression."""
  regex: String!
}

"""The input object representing the group being updated"""
input UserManagementUpdateGroup {
  """The name of the group"""
  displayName: String!

  """The id of the group to update"""
  id: ID!
}

"""The input for creating a new PagerDuty notification channel."""
input AlertsPagerDutyNotificationChannelCreateInput {
  """API key."""
  apiKey: SecureValue!

  """Notification channel name."""
  name: String!
}

"""Key to values type"""
type AiIssuesKeyValues {
  """key"""
  key: String!

  """A list of values"""
  value: [String!]!
}

"""Sort fields"""
enum ErrorsInboxErrorGroupSortOrderField {
  """Order by last occurrence in the current time window."""
  LAST_OCCURRENCE_IN_WINDOW

  """Order by error group occurrences."""
  OCCURRENCES
}

"""Possible levels of support"""
enum Nr1CatalogSupportLevel {
  """Community supported"""
  COMMUNITY

  """Enterprise supported"""
  ENTERPRISE

  """New Relic supported"""
  NEW_RELIC

  """Partner supported"""
  VERIFIED
}

"""How metrics will be collected."""
enum CloudMetricCollectionMode {
  """Metrics will be pulled by NewRelic"""
  PULL

  """Metrics will be pushed by the provider"""
  PUSH
}

"""
In APM, when transaction traces are collected, there may be additional Slow query data available.
"""
input AgentApplicationSettingsSlowSqlInput {
  """Whether or not slow_sql is enabled."""
  enabled: Boolean
}

"""Information about a data source"""
type Nr1CatalogDataSource {
  """The unique identifier for the data source"""
  id: ID!

  """Metadata associated with the data source"""
  metadata: Nr1CatalogDataSourceMetadata!
}

"""Dashboard owner"""
type DashboardEntityOwnerInfo {
  """The email of the dashboard owner"""
  email: String

  """The user ID of the dashboard owner"""
  userId: Int
}

"""Athena"""
input CloudAwsAthenaIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""A step that will be added to the monitor script"""
input SyntheticsStepInput {
  """The position of the step within the script ranging from 1-100."""
  ordinal: Int!

  """The type of step to be added to the script"""
  type: SyntheticsStepType!

  """The metadata values related to the step"""
  values: [String!]
}

"""The input for updating an existing OpsGenie notification channel."""
input AlertsOpsGenieNotificationChannelUpdateInput {
  """API key."""
  apiKey: SecureValue

  """OpsGenie data center region."""
  dataCenterRegion: AlertsOpsGenieDataCenterRegion

  """Notification channel name."""
  name: String

  """List of email recipients."""
  recipients: [String!]

  """Tags."""
  tags: [String!]

  """Teams."""
  teams: [String!]
}

"""The result after deleting a parsing rule."""
type LogConfigurationsDeleteParsingRuleResponse {
  """List of errors, if any."""
  errors: [LogConfigurationsParsingRuleMutationError]
}

"""AWS IoT"""
input CloudIotIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Bigtable"""
input CloudGcpBigtableIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""NRQL enrichment configuration"""
type AiWorkflowsNrqlConfiguration {
  """NRQL query"""
  query: String!
}

"""Input object to add and change a feature setting toggle for an account"""
input DataManagementAccountFeatureSettingInput {
  """Enabled state for the feature setting"""
  enabled: Boolean

  """Feature setting lookup"""
  featureSetting: DataManagementFeatureSettingLookup

  """When locked is true, children inherit parent's enabled state"""
  locked: Boolean
}

"""Update error description"""
type AiWorkflowsUpdateResponseError implements AiWorkflowsResponseError {
  """The error description"""
  description: String!

  """The error type"""
  type: AiWorkflowsUpdateErrorType!
}

"""
A wrapper object that contains paginated install statuses along with counts and a pagination cursor
"""
type InstallationInstallStatusResult {
  """
  Cursor for fetching next page of results.  Results are ordered by descending timestamp (most recent first)
  """
  cursor: String

  """List of InstallStatus objects"""
  installStatuses: [InstallationInstallStatus!]

  """
  Total number of InstallStatus results across all pages for a given query
  """
  totalCount: Int
}

"""
Indicates by which field the remaining entities rule should be grouped.
"""
enum WorkloadGroupRemainingEntitiesRuleBy {
  """Group the remaining entities rule by entity type."""
  ENTITY_TYPE

  """Do not apply any grouping to the remaining entities rule."""
  NONE
}

"""container for groups enabling cursor based pagination"""
type UserManagementGroups {
  """container for groups enabling cursor based pagination"""
  groups: [UserManagementGroup!]!

  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

interface InfrastructureIntegrationEntity {
  integrationTypeCode: String
}

"""Provides fields to query nerdpacks by different conditions"""
type NerdpackNerdpacks {
  """
  Get the list of stable core nerdpack versions together with nerdpack versions which the requesting user's account is subscribed.
  This query allows for version or channel overrides by providing OverrideVersionRules objects.
  """
  effectiveSubscribedVersions(
    """
    List of version override rules per Nerdpack.
    The query will return the version that matches the specified rules (if it exists) for a given nerdpack instead of
    deciding which version has priority
    """
    overrides: [NerdpackOverrideVersionRules]
  ): [NerdpackVersion]

  """
  If a Nerdpack with the given uuid exists, retrieve the Nerdpack object.
  """
  nerdpack(
    """Nerdpack id."""
    id: ID!
  ): NerdpackData

  """Returns the list of subscribable Nerdpacks of the current user."""
  subscribable(
    """Nerdpack filter data."""
    nerdpackFilter: NerdpackDataFilter
  ): [NerdpackData]
}

"""Metadata associated with the dashboard in a quickstart"""
type Nr1CatalogQuickstartDashboardMetadata implements Nr1CatalogQuickstartComponentMetadata {
  """A short form description for the dashboard."""
  description: String

  """The human-readable name for the dashboard."""
  displayName: String

  """A list of previews for the dashboard, such as screenshots."""
  previews: [Nr1CatalogPreview!]!
}

"""
The type of the relationship.

For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
"""
enum EntityRelationshipType {
  """The source repository containing the code for the target"""
  BUILT_FROM @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source entity calls the target entity."""
  CALLS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source establishes TCP connections to the target"""
  CONNECTS_TO @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source entity contains the target entity"""
  CONTAINS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source entity hosts the target"""
  HOSTS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """The source and target entities are perspectives on the same thing"""
  IS @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """
  The source is an Application that serves the target Browser application
  """
  SERVES @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")

  """Type not known"""
  UNKNOWN @deprecated(reason: "`relationships` and its subfields are deprecated. Please use `relatedEntities`.")
}

"""Configuration for Webhook notification channel."""
type AlertsWebhookNotificationChannelConfig {
  """Base URL."""
  baseUrl: String!

  """Basic auth."""
  basicAuth: AlertsWebhookBasicAuthInput

  """Custom HTTP headers."""
  customHttpHeaders: [AlertsWebhookCustomHeaderInput!]

  """Custom payload body."""
  customPayloadBody: String

  """Custom payload type."""
  customPayloadType: AlertsWebhookCustomPayloadType
}

"""Status of an operation."""
enum AiTopologyCollectorResultType {
  """Failed operation"""
  FAILURE

  """Successful operation"""
  SUCCESS
}

"""Filters on the grants organization id"""
input MultiTenantAuthorizationGrantOrganizationIdInputFilter {
  """Performs an equals operation"""
  eq: ID!
}

"""Amazon Redshift"""
input CloudRedshiftIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Summary statistics about the APM App."""
type ApmApplicationSummaryData {
  """
  The apdex score. For more details on the use of apdex, visit [our docs](https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction).
  """
  apdexScore: Float

  """The percentage of responses to all transactions with an error."""
  errorRate: Float

  """The number of hosts this application is running on."""
  hostCount: Int

  """The number of instances of this application running."""
  instanceCount: Int

  """The average response time for non-web transactions in seconds."""
  nonWebResponseTimeAverage: Seconds

  """The number of non-web transactions per minute."""
  nonWebThroughput: Float

  """The average response time for all transactions in seconds."""
  responseTimeAverage: Seconds

  """The number of all transactions per minute."""
  throughput: Float

  """The average response time for web transactions in seconds."""
  webResponseTimeAverage: Seconds

  """The number of web transactions per minute."""
  webThroughput: Float
}

"""NRQL condition terms determine when a violation will be opened."""
input AlertsNrqlConditionTermsInput {
  """Operator used to compare against the threshold."""
  operator: AlertsNrqlConditionTermsOperator!

  """
  Priority determines how much attention your incidents need. Your workflow settings then tell us when and where to send notifications for different priorities.
  """
  priority: AlertsNrqlConditionPriority!

  """Value that triggers a violation."""
  threshold: Float!

  """
  The duration, in seconds, that the threshold must violate for in order to create a violation.
  This value must be within 60-86400 seconds and must be a multiple of the aggregation window.
  (Default aggregation window duration is 60 seconds.)
  """
  thresholdDuration: Int!

  """
  How many data points must be in violation for the specified thresholdDuration.
  """
  thresholdOccurrences: AlertsNrqlConditionThresholdOccurrences!
}

"""The data access level and ID for the selected scope."""
input NerdStorageScopeInput {
  """The ID for the selected scope."""
  id: String!

  """The NerdStorage data access level."""
  name: NerdStorageScope!
}

"""WAFV2 Integration"""
type CloudAwsWafv2Integration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Available filtering types for user IDs"""
input UserManagementUserIdInput {
  """A user ID"""
  eq: ID

  """An array of user IDs"""
  in: [ID!]
}

"""The monitor values that can be updated on a Simple Browser monitor"""
input SyntheticsUpdateSimpleBrowserMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsSimpleBrowserMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntimeInput

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]

  """The uri the monitor runs against"""
  uri: String
}

"""
The details of a status that was involved in the calculation of the workload status.
"""
interface WorkloadStatusResult {
  """Indicates where the status value derives from."""
  source: WorkloadStatusSource!

  """The value of a status."""
  value: WorkloadStatusValue!
}

"""Configuration for visualization type 'viz.pie'"""
type DashboardPieWidgetConfiguration {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"""An ingest key."""
type ApiAccessIngestKey implements ApiAccessKey {
  """The account this key is in."""
  account: AccountReference

  """
  The account attached to the ingest key. Agents using this key will report to the account the key belongs to.
  """
  accountId: Int

  """The UNIX epoch when the key was created, in seconds."""
  createdAt: EpochSeconds

  """
  The ID of the ingest key. This can be used to identify a key without revealing the key itself (used to update and delete).
  """
  id: ID

  """
  The type of ingest key, which dictates what types of agents can use it to report.
  """
  ingestType: ApiAccessIngestKeyType

  """The keystring of the key."""
  key: String

  """The name of the key. Limited to 120 characters."""
  name: String

  """Any notes can be attached to an key. Limited to 120 characters."""
  notes: String

  """The obfuscated key."""
  obfuscatedKey: String

  """
  The type of key, indicating what New Relic APIs it can be used to access.
  """
  type: ApiAccessKeyType
}

"""Installation information for a data source"""
union Nr1CatalogDataSourceInstallDirective = Nr1CatalogLinkInstallDirective | Nr1CatalogNerdletInstallDirective

"""API Gateway Integration"""
type CloudApigatewayIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.
  """
  stagePrefixes: [String]

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The account type contains the properties of an account"""
type OrganizationAccount {
  """The account id"""
  id: Int!

  """The account name"""
  name: String!

  """The account region code"""
  regionCode: String!

  """The status"""
  status: String!
}

"""The Account and Role a Group should have access to"""
input AuthorizationManagementAccountAccessGrant {
  """The Account ID the Role will grant access to"""
  accountId: Int!

  """The Role ID that will define the access"""
  roleId: ID!
}

"""The type of Infrastructure Integration"""
enum EntityInfrastructureIntegrationType {
  """APACHE_SERVER integration"""
  APACHE_SERVER

  """AWSELASTICSEARCHNODE integration"""
  AWSELASTICSEARCHNODE

  """AWS_ALB integration"""
  AWS_ALB

  """AWS_ALB_LISTENER integration"""
  AWS_ALB_LISTENER

  """AWS_ALB_LISTENER_RULE integration"""
  AWS_ALB_LISTENER_RULE

  """AWS_ALB_TARGET_GROUP integration"""
  AWS_ALB_TARGET_GROUP

  """AWS_API_GATEWAY_API integration"""
  AWS_API_GATEWAY_API

  """AWS_API_GATEWAY_RESOURCE integration"""
  AWS_API_GATEWAY_RESOURCE

  """AWS_API_GATEWAY_RESOURCE_WITH_METRICS integration"""
  AWS_API_GATEWAY_RESOURCE_WITH_METRICS

  """AWS_API_GATEWAY_STAGE integration"""
  AWS_API_GATEWAY_STAGE

  """AWS_AUTO_SCALING_GROUP integration"""
  AWS_AUTO_SCALING_GROUP

  """AWS_AUTO_SCALING_INSTANCE integration"""
  AWS_AUTO_SCALING_INSTANCE

  """AWS_AUTO_SCALING_LAUNCH_CONFIGURATION integration"""
  AWS_AUTO_SCALING_LAUNCH_CONFIGURATION

  """AWS_AUTO_SCALING_POLICY integration"""
  AWS_AUTO_SCALING_POLICY

  """AWS_AUTO_SCALING_REGION_LIMIT integration"""
  AWS_AUTO_SCALING_REGION_LIMIT

  """AWS_BILLING_ACCOUNT_COST integration"""
  AWS_BILLING_ACCOUNT_COST

  """AWS_BILLING_ACCOUNT_SERVICE_COST integration"""
  AWS_BILLING_ACCOUNT_SERVICE_COST

  """AWS_BILLING_BUDGET integration"""
  AWS_BILLING_BUDGET

  """AWS_BILLING_SERVICE_COST integration"""
  AWS_BILLING_SERVICE_COST

  """AWS_CLOUD_FRONT_DISTRIBUTION integration"""
  AWS_CLOUD_FRONT_DISTRIBUTION

  """AWS_CLOUD_TRAIL integration"""
  AWS_CLOUD_TRAIL

  """AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX integration"""
  AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX

  """AWS_DYNAMO_DB_REGION integration"""
  AWS_DYNAMO_DB_REGION

  """AWS_DYNAMO_DB_TABLE integration"""
  AWS_DYNAMO_DB_TABLE

  """AWS_EBS_VOLUME integration"""
  AWS_EBS_VOLUME

  """AWS_ECS_CLUSTER integration"""
  AWS_ECS_CLUSTER

  """AWS_ECS_SERVICE integration"""
  AWS_ECS_SERVICE

  """AWS_EFS_FILE_SYSTEM integration"""
  AWS_EFS_FILE_SYSTEM

  """AWS_ELASTICSEARCH_CLUSTER integration"""
  AWS_ELASTICSEARCH_CLUSTER

  """AWS_ELASTICSEARCH_INSTANCE integration"""
  AWS_ELASTICSEARCH_INSTANCE

  """AWS_ELASTIC_BEANSTALK_ENVIRONMENT integration"""
  AWS_ELASTIC_BEANSTALK_ENVIRONMENT

  """AWS_ELASTIC_BEANSTALK_INSTANCE integration"""
  AWS_ELASTIC_BEANSTALK_INSTANCE

  """AWS_ELASTIC_MAP_REDUCE_CLUSTER integration"""
  AWS_ELASTIC_MAP_REDUCE_CLUSTER

  """AWS_ELASTIC_MAP_REDUCE_INSTANCE integration"""
  AWS_ELASTIC_MAP_REDUCE_INSTANCE

  """AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET integration"""
  AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET

  """AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP integration"""
  AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP

  """AWS_ELASTI_CACHE_MEMCACHED_CLUSTER integration"""
  AWS_ELASTI_CACHE_MEMCACHED_CLUSTER

  """AWS_ELASTI_CACHE_MEMCACHED_NODE integration"""
  AWS_ELASTI_CACHE_MEMCACHED_NODE

  """AWS_ELASTI_CACHE_REDIS_CLUSTER integration"""
  AWS_ELASTI_CACHE_REDIS_CLUSTER

  """AWS_ELASTI_CACHE_REDIS_NODE integration"""
  AWS_ELASTI_CACHE_REDIS_NODE

  """AWS_ELB integration"""
  AWS_ELB

  """AWS_HEALTH_ISSUE integration"""
  AWS_HEALTH_ISSUE

  """AWS_HEALTH_NOTIFICATION integration"""
  AWS_HEALTH_NOTIFICATION

  """AWS_HEALTH_SCHEDULED_CHANGE integration"""
  AWS_HEALTH_SCHEDULED_CHANGE

  """AWS_HEALTH_UNKNOWN integration"""
  AWS_HEALTH_UNKNOWN

  """AWS_IAM integration"""
  AWS_IAM

  """AWS_IAM_GROUP integration"""
  AWS_IAM_GROUP

  """AWS_IAM_OPEN_ID_PROVIDER integration"""
  AWS_IAM_OPEN_ID_PROVIDER

  """AWS_IAM_POLICY integration"""
  AWS_IAM_POLICY

  """AWS_IAM_ROLE integration"""
  AWS_IAM_ROLE

  """AWS_IAM_SAML_PROVIDER integration"""
  AWS_IAM_SAML_PROVIDER

  """AWS_IAM_SERVER_CERTIFICATE integration"""
  AWS_IAM_SERVER_CERTIFICATE

  """AWS_IAM_USER integration"""
  AWS_IAM_USER

  """AWS_IAM_VIRTUAL_MFA_DEVICE integration"""
  AWS_IAM_VIRTUAL_MFA_DEVICE

  """AWS_IOT_BROKER integration"""
  AWS_IOT_BROKER

  """AWS_IOT_RULE integration"""
  AWS_IOT_RULE

  """AWS_IOT_RULE_ACTION integration"""
  AWS_IOT_RULE_ACTION

  """AWS_KINESIS_DELIVERY_STREAM integration"""
  AWS_KINESIS_DELIVERY_STREAM

  """AWS_KINESIS_STREAM integration"""
  AWS_KINESIS_STREAM

  """AWS_KINESIS_STREAM_SHARD integration"""
  AWS_KINESIS_STREAM_SHARD

  """AWS_LAMBDA_AGENT_TRANSACTION integration"""
  AWS_LAMBDA_AGENT_TRANSACTION

  """AWS_LAMBDA_AGENT_TRANSACTION_ERROR integration"""
  AWS_LAMBDA_AGENT_TRANSACTION_ERROR

  """AWS_LAMBDA_EDGE_FUNCTION integration"""
  AWS_LAMBDA_EDGE_FUNCTION

  """AWS_LAMBDA_EVENT_SOURCE_MAPPING integration"""
  AWS_LAMBDA_EVENT_SOURCE_MAPPING

  """AWS_LAMBDA_FUNCTION integration"""
  AWS_LAMBDA_FUNCTION

  """AWS_LAMBDA_FUNCTION_ALIAS integration"""
  AWS_LAMBDA_FUNCTION_ALIAS

  """AWS_LAMBDA_OPERATION integration"""
  AWS_LAMBDA_OPERATION

  """AWS_LAMBDA_REGION integration"""
  AWS_LAMBDA_REGION

  """AWS_LAMBDA_SPAN integration"""
  AWS_LAMBDA_SPAN

  """AWS_LAMBDA_TRACE integration"""
  AWS_LAMBDA_TRACE

  """AWS_RDS_DB_CLUSTER integration"""
  AWS_RDS_DB_CLUSTER

  """AWS_RDS_DB_INSTANCE integration"""
  AWS_RDS_DB_INSTANCE

  """AWS_REDSHIFT_CLUSTER integration"""
  AWS_REDSHIFT_CLUSTER

  """AWS_REDSHIFT_NODE integration"""
  AWS_REDSHIFT_NODE

  """AWS_ROUTE53_HEALTH_CHECK integration"""
  AWS_ROUTE53_HEALTH_CHECK

  """AWS_ROUTE53_ZONE integration"""
  AWS_ROUTE53_ZONE

  """AWS_ROUTE53_ZONE_RECORD_SET integration"""
  AWS_ROUTE53_ZONE_RECORD_SET

  """AWS_S3_BUCKET integration"""
  AWS_S3_BUCKET

  """AWS_S3_BUCKET_REQUESTS integration"""
  AWS_S3_BUCKET_REQUESTS

  """AWS_SES_CONFIGURATION_SET integration"""
  AWS_SES_CONFIGURATION_SET

  """AWS_SES_EVENT_DESTINATION integration"""
  AWS_SES_EVENT_DESTINATION

  """AWS_SES_RECEIPT_FILTER integration"""
  AWS_SES_RECEIPT_FILTER

  """AWS_SES_RECEIPT_RULE integration"""
  AWS_SES_RECEIPT_RULE

  """AWS_SES_RECEIPT_RULE_SET integration"""
  AWS_SES_RECEIPT_RULE_SET

  """AWS_SES_REGION integration"""
  AWS_SES_REGION

  """AWS_SNS_SUBSCRIPTION integration"""
  AWS_SNS_SUBSCRIPTION

  """AWS_SNS_TOPIC integration"""
  AWS_SNS_TOPIC

  """AWS_SQS_QUEUE integration"""
  AWS_SQS_QUEUE

  """AWS_VPC integration"""
  AWS_VPC

  """AWS_VPC_ENDPOINT integration"""
  AWS_VPC_ENDPOINT

  """AWS_VPC_INTERNET_GATEWAY integration"""
  AWS_VPC_INTERNET_GATEWAY

  """AWS_VPC_NAT_GATEWAY integration"""
  AWS_VPC_NAT_GATEWAY

  """AWS_VPC_NETWORK_ACL integration"""
  AWS_VPC_NETWORK_ACL

  """AWS_VPC_NETWORK_INTERFACE integration"""
  AWS_VPC_NETWORK_INTERFACE

  """AWS_VPC_PEERING_CONNECTION integration"""
  AWS_VPC_PEERING_CONNECTION

  """AWS_VPC_ROUTE_TABLE integration"""
  AWS_VPC_ROUTE_TABLE

  """AWS_VPC_SECURITY_GROUP integration"""
  AWS_VPC_SECURITY_GROUP

  """AWS_VPC_SUBNET integration"""
  AWS_VPC_SUBNET

  """AWS_VPC_VPN_CONNECTION integration"""
  AWS_VPC_VPN_CONNECTION

  """AWS_VPC_VPN_TUNNEL integration"""
  AWS_VPC_VPN_TUNNEL

  """AZURE_APP_SERVICE_HOST_NAME integration"""
  AZURE_APP_SERVICE_HOST_NAME

  """AZURE_APP_SERVICE_WEB_APP integration"""
  AZURE_APP_SERVICE_WEB_APP

  """AZURE_COSMOS_DB_ACCOUNT integration"""
  AZURE_COSMOS_DB_ACCOUNT

  """AZURE_FUNCTIONS_APP integration"""
  AZURE_FUNCTIONS_APP

  """AZURE_LOAD_BALANCER integration"""
  AZURE_LOAD_BALANCER

  """AZURE_LOAD_BALANCER_BACKEND integration"""
  AZURE_LOAD_BALANCER_BACKEND

  """AZURE_LOAD_BALANCER_FRONTEND_IP integration"""
  AZURE_LOAD_BALANCER_FRONTEND_IP

  """AZURE_LOAD_BALANCER_INBOUND_NAT_POOL integration"""
  AZURE_LOAD_BALANCER_INBOUND_NAT_POOL

  """AZURE_LOAD_BALANCER_INBOUND_NAT_RULE integration"""
  AZURE_LOAD_BALANCER_INBOUND_NAT_RULE

  """AZURE_LOAD_BALANCER_PROBE integration"""
  AZURE_LOAD_BALANCER_PROBE

  """AZURE_LOAD_BALANCER_RULE integration"""
  AZURE_LOAD_BALANCER_RULE

  """AZURE_MARIADB_SERVER integration"""
  AZURE_MARIADB_SERVER

  """AZURE_MYSQL_SERVER integration"""
  AZURE_MYSQL_SERVER

  """AZURE_POSTGRESQL_SERVER integration"""
  AZURE_POSTGRESQL_SERVER

  """AZURE_REDIS_CACHE integration"""
  AZURE_REDIS_CACHE

  """AZURE_REDIS_CACHE_SHARD integration"""
  AZURE_REDIS_CACHE_SHARD

  """AZURE_SERVICE_BUS_NAMESPACE integration"""
  AZURE_SERVICE_BUS_NAMESPACE

  """AZURE_SERVICE_BUS_QUEUE integration"""
  AZURE_SERVICE_BUS_QUEUE

  """AZURE_SERVICE_BUS_SUBSCRIPTION integration"""
  AZURE_SERVICE_BUS_SUBSCRIPTION

  """AZURE_SERVICE_BUS_TOPIC integration"""
  AZURE_SERVICE_BUS_TOPIC

  """AZURE_SQL_DATABASE integration"""
  AZURE_SQL_DATABASE

  """AZURE_SQL_ELASTIC_POOL integration"""
  AZURE_SQL_ELASTIC_POOL

  """AZURE_SQL_FIREWALL integration"""
  AZURE_SQL_FIREWALL

  """AZURE_SQL_REPLICATION_LINK integration"""
  AZURE_SQL_REPLICATION_LINK

  """AZURE_SQL_RESTORE_POINT integration"""
  AZURE_SQL_RESTORE_POINT

  """AZURE_SQL_SERVER integration"""
  AZURE_SQL_SERVER

  """AZURE_STORAGE_ACCOUNT integration"""
  AZURE_STORAGE_ACCOUNT

  """AZURE_VIRTUAL_NETWORKS integration"""
  AZURE_VIRTUAL_NETWORKS

  """AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION integration"""
  AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION

  """AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE integration"""
  AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE

  """AZURE_VIRTUAL_NETWORKS_PEERING integration"""
  AZURE_VIRTUAL_NETWORKS_PEERING

  """AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS integration"""
  AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS

  """AZURE_VIRTUAL_NETWORKS_ROUTE integration"""
  AZURE_VIRTUAL_NETWORKS_ROUTE

  """AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE integration"""
  AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE

  """AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP integration"""
  AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP

  """AZURE_VIRTUAL_NETWORKS_SECURITY_RULE integration"""
  AZURE_VIRTUAL_NETWORKS_SECURITY_RULE

  """AZURE_VIRTUAL_NETWORKS_SUBNET integration"""
  AZURE_VIRTUAL_NETWORKS_SUBNET

  """CASSANDRA_NODE integration"""
  CASSANDRA_NODE

  """CONSUL_AGENT integration"""
  CONSUL_AGENT

  """COUCHBASE_BUCKET integration"""
  COUCHBASE_BUCKET

  """COUCHBASE_CLUSTER integration"""
  COUCHBASE_CLUSTER

  """COUCHBASE_NODE integration"""
  COUCHBASE_NODE

  """COUCHBASE_QUERY_ENGINE integration"""
  COUCHBASE_QUERY_ENGINE

  """ELASTICSEARCH_NODE integration"""
  ELASTICSEARCH_NODE

  """F5_NODE integration"""
  F5_NODE

  """F5_POOL integration"""
  F5_POOL

  """F5_POOL_MEMBER integration"""
  F5_POOL_MEMBER

  """F5_SYSTEM integration"""
  F5_SYSTEM

  """F5_VIRTUAL_SERVER integration"""
  F5_VIRTUAL_SERVER

  """GCP_APP_ENGINE_SERVICE integration"""
  GCP_APP_ENGINE_SERVICE

  """GCP_BIG_QUERY_DATA_SET integration"""
  GCP_BIG_QUERY_DATA_SET

  """GCP_BIG_QUERY_PROJECT integration"""
  GCP_BIG_QUERY_PROJECT

  """GCP_BIG_QUERY_TABLE integration"""
  GCP_BIG_QUERY_TABLE

  """GCP_CLOUD_FUNCTION integration"""
  GCP_CLOUD_FUNCTION

  """GCP_CLOUD_SQL integration"""
  GCP_CLOUD_SQL

  """GCP_CLOUD_TASKS_QUEUE integration"""
  GCP_CLOUD_TASKS_QUEUE

  """GCP_HTTP_LOAD_BALANCER integration"""
  GCP_HTTP_LOAD_BALANCER

  """GCP_INTERNAL_LOAD_BALANCER integration"""
  GCP_INTERNAL_LOAD_BALANCER

  """GCP_KUBERNETES_CONTAINER integration"""
  GCP_KUBERNETES_CONTAINER

  """GCP_KUBERNETES_NODE integration"""
  GCP_KUBERNETES_NODE

  """GCP_KUBERNETES_POD integration"""
  GCP_KUBERNETES_POD

  """GCP_PUB_SUB_SUBSCRIPTION integration"""
  GCP_PUB_SUB_SUBSCRIPTION

  """GCP_PUB_SUB_TOPIC integration"""
  GCP_PUB_SUB_TOPIC

  """GCP_SPANNER_DATABASE integration"""
  GCP_SPANNER_DATABASE

  """GCP_SPANNER_INSTANCE integration"""
  GCP_SPANNER_INSTANCE

  """GCP_STORAGE_BUCKET integration"""
  GCP_STORAGE_BUCKET

  """GCP_TCP_SSL_PROXY_LOAD_BALANCER integration"""
  GCP_TCP_SSL_PROXY_LOAD_BALANCER

  """GCP_VIRTUAL_MACHINE_DISK integration"""
  GCP_VIRTUAL_MACHINE_DISK

  """KAFKA_BROKER integration"""
  KAFKA_BROKER

  """KAFKA_TOPIC integration"""
  KAFKA_TOPIC

  """KUBERNETES_CLUSTER integration"""
  KUBERNETES_CLUSTER

  """MEMCACHED_INSTANCE integration"""
  MEMCACHED_INSTANCE

  """MSSQL_INSTANCE integration"""
  MSSQL_INSTANCE

  """MYSQL_NODE integration"""
  MYSQL_NODE

  """NA integration"""
  NA

  """NGINX_SERVER integration"""
  NGINX_SERVER

  """ORACLE_DB_INSTANCE integration"""
  ORACLE_DB_INSTANCE

  """POSTGRE_SQL_INSTANCE integration"""
  POSTGRE_SQL_INSTANCE

  """RABBIT_MQ_CLUSTER integration"""
  RABBIT_MQ_CLUSTER

  """RABBIT_MQ_EXCHANGE integration"""
  RABBIT_MQ_EXCHANGE

  """RABBIT_MQ_NODE integration"""
  RABBIT_MQ_NODE

  """RABBIT_MQ_QUEUE integration"""
  RABBIT_MQ_QUEUE

  """REDIS_INSTANCE integration"""
  REDIS_INSTANCE

  """VARNISH_INSTANCE integration"""
  VARNISH_INSTANCE
}

"""The error for dissociating notification channels from a policy."""
type AlertsNotificationChannelsRemoveFromPolicyError {
  """Error description."""
  description: String!

  """Error type."""
  errorType: AlertsNotificationChannelsRemoveFromPolicyErrorType!

  """Notification channel ID."""
  notificationChannelId: ID!
}

"""Metadata associated with the alert condition in a quickstart"""
type Nr1CatalogQuickstartAlertConditionMetadata implements Nr1CatalogQuickstartComponentMetadata {
  """A short form description for the alert condition"""
  description: String

  """The human-readable name for the alert condition"""
  displayName: String

  """Determines the type of alert condition that will be created"""
  type: Nr1CatalogQuickstartAlertConditionType!
}

"""Customer-facing status of an export"""
enum HistoricalDataExportStatus {
  """Export Canceled"""
  CANCELED

  """Export Failed"""
  COMPLETE_FAILED

  """Export Successful"""
  COMPLETE_SUCCESS

  """Export in progress"""
  IN_PROGRESS

  """Unknown Status of this Export"""
  UNKNOWN

  """Export waiting to start"""
  WAITING
}

"""The input object used to represent a remaining entities rule."""
input WorkloadRemainingEntitiesRuleInput {
  """The input object used to represent a rollup strategy."""
  rollup: WorkloadRemainingEntitiesRuleRollupInput!
}

"""
Metadata associated with the Nerdpack that is available in the New Relic One Catalog
"""
type Nr1CatalogNerdpackMetadata {
  """Additional information about the Nerdpack"""
  additionalInfo(
    """The output format for the additional information"""
    format: Nr1CatalogRenderFormat = MARKDOWN
  ): String

  """
  The list of categories for filtering, searching, and grouping associated with the Nerdpack
  """
  categories: [Nr1CatalogCategory!]!

  """The list of category terms associated with the Nerdpack"""
  categoryTerms: [String!]!

  """
  A short form description for the New Relic One Nerdpack. Used throughout the platform when displaying the Nerdpack.
  """
  description: String

  """
  The long form description used in the catalog to detail the functionality of the Nerdpack
  """
  details: String

  """
  The human-readable name for the Nerdpack. Used throughout the New Relic One platform when displaying the Nerdpack.
  """
  displayName: String

  """Additional documentation for the Nerdpack"""
  documentation(
    """The output format for the documentation"""
    format: Nr1CatalogRenderFormat = MARKDOWN
  ): String

  """The corresponding icon for the Nerdpack"""
  icon: Nr1CatalogIcon

  """
  The types of artifacts (e.g. nerdlet, launcher, etc) contained in the nerdpack
  """
  includedArtifactTypes: [String]

  """The list of keywords for filtering and searching"""
  keywords: [String!]!

  """Information related to items in the nerdpack"""
  nerdpackItems: [Nr1CatalogNerdpackItem!]!

  """A list of previews for the Nerdpack, such as screenshots."""
  previews: [Nr1CatalogPreview!]!

  """The date the Nerdpack was published"""
  publishDate: DateTime

  """The date the Nerdpack was deployed"""
  releaseDate: DateTime @deprecated(reason: "This field is no longer supported. Please use publishDate instead.")

  """
  The URL to the repository where the source code for the Nerdpack can be found.
  """
  repository: String

  """Contact information to get support for the Nerdpack"""
  support: Nr1CatalogSupportChannels!

  """A tagline for the Nerdpack"""
  tagline: String

  """The nerdpack version the metadata corresponds with"""
  version: SemVer!

  """A description of changes for this version of the Nerdpack"""
  whatsNew: Nr1CatalogReleaseNote
}

"""
An object that contains the overall installation status that is created from within the newrelic-cli.
"""
type InstallationInstallStatus {
  """
  The version of the newrelic-cli that was used for a given installation attempt.
  """
  cliVersion: SemVer!

  """Refers to the source of the installation."""
  deployedBy: String!

  """Whether or not the installation is using a proxy."""
  enabledProxy: Boolean!

  """The error returned for a given installation attempt."""
  error: InstallationStatusError!

  """The host name of the customer's machine."""
  hostName: String!

  """The unique ID that corresponds to an install status."""
  installId: ID!

  """The version of the open-install-library that is being used."""
  installLibraryVersion: SemVer!

  """Whether or not the installation is supported on the host machine."""
  isUnsupported: Boolean!

  """The kernel architecture of the customer's machine."""
  kernelArch: String!

  """The kernel version of the customer's machine."""
  kernelVersion: SemVer!

  """The path to the log file on the customer's host."""
  logFilePath: String!

  """The OS of the customer's machine."""
  os: String!

  """The platform name provided by the open-install-library."""
  platform: String!

  """The platform family name provided by the open-install-library."""
  platformFamily: String!

  """The platform version provided by the open-install-library."""
  platformVersion: SemVer!

  """
  A URL generated by the newrelic-cli that redirects to the appropriate entity once an installation is complete.
  """
  redirectUrl: String!

  """The state of the installation."""
  state: InstallationInstallStateType!

  """Whether or not the installation is a targeted install."""
  targetedInstall: Boolean!

  """The timestamp for when the install event occurred."""
  timestamp: EpochSeconds
}

"""The advanced options inputs available for a Script Browser monitor"""
input SyntheticsScriptBrowserMonitorAdvancedOptionsInput {
  """Emulate a device"""
  deviceEmulation: SyntheticsDeviceEmulationInput

  """Capture a screenshot during job execution"""
  enableScreenshotOnFailureAndScript: Boolean
}

"""Run state of the monitor"""
enum SyntheticsMonitorStatus {
  """Monitor disabled runs status of a monitor"""
  DISABLED

  """Enabled status of a monitor"""
  ENABLED

  """Alerts muted status of a monitor"""
  MUTED
}

"""An external service seen by an APM Application."""
type ApmExternalServiceEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType
  externalSummary: ApmExternalServiceSummaryData @deprecated(reason: "This field is deprecated.")

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The host of the external service."""
  host: String

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Accounts that will be used to get entities from."""
type WorkloadScopeAccounts {
  """A list of accounts that will be used to get entities from."""
  accountIds: [Int!]!
}

"""Elemental MediaConvert"""
input CloudAwsMediaconvertIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Run Integration"""
type CloudGcpRunIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Kubernetes Engine Integration"""
type CloudGcpKubernetesIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Subscription result."""
type NerdpackSubscribeResult {
  """Nerdpack to be subscribed to."""
  nerdpack: NerdpackData!

  """Subscription result per account."""
  resultsPerAccount: [NerdpackMutationResultPerAccount]

  """Tag associated with the version."""
  tag: NerdpackTagName
}

"""The input object to create one or more keys."""
input ApiAccessCreateInput {
  """
  Ingest keys are used by agents to report data about your applications to New Relic. Each ingest key input entered here must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
  """
  ingest: [ApiAccessCreateIngestKeyInput]

  """
  Create user keys. You can optionally add a name or notes to your key, which can be updated later.
  """
  user: [ApiAccessCreateUserKeyInput]
}

"""Type of rule"""
enum AiDecisionsRuleType {
  """Rule type is explicit"""
  EXPLICIT

  """Rule type is global"""
  GLOBAL

  """Rule type is implicit"""
  IMPLICIT
}

"""Error details when processing events to metrics rule requests."""
type EventsToMetricsError {
  """A detailed error message."""
  description: String

  """The category of error that occurred."""
  reason: EventsToMetricsErrorReason
}

"""Type of update error"""
enum AiWorkflowsUpdateErrorType {
  """We couldn't find a channel with the given id"""
  CHANNEL_NOT_FOUND

  """A workflow with this name already exists"""
  DUPLICATE

  """One or more of the parameters you provided are incorrect"""
  INVALID_PARAMETER

  """
  This account is missing the required entitlement(s) to perform this action
  """
  MISSING_ENTITLEMENT

  """This account in not authorized to perform this action"""
  UNAUTHORIZED_ACCOUNT

  """The given channel id represents an unsupported channel type"""
  UNSUPPORTED_CHANNEL_TYPE

  """The parameter provided does not have a valid form"""
  VALIDATION_ERROR
}

"""
All the details necessary to configure an integration to connect to the Infinite Tracing Trace API (HTTP 1.1) endpoint.
"""
type EdgeHttpsEndpointDetail implements EdgeEndpointDetail {
  """Full host name that is used to connect to the endpoint."""
  host: String!

  """Port that is used to connect to the endpoint."""
  port: Int!

  """
  Full URL used to send data to the endpoint. For instance, if you were using the
  [Java Telemetry SDK](https://docs.newrelic.com/docs/data-ingest-apis/get-data-new-relic/new-relic-sdks/telemetry-sdks-send-custom-telemetry-data-new-relic)
  this is the data you would use to create a `URI` to pass to the [`uriOverride`](https://github.com/newrelic/newrelic-telemetry-sdk-java/blob/85e526cf6fbba0640f20d2d7a3ab0dab89f958b3/telemetry_core/src/main/java/com/newrelic/telemetry/AbstractSenderBuilder.java#L37-L48)
  method.
  """
  url: String!
}

"""
The result of the entityRelationshipUserDefinedCreateOrReplace mutation.
"""
type EntityRelationshipUserDefinedCreateOrReplaceResult {
  """The list of errors that occurred when executing the mutation."""
  errors: [EntityRelationshipUserDefinedCreateOrReplaceResultError!]
}

"""Provides fields to set general APM application settings."""
input AgentApplicationSettingsApmConfigInput {
  """The desired target for the APDEX measurement of this application."""
  apdexTarget: Float

  """
  Sets if installed agents should override local settings with ones set here.
  """
  useServerSideConfig: Boolean
}

"""Billboard widget threshold."""
type DashboardBillboardWidgetThreshold {
  """Alert severity."""
  alertSeverity: DashboardAlertSeverity

  """Alert value."""
  value: Float
}

"""Options applied to the variable."""
type DashboardVariableOptions {
  """
  Only applies to variables of type NRQL. With this turned on, the time range for the NRQL query will override the time picker on dashboards and other pages. Turn this off to use the time picker as normal.
  """
  ignoreTimeRange: Boolean
}

"""Fitlers on grants id"""
input MultiTenantAuthorizationGrantIdInputFilter {
  """Performs an equals operation"""
  eq: Int!
}

"""Response error object"""
type AiNotificationsResponseError {
  """Error description"""
  description: String!

  """Error details"""
  details: String!

  """Error type"""
  type: AiNotificationsErrorType!
}

"""A contact channel where users can get support via email"""
type Nr1CatalogEmailContactChannel {
  """The email address for email support"""
  address: String!
}

"""A filter for Account Status"""
input OrganizationAccountStatusFilterInput {
  """An account status"""
  eq: OrganizationAccountStatus!
}

"""
Deprecated.  By default, condition is evaluated based on each query's returned value.  To aggregate data in time "windows", use `signal.slideBy`.

Function used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation will be opened.
"""
enum AlertsNrqlStaticConditionValueFunction {
  """Condition is evaluated based on each query's returned value."""
  SINGLE_VALUE @deprecated(reason: "Default behavior.")

  """
  Condition is evaluated based on the sum of each query's returned values over the specified thresholdDuration.
  """
  SUM @deprecated(reason: "Replaced by `signal.slideBy`.")
}

"""Expected error types that can be returned by delete operation."""
type DashboardDeleteError {
  """Error description."""
  description: String

  """Error type."""
  type: DashboardDeleteErrorType!
}

"""The input object representing the sort parameters for groups"""
input MultiTenantIdentityGroupSortInput {
  """Order by which to sort groups"""
  direction: MultiTenantIdentitySortDirection

  """Group attribute to sort on"""
  key: MultiTenantIdentitySortKeyEnum
}

type StreamingExportAccountStitchedFields {
  """Get the information for a specific streaming rule"""
  streamingRule(
    """The streaming rule you want details about"""
    id: ID!
  ): StreamingExportRule

  """List the streaming rules for the given account"""
  streamingRules: [StreamingExportRule]
}

"""The result of the deployment search query."""
type ChangeTrackingDeploymentSearchResult {
  """The list of deployment events in the given time window."""
  results: [ChangeTrackingDeployment]
}

"""A filter for account shares"""
input OrganizationAccountShareFilterInput {
  """Filter by account id"""
  accountId: OrganizationAccountIdInput!

  """Filter by target id"""
  targetId: OrganizationTargetIdInput
}

"""Specifies the supported entity types to be all entity types"""
type Nr1CatalogAllSupportedEntityTypes implements Nr1CatalogSupportedEntityTypes {
  """The level of support entity types. Always set to ALL"""
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"""Input type for FixedEndsWith expression"""
input AiDecisionsFixedEndsWithInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Value to be used in comparison."""
  value: String!
}

"""An entity user-defined relationship."""
type EntityRelationshipUserDefinedEdge implements EntityRelationshipEdge {
  """The time the relationship was created."""
  createdAt: EpochMilliseconds!

  """The user that created the relationship."""
  createdByUser: UserReference

  """The source entity of the relationship."""
  source: EntityRelationshipVertex!

  """The target entity of the relationship."""
  target: EntityRelationshipVertex!

  """The type of the relationship."""
  type: EntityRelationshipEdgeType!
}

"""Provides all the available filters on the role scope"""
input MultiTenantAuthorizationRoleScopeInputFilter {
  """performs an equals operation"""
  eq: MultiTenantAuthorizationRoleScopeEnum!
}

"""
List of groups representing named sets of New Relic users within an authentication domain
"""
type MultiTenantIdentityUserGroups {
  """User groups"""
  items: [MultiTenantIdentityUserGroup!]!

  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""The result of a Script Browser monitor create mutation"""
type SyntheticsScriptBrowserMonitorCreateMutationResult {
  """Errors that occurred during Script Browser monitor create mutation"""
  errors: [SyntheticsMonitorCreateError]!

  """The resulting script browser monitor"""
  monitor: SyntheticsScriptBrowserMonitor
}

"""Data required to create a span attribute trace filter rule."""
input EdgeCreateSpanAttributeRuleInput {
  """
  The action that this trace filter rule takes if it matches the provided attribute name and value
  """
  action: EdgeTraceFilterAction!

  """Name of the attribute to match on"""
  key: String!

  """
  Type of match to apply to the attribute name (EQUALS, LIKE). Key match type is required.
  """
  keyOperator: EdgeSpanAttributeKeyOperator!

  """
  Value of the attribute to match on. Value is required unless the `SpanAttributeValueOperator` is set to `IS_NOT_NULL`
  """
  value: String

  """
  Type of match to apply to the attribute value (EQUALS, LIKE, IS_NOT_NULL).
  """
  valueOperator: EdgeSpanAttributeValueOperator!
}

"""The input for creating a new VictorOps notification channel."""
input AlertsVictorOpsNotificationChannelCreateInput {
  """Key."""
  key: SecureValue!

  """Notification channel name."""
  name: String!

  """Route key."""
  routeKey: String!
}

"""
Input type that represents a possible value for a variable of type ENUM.
"""
input DashboardVariableEnumItemInput {
  """A human-friendly display string for this value."""
  title: String

  """A possible variable value"""
  value: String!
}

"""
A data source (i.e., New Relic entity) that is associated with this trace observer. Currently, we support adding Browser, Lambda, and Mobile entities as data sources.
"""
type EdgeDataSource {
  """The entity representing this data source."""
  entity: EntityOutline

  """
  The status of whether data is being sent to this trace observer for this data source.
  """
  status: EdgeDataSourceStatusType!
}

"""An anomaly detected with respect to an attribute of a span."""
type DistributedTracingSpanAnomaly {
  """The value of the span attribute which was detected as being anomalous."""
  anomalousValue: Float!

  """The attribute of the span which was detected as being anomalous."""
  anomalyType: DistributedTracingSpanAnomalyType!

  """The average value for the attribute on similar spans."""
  averageMeasure: Float!
}

"""
Metadata associated with the quickstart that is available in New Relic I/O
"""
type Nr1CatalogQuickstartMetadata {
  """Authors for the quickstart"""
  authors: [Nr1CatalogAuthor!]!

  """
  The list of categories for filtering, searching, and grouping associated with the quickstart
  """
  categories: [Nr1CatalogCategory!]!

  """The list of category terms associated with the quickstart"""
  categoryTerms: [String!]!

  """The list of data sources associated with the quickstart"""
  dataSources: [Nr1CatalogDataSource!]!

  """
  A short form description for the quickstart. Used throughout the platform when displaying the quickstart.
  """
  description: String

  """
  The human-readable name for the quickstart. Used throughout the New Relic One platform when displaying the quickstart.
  """
  displayName: String

  """The corresponding icon for the quickstart"""
  icon: Nr1CatalogIcon

  """Information about how a quickstart is installed"""
  installer: Nr1CatalogInstaller @deprecated(reason: "This field is in a deprecation period. Please refer to `dataSources` for how a quickstart is installed.")

  """A list of keywords for filtering and searching"""
  keywords: [String!]!

  """List of components in a quickstart"""
  quickstartComponents: [Nr1CatalogQuickstartComponent!]!

  """The URL friendly name of the quickstart"""
  slug: String!

  """A short summary detailing the functionality of the quickstart"""
  summary: String
}

"""Fields related to transaction traces and data collection for traces."""
input AgentApplicationSettingsTransactionTracerInput {
  """DEPRECATED: Please use capture_memcache_keys on parent type"""
  captureMemcacheKeys: Boolean

  """
  If true, this enables the transaction tracer feature, enabling collection of transaction traces.
  """
  enabled: Boolean

  """
  If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately.
  """
  explainEnabled: Boolean

  """
  Relevant only when explain_enabled is true. Can be set to automatic configuration (APDEX_F) or manual (see explainThresholdValue).
  """
  explainThresholdType: AgentApplicationSettingsThresholdTypeEnum

  """
  Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true and explainThresholdType is set to VALUE.
  """
  explainThresholdValue: Seconds

  """
  Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode.
  """
  logSql: Boolean

  """Obfuscation level for SQL queries reported in transaction trace nodes."""
  recordSql: AgentApplicationSettingsRecordSqlEnum

  """
  Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold.
  """
  stackTraceThreshold: Seconds

  """
  Relevant only when transaction tracer is enabled. Can be set to automatic configuration (APDEX_F) or manual (see TransactionThresholdValue).
  """
  transactionThresholdType: AgentApplicationSettingsThresholdTypeEnum

  """
  Threshold (in seconds) that transactions with a duration longer than this threshold are eligible for transaction traces.  Relevant only when transaction tracer is enabled and transaction_threshold_type is set to VALUE.
  """
  transactionThresholdValue: Seconds
}

"""
Configuration that defines the signal that the NRQL condition will use to evaluate.
"""
type AlertsNrqlConditionSignal {
  """
  How long we wait for data that belongs in each aggregation window. Depending
  on your data, a longer delay may increase accuracy but delay notifications.
  
  Use `aggregationDelay` with the `EVENT_FLOW` and `CADENCE` methods. The maximum
  delay is **1200 seconds** (20 minutes) when using `EVENT_FLOW` and **3600 seconds**
  (60 minutes) when using `CADENCE`. In both cases, the minimum delay is **0 seconds**
  and the default is **120 seconds**.
  """
  aggregationDelay: Seconds

  """
  The method that determines when we consider an aggregation window to be complete
  so that we can evaluate the signal for violations. Default is `EVENT_FLOW`.
  """
  aggregationMethod: AlertsSignalAggregationMethod

  """
  How long we wait after each data point arrives to make sure we've processed
  the whole batch.
  
  Use `aggregationTimer` with the `EVENT_TIMER` method. The timer value can range
  from **5 seconds** to **1200 seconds** (20 minutes); the default is **60 seconds**.
  """
  aggregationTimer: Seconds

  """
  Aggregation window controls the duration of the time window used to evaluate the NRQL query, in seconds.
  The value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.
  """
  aggregationWindow: Seconds

  """
  How long we wait until the signal starts evaluating. The maximum delay is **7200 seconds** (120 minutes).
  """
  evaluationDelay: Seconds

  """
  Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.
  
  By default, we evaluate the NRQL query in one-minute time windows. The start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.
  
  This value is the number of time windows we look back at the aggregated data.
  
  Example: With an `evaluationOffset` of 3 and a 1 minute aggregation window, the NRQL time window applied to your query will be:
  
  `SINCE 3 minutes ago UNTIL 2 minutes ago`
  """
  evaluationOffset: Int @deprecated(reason: "Superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.")

  """
  Option that determines the type of value that should be used to fill gaps (empty windows). Defaults to STATIC.
  
  Outlier NRQL conditions may only use NONE.
  """
  fillOption: AlertsFillOption

  """
  If using the static fill option, this the value used for filling. Defaults to 0.
  """
  fillValue: Float

  """
  This setting gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends.
  
  Not used for Outlier NRQL conditions.
  """
  slideBy: Seconds
}

"""The advanced options available for a Simple (ping) monitor"""
type SyntheticsSimpleMonitorAdvancedOptions {
  """Custom headers to use in monitor job"""
  customHeaders: [SyntheticsCustomHeader]

  """Categorize redirects during a monitor job as a failure"""
  redirectIsFailure: Boolean

  """Validation text for monitor to search for at given URI"""
  responseValidationText: String

  """
  Monitor should skip default HEAD request and instead use GET verb in check
  """
  shouldBypassHeadRequest: Boolean

  """Monitor should validate SSL certificate chain"""
  useTlsValidation: Boolean
}

"""The application wrapper."""
type KeyTransactionApplication {
  """The application outline."""
  entity: EntityOutline

  """The guid of the application."""
  guid: EntityGuid!
}

"""Update workflow mutation response including errors"""
type AiWorkflowsUpdateWorkflowResponse {
  """
  A list of errors that occurred while performing the update workflow action
  """
  errors: [AiWorkflowsUpdateResponseError!]!

  """Successfully updated workflow"""
  workflow: AiWorkflowsWorkflow
}

"""Sort object"""
input AiNotificationsVariableSorter {
  """direction"""
  direction: AiNotificationsSortOrder!

  """field"""
  field: AiNotificationsVariableFields!
}

"""New subscriptions input."""
input NerdpackSubscribeAccountsInput {
  """List of accounts to be subscribed."""
  accountIds: [Int!]!

  """Tag of the Nerdpack version to be subscribed to."""
  tag: NerdpackTagName!
}

"""The value and metadata of a single entity tag."""
type EntityTagValueWithMetadata {
  """Whether or not the tag can be mutated by the user."""
  mutable: Boolean

  """The tag value."""
  value: String
}

"""A list of grants"""
type MultiTenantAuthorizationGrantCollection {
  """List of grants"""
  items: [MultiTenantAuthorizationGrant!]!

  """
  an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

"""
Dissent accounts to usage of the Incident Intelligence product in the EU/FedRAMP (removes the consent marking).
"""
type IncidentIntelligenceEnvironmentDissentAccounts {
  """The list of previously consented accounts, now dissented"""
  dissentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  """The outcome of the dissent marking"""
  result: IncidentIntelligenceEnvironmentDissentAccountsResult!
}

"""
A structured representation of a stack trace of a crash in a mobile application.
"""
type StackTraceMobileCrashStackTrace {
  """Stack trace frames."""
  frames: [StackTraceMobileCrashStackTraceFrame]
}

"""Blueprint for a search operation"""
input AiDecisionsSearchBlueprint {
  """Expression to use to compare incidents."""
  expression: AiDecisionsRuleExpressionInput!

  """
  Maximum number of incidents to query for each available incident selector
  """
  limit: Int

  """Duration to consider resources for."""
  retentionWindowLength: Milliseconds
}

"""A Broken Links monitor resulting from a Broken Links monitor mutation"""
type SyntheticsBrokenLinksMonitor {
  """The creation time of the monitor in millis"""
  createdAt: EpochMilliseconds

  """The unique client identifier for the Synthetics Monitor in New Relic"""
  guid: EntityGuid

  """The unique identifier of the monitor within the Synthetics domain"""
  id: ID

  """The locations the monitor runs from"""
  locations: SyntheticsLocations

  """The last modification time of the monitor in millis"""
  modifiedAt: EpochMilliseconds

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The uri the monitor runs against"""
  uri: String
}

"""Single NRQL query for a widget."""
type DashboardWidgetNrqlQuery {
  """New Relic account ID to issue the query against."""
  accountId: Int!

  """NRQL formatted query."""
  query: Nrql!
}

"""Summary statistics about the Infra Host."""
type InfrastructureHostSummaryData {
  """Total CPU utilization as a percentage."""
  cpuUtilizationPercent: Float

  """The cumulative disk fullness percentage."""
  diskUsedPercent: Float

  """Total memory utilization as a percentage."""
  memoryUsedPercent: Float

  """The number of bytes per second received during the sampling period."""
  networkReceiveRate: Float

  """The number of bytes sent per second during the sampling period."""
  networkTransmitRate: Float

  """Number of services running on the host."""
  servicesCount: Int
}

"""Provides all the available filters on permissions"""
input MultiTenantAuthorizationPermissionFilter {
  """Filter permissions by role id"""
  roleId: MultiTenantAuthorizationPermissionFilterRoleIdInput
}

"""
A configuration setting used ignore status codes associated with different hosts.
"""
type AgentApplicationSettingsIgnoredStatusCodeRule {
  """An array of hosts to apply the status code rule to."""
  hosts: [String!]

  """An array of status codes to be be ignored on these hosts."""
  statusCodes: [String!]
}

"""
The type of Span Anomaly being reported (currently only Duration is supported).
"""
enum DistributedTracingSpanAnomalyType {
  """An anomaly type related to the duration of the span."""
  DURATION
}

"""Result of a notification test"""
type AiNotificationsChannelTestResponse {
  """Extra details (if available)"""
  details: String

  """Test response error"""
  error: AiNotificationsError

  """Deprecated list of errors"""
  errors: [AiNotificationsError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """The evidence (url for example) of the channel being created."""
  evidence: String

  """Test result - success or failure"""
  result: AiNotificationsResult!
}

"""
A structured representation of a stack trace for a Browser application.
"""
type StackTraceBrowserStackTrace {
  """Stack trace frames."""
  frames: [StackTraceBrowserStackTraceFrame]
}

"""The result of a Cert Check monitor create mutation"""
type SyntheticsCertCheckMonitorCreateMutationResult {
  """Errors that occurred during Cert Check monitor create mutation"""
  errors: [SyntheticsMonitorCreateError]!

  """The resulting Cert Check monitor"""
  monitor: SyntheticsCertCheckMonitor
}

"""A key-value entry representing an attribute name and value."""
type AiTopologyDefiningAttribute {
  """Key of entry."""
  key: String!

  """Value of entry."""
  value: String!
}

"""Input type for RelativeLevenshtein expression"""
input AiDecisionsRelativeLevenshteinInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Int!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""List of active users belonging to a group"""
type MultiTenantIdentityGroupUsers {
  """Active users within group"""
  items: [MultiTenantIdentityGroupUser!]!

  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""A step that will be added to the monitor script"""
type SyntheticsStep {
  """The position of the step within the script ranging from 1-100."""
  ordinal: Int!

  """The type of step to be added to the script"""
  type: SyntheticsStepType!

  """The metadata values related to the step"""
  values: [String!]
}

"""Result of an allow list mutation."""
type NerdpackAllowListResult {
  """Nerdpack to allow to subscribe."""
  nerdpack: NerdpackData!

  """Subscription allow list result per account."""
  resultsPerAccount: [NerdpackMutationResultPerAccount]
}

"""Outcome of the mutation"""
enum Nr1CatalogMutationResult {
  """The mutation failed"""
  ERROR

  """The mutation was processed successfully"""
  OK
}

"""Result of a Synthetics purge private location queue mutation"""
type SyntheticsPrivateLocationPurgeQueueResult {
  """An array containing errors resulting from the mutation, if any"""
  errors: [SyntheticsPrivateLocationMutationError]
}

"""Interconnect"""
input CloudGcpInterconnectIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Information required to unlink (remove) a linked account."""
input CloudUnlinkAccountsInput {
  """The linked account identifier."""
  linkedAccountId: Int!
}

"""The alert violation for an entity"""
type EntityAlertViolation {
  """
  A link to the agent in the time window in which the violation occurred.
  """
  agentUrl: String

  """The severity of the violation."""
  alertSeverity: EntityAlertSeverity

  """Timestamp of when the violation was closed."""
  closedAt: EpochMilliseconds

  """The description of the violation."""
  label: String

  """The priority of the violation."""
  level: String

  """Timestamp of when the violation was opened."""
  openedAt: EpochMilliseconds

  """The id of the violation."""
  violationId: EntityAlertViolationInt

  """A link to the violation if it is connected to an incident."""
  violationUrl: String
}

"""A container for the various support channels"""
type Nr1CatalogSupportChannels {
  """A support channel available via the community"""
  community: Nr1CatalogCommunityContactChannel

  """A support channel available via email"""
  email: Nr1CatalogEmailContactChannel

  """A support channel available via an issues page"""
  issues: Nr1CatalogIssuesContactChannel
}

"""
The `SemVer` scalar represents a version designation conforming to the SemVer specification.
"""
scalar SemVer

"""Key Vault Integration"""
type CloudAzureKeyvaultIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input type for assignment search filter"""
input ErrorsInboxAssignmentSearchFilterInput {
  """Filter by assigned user email."""
  userEmail: String

  """Filter by assigned user id"""
  userId: Int
}

"""
The input object representing parameters for the allowed capability filter
"""
input MultiTenantIdentityAllowsCapabilityInput {
  """
  A list of capabilities. If set, groups with atleast one of the given capabilities granted on them for the user will be returned. Otherwise, only groups with read access granted are returned.
  """
  in: [MultiTenantIdentityCapability!]
}

"""
The result of which drop rules were successfully and unsuccessfully deleted.
"""
type NrqlDropRulesDeleteDropRuleResult {
  """Rules that were not deleted and why."""
  failures: [NrqlDropRulesDeleteDropRuleFailure]

  """Rules that were successfully deleted."""
  successes: [NrqlDropRulesDropRule]
}

type ErrorsInboxActorStitchedFields {
  """Retrieve metadata on a specific error group."""
  errorGroup(
    """Error event that will be encoded to a unique error group id."""
    errorEvent: ErrorsInboxErrorEventInput

    """The unique identifier of the group being fetched."""
    id: ID
  ): ErrorsInboxErrorGroup

  """List of error group state values"""
  errorGroupStateTypes: [ErrorsInboxErrorGroupStateTypeResult!]

  """Search error groups."""
  errorGroups(
    """Current query cursor"""
    cursor: String

    """Filter to specified entities."""
    entityGuids: [EntityGuid!]

    """Set of filters to be applied to the search."""
    filter: ErrorsInboxErrorGroupSearchFilterInput

    """Query string to filter the error groups by"""
    query: String

    """Sort order for results. (limit: 1)"""
    sortBy: [ErrorsInboxErrorGroupSortOrderInput!]

    """Time Window for search"""
    timeWindow: TimeWindowInput
  ): ErrorsInboxErrorGroupsResponse
}

"""Glue Integration"""
type CloudAwsGlueIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""container for authentication domains enabling cursor based pagination"""
type AuthorizationManagementAuthenticationDomainSearch {
  """containers of users and groups"""
  authenticationDomains: [AuthorizationManagementAuthenticationDomain!]!

  """
  an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""A third party service entity."""
type ThirdPartyServiceEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Widgets in a Dashboard Page."""
type DashboardWidget {
  """
  Typed widgets are area, bar, billboard, line, markdown, pie, and table.
  """
  configuration: DashboardWidgetConfiguration

  """ID of the widget."""
  id: ID!

  """The widget's position and size in the dashboard."""
  layout: DashboardWidgetLayout

  """
  Entities related to the widget. Currently only supports one Dashboard entity guid, but may allow other cases in the future.
  """
  linkedEntities: [EntityOutline]

  """
  Untyped widgets are all other widgets, such as bullet, histogram, inventory, etc.
  """
  rawConfiguration: DashboardWidgetRawConfiguration!

  """A title for the widget."""
  title: String

  """Specifies how this widget will be visualized."""
  visualization: DashboardWidgetVisualization!
}

"""The monitor values that can be updated on a simple (ping) monitor"""
input SyntheticsUpdateSimpleMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsSimpleMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]

  """The uri the monitor runs against"""
  uri: String
}

"""
Determines how incidents are created for critical violations of the conditions contained in the policy.
"""
enum AlertsIncidentPreference {
  """
  A condition will create a condition-level incident when it violates its critical threshold.
  Other violating conditions will create their own incidents.
  """
  PER_CONDITION

  """
  Each target of each condition will create an entity-level incident upon critical violation.
  Other violating targets will create their own incidents (even on the same condition).
  """
  PER_CONDITION_AND_TARGET

  """
  A condition will create a policy-level incident when it violates its critical threshold.
  Other violating conditions will be grouped into this incident.
  """
  PER_POLICY
}

"""A Browser Application entity."""
type BrowserApplicationEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The type of Browser agent installed for this application."""
  agentInstallType: BrowserAgentInstallType

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """The ID of the Browser App."""
  applicationId: Int

  """Access general properties for the application."""
  browserProperties: AgentApplicationSettingsBrowserProperties

  """Settings that are common across browser applications."""
  browserSettings: AgentApplicationSettingsBrowserBase

  """Summary statistics about the Browser App."""
  browserSummary: BrowserApplicationSummaryData

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """An Exception that occurred in your Browser Application."""
  exception(
    """A unique exception identifier."""
    fingerprint: Int!

    """
    The time window (60 minutes maximum) in which to search for the browser exception. Defaults to standard NRQL query window.
    """
    timeWindow: TimeWindowInput
  ): StackTraceBrowserException

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """Retrieves the entity metric grouping issues."""
  metricGroupingIssues(
    """End time."""
    endTime: EpochMilliseconds

    """Metric normalization rule ids"""
    metricNormalizationRuleIds: [Int]

    """Start time."""
    startTime: EpochMilliseconds
  ): [MetricNormalizationRuleMetricGroupingIssue!]

  """Retrieves a rule"""
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  """Retrieves the rules for the application."""
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The running versions of the agent in the Browser App."""
  runningAgentVersions: BrowserApplicationRunningAgentVersions

  """
  The allow list for browser applications that contains a set of allowed url segments that will appear in groupings on the Page views and AJAX pages.
  """
  segmentAllowListAggregate(
    """Filter the lists that you would want to see"""
    filters: AgentApplicationSegmentsSegmentAllowListFilters
  ): AgentApplicationSegmentsBrowserSegmentAllowList

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """The ID of the APM Application that serves this Browser App."""
  servingApmApplicationId: Int

  """Configuration settings for the Browser App"""
  settings: BrowserApplicationSettings

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""The input object representing the filter parameters for groups"""
input UserManagementGroupFilterInput {
  """Filter groups by display name"""
  displayName: UserManagementDisplayNameInput

  """Filter groups by group ID"""
  id: UserManagementGroupIdInput
}

"""Autogenerated return type of AddUsersToGroups."""
type UserManagementAddUsersToGroupsPayload {
  """The group(s) updated."""
  groups: [UserManagementGroup!]
}

"""Create error description"""
type AiWorkflowsCreateResponseError implements AiWorkflowsResponseError {
  """The error description"""
  description: String!

  """The error type"""
  type: AiWorkflowsCreateErrorType!
}

"""Kinesis Data Analytics"""
input CloudAwsKinesisanalyticsIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""An object that represents a tag key-values pair."""
input TaggingTagInput {
  """The tag key."""
  key: String!

  """The tag values."""
  values: [String]
}

"""
Successfully updated trace observers, or one or more error responses if there were issues.
"""
type EdgeUpdateTraceObserverResponse {
  """
  Errors that may occur when creating a `TraceObserver`. Defaults to `null` in case of success.
  """
  errors: [EdgeUpdateTraceObserverResponseError]

  """
  The trace observer defined in `UpdateTraceObserverInput`. Defaults to `null` in case of failure.
  """
  traceObserver: EdgeTraceObserver
}

"""ECS Integration"""
type CloudEcsIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The response for associating notification channels with a policy."""
type AlertsNotificationChannelsAddToPolicyResponse {
  """Errors."""
  errors: [AlertsNotificationChannelsAddToPolicyError!]!

  """Notification channels."""
  notificationChannels: [AlertsNotificationChannelId!]!

  """Policy ID."""
  policyId: ID!
}

"""The input object representing the user being created"""
input UserManagementCreateUser {
  """The authentication domain id for the user to be created under."""
  authenticationDomainId: ID!

  """The email address of the user to be created."""
  email: String!

  """The name of the user to be created."""
  name: String!

  """The user type for the user to be created."""
  userType: UserManagementRequestedTierName
}

"""Containers"""
input CloudAzureContainersIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""The ApmApplicationEntity's settings to update."""
input ApmApplicationEntitySettings {
  """
  The ApmApplicationEntity's apdex target. For documentation on using apdex effectively, visit [our docs about apdex](https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction).
  """
  apdexTarget: Float
}

"""Filters by user id"""
input MultiTenantIdentityUserIdInput {
  """A user id"""
  eq: ID

  """A list of user IDs"""
  in: [ID!]
}

"""Update Enrichment input object"""
input AiWorkflowsUpdateEnrichmentsInput {
  """nrql"""
  nrql: [AiWorkflowsNrqlUpdateEnrichmentInput!]!
}

"""Attributes belonging to the organization to create."""
input OrganizationCreateOrganizationInput {
  """The name for the new organization."""
  name: String!
}

"""Information required when operating on a Linked Account."""
input CloudRenameAccountsInput {
  """The linked account identifier."""
  linkedAccountId: Int!

  """The linked account new name."""
  name: String!
}

"""Rest incident"""
type AiIssuesRestIncident implements AiIssuesIIncident {
  """account"""
  account: AccountReference

  """An account id this incident is stored in"""
  accountIds: String!

  """Aggregation of tags related to this incident"""
  aggregationTags: [AiIssuesKeyValue!]

  """The time the incident was closed"""
  closedAt: EpochMilliseconds

  """The time the incident was created"""
  createdAt: EpochMilliseconds!

  """The description provided through API"""
  description: [String!]!

  """A list of unique entity identifiers"""
  entityGuids: EntityGuid

  """A list of entity names"""
  entityNames: String

  """A list of entity types"""
  entityTypes: String

  """See our documentation to learn about environments"""
  environmentId: Int! @deprecated(reason: "Use account")

  """Incident identifier"""
  incidentId: ID!

  """Incident priority"""
  priority: AiIssuesPriority!

  """Incident state"""
  state: AiIssuesIncidentState!

  """Incident event timestamp"""
  timestamp: EpochMilliseconds!

  """
  The description the user gave the condition if provided. Otherwise the incident description
  """
  title: String!

  """The time the incident was last updated"""
  updatedAt: EpochMilliseconds!
}

"""Expected errors that can be returned by create operation."""
type DashboardCreateError {
  """Error description."""
  description: String

  """Error type."""
  type: DashboardCreateErrorType!
}

"""
Monitor downtime object returned to the customer for a downtime run once
"""
type SyntheticsOnceMonitorDowntimeMutationResult {
  """The account ID associated with the monitor downtime"""
  accountId: Int

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """The entity GUID associated with the monitor downtime"""
  guid: EntityGuid

  """The monitor GUIDs associated with the monitor downtime"""
  monitorGuids: [EntityGuid]

  """The name of the monitor downtime"""
  name: String

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""
The `NaiveDateTime` scalar represents a date and time without a Time Zone. The `NaiveDateTime` appears as an ISO8601 formatted string.
"""
scalar NaiveDateTime

"""Configuration options for when a monitor downtime should end"""
input SyntheticsDateWindowEndConfig {
  """End the monitor downtime on a particular date"""
  onDate: Date

  """End the monitor downtime after a set number of occurrences"""
  onRepeat: Int
}

"""The time window configuration of the SLO."""
type ServiceLevelObjectiveTimeWindow {
  """The rolling time window configuration of the SLO."""
  rolling: ServiceLevelObjectiveRollingTimeWindow
}

"""A database instance seen by an APM Application"""
type ApmDatabaseInstanceEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The host the database instance is running on."""
  host: String

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """
  The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
  """
  portOrPath: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String

  """The type of database. ex: `Postgres` | `Redis`"""
  vendor: String
}

"""The result of a Simple Browser monitor update mutation"""
type SyntheticsSimpleBrowserMonitorUpdateMutationResult {
  """Errors that occurred during Simple Browser monitor update mutation"""
  errors: [SyntheticsMonitorUpdateError]!

  """The resulting Simple Browser monitor"""
  monitor: SyntheticsSimpleBrowserMonitor
}

"""Basic external resource"""
interface ErrorsInboxResource {
  """Unique resource identifier"""
  id: ID!

  """External resource url"""
  url: String!
}

"""Type of installer"""
enum Nr1CatalogInstallerType {
  """Install plan"""
  INSTALL_PLAN
}

"""
The input object used to represent the entity search query to be updated.
"""
input WorkloadUpdateCollectionEntitySearchQueryInput {
  """
  The unique identifier of the entity search query to be updated. If not provided, a new entity search query is created.
  """
  id: Int

  """
  The entity search query that is used to perform the search of a group of entities.
  """
  query: String!
}

"""Device info used for push notifications."""
type MobilePushNotificationDevice {
  """The version of the app."""
  appVersion: SemVer!

  """The uuid of the device."""
  deviceId: String!

  """The name of the device."""
  deviceName: String!

  """The OS this device is running (android/ios)."""
  operatingSystem: String!

  """The id of the user this device belongs to."""
  userId: Int!
}

"""Type of assign error group error."""
enum ErrorsInboxAssignErrorGroupErrorType {
  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"""Managed Kafka"""
input CloudAwsMskIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
The object that's returned from successfully updating a shared account.
"""
type OrganizationUpdateSharedAccountResponse {
  """Information about the updated shared account."""
  sharedAccount: OrganizationSharedAccount
}

"""Expected error types that can be returned by updatePage operation."""
enum DashboardUpdatePageErrorType {
  """User is not allowed to execute the operation."""
  FORBIDDEN_OPERATION

  """Invalid input error."""
  INVALID_INPUT

  """Page not found in the system."""
  PAGE_NOT_FOUND
}

"""Environment data found for one application instance."""
type AgentEnvironmentApplicationEnvironmentAttributes {
  """List of Guids of the APM Applications this instance belongs to."""
  applicationGuids: [EntityGuid!]!

  """A list of environment attributes of the application instance."""
  attributes: [AgentEnvironmentAttribute!]

  """Information of the application instance, such as host and language."""
  details: AgentEnvironmentApplicationInstanceDetails
}

"""
Whether Compression is enabled for the export rule, and what compression format is used
"""
enum StreamingExportPayloadCompression {
  """Do not compress payloads for this export rule"""
  DISABLED

  """
  Compress payloads for this export rule using the GZIP compression format
  """
  GZIP
}

"""Provides all the available filters on a grant"""
input MultiTenantAuthorizationGrantFilterInputExpression {
  """The group id of the grant"""
  groupId: MultiTenantAuthorizationGrantGroupIdInputFilter

  """The id of the grant"""
  id: MultiTenantAuthorizationGrantIdInputFilter

  """The organization id the grant belongs to"""
  organizationId: MultiTenantAuthorizationGrantOrganizationIdInputFilter!

  """The role id of the grant"""
  roleId: MultiTenantAuthorizationGrantRoleIdInputFilter

  """the scope id of the grant"""
  scopeId: MultiTenantAuthorizationGrantScopeIdInputFilter

  """The scope type of the grant"""
  scopeType: MultiTenantAuthorizationGrantScopeTypeInputFilter
}

"""Azure input parameters for a new streaming rule"""
input StreamingExportAzureInput {
  """Connection string that has access to the specific Event Hub"""
  eventHubConnectionString: String!

  """The name of Event Hub to write events to"""
  eventHubName: String!
}

"""
Input for updating an obfuscation expression.
Null fields are left untouched by mutation.
"""
input LogConfigurationsUpdateObfuscationExpressionInput {
  """Description of expression."""
  description: String

  """Expression Id."""
  id: ID!

  """Name of expression."""
  name: String

  """Regex of expression."""
  regex: String
}

"""Provides all the available filters on the organization group id"""
input OrganizationOrganizationGroupIdInputFilter {
  """performs an equals operation"""
  eq: ID!
}

"""Input type for FixedFuzzyScore expression"""
input AiDecisionsFixedFuzzyScoreInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Minimum distance threshold."""
  minDistance: Int!

  """Value to be used in comparison."""
  value: String!
}

"""Attributes for creating an account share."""
input OrganizationSharedAccountInput {
  """The id of the account to share with new organization"""
  accountId: Int!

  """
  The limiting role id the new organization will be granted on for the shared account
  """
  limitingRoleId: Int
}

type IncidentIntelligenceEnvironmentAccountStitchedFields {
  """
  Retrieves the incident intelligence environment based on the user's authentication and product entitlement
  """
  currentEnvironment(
    """Which environment kind to support when evaluating the query"""
    kind: IncidentIntelligenceEnvironmentSupportedEnvironmentKind
  ): IncidentIntelligenceEnvironmentCurrentEnvironmentResult
}

"""Cloud Functions Integration"""
type CloudGcpFunctionsIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input object used to represent the rule to be created"""
input MetricNormalizationCreateRuleInput {
  """Customer rule action."""
  action: MetricNormalizationCustomerRuleAction!

  """Application GUID"""
  applicationGuid: EntityGuid

  """Is rule enabled?"""
  enabled: Boolean!

  """Rule evaluation order"""
  evalOrder: Int

  """Metric Match Expression."""
  matchExpression: String!

  """Notes."""
  notes: String

  """Metric Replacement Expression."""
  replacement: String

  """Whether it terminates the evaluation chain or not"""
  terminateChain: Boolean
}

"""AlloyDB Integration"""
type CloudGcpAlloydbIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Redshift Integration"""
type CloudRedshiftIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Channel property Object"""
type AiNotificationsProperty {
  """Channel property display key"""
  displayValue: String

  """Channel property key"""
  key: String!

  """Channel property display key"""
  label: String

  """Channel property value"""
  value: String!
}

"""
Details about the contact channel where users can get support via the repository issues page
"""
input Nr1CatalogIssuesContactChannelInput {
  """The URL linking the repository issues page where users can get support"""
  url: String!
}

"""Input type for FixedLongestCommonSubsequenceDistance expression"""
input AiDecisionsFixedLongestCommonSubsequenceDistanceInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Float!

  """Value to be used in comparison."""
  value: String!
}

"""VPC Integration"""
type CloudVpcIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchNatGateway: Boolean

  """
  Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchVpn: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Live URL error."""
type DashboardLiveUrlError {
  """Description of the error."""
  description: String

  """Type of error."""
  type: DashboardLiveUrlErrorType
}

"""
Contains all of the data that is used to sample traces based on random selection.
"""
type EdgeRandomTraceFilter {
  """The percent of traces to keep when selected at random."""
  percentKept: Float!
}

"""A suggested correlation rule."""
type AiDecisionsSuggestion {
  """Length of the window in which incidents are compared."""
  correlationWindowLength: Milliseconds

  """Time suggestion was created."""
  createdAt: EpochMilliseconds!

  """Description of suggestion."""
  description: String

  """External hash of suggestion."""
  hash: String!

  """ID of suggestion."""
  id: ID!

  """Number of correlations within a window required to merge issues."""
  minCorrelationThreshold: Int!

  """Name of suggestion."""
  name: String!

  """Configuration to allow rule to override issue properties."""
  overrideConfiguration: AiDecisionsOverrideConfiguration

  """Expression to use to compare incidents."""
  ruleExpression: AiDecisionsRuleExpression!

  """Acceptance state of suggestion."""
  state: AiDecisionsSuggestionState!

  """Service/user that created this suggestion."""
  suggester: String!

  """External support for suggestion."""
  support: String
}

"""Types of NrqlConditions."""
enum AlertsNrqlConditionType {
  """Baseline NrqlCondition."""
  BASELINE

  """Outlier NrqlCondition."""
  OUTLIER

  """Static NrqlCondition."""
  STATIC
}

"""Details needed to create an events to metrics conversion rule."""
input EventsToMetricsCreateRuleInput {
  """The account where the events exist and the metrics will be put."""
  accountId: Int!

  """Provides additional information about the rule."""
  description: String

  """The name of the rule. This must be unique within a given account."""
  name: String!

  """Explains how to create one or more metrics from events."""
  nrql: String!
}

"""Google Compute Engine"""
input CloudGcpVmsIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Information about a data source install"""
type Nr1CatalogDataSourceInstall {
  """Provides context about how the fallback install should proceed"""
  fallback: Nr1CatalogDataSourceInstallDirective

  """Provides context about how the primary install should proceed"""
  primary: Nr1CatalogDataSourceInstallDirective!
}

"""Relationship filter"""
input EntityRelationshipFilter {
  """Filter the relationships to those that contain a specific entity type."""
  entityType: [EntityType]

  """
  Filter the relationships to those that contain a specific Infrastructure integration entity type
  """
  infrastructureIntegrationType: [EntityInfrastructureIntegrationType]
}

"""Describes a role within the system"""
type MultiTenantAuthorizationRole {
  """a value that uniquely identifies this object"""
  id: Int!

  """the name of the object"""
  name: String!

  """The scope the role applies to"""
  scope: String!

  """The type of role"""
  type: String!
}

"""A structured representation of an exception for an APM application."""
type StackTraceApmException {
  """The top level message associated with the exception."""
  message: String

  """The stack trace associated with the exception."""
  stackTrace: StackTraceApmStackTrace
}

"""Provides the types of sharing modes available"""
enum OrganizationSharingMode {
  """Accounts that are accessible to this organization"""
  ALL

  """Accounts that are managed by this organization"""
  MANAGED

  """
  Accounts managed by this organization that are currently shared with other organizations
  """
  SHARED_WITH_OTHER_ORGANIZATIONS

  """Accounts that are shared with this organization"""
  SHARED_WITH_THIS_ORGANIZATION
}

"""Logic Apps Integration"""
type CloudAzureLogicappsIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Firestore"""
input CloudGcpFirestoreIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
Type defined so its fields will be merged directly into NerdGraph's Actor type.
"""
type DashboardActorStitchedFields {
  """Fetch the list of live URLs created by the API user."""
  liveUrls(
    """Filter the live URLs to fetch."""
    filter: DashboardLiveUrlsFilterInput
  ): DashboardLiveUrlResult
}

"""Response for configuration override"""
type AiIssuesConfigurationOverrideResponse {
  """Updated configuration"""
  config: AiIssuesEnvironmentConfiguration

  """Error, if any"""
  error: String
}

"""Error reason for the mutation."""
enum NerdpackMutationErrorType {
  """
  The user does not have the required capability to execute the operation.
  """
  CAPABILITY_NOT_GRANTED

  """Downstream service error."""
  DOWNSTREAM_ERROR

  """Resource not found for given operation."""
  NOT_FOUND

  """Terms and conditions have not been accepted by the operation account."""
  TNC_NOT_ACCEPTED

  """Account is not authorized to execute the operation."""
  UNAUTHORIZED_ACCOUNT
}

"""Channel schema object"""
type AiNotificationsSchema {
  """Possible fields for the channel"""
  fields: [AiNotificationsSchemaField!]!
}

"""General settings related to APM applications."""
type AgentApplicationSettingsBrowserConfig {
  """
  The desired target for the APDEX measurement of this browser application.
  """
  apdexTarget: Float
}

"""Information about a Nerdlet in a Nerdpack"""
type Nr1CatalogNerdlet implements Nr1CatalogNerdpackItem {
  """The unique identifier for the Nerdlet."""
  id: ID!

  """Metadata associated with the Nerdlet"""
  metadata: Nr1CatalogNerdletMetadata
}

"""Provides all the available filters on the organization id"""
input MultiTenantAuthorizationRoleOrganizationIdInputFilter {
  """performs an equals operation"""
  eq: ID!
}

"""A cloud service dashboard template."""
type CloudDashboardTemplate {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The dashboard layout position."""
  layout: Int!

  """The dashboard template name."""
  name: String!

  """The dashboard template slug."""
  slug: String!

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""EntityRelationship edge filter."""
input EntityRelationshipEdgeFilter {
  """Filter by direction of relationship."""
  direction: EntityRelationshipEdgeDirection

  """Filter on entity domain-types."""
  entityDomainTypes: EntityRelationshipEntityDomainTypeFilter

  """Filter on relationship types."""
  relationshipTypes: EntityRelationshipEdgeTypeFilter
}

"""
Information required to migrate an existing AWS GovCloud account to use AssumeRole Authentication.
"""
input CloudAwsGovCloudMigrateToAssumeroleInput {
  """The AWS role ARN (used to fetch data)."""
  arn: String!

  """The linked account identifier."""
  linkedAccountId: Int!
}

"""Run"""
input CloudGcpRunIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Attributes for updating an organization."""
input OrganizationUpdateInput {
  """The new name for the organization."""
  name: String
}

"""Attributes for creating a new managed account."""
input OrganizationNewManagedAccountInput {
  """The name of the new account to be created."""
  name: String

  """The region-code for the account to be created."""
  regionCode: OrganizationRegionCodeEnum
}

"""The error type for associating notification channels with a policy."""
enum AlertsNotificationChannelsAddToPolicyErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"""Input for updating a baseline NRQL condition."""
input AlertsNrqlConditionUpdateBaselineInput {
  """Direction in which the baseline is set on condition."""
  baselineDirection: AlertsNrqlBaselineDirection

  """The custom violation description."""
  description: String

  """Whether the NRQL condition is enabled."""
  enabled: Boolean

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpirationInput

  """Name of the NRQL condition."""
  name: String

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionUpdateQueryInput

  """Runbook URL."""
  runbookUrl: String

  """
  Configuration that defines the signal that the NRQL condition will use to evaluate.
  """
  signal: AlertsNrqlConditionSignalInput

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlDynamicConditionTermsInput!]

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes. Default is THIRTY_DAYS.
  """
  violationTimeLimit: AlertsViolationTimeLimit

  """
  Duration after which a violation automatically closes in seconds.
  Accepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).
  
  Default is 3 days (259200 seconds).
  """
  violationTimeLimitSeconds: Seconds
}

"""
The result of which submitted drop rules were successfully and unsuccessfully created.
"""
type NrqlDropRulesCreateDropRuleResult {
  """Rules that were not created and why."""
  failures: [NrqlDropRulesCreateDropRuleFailure]

  """Rules that were successfully created."""
  successes: [NrqlDropRulesDropRule]
}

"""The `id` and data to update one or more keys."""
input ApiAccessUpdateInput {
  """A list of the configurations of each ingest key you want to update."""
  ingest: [ApiAccessUpdateIngestKeyInput]

  """A list of the configurations of each user key you want to update."""
  user: [ApiAccessUpdateUserKeyInput]
}

"""Neptune Integration"""
type CloudAwsNeptuneIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""enum of DeviceTypes that the user can use for device emulation"""
enum SyntheticsDeviceType {
  """This will be dimensions for a typical mobile device"""
  MOBILE

  """This will disable device emulation"""
  NONE

  """This will be dimensions for a typical tablet device"""
  TABLET
}

"""Kinesis Data Analytics Integration"""
type CloudAwsKinesisanalyticsIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Configuration options for when a monitor downtime should end"""
type SyntheticsDateWindowEndOutput {
  """End the monitor downtime on a particular date"""
  onDate: Date

  """End the monitor downtime after a set number of occurrences"""
  onRepeat: Int
}

"""
The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
"""
input ApiAccessCreateUserKeyInput {
  """
  The account ID indicating which account you want to make the key for. This cannot be updated once created.
  """
  accountId: Int!

  """The name of the key. This can be updated later."""
  name: String

  """Any notes about this ingest key. This can be updated later."""
  notes: String

  """
  The user ID indicating which user you want to make the key for. This cannot be updated once created.
  """
  userId: Int!
}

"""Autogenerated return type of ConfigureIntegration"""
type CloudConfigureIntegrationPayload {
  """The list of errors."""
  errors: [CloudIntegrationMutationError!]!

  """The created/modified service integrations."""
  integrations: [CloudIntegration!]!
}

"""The result of a Broken Links monitor create mutation"""
type SyntheticsBrokenLinksMonitorCreateMutationResult {
  """Errors that occurred during Broken Links monitor create mutation"""
  errors: [SyntheticsMonitorCreateError]!

  """The resulting Broken Links monitor"""
  monitor: SyntheticsBrokenLinksMonitor
}

"""
An object that represents a status error whenever an recipe has failed to install.
"""
type InstallationStatusError {
  """Error details, if any."""
  details: String

  """The actual error message."""
  message: String
}

"""A key for accessing New Relic APIs."""
interface ApiAccessKey {
  """The UNIX epoch when the key was created, in seconds."""
  createdAt: EpochSeconds

  """
  The ID of the key. This can be used to identify a key without revealing the key itself (used to update and delete).
  """
  id: ID

  """The keystring of the key."""
  key: String

  """
  The name of the key. This can be used as a short identifier for easy reference.
  """
  name: String

  """
  Any notes can be attached to a key. This is intended for more a more detailed description of the key use if desired.
  """
  notes: String

  """The obfuscated key."""
  obfuscatedKey: String

  """
  The type of key, indicating what New Relic APIs it can be used to access.
  """
  type: ApiAccessKeyType
}

"""
An object that can be used to discover and create the entity search query argument.
"""
input EntitySearchQueryBuilder {
  """The alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The alertable status of the entity"""
  alertable: Boolean

  """
  The entity domain. This is not a complete list of entity domains available; it is a way to explore the most popular domains.
  """
  domain: EntitySearchQueryBuilderDomain

  """
  **WARNING! This argument is deprecated and will not be updated with new infrastructure integration types.** If you want to query for a type not in this list, use the `query` argument instead of `queryBuilder`. To see the query string that is generated by your `queryBuilder` search, ask for the `query` field in the result object. You can then use this to build a query supplied to the `query` argument and remove your `queryBuilder`.
  
  The Infrastructure integration type. This should be used in place of the `type` field to search for Infrastructure integration specific types.
  """
  infrastructureIntegrationType: EntityInfrastructureIntegrationType

  """The entity name."""
  name: String

  """The reporting status of the entity."""
  reporting: Boolean

  """A list of tags applied to the entity."""
  tags: [EntitySearchQueryBuilderTag!]

  """
  The entity type.
  
  This is not a complete list of entity types available; it is a way to explore the most popular types.
  
  If you are querying for Infrastructure integration types, use the `infrastructureIntegrationType` field instead of `type`.
  """
  type: EntitySearchQueryBuilderType
}

"""Information about an alert condition template"""
type Nr1CatalogAlertConditionTemplate {
  """The unique identifier for the alert condition template"""
  id: ID!

  """Metadata associated with the alert condition template"""
  metadata: Nr1CatalogAlertConditionTemplateMetadata!
}

"""The result of a metric rename rule mutation"""
type MetricNormalizationRuleMutationResponse {
  """An array containing errors, if any."""
  errors: [MetricNormalizationRuleMutationError]

  """The created rule"""
  rule: MetricNormalizationRule
}

"""AWS Elastic Beanstalk"""
input CloudElasticbeanstalkIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Azure Functions"""
input CloudAzureFunctionsIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Information about a link install plan directive"""
type Nr1CatalogLinkInstallPlanDirective implements Nr1CatalogInstallPlanDirective {
  """The mode of the install plan directive"""
  mode: Nr1CatalogInstallPlanDirectiveMode!

  """
  The URL of the external link used to guide the user through installation
  """
  url: String!
}

"""
Types of errors that can be returned from a Private Location mutation request
"""
enum SyntheticsPrivateLocationMutationErrorType {
  """Received a request missing required fields or containing invalid data"""
  BAD_REQUEST

  """
  An unknown error occurred while processing request to purge specified private location job queue
  """
  INTERNAL_SERVER_ERROR

  """
  Private location not found for key (private location does not exist on account or has already been deleted)
  """
  NOT_FOUND

  """
  User does not have authorization to purge job queue for specified private location
  """
  UNAUTHORIZED
}

"""Google Cloud Storage"""
input CloudGcpStorageIntegrationInput {
  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
The result of enabling browser monitoring for an APM-monitored application.
"""
type AgentApplicationEnableBrowserResult {
  """The application's name"""
  name: String!

  """Fields related to browser settings."""
  settings: AgentApplicationApmBrowserSettings
}

"""Number of incidents applicable for a selector"""
type AiDecisionsSelectorApplicability {
  """Applicable number of incidents"""
  count: Int!

  """Incident selector"""
  select: AiDecisionsIncidentSelect!
}

"""Input type for FixedFuzzyWuzzyAdaptiveRatio expression"""
input AiDecisionsFixedFuzzyWuzzyAdaptiveRatioInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Value to be used in comparison."""
  value: String!
}

"""Input type for One expression"""
input AiDecisionsOneInput {
  """Children expressions."""
  children: [AiDecisionsRuleExpressionInput!]!
}

"""Version details for first and last seen versions."""
type ErrorsInboxVersion {
  """Version name"""
  name: String
}

"""
Description of errors that may occur while attempting to delete a trace observer.
"""
type EdgeDeleteTraceObserverResponseError {
  """Error message, with further detail to help resolve the issue."""
  message: String!

  """Error that may occur while attempting to delete a trace observer."""
  type: EdgeDeleteTraceObserverResponseErrorType!
}

"""Dataproc"""
input CloudGcpDataprocIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Sort object."""
input ErrorsInboxErrorGroupSortOrderInput {
  """Sort object order."""
  direction: ErrorsInboxDirection!

  """Sort object field."""
  field: ErrorsInboxErrorGroupSortOrderField!
}

"""A result type encapsulating suggested queries"""
type SuggestedNrqlQueryResponse {
  """List of suggested queries."""
  suggestions: [SuggestedNrqlQuery!]
}

"""
For users on our New Relic One user model, a "group" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.
"""
type MultiTenantIdentityGroup {
  """The authentication domain the group belongs to"""
  authenticationDomainId: ID!

  """a value that uniquely identifies this object"""
  id: ID!

  """the name of the object"""
  name: String!

  """Active users belonging to a group"""
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter group users"""
    filter: MultiTenantIdentityGroupUserFilterInput
  ): MultiTenantIdentityGroupUsers
}

"""The `User` object provides general data about the user."""
type User {
  email: String
  id: Int
  name: String
}

"""Amazon Route 53"""
input CloudRoute53IntegrationInput {
  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""A Script Browser monitor resulting from a Script Browser mutation"""
type SyntheticsScriptBrowserMonitor {
  """The monitor advanced options"""
  advancedOptions: SyntheticsScriptBrowserMonitorAdvancedOptions

  """The creation time of the monitor in millis"""
  createdAt: EpochMilliseconds

  """The unique client identifier for the Synthetics Monitor in New Relic"""
  guid: EntityGuid

  """The unique identifier of the monitor within the Synthetics domain"""
  id: ID

  """The locations the monitor runs from"""
  locations: SyntheticsLocations

  """The last modification time of the monitor in millis"""
  modifiedAt: EpochMilliseconds

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntime

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus
}

"""
Consent accounts to usage of the Incident Intelligence product for EU or FedRAMP
"""
type IncidentIntelligenceEnvironmentConsentAccounts {
  """The list of accounts marked with consent"""
  consentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  """The outcome of the consent marking"""
  result: IncidentIntelligenceEnvironmentConsentAccountsResult!
}

"""Types of errors that can be returned from a create monitor request"""
enum SyntheticsMonitorCreateErrorType {
  """Received a request missing required fields or containing invalid data"""
  BAD_REQUEST

  """An unknown error occurred while processing request to mutate monitor"""
  INTERNAL_SERVER_ERROR

  """
  Monitor not found for given guid (monitor does not exist on account or has already been deleted)
  """
  NOT_FOUND

  """Monitor creation exceeds account subscription limits"""
  PAYMENT_REQUIRED

  """Monitor tags were not updated."""
  TAGGING_ERROR

  """User does not have authorization to perform monitor mutation."""
  UNAUTHORIZED

  """An unknown error occurred while processing request to create monitor"""
  UNKNOWN_ERROR
}

"""Account Mutation Error"""
type CloudAccountMutationError {
  """The passed linked account identifier."""
  linkedAccountId: Int

  """The error message."""
  message: String!

  """The passed newrelic account identifier."""
  nrAccountId: Int!

  """The passed provider slug."""
  providerSlug: String

  """The error status."""
  type: String!
}

"""The return object for a create-account mutation."""
type AccountManagementCreateResponse {
  """Information about the newly created account."""
  managedAccount: AccountManagementManagedAccount
}

"""
Configuration options for a monthly monitor downtime that runs on days of the week
"""
input SyntheticsDaysOfWeek {
  """Which occurrence of the day selected within the month"""
  ordinalDayOfMonth: SyntheticsMonitorDowntimeDayOfMonthOrdinal!

  """Which day of the week the monitor downtime runs"""
  weekDay: SyntheticsMonitorDowntimeWeekDays!
}

"""
An object that contains expected errors as a result of mutating an existing data partition rule.
"""
type LogConfigurationsDataPartitionRuleMutationError {
  """The message with the error cause."""
  message: String

  """Type of error."""
  type: LogConfigurationsDataPartitionRuleMutationErrorType
}

"""Azure details about a streaming rule"""
type StreamingExportAzureDetails {
  """Connection string that has access to the specific Event Hub"""
  eventHubConnectionString: String!

  """The name of Event Hub to write events to"""
  eventHubName: String!
}

"""Configuration options for when a monthly monitor downtime should run"""
type SyntheticsMonitorDowntimeMonthlyFrequencyOutput {
  """
  Which dates a monitor downtime is run
   (only 1 of these can be selected)
  """
  daysOfMonth: [Int]

  """
  Which weekdays in the month the monitor downtime will run
   (only 1 of these can be selected)
  """
  daysOfWeek: SyntheticsDaysOfWeekOutput
}

"""The `Organization` object provides basic data about an organization."""
type Organization {
  """This field provides access to AccountManagement data."""
  accountManagement: AccountManagementOrganizationStitchedFields

  """
  Namespace for querying and filtering the actor's organization's shared accounts
  """
  accountShares(
    """Input for filtering by limiting role id of a shared account."""
    limitingRoleId: Int

    """Input for filtering by source organization id for a shared account."""
    sourceOrganizationId: ID

    """Input for filtering by target organization id of a shared account."""
    targetOrganizationId: ID
  ): OrganizationAccountShares

  """The organization's administrator"""
  administrator: OrganizationOrganizationAdministrator

  """This field provides access to AuthorizationManagement data."""
  authorizationManagement: AuthorizationManagementOrganizationStitchedFields

  """The customer id for the organization."""
  customerId: String

  """The ID of the organization."""
  id: ID

  """The name of the organization."""
  name: String

  """The telemetry id for the organization"""
  telemetryId: String

  """This field provides access to UserManagement data."""
  userManagement: UserManagementOrganizationStitchedFields
}

"""The type of key."""
enum ApiAccessKeyType {
  """
  An ingest key is used by New Relic agents to authenticate with New Relic and send data to the assigned account.
  """
  INGEST

  """
  A user key is used by New Relic users to authenticate with New Relic and to interact with the New Relic GraphQL API .
  """
  USER
}

"""
Definition of a variable that is local to this dashboard. Variables are placeholders for dynamic values in widget NRQLs.
"""
type DashboardVariable {
  """
  [DEPRECATED] Default value for this variable. The actual value to be used will depend on the type.
  """
  defaultValue: DashboardVariableDefaultValue @deprecated(reason: "This field will always be null. Use defaultValues instead.")

  """
  Default values for this variable. The actual value to be used will depend on the type.
  """
  defaultValues: [DashboardVariableDefaultItem]

  """
  Indicates whether this variable supports multiple selection or not. Only applies to variables of type NRQL or ENUM.
  """
  isMultiSelection: Boolean

  """List of possible values for variables of type ENUM."""
  items: [DashboardVariableEnumItem]

  """Variable identifier."""
  name: String

  """Configuration for variables of type NRQL."""
  nrqlQuery: DashboardVariableNrqlQuery

  """Options applied to the variable."""
  options: DashboardVariableOptions

  """
  Indicates the strategy to apply when replacing a variable in a NRQL query.
  """
  replacementStrategy: DashboardVariableReplacementStrategy

  """Human-friendly display string for this variable."""
  title: String

  """
  Specifies the data type of the variable and where its possible values may come from.
  """
  type: DashboardVariableType
}

"""Front Door"""
input CloudAzureFrontdoorIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""AWS Identity and Access Management (IAM)"""
input CloudIamIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""The input object representing parameters for the name filter"""
input MultiTenantIdentityGroupNameInput {
  """Part of a group name"""
  contains: String

  """A group name"""
  eq: String
}

"""Result of delete operation."""
type DashboardDeleteResult {
  """Expected errors while processing request."""
  errors: [DashboardDeleteError]

  """The status of the attempted delete."""
  status: DashboardDeleteResultStatus
}

"""Type of action to perform when a `TraceFilter` match occurs"""
enum EdgeTraceFilterAction {
  """Discards traces that match the filter"""
  DISCARD

  """Keeps traces that match the filter"""
  KEEP
}

"""Dataflow Integration"""
type CloudGcpDataflowIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Provides the types of group capabilities available"""
enum MultiTenantIdentityCapability {
  """The capability to delete a group"""
  DELETE_GROUP

  """The capability to grant membership to a group"""
  GRANT_GROUP_MEMBERSHIP

  """The capability to revoke membership from a group"""
  REVOKE_GROUP_MEMBERSHIP

  """The capability to update a group's display name"""
  UPDATE_GROUP_NAME
}

"""The different error types in golden metrics"""
type EntityGoldenGoldenMetricsError {
  """The error description"""
  message: String

  """An error type"""
  type: EntityGoldenGoldenMetricsErrorType!
}

"""Account data view for administration tasks."""
type AccountManagementManagedAccount {
  """The account ID."""
  id: Int!

  """True if account is canceled"""
  isCanceled: Boolean!

  """The name of the account."""
  name: String!

  """The data center region for the account (US or EU)."""
  regionCode: String!
}

"""Representation of the New Relic agent collecting data."""
type AgentEnvironmentApplicationInstance {
  """
  Contains environment attributes regarding the reported setting of the reporting agent.
  """
  agentSettingsAttributes(
    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): [AgentEnvironmentAttribute!]

  """Information of the application instance, such as host and language."""
  details: AgentEnvironmentApplicationInstanceDetails!

  """
  Contains general environment attributes from the same environment where the application instance is running.
  """
  environmentAttributes(
    """Filter to apply to results on attribute name."""
    filter: AgentEnvironmentFilter
  ): [AgentEnvironmentAttribute!]

  """
  Contains environment attributes regarding modules loaded by the application instance. Used only by the Java agent.
  """
  modules(
    """Filter to apply to results on module name field."""
    filter: AgentEnvironmentFilter
  ): [AgentEnvironmentApplicationLoadedModule!]
}

"""The advanced options available for a Step monitor"""
type SyntheticsStepMonitorAdvancedOptions {
  """Capture a screenshot during job execution"""
  enableScreenshotOnFailureAndScript: Boolean
}

"""The `ViolationInt` scalar type represents 52-bit signed integers"""
scalar EntityAlertViolationInt

"""An object that represents a metric grouping issue."""
type MetricNormalizationRuleMetricGroupingIssue {
  """Total number of received and denied new metrics."""
  deniedMetricsCount: Int

  """Rate of received and denied new metrics per minute."""
  deniedMetricsRatePerMinute: Float

  """Metric normalization rule id"""
  metricNormalizationRuleId: Int!

  """Whether the issue is mitigated or still active"""
  mitigated: Boolean

  """The new metrics rate threshold to consider the issue mitigated."""
  mitigationRateThreshold: Float

  """The minute time window to calculate if the issue was mitigated."""
  mitigationRateWindowSize: Int
}

"""
Specifies the supported entity types to be a specific subset of entity types
"""
type Nr1CatalogSpecificSupportedEntityTypes implements Nr1CatalogSupportedEntityTypes {
  """The list of support entity types."""
  entityTypes: [DomainType!]!

  """The level of support entity types. Always set to SPECIFIC"""
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"""Settings that are applicable to browser applications."""
type AgentApplicationSettingsBrowserBase {
  """Access general settings for the application."""
  browserConfig: AgentApplicationSettingsBrowserConfig!

  """
  browser monitoring provides real user monitoring (RUM) that measures the speed and performance of end users as they navigate the application using different web browsers, devices, operating systems, and networks.
  """
  browserMonitoring: AgentApplicationSettingsBrowserMonitoring!
}

"""Input for updating a static NRQL condition."""
input AlertsNrqlConditionUpdateStaticInput {
  """The custom violation description."""
  description: String

  """Whether the NRQL condition is enabled."""
  enabled: Boolean

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpirationInput

  """Name of the NRQL condition."""
  name: String

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionUpdateQueryInput

  """Runbook URL."""
  runbookUrl: String

  """
  Configuration that defines the signal that the NRQL condition will use to evaluate.
  """
  signal: AlertsNrqlConditionSignalInput

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlConditionTermsInput!]

  """
  Deprecated - use `signal.slideBy` instead.
  
  Function used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation is opened.
  """
  valueFunction: AlertsNrqlStaticConditionValueFunction

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes. Default is THIRTY_DAYS.
  """
  violationTimeLimit: AlertsViolationTimeLimit

  """
  Duration after which a violation automatically closes in seconds.
  Accepts values between 300 seconds (5 minutes) and 2592000 seconds (30 days).
  
  Default is 3 days (259200 seconds).
  """
  violationTimeLimitSeconds: Seconds
}

"""Azure Storage"""
input CloudAzureStorageIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""NRQL type configuration input object"""
input AiWorkflowsNrqlConfigurationInput {
  """query"""
  query: String!
}

"""A collection of NRQL conditions with pagination information."""
type AlertsNrqlConditionsSearchResultSet {
  """
  Cursor pointing to the end of the current page of NrqlCondition records. Null if final page.
  """
  nextCursor: String

  """A set of `NrqlConditions` for the supplied cursor and criteria."""
  nrqlConditions: [AlertsNrqlCondition!]!

  """Total number of `NrqlConditions` for the given search criteria."""
  totalCount: Int!
}

"""The "raw" configuration values for configuring the javascript client."""
scalar AgentApplicationSettingsRawJsConfiguration

"""A user key."""
type ApiAccessUserKey implements ApiAccessKey {
  """The account this key is in."""
  account: AccountReference

  """The account ID of the key."""
  accountId: Int

  """The UNIX epoch when the key was created, in seconds."""
  createdAt: EpochSeconds

  """
  The ID of the user key. This can be used to identify a key without revealing the key itself (used to update and delete).
  """
  id: ID

  """The keystring of the key."""
  key: String

  """The name of the key. Limited to 120 characters."""
  name: String

  """Any notes can be attached to a key. Limited to 120 characters."""
  notes: String

  """The obfuscated key."""
  obfuscatedKey: String

  """
  The type of key, indicating what New Relic APIs it can be used to access.
  """
  type: ApiAccessKeyType

  """The user this key belongs to."""
  user: UserReference

  """The user ID of the key."""
  userId: Int
}

"""Virtual machine scale sets"""
input CloudAzureVirtualmachineIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""
A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
"""
type UserManagementOrganizationUserType {
  """the name of the object"""
  displayName: String!

  """a value that uniquely identifies this object"""
  id: ID!
}

"""Possible values for a field by its key"""
type AiNotificationsSuggestionsResponse {
  """List of Suggestion objects"""
  entities: [AiNotificationsSuggestion!]!

  """Error while fetching suggestions"""
  error: AiNotificationsError

  """Deprecated list of errors"""
  errors: [AiNotificationsSuggestionError!]! @deprecated(reason: "Errors is being deprecated in favor of a singular error field")

  """Cursor to get the next batch of results"""
  nextCursor: String

  """Suggestions request result"""
  result: AiNotificationsResult!

  """Count of all suggestion entities, -1 if unavailable"""
  totalCount: Int!
}

"""
Definition of a variable that is local to this dashboard. Variables are placeholders for dynamic values in widget NRQLs.
"""
input DashboardVariableInput {
  """
  [DEPRECATED] Default value for this variable. The actual value to be used will depend on the type.
  """
  defaultValue: DashboardVariableDefaultValueInput

  """
  Default values for this variable. The actual value to be used will depend on the type.
  """
  defaultValues: [DashboardVariableDefaultItemInput!]

  """
  Indicates whether this variable supports multiple selection or not. Only applies to variables of type NRQL or ENUM.
  """
  isMultiSelection: Boolean

  """List of possible values for variables of type ENUM"""
  items: [DashboardVariableEnumItemInput]

  """Variable identifier."""
  name: String!

  """Configuration for variables of type NRQL."""
  nrqlQuery: DashboardVariableNrqlQueryInput

  """Options applied to the variable"""
  options: DashboardVariableOptionsInput

  """
  Indicates the strategy to apply when replacing a variable in a NRQL query.
  """
  replacementStrategy: DashboardVariableReplacementStrategy

  """Human-friendly display string for this variable."""
  title: String

  """
  Specifies the data type of the variable and where its possible values may come from.
  """
  type: DashboardVariableType!
}

"""Input data that identifies nerdpack tag."""
input NerdpackRemoveVersionTagInput {
  """Tag name."""
  tag: NerdpackTagName
}

"""The possible fields a grant can be sorted on"""
enum MultiTenantAuthorizationGrantSortEnum {
  """Id of the grant"""
  ID
}

"""Information related to device browser emulation"""
input SyntheticsDeviceEmulationInput {
  """The device orientation the user would like to represent"""
  deviceOrientation: SyntheticsDeviceOrientation!

  """The device type that a user can select"""
  deviceType: SyntheticsDeviceType!
}

"""Data required to change the random trace filter configuration."""
input EdgeRandomTraceFilterInput {
  """
  The percentage of randomly selected traces to keep. Acceptable values are between 0.0001 and 100.
  """
  percentKept: Float!
}

"""The monitor input values needed to create a Simple (ping) monitor"""
input SyntheticsCreateSimpleMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsSimpleMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput!

  """The human readable identifier for the monitor"""
  name: String!

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod!

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus!

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]

  """The uri the monitor runs against"""
  uri: String!
}

"""Response for error group resources."""
type ErrorsInboxResourcesResponse {
  """Cursor used to fetch the next set of results"""
  nextCursor: String

  """The list of search results"""
  results: [ErrorsInboxResource!]!

  """The total number of results that match the search"""
  totalCount: Int!
}

"""The input object representing the access to grant for the group"""
input AuthorizationManagementGrantAccess {
  """The Role and the Account the Target Group should have access to"""
  accountAccessGrants: [AuthorizationManagementAccountAccessGrant!]

  """The Role and the Group the Target Group should have access to"""
  groupAccessGrants: [AuthorizationManagementGroupAccessGrant!]

  """The Group ID that will have access granted"""
  groupId: ID!

  """The Role and the Organization the Target Group should have access to"""
  organizationAccessGrants: [AuthorizationManagementOrganizationAccessGrant!]
}

"""An account share"""
type OrganizationAccountShare {
  """The ID of the account being shared"""
  accountId: Int!

  """The account share ID"""
  id: ID!

  """The limiting role"""
  limitingRole: OrganizationAccountShareLimitingRoleWrapper!

  """The name of the account share"""
  name: String!

  """The organization sending the account share."""
  source: OrganizationAccountShareOrganizationWrapper!

  """The organization receiving the account share."""
  target: OrganizationAccountShareOrganizationWrapper!
}

"""CloudFront Integration"""
type CloudCloudfrontIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchLambdasAtEdge: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Known error codes and messages for `DeleteSpanAttributeRuleResponseError`.
"""
enum EdgeDeleteSpanAttributeRuleResponseErrorType {
  """No trace observer was found with the id given."""
  NOT_FOUND
}

"""Information about an alert condition in a quickstart"""
type Nr1CatalogQuickstartAlertCondition implements Nr1CatalogQuickstartComponent {
  """The unique identifier for the alert condition"""
  id: ID!

  """Metadata associated with the alert condition"""
  metadata: Nr1CatalogQuickstartAlertConditionMetadata!
}

"""Cloud Pub/Sub"""
input CloudGcpPubsubIntegrationInput {
  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""An entity relationship."""
interface EntityRelationshipEdge {
  """The time the relationship was created."""
  createdAt: EpochMilliseconds!

  """The source entity of the relationship."""
  source: EntityRelationshipVertex!

  """The target entity of the relationship."""
  target: EntityRelationshipVertex!

  """The type of the relationship."""
  type: EntityRelationshipEdgeType!
}

"""Autogenerated return type of RemoveUsersFromGroups."""
type UserManagementRemoveUsersFromGroupsPayload {
  """The group(s) updated."""
  groups: [UserManagementGroup!]
}

"""OAuth2 based authentication"""
type AiNotificationsOAuth2Auth {
  """OAuth2 access token url"""
  accessTokenUrl: String!

  """Authentication Type - Token or Oauth2"""
  authType: AiNotificationsAuthType!

  """OAuth2 authorization url"""
  authorizationUrl: String!

  """OAuth2 clientId"""
  clientId: String!

  """Token prefix"""
  prefix: String!

  """Interval of how often should the access token be refreshed"""
  refreshInterval: Int

  """Is the OAuth2 access token refreshable"""
  refreshable: Boolean!

  """OAuth2 token's scope"""
  scope: String
}

"""Input to determine which runtime the monitor will run"""
input SyntheticsRuntimeInput {
  """The runtime type that the monitor will run"""
  runtimeType: String!

  """The specific version of the runtime type selected"""
  runtimeTypeVersion: SemVer!

  """The programing language that should execute the script"""
  scriptLanguage: String
}

"""X-Ray"""
input CloudAwsXrayIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Provides all the available filters on the customer id"""
input OrganizationContractCustomerIdInputFilter {
  """performs an equals operation"""
  eq: String!
}

"""Result of updateWidgetsInPage operation."""
type DashboardUpdateWidgetsInPageResult {
  """
  Expected errors while processing request. No errors means successful request.
  """
  errors: [DashboardUpdateWidgetsInPageError]
}

"""Azure Redis Cache"""
input CloudAzureRediscacheIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Filters on grants group id"""
input MultiTenantAuthorizationGrantGroupIdInputFilter {
  """Performs an equals operation"""
  eq: ID

  """Performs an in operation"""
  in: [ID!]
}

"""
The input object used to identify the workload to be updated and the new values.
"""
input WorkloadUpdateInput {
  """Relevant information about the workload."""
  description: String

  """A list of entity GUIDs composing the workload."""
  entityGuids: [EntityGuid!]

  """
  A list of entity search queries used to retrieve the groups of entities that compose the workload.
  """
  entitySearchQueries: [WorkloadUpdateCollectionEntitySearchQueryInput!]

  """The name of the workload."""
  name: String

  """Accounts that will be used to get entities from."""
  scopeAccounts: WorkloadScopeAccountsInput

  """
  The configuration that defines how the status of the workload is calculated.
  """
  statusConfig: WorkloadUpdateStatusConfigInput
}

"""Possible component types to filter the search"""
enum Nr1CatalogSearchComponentType {
  """Filter search results that contain alerts"""
  ALERTS

  """Filter search results that contain apps"""
  APPS

  """Filter search results that contain dashboards"""
  DASHBOARDS

  """Filter search results that contain data sources"""
  DATA_SOURCES

  """Filter search results that contain visualizations"""
  VISUALIZATIONS
}

"""Configuration for visualization type 'viz.line'"""
type DashboardLineWidgetConfiguration {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"""Destination Object"""
type AiNotificationsDestination {
  """The accountId of the creator of the destination"""
  accountId: Int!

  """Destination active"""
  active: Boolean!

  """Authentication for this destination"""
  auth: AiNotificationsAuth

  """Destination created at"""
  createdAt: DateTime!

  """Destination id"""
  id: ID!

  """Indicates whether the user is authenticated with the destination"""
  isUserAuthenticated: Boolean!

  """Last time a notification was sent"""
  lastSent: DateTime

  """Destination name"""
  name: String!

  """List of destination property types"""
  properties: [AiNotificationsProperty!]!

  """Destination status"""
  status: AiNotificationsDestinationStatus!

  """Destination type"""
  type: AiNotificationsDestinationType!

  """Destination updated at"""
  updatedAt: DateTime!

  """Destination updated by"""
  updatedBy: Int!
}

"""Input type for And expression"""
input AiDecisionsAndInput {
  """Left child expression."""
  left: AiDecisionsRuleExpressionInput!

  """Right child expression."""
  right: AiDecisionsRuleExpressionInput!
}

"""The organization's administrator"""
type OrganizationOrganizationAdministrator {
  """The organization id of the organization's administrator"""
  organizationId: ID

  """The organization name of the organization's administrator"""
  organizationName: String
}

"""
Configuration for visualization type 'viz.line'. Learn more about [line](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#line) widget.
"""
input DashboardLineWidgetConfigurationInput {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"""Workflow object"""
type AiWorkflowsWorkflow {
  """Account Id of this Workflow"""
  accountId: Int!

  """The time this workflow was created"""
  createdAt: DateTime!

  """Specifies where to send the notifications"""
  destinationConfigurations: [AiWorkflowsDestinationConfiguration!]!

  """Are Destinations enabled"""
  destinationsEnabled: Boolean!

  """List of enrichments that are attached to the notifications"""
  enrichments: [AiWorkflowsEnrichment!]!

  """Are Enrichments enabled"""
  enrichmentsEnabled: Boolean!

  """Entity Id of the workflow"""
  guid: EntityGuid!

  """Workflow Id"""
  id: ID!

  """Specifies which issues the workflow will handle"""
  issuesFilter: AiWorkflowsFilter!

  """Last time a notification was sent regarding this workflow"""
  lastRun: DateTime

  """Describes how to handle muted issues"""
  mutingRulesHandling: AiWorkflowsMutingRulesHandling!

  """Name of the Workflow"""
  name: String!

  """The time this workflow was updated"""
  updatedAt: DateTime!

  """Is Workflow enabled"""
  workflowEnabled: Boolean!
}

"""
The `AccountReference` object provides basic identifying information about the account.
"""
type AccountReference {
  id: Int
  name: String
}

"""Power BI Dedicated Integration"""
type CloudAzurePowerbidedicatedIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

type CustomerAdministrationJobs {
  """Organization Create job results"""
  organizationCreateAsyncResults(
    """the cursor from the previous request, to get the next page"""
    cursor: String

    """Filter organization create job results"""
    filter: OrganizationOrganizationCreateAsyncResultFilterInput!
  ): OrganizationOrganizationCreateAsyncResultCollection
}

"""Input type for RelativeStartsWith expression"""
input AiDecisionsRelativeStartsWithInput {
  """Incident selector to be used in comparison."""
  contained: AiDecisionsIncidentObjectInput!

  """Incident selector to be used in comparison."""
  container: AiDecisionsIncidentObjectInput!
}

"""A group of users."""
type MultiTenantIdentityUserGroup {
  """a value that uniquely identifies this object"""
  id: ID!

  """the name of the object"""
  name: String!
}

"""Nerdpack subscription information."""
type NerdpackSubscription {
  """
  What type of access the user has over this subscription. Eg: direct or inherited.
  """
  accessType: [NerdpackSubscriptionAccessType]

  """Unique identifier of the account that has subscribed to the Nerdpack."""
  accountId: Int

  """Nerdpack associated to the subscribed version."""
  nerdpackVersion: NerdpackVersion

  """Tag associated with the version."""
  tag: NerdpackTagName
}

"""
This scalar represents the raw nrql query results as returned from NRDB. It is a `Map` of `String` keys to values.

The shape of these objects reflect the query used to generate them, the contents
of the objects is not part of the GraphQL schema.
"""
scalar NrdbRawResults

"""
An object that represents the golden tags scoped by domain and type mutation result
"""
type EntityGoldenTagsDomainTypeScopedResponse {
  """The list of the errors"""
  errors: [EntityGoldenGoldenMetricsError!]

  """The tags results of the mutations"""
  tags: EntityGoldenTagsDomainTypeScoped
}

"""Information about the Nerdpack"""
type Nr1CatalogNerdpack {
  """The unique identifier for the Nerdpack"""
  id: ID!

  """
  Metadata associated with the Nerdpack that is available in the New Relic One Catalog
  """
  metadata: Nr1CatalogNerdpackMetadata

  """Indicates the visibility of the Nerdpack"""
  visibility: Nr1CatalogNerdpackVisibility!
}

"""Status of the test"""
enum AiWorkflowsTestResponseStatus {
  """The test failed"""
  FAILURE

  """The test succeeded"""
  SUCCESS
}

"""Wrapper object for namespace retention values"""
type DataManagementRetentionValues {
  """List of rules applied to a namespace"""
  appliedRules: [DataManagementAppliedRules]

  """The name of a namespace"""
  namespace: String

  """The retention value from the subscription (in days)"""
  subscriptionRetentionInDays: Int
}

"""User notification channel."""
type AlertsUserNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet! @deprecated(reason: "This channel type is deprecated")

  """User channel specific configuration."""
  config: AlertsUserNotificationChannelConfig! @deprecated(reason: "This channel type is deprecated")

  """Channel ID."""
  id: ID! @deprecated(reason: "This channel type is deprecated")

  """Channel name."""
  name: String! @deprecated(reason: "This channel type is deprecated")

  """Channel type."""
  type: AlertsNotificationChannelType! @deprecated(reason: "This channel type is deprecated")
}

"""
Configuration for visualization type 'viz.bar'. Learn more about [bar](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#bar) widget.
"""
input DashboardBarWidgetConfigurationInput {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"""Provides all the available filters on the role id"""
input MultiTenantAuthorizationRoleIdInputFilter {
  """performs an equals operation"""
  eq: Int!
}

"""Variable types"""
enum AiNotificationsVariableType {
  """Boolean variable type"""
  BOOLEAN

  """List variable type"""
  LIST

  """number variable type"""
  NUMBER

  """Object variable type"""
  OBJECT

  """String variable type"""
  STRING
}

"""
enum of Orientations that the user can select for their emulated device
"""
enum SyntheticsDeviceOrientation {
  """This allows the screenshot to be taken in the landscape orientation"""
  LANDSCAPE

  """This will disable device emulation"""
  NONE

  """This allows the screenshot to be taken in the portrait orientation"""
  PORTRAIT
}

"""Error details when processing drop rule requests."""
type NrqlDropRulesError {
  """A detailed error message."""
  description: String!

  """The category of error that occurred."""
  reason: NrqlDropRulesErrorReason!
}

"""Api Management Integration"""
type CloudAzureApimanagementIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input type for the metrics."""
input EntityGoldenMetricInput {
  """The field that is used identifies the entities. Default: entity.guid"""
  eventId: String

  """The field to FACET by. Default: entity.name"""
  facet: String

  """The FROM clause of the query. Default: Metric"""
  from: String

  """The name of the metric"""
  name: String!

  """The SELECT clause of the query."""
  select: String!

  """The title of the metric"""
  title: String!

  """If a complementary WHERE clause is given this field will contain it."""
  where: String
}

"""Cloud Storage Integration"""
type CloudGcpStorageIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
"""
input AlertsNrqlConditionExpirationInput {
  """
  Whether to close all open violations when the signal expires. Defaults to true.
  """
  closeViolationsOnExpiration: Boolean

  """
  The amount of time (in seconds) to wait before considering if the signal has been lost. Max value of 172800 (48 hours).
  """
  expirationDuration: Seconds

  """
  Whether to create a new "lost signal" violation to capture that the signal expired. Defaults to false.
  """
  openViolationOnExpiration: Boolean
}

"""
Consent all the user's authorized accounts for the Incident Intelligence product for EU or FedRAMP
"""
type IncidentIntelligenceEnvironmentConsentAuthorizedAccounts {
  """The list of accounts marked with consent"""
  consentedAccounts: [IncidentIntelligenceEnvironmentConsentedAccount!]

  """The outcome of the consent marking"""
  result: IncidentIntelligenceEnvironmentConsentAccountsResult!
}

"""Duration after which a violation will automatically close."""
enum AlertsViolationTimeLimit {
  """Violation will close after eight hours."""
  EIGHT_HOURS

  """Violation will close after four hours."""
  FOUR_HOURS

  """Time limit specified does not match available options."""
  NON_MATCHABLE_LIMIT_VALUE

  """Violation will close after one hour."""
  ONE_HOUR

  """Violation will close after thirty days."""
  THIRTY_DAYS

  """Violation will close after twelve hours."""
  TWELVE_HOURS

  """Violation will close after twenty four hours."""
  TWENTY_FOUR_HOURS

  """Violation will close after two hours."""
  TWO_HOURS
}

"""Redis Cache Integration"""
type CloudAzureRediscacheIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Result options for environment deletion"""
enum IncidentIntelligenceEnvironmentDeleteEnvironmentResult {
  """The account is not entitled to incident intelligence"""
  ACCOUNT_NOT_ENTITLED

  """The environment was deleted successfully"""
  DELETED

  """The environment does not exists and cannot be deleted"""
  DOES_NOT_EXIST

  """The user is not authorized to delete an environment"""
  USER_NOT_AUTHORIZED

  """
  The user is not authorized to delete the environment due to a missing capability
  """
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"""Array of responses, one for each trace observer deletion request."""
type EdgeDeleteTraceObserverResponses {
  """
  Array of trace observer deletion responses, one for each `DeleteTraceObserverInput`.
  """
  responses: [EdgeDeleteTraceObserverResponse!]!
}

"""Vertex AI Integration"""
type CloudGcpAiplatformIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Amazon Simple Email Service (SES)"""
input CloudSesIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""A workload entity outline."""
type WorkloadEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """When the workload was created."""
  createdAt: EpochMilliseconds

  """The user that created the workload."""
  createdByUser: UserReference

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String

  """When the workload was last updated."""
  updatedAt: EpochMilliseconds

  """Status of the workload."""
  workloadStatus: WorkloadStatus
}

"""The allow list that you would like to modify."""
input AgentApplicationSegmentsBrowserSegmentAllowListInput {
  """
  A case sensitive list of url segments. The list cannot exceed 8192 characters in total. Each segment must be less than 100 characters.
  """
  segments: [String]!
}

"""
An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
"""
type UserManagementAuthenticationDomain {
  """container for groups enabling cursor based pagination"""
  groups(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter groups"""
    filter: UserManagementGroupFilterInput

    """
    a list of ids to filter returned objects by
    
    (NOTICE: setting both this argument and the filter argument to filter by ID is not allowed)
    
    (NOTICE: this argument will be deprecated at a later date, so please use the filter argument to return users by ID)
    """
    id: [ID!]

    """Sort groups"""
    sort: [UserManagementGroupSortInput!] = []
  ): UserManagementGroups

  """a value that uniquely identifies this object"""
  id: ID!

  """the name of the object"""
  name: String!

  """the method used to provision users in this authentication domain"""
  provisioningType: String!

  """container for users enabling cursor based pagination"""
  users(
    """the cursor from the previous request, to get     the next page"""
    cursor: String

    """Filter users"""
    filter: UserManagementUserFilterInput

    """
    a list of ids to filter returned objects by
    
    (NOTICE: setting both this argument and the filter argument to filter by ID is not allowed)
    
    (NOTICE: this argument will be deprecated at a later date, so please use the filter argument to return users by ID)
    """
    id: [ID!]
  ): UserManagementUsers
}

"""A Mobile Application entity outline."""
type MobileApplicationEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The ID of the Mobile App."""
  applicationId: Int

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """Summary statistics about the Mobile App."""
  mobileSummary: MobileAppSummaryData

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Firebase Hosting"""
input CloudGcpFirebasehostingIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
Fallback version to return if no version matches with the given filters.
"""
enum NerdpackVersionFilterFallback {
  """Latest version (semver)."""
  LATEST_SEMVER
}

type WhatsNewDocsStitchedFields {
  """Fetches an announcement by ID."""
  announcement(
    """The ID of the announcement."""
    id: ID!
  ): WhatsNewAnnouncementContent

  """Provides a paginated search to fetch news."""
  newsSearch(
    """A cursor."""
    cursor: String

    """A criteria for searching news."""
    query: WhatsNewContentSearchQuery
  ): WhatsNewSearchResult
}

enum RegionScope {
  """Do not filter by region"""
  GLOBAL

  """Filter by region"""
  IN_REGION
}

"""
Email verification validates that a user's email address exists and can receive email. One of: "Not Verifiable", "Verified", and "Pending".
"""
enum MultiTenantIdentityEmailVerificationState {
  """The user's email does not require verification."""
  NOT_VERIFIABLE

  """The user's email requires verification and has not been verified."""
  PENDING

  """The user's email requires verification and has been verified."""
  VERIFIED
}

"""Integration Mutation Error"""
type CloudIntegrationMutationError {
  """The passed integration slug."""
  integrationSlug: String

  """The passed linked account identifier."""
  linkedAccountId: Int

  """The error message."""
  message: String!

  """The passed newrelic account identifier."""
  nrAccountId: Int!

  """The error status."""
  type: String!
}

"""Possible destinations for the install plan target"""
enum Nr1CatalogInstallPlanDestination {
  """Application (APM) install"""
  APPLICATION

  """Cloud provider install"""
  CLOUD

  """Host install"""
  HOST

  """Kubernetes install"""
  KUBERNETES

  """
  Unknown install - special case when the target where the install takes place is unknown (such as guided install)
  """
  UNKNOWN
}

"""Configuration for overriding properties of issues created by merges."""
input AiDecisionsOverrideConfigurationInput {
  """Description merged issues should take."""
  description: String

  """Priority merged issues should take."""
  priority: AiDecisionsIssuePriority

  """Title merged issues should take."""
  title: String
}

"""
Details about the contact channel where users can get support via the web
"""
input Nr1CatalogCommunityContactChannelInput {
  """The URL linking to the website where users can get web support"""
  url: String!
}

"""The advanced options inputs available for a Simple (ping) monitor"""
input SyntheticsSimpleMonitorAdvancedOptionsInput {
  """Custom headers to use in monitor job"""
  customHeaders: [SyntheticsCustomHeaderInput]

  """Categorize redirects during a monitor job as a failure"""
  redirectIsFailure: Boolean

  """Validation text for monitor to search for at given URI"""
  responseValidationText: String

  """
  Monitor should skip default HEAD request and instead use GET verb in check
  """
  shouldBypassHeadRequest: Boolean

  """Monitor should validate SSL certificate chain"""
  useTlsValidation: Boolean
}

"""
Monitor downtime object returned to the customer for a downtime run daily
"""
type SyntheticsDailyMonitorDowntimeMutationResult {
  """The account ID associated with the monitor downtime"""
  accountId: Int

  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  endRepeat: SyntheticsDateWindowEndOutput

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """The entity GUID associated with the monitor downtime"""
  guid: EntityGuid

  """The monitor GUIDs associated with the monitor downtime"""
  monitorGuids: [EntityGuid]

  """The name of the monitor downtime"""
  name: String

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""Input rule type for bulk rule creation"""
input DataManagementRuleInput {
  """The namespace the event retention rule applies to"""
  namespace: String

  """Length of time for event data retention (in days)"""
  retentionInDays: Int
}

"""An object that represents a metric rename rule."""
type MetricNormalizationRule {
  """Rule action."""
  action: MetricNormalizationRuleAction

  """Application GUID"""
  applicationGuid: EntityGuid

  """Application Name"""
  applicationName: String

  """Date of rule creation."""
  createdAt: EpochMilliseconds

  """Is rule enabled?"""
  enabled: Boolean!

  """Rule evaluation order"""
  evalOrder: Int

  """Rule Id"""
  id: Int!

  """Metric Match Expression."""
  matchExpression: String!

  """Notes."""
  notes: String

  """Metric Replacement Expression."""
  replacement: String

  """Whether it terminates the evaluation chain or not"""
  terminateChain: Boolean
}

"""Specifies the supported entity types to be no entity types"""
type Nr1CatalogNoSupportedEntityTypes implements Nr1CatalogSupportedEntityTypes {
  """The level of support entity types. Always set to NONE"""
  mode: Nr1CatalogSupportedEntityTypesMode!
}

"""Exists only if a user has a pending upgrade request."""
type MultiTenantIdentityPendingUpgradeRequest {
  """a value that uniquely identifies this object"""
  id: ID!

  """Requester message, why the user believes they require the upgrade."""
  message: String

  """Requested user type for the user."""
  requestedUserType: MultiTenantIdentityUserType
}

"""The role associated to the grant"""
type MultiTenantAuthorizationGrantRole {
  """The id of the role"""
  id: Int!

  """The name of the role"""
  name: String!
}

"""The id of the job to retrieve"""
input OrganizationOrganizationCreateJobIdInput {
  """An organization create job id"""
  eq: ID

  """A set of job ids to search for"""
  in: [ID!]
}

"""Configuration options for a monitor downtime that runs weekly"""
input SyntheticsMonitorDowntimeWeeklyConfig {
  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  endRepeat: SyntheticsDateWindowEndConfig

  """The date and time in which the monitor downtime will end"""
  endTime: NaiveDateTime

  """
  Configuration options if the customer wants the monitor to end at a specific date
  """
  maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]

  """The date and time in which the monitor downtime will begin"""
  startTime: NaiveDateTime

  """The timezone the time values will be in"""
  timezone: String
}

"""Autogenerated return type of LinkAccount"""
type CloudLinkAccountPayload {
  """The list of errors."""
  errors: [CloudAccountMutationError!]!

  """The created Linked accounts."""
  linkedAccounts: [CloudLinkedAccount!]!
}

"""Result of trying to remove the subscription."""
type NerdpackUnsubscribeResult {
  """Nerdpack to be unsubscribed from."""
  nerdpack: NerdpackData!

  """Unsubscribe result per account."""
  resultsPerAccount: [NerdpackMutationResultPerAccount]
}

"""Type that wraps the errors from a entity delete operation."""
type EntityDeleteError {
  """Guid related to the error."""
  guid: EntityGuid

  """User-friendly message describing the error."""
  message: String!

  """
  Describes all potential error types that a delete operation might return.
  """
  type: EntityDeleteErrorType!
}

"""Connect"""
input CloudAwsConnectIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Elastic Load Balancing - Classic Load Balancer (ELB)"""
input CloudElbIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""The input object representing the user being deleted"""
input UserManagementDeleteUser {
  """The ID of the user to be deleted"""
  id: ID!
}

"""Data found for one application instance's loaded modules."""
type AgentEnvironmentAccountApplicationLoadedModules {
  """List of Guids of the APM Applications this instance belongs to."""
  applicationGuids: [EntityGuid!]!

  """Information of the application instance, such as host and language."""
  details: AgentEnvironmentApplicationInstanceDetails

  """A list of loaded modules of the application instance."""
  loadedModules: [AgentEnvironmentApplicationLoadedModule!]
}

"""Result of undelete operation."""
type DashboardUndeleteResult {
  """
  Expected errors while processing request. No errors means successful request.
  """
  errors: [DashboardUndeleteError]
}

"""Result from removing a device."""
type MobilePushNotificationRemoveDeviceResult {
  """The uuid of the device that was removed."""
  deviceId: String

  """The success or failure message from the attempted remove."""
  message: String
}

"""Provides the operations available on the name"""
input OrganizationNameInput {
  """Part of an authentication domain name"""
  contains: String

  """An authentication domain name"""
  eq: String
}

"""Configuration for visualization type 'viz.bar'"""
type DashboardBarWidgetConfiguration {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQuery]
}

"""
An object containing metadata about the execution of an asynchronous NRQL query.
"""
type NrdbQueryProgress {
  """Whether the query has finished executing."""
  completed: Boolean

  """
  A token for retrieving the results of a previously executed asynchronous query.
  """
  queryId: ID

  """
  Results of the completed query will expire permanently after this long.
  """
  resultExpiration: Seconds

  """
  Wait at least this long before querying for completed results with the `queryId`.
  """
  retryAfter: Seconds

  """
  The server may cancel the NRDB query after this long if no GraphQL queries have been made to check the `queryId`'s status.
  """
  retryDeadline: Seconds
}

"""Provides all the available filters on the authentication domain id"""
input OrganizationOrganizationAuthenticationDomainIdInputFilter {
  """performs an equals operation"""
  eq: ID!
}

type AiIssuesAccountStitchedFields {
  """Fetch config for env"""
  configByEnvironment: AiIssuesConfigurationByEnvironment

  """Fetch incidents latest data by supplied filter"""
  incidents(
    """cursor"""
    cursor: String

    """filter incidents"""
    filter: AiIssuesFilterIncidents

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIncidentData

  """Fetch incidents events data by supplied filter"""
  incidentsEvents(
    """cursor"""
    cursor: String

    """filter incidents events"""
    filter: AiIssuesFilterIncidentsEvents

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIncidentData

  """Fetch issues latest data by supplied filter"""
  issues(
    """cursor"""
    cursor: String

    """filter issues"""
    filter: AiIssuesFilterIssues

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIssueData

  """Fetch issues events data by supplied filter"""
  issuesEvents(
    """cursor"""
    cursor: String

    """filter issues events"""
    filter: AiIssuesFilterIssuesEvents

    """time window, if not provided the default is the last 24 hours"""
    timeWindow: TimeWindowInput
  ): AiIssuesIssueData
}

"""Issue muting state"""
enum AiIssuesIssueMutingState {
  """Issue is muted"""
  FULLY_MUTED

  """Issue is not muted"""
  NOT_MUTED

  """Issue is partially muted"""
  PARTIALLY_MUTED
}

"""The allow list object for browser applications."""
type AgentApplicationSegmentsBrowserSegmentAllowList {
  """The url segments that are allowed."""
  segments: [String]
}

"""WAF Integration"""
type CloudAwsWafIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Configuration for user notification channel."""
type AlertsUserNotificationChannelConfig {
  """User ID."""
  userId: String! @deprecated(reason: "This channel type is deprecated")
}

"""Fetch Metadata for AWS integrations Integration"""
type CloudAwsMetadataIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Product types"""
enum AiNotificationsProduct {
  """Alerts product type"""
  ALERTS

  """APM product type"""
  APM

  """Change tracking product type"""
  CHANGE_TRACKING

  """CSSP (EOPs) product type"""
  CSSP

  """Discussions and comments product type"""
  DISCUSSIONS

  """Error Tracking product type"""
  ERROR_TRACKING

  """Incident Intelligence product type"""
  IINT

  """Notifications internal product type"""
  NTFC

  """Proactive Detection product type"""
  PD

  """Security product type"""
  SECURITY

  """Sharing product type"""
  SHARING
}

"""Sort object"""
input AiNotificationsChannelSorter {
  """direction"""
  direction: AiNotificationsSortOrder!

  """field"""
  field: AiNotificationsChannelFields!
}

"""The result of deleting a key transaction."""
type KeyTransactionDeleteResult {
  """If the delete request succeeded."""
  success: Boolean
}

"""A Cert Check monitor resulting from a Cert Check monitor mutation"""
type SyntheticsCertCheckMonitor {
  """The creation time of the monitor in millis"""
  createdAt: EpochMilliseconds

  """The domain of the host that will have its certificate checked"""
  domain: String

  """The unique client identifier for the Synthetics Monitor in New Relic"""
  guid: EntityGuid

  """The unique identifier of the monitor within the Synthetics domain"""
  id: ID

  """The locations the monitor runs from"""
  locations: SyntheticsLocations

  """The last modification time of the monitor in millis"""
  modifiedAt: EpochMilliseconds

  """The human readable identifier for the monitor"""
  name: String

  """
  The desired number of remaining days until the certificate expires to trigger a monitor failure
  """
  numberDaysToFailBeforeCertExpires: Int

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus
}

"""
Successfully created span attribute trace filter rule, or one or more error responses if there were issues.
"""
type EdgeCreateSpanAttributeRulesResponse {
  """
  Errors that may occur when creating a `SpanAttributeTraceFilter`. Defaults to `null` in case of success.
  """
  errors: [EdgeCreateSpanAttributeRuleResponseError]

  """
  The trace filter rules that were created. Defaults to `null` in case of failure.
  """
  rules: [EdgeSpanAttributeRule]
}

"""Known error codes and messages for `DeleteTraceObserverResponseError`."""
enum EdgeDeleteTraceObserverResponseErrorType {
  """The trace observer has already been deleted."""
  ALREADY_DELETED

  """No trace observer was found with the id given."""
  NOT_FOUND
}

"""
Information for generating the condition NRQL query.
Output from the evaluated NRQL query will be compared to the condition terms to detect violations.
"""
type AlertsNrqlConditionQuery {
  """
  Deprecated; superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.
  
  By default, we evaluate the NRQL query in one-minute time windows. The start time depends on the value you select in the NRQL condition's `evaluationOffset`. Evaluation offset cannot be greater than 60 minutes.
  
  This value is the number of time windows we look back at the aggregated data.
  
  Example: With an `evaluationOffset` of 3, the NRQL time window applied to your query will be:
  
  `SINCE 3 minutes ago UNTIL 2 minutes ago`
  """
  evaluationOffset: Int @deprecated(reason: "Superseded by `signal.aggregationMethod` with `signal.aggregationDelay` or `signal.aggregationTimer`.")

  """NRQL syntax that defines the query."""
  query: Nrql!
}

"""An AWS Lambda Function entity."""
type InfrastructureAwsLambdaFunctionEntity implements AlertableEntity & Entity & InfrastructureIntegrationEntity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds
  integrationTypeCode: String

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean
  runtime: String

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Mutation result status."""
enum NerdStorageVaultResultStatus {
  """The mutation failed."""
  FAILURE

  """The mutation succeeded."""
  SUCCESS
}

"""Input type for Or expression"""
input AiDecisionsOrInput {
  """Left child expression."""
  left: AiDecisionsRuleExpressionInput!

  """Right child expression."""
  right: AiDecisionsRuleExpressionInput!
}

"""The result of a Script Api monitor create mutation"""
type SyntheticsScriptApiMonitorCreateMutationResult {
  """Errors that occurred during Script Api monitor create mutation"""
  errors: [SyntheticsMonitorCreateError]!

  """The resulting Script Api monitor"""
  monitor: SyntheticsScriptApiMonitor
}

"""Possible types for the install plan target"""
enum Nr1CatalogInstallPlanTargetType {
  """Agent install"""
  AGENT

  """Integration install"""
  INTEGRATION

  """On host integration install"""
  ON_HOST_INTEGRATION

  """
  Unknown install - special case when the target where the install takes place is unknown (such as guided install)
  """
  UNKNOWN
}

"""Represents the result of the query history record."""
type QueryHistoryNrqlHistoryResult {
  """List of cross accounts where the query is executed."""
  accountIds: [Int!]

  """The time the query was created as an ISO8601 formatted string."""
  createdAt: DateTime

  """Query executed."""
  query: Nrql
}

"""App Engine Integration"""
type CloudGcpAppengineIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Event Hub Integration"""
type CloudAzureEventhubIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Configuration settings for the Browser App"""
type BrowserApplicationSettings {
  """The current Apdex target setting"""
  apdexTarget: Float
}

"""
Results for environment attributes search. This list is paginated. Use the cursor to go through all the available results.
"""
type AgentEnvironmentAccountEnvironmentAttributesResults {
  """
  If nextCursor is a String value, set it to the cursor input field while searching in order to get the next page of results.
  """
  nextCursor: String

  """Results of the search."""
  results: [AgentEnvironmentApplicationEnvironmentAttributes!]
}

"""Provides all the available filters on a role"""
input MultiTenantAuthorizationRoleFilterInputExpression {
  """The id of the role"""
  id: MultiTenantAuthorizationRoleIdInputFilter

  """The name of the role"""
  name: MultiTenantAuthorizationRoleNameInputFilter

  """The organization id the role belongs to"""
  organizationId: MultiTenantAuthorizationRoleOrganizationIdInputFilter!

  """The scope of the role"""
  scope: MultiTenantAuthorizationRoleScopeInputFilter

  """The type of the role"""
  type: MultiTenantAuthorizationRoleTypeInputFilter
}

"""Environment already exists detailed result"""
type IncidentIntelligenceEnvironmentEnvironmentAlreadyExists {
  """The account id of the already exists environment"""
  accountId: Int!

  """The already exists environment"""
  environment: IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment!

  """The parent account id of the already exists environment"""
  masterAccountId: Int!
}

"""Input type for FixedJaccardDistance expression"""
input AiDecisionsFixedJaccardDistanceInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Float!

  """Value to be used in comparison."""
  value: String!
}

"""Nerdgraph account field"""
type SyntheticsAccountStitchedFields {
  """Query that fetches the script of a specific scripted monitor"""
  script(
    """Unique identifier for monitor that that runs the script to be fetched"""
    monitorGuid: EntityGuid!
  ): SyntheticsMonitorScriptQueryResponse

  """
  visiblity(flag:Synthetics/setGraphqlCustomerVisible) Query that fetches the steps used by the specified Step Monitor
  """
  steps(
    """
    Unique identifier for monitor that holds the script steps that are to be fetched
    """
    monitorGuid: EntityGuid!
  ): [SyntheticsStep!]
}

"""The input parameters for a new streaming rule"""
input StreamingExportRuleInput {
  """Additional information about the rule"""
  description: String

  """The name of this export rule"""
  name: String!

  """NRQL to select the telemetry data to export"""
  nrql: Nrql!

  """
  Whether to compress payloads before sending them out, and what compression format to use if enabled
  """
  payloadCompression: StreamingExportPayloadCompression
}

"""PredicateInput input object"""
input AiWorkflowsPredicateInput {
  """attribute"""
  attribute: String!

  """operator"""
  operator: AiWorkflowsOperator!

  """values"""
  values: [String!]!
}

"""General properties related to mobile applications."""
type AgentApplicationSettingsMobileProperties {
  """A token used to authenticate your mobile application for data ingest."""
  applicationToken: SecureValue
}

"""An async organization creation result customer"""
type OrganizationOrganizationCreateAsyncCustomerResult {
  """The customer ID"""
  customerId: String
}

"""The result of the request to list drop rules for an account."""
type NrqlDropRulesListDropRulesResult {
  """Information about why we could not list rules."""
  error: NrqlDropRulesError

  """The list of drop rules queried on the targeted account."""
  rules: [NrqlDropRulesDropRule]
}

"""Operator used to compare against the threshold for NrqlConditions."""
enum AlertsNrqlConditionTermsOperator {
  """For comparing values above a threshold."""
  ABOVE

  """For comparing values above or equal to a threshold."""
  ABOVE_OR_EQUALS

  """For comparing values below a threshold."""
  BELOW

  """For comparing values below or equal to a threshold."""
  BELOW_OR_EQUALS

  """For comparing values equal to a threshold."""
  EQUALS

  """For comparing values that do not equal a threshold."""
  NOT_EQUALS
}

"""Container for conditions with associated notifications channels."""
type AlertsPolicy {
  """Account ID of the policy."""
  accountId: Int!

  """Primary key for policies."""
  id: ID!

  """
  Determines how incidents are created for critical violations of the conditions contained in the policy.
  """
  incidentPreference: AlertsIncidentPreference!

  """Description of the policy."""
  name: String!
}

"""Example properties to be added to the rendering context, for tests"""
input AiNotificationsExampleValue {
  """example"""
  example: String!

  """type"""
  type: AiNotificationsVariableType!
}

"""Error object for Synthetics mutations"""
type SyntheticsError {
  """Description explaining the cause of the error"""
  description: String
}

"""A human-readable definition of an NRDB Event Type"""
type EventDefinition {
  """A list of attribute definitions for this event type"""
  attributes: [EventAttributeDefinition]

  """A short description of this event"""
  definition: String

  """The human-friendly formatted name of the event"""
  label: String

  """The name of the event"""
  name: String
}

"""Result status"""
enum AiNotificationsResult {
  """Failure"""
  FAIL

  """Success"""
  SUCCESS
}

"""
Information required to disable a cloud service integration from a linked account.
"""
input CloudDisableAccountIntegrationInput {
  """The linked account identifier"""
  linkedAccountId: Int!
}

"""Browser agent install types."""
enum BrowserAgentInstallType {
  """Lite agent install type."""
  LITE

  """Pro agent install type."""
  PRO

  """Pro + SPA agent install type."""
  PRO_SPA
}

"""Configuration for OpsGenie notification channel."""
type AlertsOpsGenieNotificationChannelConfig {
  """API key."""
  apiKey: SecureValue!

  """OpsGenie data center region."""
  dataCenterRegion: AlertsOpsGenieDataCenterRegion!

  """List of email recipients."""
  recipients: [String!]

  """Tags."""
  tags: [String!]

  """Teams."""
  teams: [String!]
}

type NerdStorageCollectionMember {
  """The NerdStorage document."""
  document: NerdStorageDocument

  """The documentId."""
  id: String
}

"""Autogenerated return type of DisableIntegration"""
type CloudDisableIntegrationPayload {
  """The list of disabled cloud service integrations."""
  disabledIntegrations: [CloudIntegration!]!

  """The list of errors."""
  errors: [CloudIntegrationMutationError!]!
}

"""PagerDuty notification channel."""
type AlertsPagerDutyNotificationChannel implements AlertsNotificationChannel {
  """Policies associated with the channel."""
  associatedPolicies: AlertsNotificationChannelPoliciesResultSet!

  """PagerDuty channel specific configuration."""
  config: AlertsPagerDutyNotificationChannelConfig!

  """Channel ID."""
  id: ID!

  """Channel name."""
  name: String!

  """Channel type."""
  type: AlertsNotificationChannelType!
}

"""Represents all the visualization types available for static charts."""
enum ChartImageType {
  APDEX
  AREA
  BAR
  BASELINE
  BILLBOARD
  BULLET
  EVENT_FEED
  FUNNEL
  HEATMAP
  HISTOGRAM
  LINE
  PIE
  SCATTER
  STACKED_HORIZONTAL_BAR
  TABLE
  VERTICAL_BAR
}

"""
The `Date` scalar represents a date. The `Date` appears as an ISO8601 formatted string.
"""
scalar Date

"""
Array of responses, one for each span attribute trace filter rule creation request.
"""
type EdgeCreateTraceFilterRuleResponses {
  """Span attribute trace filter rule creation response"""
  spanAttributeRules: EdgeCreateSpanAttributeRulesResponse!
}

"""An object that represents a recipe status."""
input InstallationRecipeStatus {
  """The version of the newrelic-cli that was used for a given recipe."""
  cliVersion: SemVer!

  """
  Whether or not the recipe has been installed and all steps have been completed.
  """
  complete: Boolean!

  """The display name for a given recipe."""
  displayName: String!

  """The entity Guid for a given recipe."""
  entityGuid: EntityGuid!

  """The error returned for a given recipe."""
  error: InstallationStatusErrorInput!

  """The host name of the customer's machine."""
  hostName: String!

  """The unique ID that corresponds to an install event."""
  installId: ID

  """The version of the open-install-library that is being used."""
  installLibraryVersion: SemVer

  """The kernel architecture of the customer's machine."""
  kernelArch: String!

  """The kernel version of the customer's machine."""
  kernelVersion: SemVer!

  """The path to the log file on the customer's host."""
  logFilePath: String!

  """
  Additional key:value data related to an error or related to the environment where the installation occurred.
  """
  metadata: InstallationRawMetadata

  """The unique name for a given recipe."""
  name: String!

  """The OS of the customer's machine."""
  os: String!

  """The platform name provided by the open-install-library."""
  platform: String!

  """The platform family name provided by the open-install-library."""
  platformFamily: String!

  """The platform version provided by the open-install-library."""
  platformVersion: SemVer!

  """
  The redirect URL created by the CLI used for redirecting to a particular entity.
  """
  redirectUrl: String

  """The status for a given recipe."""
  status: InstallationRecipeStatusType!

  """Whether or not the recipe being installed is a targeted install."""
  targetedInstall: Boolean!

  """
  The path to the installation task as defined in the open-install-library.
  """
  taskPath: String

  """The number of milliseconds it took to validate the recipe."""
  validationDurationMilliseconds: EpochMilliseconds!
}

"""AlloyDB"""
input CloudGcpAlloydbIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""
Makes it possible to augment the notification with additional data from the New Relic platform
"""
type AiWorkflowsEnrichment {
  """Account Id of the Enrichment"""
  accountId: Int!

  """List of configurations for the enrichment"""
  configurations: [AiWorkflowsConfiguration!]!

  """The time the Enrichment was created"""
  createdAt: DateTime!

  """Enrichment Id"""
  id: ID!

  """Name of the Enrichment"""
  name: String!

  """Type of the Enrichment"""
  type: AiWorkflowsEnrichmentType!

  """The time the Enrichment was last updated"""
  updatedAt: DateTime!
}

"""Result options for account consent marking"""
enum IncidentIntelligenceEnvironmentDissentAccountsResult {
  """
  There are no accounts authorized by the user that are consented for Incident Intelligence usage
  """
  CONSENTED_ACCOUNTS_NOT_FOUND

  """Accounts were dissented"""
  DISSENTED

  """The user is not authorized to dissent due to a missing capability"""
  USER_NOT_AUTHORIZED_MISSING_CAPABILITY
}

"""The NerdStorageVault data access level."""
input NerdStorageVaultScope {
  """A NerdStorageVault data access level for the current user."""
  actor: NerdStorageVaultActorScope
}

"""The `SortBy` enum is for designating sort order."""
enum SortBy {
  """Sort in ascending order."""
  ASC

  """Sort in descending order."""
  DESC
}

"""Machine Learning Integration"""
type CloudAzureMachinelearningIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input type for RelativeEndsWith expression"""
input AiDecisionsRelativeEndsWithInput {
  """Incident selector to be used in comparison."""
  contained: AiDecisionsIncidentObjectInput!

  """Incident selector to be used in comparison."""
  container: AiDecisionsIncidentObjectInput!
}

"""An object that represents a golden tag."""
type EntityGoldenTag {
  """The golden tag key."""
  key: String!
}

"""The input object representing parameters for the ID input filter"""
input MultiTenantIdentityGroupIdInput {
  """A group ID"""
  eq: ID!
}

"""
A wrapper object that contains paginated recipe events along with counts and a pagination cursor
"""
type InstallationRecipeEventResult {
  """
  Cursor for fetching next page of results.  Results are ordered by descending timestamp (most recent first)
  """
  cursor: String

  """List of RecipeEvent objects"""
  recipeEvents: [InstallationRecipeEvent!]

  """Total number of RecipeEvent results across all pages for a given query"""
  totalCount: Int
}

"""
Type defined so its fields will be merged directly into NerdGraph's actor type.
"""
type QueryHistoryActorStitchedFields {
  """List of records of the query history for the current user."""
  nrql(
    """Input options to select query records."""
    options: QueryHistoryQueryHistoryOptionsInput
  ): [QueryHistoryNrqlHistoryResult!]
}

"""
A result set containing associated policies information for a notification channel.
"""
type AlertsNotificationChannelPoliciesResultSet {
  """A set of policies associated with the channel."""
  policies: [AlertsNotificationChannelPolicy!]!

  """Total number of policies associated with the channel."""
  totalCount: Int!
}

"""Data required to change the data source group."""
input EdgeDataSourceGroupInput {
  """The entity guids representing the entities you would like to update."""
  guids: [EntityGuid!]

  """
  The type of update that should be performed with the supplied entity guids.
  """
  updateType: EdgeDataSourceGroupUpdateType!
}

"""Cosmos DB Integration"""
type CloudAzureCosmosdbIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Input type for RelativeContains expression"""
input AiDecisionsRelativeContainsInput {
  """Incident selector to be used in comparison."""
  contained: AiDecisionsIncidentObjectInput!

  """Incident selector to be used in comparison."""
  container: AiDecisionsIncidentObjectInput!
}

"""The wanted behavior for muted issues in the workflow"""
enum AiWorkflowsMutingRulesHandling {
  """Notify only about partially muted and unmuted issues"""
  DONT_NOTIFY_FULLY_MUTED_ISSUES

  """Notify only about unmuted issues"""
  DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES

  """Notify about all issues"""
  NOTIFY_ALL_ISSUES
}

"""
The type of update you would like to apply to the existing data source group.
"""
enum EdgeDataSourceGroupUpdateType {
  """Add the supplied entity guids to those that are currently active."""
  ADD

  """Remove the supplied entity guids from those that are currently active."""
  REMOVE

  """Replace the currently active entity guids with the ones supplied."""
  REPLACE
}

"""Input type for All expression"""
input AiDecisionsAllInput {
  """Children expressions."""
  children: [AiDecisionsRuleExpressionInput!]!
}

"""An object that contains the overall installation status to be created."""
input InstallationInstallStatusInput {
  """
  The version of the newrelic-cli that was used for a given installation attempt.
  """
  cliVersion: SemVer!

  """Refers to the source of the installation."""
  deployedBy: String

  """Whether or not the installation is using a proxy."""
  enabledProxy: Boolean!

  """The error for a given installation attempt."""
  error: InstallationStatusErrorInput!

  """The host name of the customer's machine."""
  hostName: String!

  """The unique ID that corresponds to an install status."""
  installId: ID!

  """The version of the open-install-library that is being used."""
  installLibraryVersion: SemVer!

  """Whether or not the installation is supported on the host machine."""
  isUnsupported: Boolean!

  """The kernel architecture of the customer's machine."""
  kernelArch: String!

  """The kernel version of the customer's machine."""
  kernelVersion: SemVer!

  """The path to the log file on the customer's host."""
  logFilePath: String!

  """The OS of the customer's machine."""
  os: String!

  """The platform name provided by the open-install-library."""
  platform: String!

  """The platform family name provided by the open-install-library."""
  platformFamily: String!

  """The platform version provided by the open-install-library."""
  platformVersion: SemVer!

  """
  A URL generated by the newrelic-cli that redirects to the appropriate entity once an installation is complete.
  """
  redirectUrl: String!

  """The state of the installation."""
  state: InstallationInstallStateType!

  """Whether or not the installation is a targeted install."""
  targetedInstall: Boolean!

  """The timestamp for when the install event occurred."""
  timestamp: EpochSeconds
}

"""Amazon Elastic File System (EFS)"""
input CloudEfsIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""Input type for RelativeJaccardDistance expression"""
input AiDecisionsRelativeJaccardDistanceInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Maximum distance threshold."""
  maxDistance: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""Azure Virtual Machines"""
input CloudAzureVmsIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Virtual machine scale sets Integration"""
type CloudAzureVirtualmachineIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
Provider and region where the trace observer is located. Currently, only AWS regions are supported.
"""
enum EdgeProviderRegion {
  """Provider: `AWS`, Region: `ap-southeast-1`"""
  AWS_AP_SOUTHEAST_1

  """Provider: `AWS`, Region: `ap-southeast-2`"""
  AWS_AP_SOUTHEAST_2

  """Provider: `AWS`, Region: `eu-central-1`"""
  AWS_EU_CENTRAL_1

  """Provider: `AWS`, Region: `eu-west-1`"""
  AWS_EU_WEST_1

  """Provider: `AWS`, Region: `us-east-1`"""
  AWS_US_EAST_1

  """Provider: `AWS`, Region: `us-east-2`"""
  AWS_US_EAST_2

  """Provider: `AWS`, Region: `us-west-2`"""
  AWS_US_WEST_2
}

"""The different units that can be used to express golden metrics."""
enum EntityGoldenMetricUnit {
  """Apdex (Application Performance Index)."""
  APDEX

  """Bits."""
  BITS

  """Bits per second."""
  BITS_PER_SECOND

  """Bytes."""
  BYTES

  """Bytes per second."""
  BYTES_PER_SECOND

  """Degrees celsius."""
  CELSIUS

  """Count."""
  COUNT

  """Hertz."""
  HERTZ

  """Messages per second."""
  MESSAGES_PER_SECOND

  """Milliseconds."""
  MS

  """Operations per second."""
  OPERATIONS_PER_SECOND

  """Pages loaded per second."""
  PAGES_PER_SECOND

  """Percentage."""
  PERCENTAGE

  """Requests received per minute."""
  REQUESTS_PER_MINUTE

  """Requests received per second."""
  REQUESTS_PER_SECOND

  """Seconds."""
  SECONDS

  """Timestamp."""
  TIMESTAMP
}

"""Power BI Dedicated"""
input CloudAzurePowerbidedicatedIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""An external service seen by an APM Application."""
type ApmExternalServiceEntity implements AlertableEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType
  externalSummary: ApmExternalServiceSummaryData @deprecated(reason: "This field is deprecated.")

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The host of the external service."""
  host: String

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""Channel result object"""
type AiNotificationsVariableResult {
  """Variable entities"""
  entities: [AiNotificationsVariable!]!

  """Cursor to get the next batch of results"""
  nextCursor: String

  """Count of all variable entities"""
  totalCount: Int!
}

"""Information about an install plan directive"""
interface Nr1CatalogInstallPlanDirective {
  """The mode of the install plan directive"""
  mode: Nr1CatalogInstallPlanDirectiveMode!
}

"""EFS Integration"""
type CloudEfsIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""List of integrations"""
input CloudAwsGovcloudIntegrationsInput {
  """ALB/NLB integration"""
  alb: [CloudAlbIntegrationInput]

  """API Gateway integration"""
  apigateway: [CloudApigatewayIntegrationInput]

  """AutoScaling integration"""
  autoscaling: [CloudAutoscalingIntegrationInput]

  """Direct Connect integration"""
  awsDirectconnect: [CloudAwsDirectconnectIntegrationInput]

  """Step Functions integration"""
  awsStates: [CloudAwsStatesIntegrationInput]

  """CloudTrail integration"""
  cloudtrail: [CloudCloudtrailIntegrationInput]

  """DynamoDB integration"""
  dynamodb: [CloudDynamodbIntegrationInput]

  """EBS integration"""
  ebs: [CloudEbsIntegrationInput]

  """EC2 integration"""
  ec2: [CloudEc2IntegrationInput]

  """Elasticsearch Service integration"""
  elasticsearch: [CloudElasticsearchIntegrationInput]

  """ELB (Classic) integration"""
  elb: [CloudElbIntegrationInput]

  """EMR integration"""
  emr: [CloudEmrIntegrationInput]

  """IAM integration"""
  iam: [CloudIamIntegrationInput]

  """Lambda integration"""
  lambda: [CloudLambdaIntegrationInput]

  """RDS integration"""
  rds: [CloudRdsIntegrationInput]

  """Redshift integration"""
  redshift: [CloudRedshiftIntegrationInput]

  """Route 53 integration"""
  route53: [CloudRoute53IntegrationInput]

  """S3 integration"""
  s3: [CloudS3IntegrationInput]

  """SNS integration"""
  sns: [CloudSnsIntegrationInput]

  """SQS integration"""
  sqs: [CloudSqsIntegrationInput]
}

"""Rule expression input"""
input AiDecisionsRuleExpressionInput {
  """Input type for All expression"""
  all: AiDecisionsAllInput

  """Input type for And expression"""
  and: AiDecisionsAndInput

  """Input type for AttributeExists expression"""
  attributeExists: AiDecisionsAttributeExistsInput

  """Input type for CategoricalClustering expression"""
  categoricalClustering: AiDecisionsCategoricalClusteringInput

  """Input type for FixedContains expression"""
  fixedContains: AiDecisionsFixedContainsInput

  """Input type for FixedCosineDistance expression"""
  fixedCosineDistance: AiDecisionsFixedCosineDistanceInput

  """Input type for FixedEndsWith expression"""
  fixedEndsWith: AiDecisionsFixedEndsWithInput

  """Input type for FixedEqual expression"""
  fixedEqual: AiDecisionsFixedEqualInput

  """Input type for FixedFuzzyScore expression"""
  fixedFuzzyScore: AiDecisionsFixedFuzzyScoreInput

  """Input type for FixedFuzzyWuzzyAdaptiveRatio expression"""
  fixedFuzzyWuzzyAdaptiveRatio: AiDecisionsFixedFuzzyWuzzyAdaptiveRatioInput

  """Input type for FixedFuzzyWuzzyPartialRatio expression"""
  fixedFuzzyWuzzyPartialRatio: AiDecisionsFixedFuzzyWuzzyPartialRatioInput

  """Input type for FixedFuzzyWuzzyRatio expression"""
  fixedFuzzyWuzzyRatio: AiDecisionsFixedFuzzyWuzzyRatioInput

  """Input type for FixedFuzzyWuzzyTokenSetRatio expression"""
  fixedFuzzyWuzzyTokenSetRatio: AiDecisionsFixedFuzzyWuzzyTokenSetRatioInput

  """Input type for FixedGreaterThan expression"""
  fixedGreaterThan: AiDecisionsFixedGreaterThanInput

  """Input type for FixedGreaterThanOrEqual expression"""
  fixedGreaterThanOrEqual: AiDecisionsFixedGreaterThanOrEqualInput

  """Input type for FixedHammingDistance expression"""
  fixedHammingDistance: AiDecisionsFixedHammingDistanceInput

  """Input type for FixedJaccardDistance expression"""
  fixedJaccardDistance: AiDecisionsFixedJaccardDistanceInput

  """Input type for FixedJaroWinkler expression"""
  fixedJaroWinkler: AiDecisionsFixedJaroWinklerInput

  """Input type for FixedLessThan expression"""
  fixedLessThan: AiDecisionsFixedLessThanInput

  """Input type for FixedLessThanOrEqual expression"""
  fixedLessThanOrEqual: AiDecisionsFixedLessThanOrEqualInput

  """Input type for FixedLevenshtein expression"""
  fixedLevenshtein: AiDecisionsFixedLevenshteinInput

  """Input type for FixedLongestCommonSubsequenceDistance expression"""
  fixedLongestCommonSubsequenceDistance: AiDecisionsFixedLongestCommonSubsequenceDistanceInput

  """Input type for FixedNumericalEqual expression"""
  fixedNumericalEqual: AiDecisionsFixedNumericalEqualInput

  """Input type for FixedRegularExpression expression"""
  fixedRegularExpression: AiDecisionsFixedRegularExpressionInput

  """Input type for FixedSoundEx expression"""
  fixedSoundEx: AiDecisionsFixedSoundExInput

  """Input type for FixedStartsWith expression"""
  fixedStartsWith: AiDecisionsFixedStartsWithInput

  """Input type for Not expression"""
  not: AiDecisionsNotInput

  """Input type for One expression"""
  one: AiDecisionsOneInput

  """Input type for Or expression"""
  or: AiDecisionsOrInput

  """Input type for RelativeCommonPrefix expression"""
  relativeCommonPrefix: AiDecisionsRelativeCommonPrefixInput

  """Input type for RelativeContains expression"""
  relativeContains: AiDecisionsRelativeContainsInput

  """Input type for RelativeCosineDistance expression"""
  relativeCosineDistance: AiDecisionsRelativeCosineDistanceInput

  """Input type for RelativeEndsWith expression"""
  relativeEndsWith: AiDecisionsRelativeEndsWithInput

  """Input type for RelativeEqual expression"""
  relativeEqual: AiDecisionsRelativeEqualInput

  """Input type for RelativeFuzzyScore expression"""
  relativeFuzzyScore: AiDecisionsRelativeFuzzyScoreInput

  """Input type for RelativeFuzzyWuzzyAdaptiveRatio expression"""
  relativeFuzzyWuzzyAdaptiveRatio: AiDecisionsRelativeFuzzyWuzzyAdaptiveRatioInput

  """Input type for RelativeFuzzyWuzzyPartialRatio expression"""
  relativeFuzzyWuzzyPartialRatio: AiDecisionsRelativeFuzzyWuzzyPartialRatioInput

  """Input type for RelativeFuzzyWuzzyRatio expression"""
  relativeFuzzyWuzzyRatio: AiDecisionsRelativeFuzzyWuzzyRatioInput

  """Input type for RelativeFuzzyWuzzyTokenSetRatio expression"""
  relativeFuzzyWuzzyTokenSetRatio: AiDecisionsRelativeFuzzyWuzzyTokenSetRatioInput

  """Input type for RelativeGreaterThan expression"""
  relativeGreaterThan: AiDecisionsRelativeGreaterThanInput

  """Input type for RelativeGreaterThanOrEqual expression"""
  relativeGreaterThanOrEqual: AiDecisionsRelativeGreaterThanOrEqualInput

  """Input type for RelativeHammingDistance expression"""
  relativeHammingDistance: AiDecisionsRelativeHammingDistanceInput

  """Input type for RelativeJaccardDistance expression"""
  relativeJaccardDistance: AiDecisionsRelativeJaccardDistanceInput

  """Input type for RelativeJaroWinkler expression"""
  relativeJaroWinkler: AiDecisionsRelativeJaroWinklerInput

  """Input type for RelativeLessThan expression"""
  relativeLessThan: AiDecisionsRelativeLessThanInput

  """Input type for RelativeLessThanOrEqual expression"""
  relativeLessThanOrEqual: AiDecisionsRelativeLessThanOrEqualInput

  """Input type for RelativeLevenshtein expression"""
  relativeLevenshtein: AiDecisionsRelativeLevenshteinInput

  """Input type for RelativeLongestCommonSubsequenceDistance expression"""
  relativeLongestCommonSubsequenceDistance: AiDecisionsRelativeLongestCommonSubsequenceDistanceInput

  """Input type for RelativeNumericalEqual expression"""
  relativeNumericalEqual: AiDecisionsRelativeNumericalEqualInput

  """Input type for RelativeRegularExpression expression"""
  relativeRegularExpression: AiDecisionsRelativeRegularExpressionInput

  """Input type for RelativeSoundEx expression"""
  relativeSoundEx: AiDecisionsRelativeSoundExInput

  """Input type for RelativeStartsWith expression"""
  relativeStartsWith: AiDecisionsRelativeStartsWithInput

  """Input type for RelativeTopologicallyDependent expression"""
  relativeTopologicallyDependent: AiDecisionsRelativeTopologicallyDependentInput

  """Input type for WholeCosineDistance expression"""
  wholeCosineDistance: AiDecisionsWholeCosineDistanceInput

  """Input type for WholeJaccardSimilarity expression"""
  wholeJaccardSimilarity: AiDecisionsWholeJaccardSimilarityInput
}

"""Information required to link a AWS account to a NewRelic account."""
input CloudAwsLinkAccountInput {
  """The AWS role ARN (used to fetch data)."""
  arn: String!

  """How metrics will be collected."""
  metricCollectionMode: CloudMetricCollectionMode

  """The linked account name."""
  name: String!
}

"""
Description of errors that may occur while attempting to create a trace observer.
"""
type EdgeCreateTraceObserverResponseError {
  """Error message, with further detail to help resolve the issue."""
  message: String!

  """Error that may occur while attempting to create a trace observer."""
  type: EdgeCreateTraceObserverResponseErrorType!
}

type NrqlDropRulesAccountStitchedFields {
  """List the drop rules for the given account"""
  list: NrqlDropRulesListDropRulesResult
}

"""Amazon Simple Notification Service (SNS)"""
input CloudSnsIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Destination Configuration input object"""
input AiWorkflowsDestinationConfigurationInput {
  """channelId"""
  channelId: ID!

  """notificationTriggers"""
  notificationTriggers: [AiWorkflowsNotificationTrigger!]
}

"""Azure Virtual Network"""
input CloudAzureVirtualnetworksIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""A customer organization"""
type OrganizationCustomerOrganizationWrapper {
  """Accessible customers"""
  items: [OrganizationCustomerOrganization!]!

  """
  an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

"""Details of a drop rule."""
type NrqlDropRulesDropRule {
  """The account this drop rule targets."""
  account: AccountReference

  """The account this drop rule targets."""
  accountId: Int!

  """The behavior of the drop rule."""
  action: NrqlDropRulesAction!

  """The time this drop rule was created."""
  createdAt: DateTime!

  """The id of the user that created the drop rule."""
  createdBy: Int!

  """The user reference of the user that created the drop rule"""
  creator: UserReference

  """Additional information about the rule."""
  description: String

  """The unique id for the drop rule."""
  id: ID!

  """The NRQL used to match data that will receive the `action`."""
  nrql: String!

  """Who or what registered this rule."""
  source: String
}

"""Workflow input object"""
input AiWorkflowsCreateWorkflowInput {
  """destinationConfigurations"""
  destinationConfigurations: [AiWorkflowsDestinationConfigurationInput!]!

  """destinationsEnabled"""
  destinationsEnabled: Boolean

  """enrichments"""
  enrichments: AiWorkflowsEnrichmentsInput

  """enrichmentsEnabled"""
  enrichmentsEnabled: Boolean

  """issuesFilter"""
  issuesFilter: AiWorkflowsFilterInput

  """mutingRulesHandling"""
  mutingRulesHandling: AiWorkflowsMutingRulesHandling!

  """name"""
  name: String!

  """workflowEnabled"""
  workflowEnabled: Boolean
}

"""Enrichment input object"""
input AiWorkflowsEnrichmentsInput {
  """nrql"""
  nrql: [AiWorkflowsNrqlEnrichmentInput!]!
}

"""The unit of measurement"""
type DataDictionaryUnit {
  """Name and abbreviation (if applicable) of the unit"""
  label: String!
}

"""Filters on the grants scope id"""
input MultiTenantAuthorizationGrantScopeIdInputFilter {
  """Performs an equals operation"""
  eq: String

  """Performs an in operation"""
  in: [String!]
}

"""
Represents an AI Incident Intelligence environment. An environment crosses the account boundary and allows
correlating data as long as the data's accounts are attached to the same environment.
"""
type IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment {
  """
  Authorized accounts associated with the environment. Events from these accounts can be correlated with one another (across the account boundary). The resulting correlated issue will be stored in the Incident Intelligence account
  """
  associatedAuthorizedAccounts: [AccountReference]!

  """The assigned quota on the current billing cycle"""
  billingCycleQuota: Int

  """When the environment was created"""
  createdAt: EpochMilliseconds

  """The user that created the environment"""
  createdBy: UserReference

  """The account attached to the environment"""
  incidentIntelligenceAccount: AccountReference

  """
  True indicates that a consent has to be asked when an environment is created. The consent is to acknowledge that if the account is overaging an additional usage charge may be charged based on extra usage
  """
  isConsentRequired: Boolean!

  """Whether the environment is entitled for AI"""
  isEntitledForAi: Boolean

  """True if the environment is part of the free-tier package"""
  isFreeTier: Boolean!

  """The environment kind"""
  kind: IncidentIntelligenceEnvironmentEnvironmentKind

  """The parent account related to the environment"""
  masterAccount: AccountReference

  """The environment name"""
  name: String

  """True if the environment was consented, false otherwise"""
  wasConsented: Boolean!
}

"""Environment configuration object"""
type AiIssuesEnvironmentConfiguration {
  """Flapping interval in seconds"""
  flappingInterval: Seconds

  """Grace periods per priority"""
  gracePeriod: [AiIssuesGracePeriodConfig!]

  """Inactive period in seconds"""
  inactivePeriod: Seconds

  """Incident timeout in seconds"""
  incidentTimeout: Seconds

  """Issue TTL in seconds"""
  issueTtl: Seconds

  """Max incidents in the issue"""
  maxIssueSize: Int
}

"""General settings related to APM applications."""
type AgentApplicationSettingsApmConfig {
  """The desired target for the APDEX measurement of this APM application."""
  apdexTarget: Float

  """
  Sets if agents for this APM application should get some of their configuration from the server.
  """
  useServerSideConfig: Boolean
}

"""The events that define the SLI."""
input ServiceLevelEventsCreateInput {
  """The New Relic account ID where the events are fetched from."""
  accountId: Int!

  """The definition of bad events."""
  badEvents: ServiceLevelEventsQueryCreateInput

  """The definition of good events."""
  goodEvents: ServiceLevelEventsQueryCreateInput

  """The definition of valid events."""
  validEvents: ServiceLevelEventsQueryCreateInput!
}

"""The error type for dissociating notification channels from a policy."""
enum AlertsNotificationChannelsRemoveFromPolicyErrorType {
  """Bad user input error."""
  BAD_USER_INPUT

  """Forbidden error."""
  FORBIDDEN_ERROR

  """Not found error."""
  NOT_FOUND_ERROR

  """Server error."""
  SERVER_ERROR

  """Too many requests error."""
  TOO_MANY_REQUESTS_ERROR
}

"""Response for delete resource mutation."""
type ErrorsInboxDeleteErrorGroupResourceResponse {
  """Id of the deleted resource"""
  resourceId: ID!
}

"""
The `ApmBrowserApplicationEntityOutline` interface provides detailed information for the Browser App injected by an APM Application.
"""
interface ApmBrowserApplicationEntityOutline {
  apmBrowserSummary: ApmBrowserApplicationSummaryData
}

"""
The matching method for the rule to allocate the data partition data.
Select EQUALS to target logs that match your criteria exactly, or select LIKE to apply a fuzzy match.
"""
enum LogConfigurationsDataPartitionRuleMatchingOperator {
  """
  When applying the rule will allocate data for those attributes that are an exact match with the provided value.
  """
  EQUALS

  """
  When applying the rule will allocate data for those attributes that contain the provided value.
  """
  LIKE
}

"""Map of key value pairs for a span"""
scalar DistributedTracingSpanAttributes

"""Represents a possible default value item."""
input DashboardVariableDefaultItemInput {
  """The value of this default item."""
  value: DashboardVariableDefaultValueInput!
}

"""A detailed entity search response object type."""
type EntitySearchTypes {
  """The number of results with this type."""
  count: Int

  """The domain of the search result group."""
  domain: String

  """The combined domain & type of the search result group."""
  entityType: EntityType

  """The type of the search result group."""
  type: String
}

"""Settings for the thread profiler."""
input AgentApplicationSettingsThreadProfilerInput {
  """Is thread profiling enabled for this application?"""
  enabled: Boolean
}

"""Grace periods for issue to be activated per priority"""
input AiIssuesGracePeriodConfigurationInput {
  """critical"""
  critical: Seconds!

  """high"""
  high: Seconds!

  """low"""
  low: Seconds!

  """medium"""
  medium: Seconds!
}

"""
Information about the error that occurred as a result of submitting metadata
"""
type Nr1CatalogSubmitMetadataError {
  """A human-readable description of the error when submitting metadata"""
  description: String!

  """The field that caused the error when submitting metadata"""
  field: [String!]

  """The type of error that occurred when submitting metadata"""
  type: Nr1CatalogSubmitMetadataErrorType!
}

"""The result of deleting an application."""
type AgentApplicationDeleteResult {
  """Did the delete succeed?"""
  success: Boolean!
}

"""Object for suggestion errors"""
type AiNotificationsSuggestionError {
  """SuggestionError description"""
  description: String! @deprecated(reason: "this entire object will be deprecated, please refrain from using SuggestionError")

  """SuggestionError details"""
  details: String! @deprecated(reason: "this entire object will be deprecated, please refrain from using SuggestionError")

  """SuggestionError type"""
  type: AiNotificationsErrorType! @deprecated(reason: "this entire object will be deprecated, please refrain from using SuggestionError")
}

"""The data partition rule matching criteria."""
type LogConfigurationsDataPartitionRuleMatchingCriteria {
  """
  The attribute name against which this matching condition will be evaluated.
  """
  attributeName: String!

  """The matching expression of the data partition rule definition."""
  matchingExpression: String!

  """The matching method of the data partition rule definition."""
  matchingOperator: LogConfigurationsDataPartitionRuleMatchingOperator!
}

"""
Known error codes and messages for `CreateSpanAttributeRuleResponseError`.
"""
enum EdgeCreateSpanAttributeRuleResponseErrorType {
  """Duplicate span attribute trace filter rules found"""
  DUPLICATE_RULES

  """
  The trace filter rule creation exceeds the number of allowed span attribute rules for a trace observer
  """
  EXCEEDS_SPAN_ATTRIBUTE_RULE_LIMITS

  """Invalid trace filter rule input provided."""
  INVALID_INPUT

  """No trace observer was found with the id given."""
  NOT_FOUND

  """
  Span attribute trace filter rules found that would cancel each other out
  """
  OPPOSING_RULES
}

"""Data required to update a trace observer."""
input EdgeUpdateTraceObserverInput {
  """When set, allows updating the data source group."""
  dataSourceGroupConfig: EdgeDataSourceGroupInput

  """Globally unique identifier of the trace observer being updated."""
  id: Int!

  """
  When set to `true` a trace observer will write trace metrics to the current account.
  """
  monitoring: Boolean

  """Name of the trace observer."""
  name: String

  """When set, allows changing the random trace filter configuration."""
  randomTraceFilterConfig: EdgeRandomTraceFilterInput
}

"""Available filtering types for user type"""
input UserManagementTypeInput {
  """A user type"""
  eq: UserManagementTypeEnum!
}

"""Update Filter input object"""
input AiWorkflowsUpdatedFilterInput {
  """filterInput"""
  filterInput: AiWorkflowsFilterInput!

  """id"""
  id: ID
}

"""The monitor input values needed to create a Broken Links monitor"""
input SyntheticsCreateBrokenLinksMonitorInput {
  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsLocationsInput!

  """The human readable identifier for the monitor"""
  name: String!

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod!

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus!

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]

  """The uri the monitor runs against"""
  uri: String!
}

"""SQL Managed Instances Integration"""
type CloudAzureSqlmanagedIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Connect Integration"""
type CloudAwsConnectIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The response for dissociating notification channels from a policy."""
type AlertsNotificationChannelsRemoveFromPolicyResponse {
  """Errors."""
  errors: [AlertsNotificationChannelsRemoveFromPolicyError!]!

  """Notification channels."""
  notificationChannels: [AlertsNotificationChannelId!]!

  """Policy ID."""
  policyId: ID!
}

"""
A static NRQL condition is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value.
"""
type AlertsNrqlStaticCondition implements AlertsNrqlCondition {
  """The custom violation description."""
  description: String

  """Whether the condition is enabled."""
  enabled: Boolean!

  """The Entity associated with the NRQL Condition"""
  entity: EntityOutline

  """The condition's entity GUID"""
  entityGuid: EntityGuid!

  """
  Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
  """
  expiration: AlertsNrqlConditionExpiration!

  """Condition ID."""
  id: ID!

  """Name of the condition."""
  name: String!

  """The NRQL query that defines the signal for the condition."""
  nrql: AlertsNrqlConditionQuery!

  """Alerts policy ID."""
  policyId: ID!

  """Runbook URL."""
  runbookUrl: String

  """Settings that determine how the NRQL results are evaluated"""
  signal: AlertsNrqlConditionSignal!

  """List of critical and warning terms for the condition."""
  terms: [AlertsNrqlConditionTerms!]!

  """Type of NRQL condition."""
  type: AlertsNrqlConditionType!

  """
  Deprecated - use `signal.slideBy` instead.
  
  Function used to aggregate the NRQL query value(s) for comparison to the `terms.threshold`. When the result of this aggregate surpasses the `terms.threshold`, a violation is opened.
  """
  valueFunction: AlertsNrqlStaticConditionValueFunction! @deprecated(reason: "Replaced by `signal.slideBy`.")

  """
  Deprecated - use violationTimeLimitSeconds for full range of values.
  
  Duration after which a violation automatically closes.
  """
  violationTimeLimit: AlertsViolationTimeLimit @deprecated(reason: "Replaced by `violationTimeLimitSeconds`.")

  """Duration after which a violation automatically closes in seconds."""
  violationTimeLimitSeconds: Seconds
}

"""A container for all trace filter rule types"""
type EdgeTraceFilters {
  """Random trace filter configuration applied to the trace observer."""
  randomTraceFilter: EdgeRandomTraceFilter!

  """
  Span attribute trace filter configuration applied to the trace observer.
  """
  spanAttributesTraceFilter: EdgeSpanAttributesTraceFilter!
}

"""Information about a component in a quickstart"""
interface Nr1CatalogQuickstartComponent {
  """Metadata associated with the quickstart component"""
  metadata: Nr1CatalogQuickstartComponentMetadata!
}

"""
Determines which browser loader will be configured. There are three browser loader types. They are Pro+SPA, Pro, and Lite.
See [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for further information.
"""
enum AgentApplicationBrowserLoader {
  """Use PRO instead."""
  FULL @deprecated(reason: "Browsers which historically had the FULL loader will now return PRO as the loader type.")

  """
  Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
  """
  LITE

  """Don't use an agent."""
  NONE

  """
  Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
  """
  PRO

  """
  Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
  """
  SPA
}

"""Input type for FixedFuzzyWuzzyTokenSetRatio expression"""
input AiDecisionsFixedFuzzyWuzzyTokenSetRatioInput {
  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!

  """Minimum similarity threshold."""
  minSimilarity: Float!

  """Value to be used in comparison."""
  value: String!
}

"""
Also known as **loss of signal**, these are settings for how violations are opened or closed when a signal expires.
"""
type AlertsNrqlConditionExpiration {
  """
  Whether to close all open violations when the signal expires. Defaults to true.
  """
  closeViolationsOnExpiration: Boolean

  """
  The amount of time (in seconds) to wait before considering if the signal has been lost. Max value of 172800 (48 hours).
  """
  expirationDuration: Seconds

  """
  Whether to create a new "lost signal" violation to capture that the signal expired. Defaults to false.
  """
  openViolationOnExpiration: Boolean
}

"""
The definition of a rule, which consists of a group of entities and a rollup strategy.
"""
type WorkloadRegularRule {
  """
  A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.
  """
  entities: [WorkloadEntityRef!]

  """
  A list of entity search queries. These queries are constrained to the workload contents.
  """
  entitySearchQueries: [WorkloadEntitySearchQuery!]

  """The unique identifier of the rule."""
  id: Int

  """The rollup strategy."""
  rollup: WorkloadRollup!
}

"""A database instance seen by an APM Application"""
type ApmDatabaseInstanceEntityOutline implements AlertableEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The host the database instance is running on."""
  host: String

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
  """
  portOrPath: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String

  """The type of database. ex: `Postgres` | `Redis`"""
  vendor: String
}

"""List of integrations"""
input CloudAzureDisableIntegrationsInput {
  """Api Management integration"""
  azureApimanagement: [CloudDisableAccountIntegrationInput]

  """App Gateway integration"""
  azureAppgateway: [CloudDisableAccountIntegrationInput]

  """App Service integration"""
  azureAppservice: [CloudDisableAccountIntegrationInput]

  """Containers integration"""
  azureContainers: [CloudDisableAccountIntegrationInput]

  """Cosmos DB integration"""
  azureCosmosdb: [CloudDisableAccountIntegrationInput]

  """Cost Management integration"""
  azureCostmanagement: [CloudDisableAccountIntegrationInput]

  """Data Factory integration"""
  azureDatafactory: [CloudDisableAccountIntegrationInput]

  """Event Hub integration"""
  azureEventhub: [CloudDisableAccountIntegrationInput]

  """Express Route integration"""
  azureExpressroute: [CloudDisableAccountIntegrationInput]

  """Firewalls integration"""
  azureFirewalls: [CloudDisableAccountIntegrationInput]

  """Front Door integration"""
  azureFrontdoor: [CloudDisableAccountIntegrationInput]

  """Functions integration"""
  azureFunctions: [CloudDisableAccountIntegrationInput]

  """Key Vault integration"""
  azureKeyvault: [CloudDisableAccountIntegrationInput]

  """Load Balancer integration"""
  azureLoadbalancer: [CloudDisableAccountIntegrationInput]

  """Logic Apps integration"""
  azureLogicapps: [CloudDisableAccountIntegrationInput]

  """Machine Learning integration"""
  azureMachinelearning: [CloudDisableAccountIntegrationInput]

  """Database for MariaDB integration"""
  azureMariadb: [CloudDisableAccountIntegrationInput]

  """Azure Monitor metrics integration"""
  azureMonitor: [CloudDisableAccountIntegrationInput]

  """Database for MySQL integration"""
  azureMysql: [CloudDisableAccountIntegrationInput]

  """MySQL Flexible Server integration"""
  azureMysqlflexible: [CloudDisableAccountIntegrationInput]

  """Database for PostgreSQL integration"""
  azurePostgresql: [CloudDisableAccountIntegrationInput]

  """PostgreSQL Flexible Server integration"""
  azurePostgresqlflexible: [CloudDisableAccountIntegrationInput]

  """Power BI Dedicated integration"""
  azurePowerbidedicated: [CloudDisableAccountIntegrationInput]

  """Redis Cache integration"""
  azureRediscache: [CloudDisableAccountIntegrationInput]

  """Service Bus integration"""
  azureServicebus: [CloudDisableAccountIntegrationInput]

  """SQL Database integration"""
  azureSql: [CloudDisableAccountIntegrationInput]

  """SQL Managed Instances integration"""
  azureSqlmanaged: [CloudDisableAccountIntegrationInput]

  """Storage integration"""
  azureStorage: [CloudDisableAccountIntegrationInput]

  """Virtual machine scale sets integration"""
  azureVirtualmachine: [CloudDisableAccountIntegrationInput]

  """Virtual Network integration"""
  azureVirtualnetworks: [CloudDisableAccountIntegrationInput]

  """Virtual Machines integration"""
  azureVms: [CloudDisableAccountIntegrationInput]

  """VPN Gateways integration"""
  azureVpngateways: [CloudDisableAccountIntegrationInput]
}

"""A resulting query."""
type ServiceLevelResultQuery {
  """A NRQL query."""
  nrql: Nrql!
}

"""PostgreSQL Flexible Server Integration"""
type CloudAzurePostgresqlflexibleIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The advanced options available for a Script Browser monitor"""
type SyntheticsScriptBrowserMonitorAdvancedOptions {
  """Emulate a device"""
  deviceEmulation: SyntheticsDeviceEmulation

  """Capture a screenshot during job execution"""
  enableScreenshotOnFailureAndScript: Boolean
}

"""Represents an attribute of an incident."""
input AiDecisionsIncidentObjectInput {
  """Attribute to process of selected incident."""
  attribute: String!

  """Incident to select."""
  select: AiDecisionsIncidentSelect!
}

"""Machine Learning"""
input CloudAzureMachinelearningIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Parameters by which to filter the search."""
input ApiAccessKeySearchQuery {
  """Criteria by which to narrow the scope of keys to be returned."""
  scope: ApiAccessKeySearchScope

  """
  A list of key types to be included in the search. If no types are provided, all types will be returned by default.
  """
  types: [ApiAccessKeyType]!
}

"""
The different error types for the entityRelationshipUserDefinedDelete mutation.
"""
enum EntityRelationshipUserDefinedDeleteErrorType {
  """The user does not have permissions to perform the operation."""
  NOT_AUTHORIZED
}

"""Metadata associated with a data source"""
type Nr1CatalogDataSourceMetadata {
  """
  A list of alert policy templates that are auto installed upon data source installation
  """
  autoInstallAlertPolicyTemplates: [Nr1CatalogAlertPolicyTemplate!]!

  """
  A list of dashboard templates that are auto installed upon data source installation
  """
  autoInstallDashboardTemplates: [Nr1CatalogDashboardTemplate!]!

  """The categories for the data source"""
  categories: [Nr1CatalogCategory!]!

  """A short form description for the data source"""
  description: String

  """The human-readable name for the data source"""
  displayName: String

  """The corresponding icon for the data source"""
  icon: Nr1CatalogIcon

  """Install information for the data source"""
  install: Nr1CatalogDataSourceInstall!

  """A list of keywords for filtering and searching"""
  keywords: [String!]!
}

"""
The input object used to provide the configuration that defines how the status of the workload is calculated.
"""
input WorkloadStatusConfigInput {
  """An input object used to represent an automatic status configuration."""
  automatic: WorkloadAutomaticStatusInput

  """
  A list of static status configurations. You can only configure one static status for a workload.
  """
  static: [WorkloadStaticStatusInput!]
}

"""Autogenerated return type of MigrateAwsGovCloudToAssumeRole"""
type CloudMigrateAwsGovCloudToAssumeRolePayload {
  """The list of errors."""
  errors: [CloudAccountMutationError!]!

  """The updated linked accounts."""
  linkedAccounts: [CloudLinkedAccount!]!
}

"""The result of updating application settings."""
type AgentApplicationSettingsUpdateResult {
  """The name for the application."""
  alias: String

  """Access general settings for the application."""
  apmSettings: AgentApplicationSettingsApmBase

  """Access general properties for the application."""
  browserProperties: AgentApplicationSettingsBrowserProperties

  """Access general settings for the browser application."""
  browserSettings: AgentApplicationSettingsBrowserBase

  """Information about any errors encountered while updating values."""
  errors: [AgentApplicationSettingsUpdateError]

  """The GUID for the affected Entity."""
  guid: EntityGuid!

  """Access mobile settings for the application."""
  mobileSettings: AgentApplicationSettingsMobileBase

  """The name for the application."""
  name: String @deprecated(reason: "Deprecated. Use `alias` instead!")
}

"""Expression used for comparing incidents as part of a correlation."""
scalar AiDecisionsRuleExpression

"""Composer"""
input CloudGcpComposerIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Current environment result reasoning"""
enum IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason {
  """The current account is not entitled for incident intelligence"""
  CURRENT_ACCOUNT_NOT_ENTITLED

  """The user is attached to an environment"""
  ENVIRONMENT_FOUND

  """
  The user is attached to more than one environment, hence the user is authorized to more then one parent account that has an environment. To get a list of possible environments, query authorizedEnvironment and select one of the accounts.
  """
  MULTIPLE_ENVIRONMENTS

  """The user is not attached to any environment"""
  NO_ENVIRONMENT

  """
  The user is not authorized to access environments from the current account
  """
  USER_NOT_AUTHORIZED_FOR_ACCOUNT
}

"""The result of a Simple Browser monitor create mutation"""
type SyntheticsSimpleBrowserMonitorCreateMutationResult {
  """Errors that occurred during Simple Browser monitor create mutation"""
  errors: [SyntheticsMonitorCreateError]!

  """The resulting Simple Browser monitor"""
  monitor: SyntheticsSimpleBrowserMonitor
}

"""
An object that represents the result after updating a data partition rule.
"""
type LogConfigurationsUpdateDataPartitionRuleResponse {
  """List of errors, if any."""
  errors: [LogConfigurationsDataPartitionRuleMutationError]

  """The updated data partition rule."""
  rule: LogConfigurationsDataPartitionRule
}

"""Validation flags to determine how we handle input data."""
enum ChangeTrackingValidationFlag {
  """
  Will validate all string fields to be within max size limit. An error is returned and data is not saved if any of the fields exceeds max size limit.
  """
  FAIL_ON_FIELD_LENGTH

  """
  For APM entities, a call is made to the legacy New Relic v2 REST API. When this flag is set, if the call fails for any reason, an error will be returned containing the failure message.
  """
  FAIL_ON_REST_API_FAILURES
}

"""An NRQL query executed in the past."""
type NrqlHistoricalQuery {
  """The Account ID queried."""
  accountId: Int

  """The NRQL query executed."""
  nrql: Nrql

  """The time the query was executed."""
  timestamp: EpochSeconds
}

"""The input for creating a new Webhook notification channel."""
input AlertsWebhookNotificationChannelCreateInput {
  """Base URL."""
  baseUrl: String!

  """Basic auth."""
  basicAuth: AlertsWebhookBasicAuthMutationInput

  """Custom HTTP headers."""
  customHttpHeaders: [AlertsWebhookCustomHeaderMutationInput!]

  """Custom payload body."""
  customPayloadBody: String

  """Custom payload type."""
  customPayloadType: AlertsWebhookCustomPayloadType

  """Notification channel name."""
  name: String!
}

type Consumption {
  """The `Consumption` object provides consumption data about a user."""
  customerId: ID
}

"""Additional options for NRQL queries."""
input NrqlQueryOptions {
  """
  Limit the NRQL query to return results from the chosen Event Namespaces.
  
  You must supply at least 1 valid event namespace when using this option.
  Invalid event namespaces will be filtered out.
  
  If omitted, the default list will be `["Default"]`
  
  For more details about Event Namespaces, visit our [docs](https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/introduction-new-relic-subscription-usage-data/#namespace).
  """
  eventNamespaces: [String!]
}

"""Organization create async result collection"""
type OrganizationOrganizationCreateAsyncResultCollection {
  """Organization create async results"""
  items: [OrganizationOrganizationCreateAsyncResult!]!

  """
  an opaque cursor to supply with subsequent requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String
}

"""Response for error group assignment mutation."""
type ErrorsInboxAssignErrorGroupResponse {
  """User that was assigned to the error group."""
  assignedUser: UserReference @deprecated

  """User that was assigned to the error group."""
  assignment: ErrorsInboxAssignment

  """List of errors encountered."""
  errors: [ErrorsInboxAssignErrorGroupError!]
}

"""Provides the available values of possible fields that can be sorted"""
enum OrganizationAccountSortKeyEnum {
  """Account ID"""
  ID

  """Account Name"""
  NAME
}

"""
The type of error that occurred during the mutation when submitting metadata
"""
enum Nr1CatalogSubmitMetadataErrorType {
  """The Nerdpack cannot be found"""
  NERDPACK_NOT_FOUND

  """Something went wrong in the service"""
  SERVER_ERROR

  """
  The user does not have permission to update the metadata for the Nerdpack
  """
  UNAUTHORIZED

  """The type of the Nerdpack is not supported in the New Relic One Catalog"""
  UNSUPPORTED_TYPE

  """
  The submitted metadata is not valid and needs to be corrected to be accepted
  """
  VALIDATION_FAILED
}

"""An installer that uses install plan steps"""
type Nr1CatalogInstallPlan implements Nr1CatalogInstaller {
  """
  The list of install plan steps necessary to execute the installation of the quickstart
  """
  steps: [Nr1CatalogInstallPlanStep!]!

  """The type of installer"""
  type: Nr1CatalogInstallerType!
}

"""Additional options for SELECT type components"""
type AiNotificationsSelectComponentOptions {
  """Is custom value creation allowed"""
  creatable: Boolean!

  """
  List of field keys their values are required in order to fetch suggestions for this field
  """
  dependentOn: [String!]!

  """List of field keys their values can be used to filter suggestions by"""
  filteredBy: [String!]!

  """Do we allow additional values as input other than suggested?"""
  label: Boolean!

  """Are we expecting a single or multiple values"""
  multiple: Boolean!

  """Is this component searchable"""
  searchable: Boolean!

  """Preloaded suggestions for"""
  suggestions: [AiNotificationsSuggestion!]!
}

"""
A Simple Browser monitor resulting from a Simple Browser monitor mutation
"""
type SyntheticsSimpleBrowserMonitor {
  """The monitor advanced options"""
  advancedOptions: SyntheticsSimpleBrowserMonitorAdvancedOptions

  """The creation time of the monitor in millis"""
  createdAt: EpochMilliseconds

  """The unique client identifier for the Synthetics Monitor in New Relic"""
  guid: EntityGuid

  """The unique identifier of the monitor within the Synthetics domain"""
  id: ID

  """The locations the monitor runs from"""
  locations: SyntheticsLocations

  """The last modification time of the monitor in millis"""
  modifiedAt: EpochMilliseconds

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The runtime that the monitor will use to run jobs"""
  runtime: SyntheticsRuntime

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The uri the monitor runs against"""
  uri: String
}

"""
This is the root of all GraphQL mutations. Unlike queries, mutations
represent actions that have a side effects, like `create` or `update`.
"""
type RootMutationType {
  """Creates an organization-scoped account."""
  accountManagementCreateAccount(
    """The attributes for the account being created."""
    managedAccount: AccountManagementCreateInput!
  ): AccountManagementCreateResponse

  """Updates an account."""
  accountManagementUpdateAccount(
    """The attributes for updating an account."""
    managedAccount: AccountManagementUpdateInput!
  ): AccountManagementUpdateResponse

  """
  If you aren't using an auto-instrumenting agent on the backend, use this to set up browser monitoring for an application. For more information on enabling copy/paste, [see our docs](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#copy-paste-app)
  """
  agentApplicationCreateBrowser(
    """The account ID."""
    accountId: Int!

    """The application's name."""
    name: String!

    """Browser settings input object."""
    settings: AgentApplicationBrowserSettingsInput
  ): AgentApplicationCreateBrowserResult

  """Create a new mobile application."""
  agentApplicationCreateMobile(
    """The application's account ID."""
    accountId: Int!

    """The application's name.."""
    name: String!
  ): AgentApplicationCreateMobileResult

  """
  Deletes a browser, mobile, or APM application. This isn't allowed if an application is actively reporting data.
  """
  agentApplicationDelete(
    """An application's GUID."""
    guid: EntityGuid!
  ): AgentApplicationDeleteResult

  """
  Enable browser monitoring for an application monitored by APM. For information about specific APM agents, [see our docs](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-instrumentation)
  """
  agentApplicationEnableApmBrowser(
    """The affected entity's GUID."""
    guid: EntityGuid!

    """Browsers settings input object."""
    settings: AgentApplicationBrowserSettingsInput
  ): AgentApplicationEnableBrowserResult

  """Replaces the entity's allow list with the provided segments."""
  agentApplicationSegmentsReplaceAllBrowserSegmentAllowList(
    """
    The list of url segments to replace the current allow list with. The list cannot be Empty.
    """
    allowList: AgentApplicationSegmentsBrowserSegmentAllowListInput!

    """The NR1 entity guid"""
    entityGuid: EntityGuid!
  ): AgentApplicationSegmentsBrowserSegmentAllowListResult

  """
  Update configuration for APM applications. Includes thresholds for how often to record Transaction traces, SQL traces, enabling Distributed traces, ignoring certain error classes. This is the main mutation that powers the Application > Settings page in APM.
  """
  agentApplicationSettingsUpdate(
    """The GUID for the affected entity."""
    guid: EntityGuid!

    """
    Input data about the entities you want to update and the settings to use. Any unspecified fields will retain their original values.
    """
    settings: AgentApplicationSettingsUpdateInput!
  ): AgentApplicationSettingsUpdateResult

  """Accept and deploy an existing suggested rule."""
  aiDecisionsAcceptSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsRule!

  """Create and deploy a new implicit rule."""
  aiDecisionsCreateImplicitRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!
  ): AiDecisionsRule!

  """Create and deploy a new rule."""
  aiDecisionsCreateRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!
  ): AiDecisionsRule!

  """Create a new suggested rule."""
  aiDecisionsCreateSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion blueprint to be created."""
    suggestion: AiDecisionsSuggestionBlueprint!
  ): AiDecisionsSuggestion!

  """Decline an existing suggested rule."""
  aiDecisionsDeclineSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsOperationResult!

  """Delete existing feedback for a merge."""
  aiDecisionsDeleteMergeFeedback(
    """Account ID."""
    accountId: Int!

    """Child issue ID."""
    childIssueId: ID!

    """Parent issue ID."""
    parentIssueId: ID!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  """Delete an existing rule."""
  aiDecisionsDeleteRule(
    """Account ID."""
    accountId: Int!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  """Delete an existing suggested rule."""
  aiDecisionsDeleteSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsOperationResult!

  """Disable an existing enabled rule."""
  aiDecisionsDisableRule(
    """Account ID."""
    accountId: Int!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  """Enable an existing disabled rule."""
  aiDecisionsEnableRule(
    """Account ID."""
    accountId: Int!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsOperationResult!

  """
  Create a search operation to fetch applicable incidents for a rule expression
  """
  aiDecisionsFindApplicableIncidents(
    """Account ID."""
    accountId: Int!

    """Search operation blueprint to be created."""
    search: AiDecisionsSearchBlueprint!
  ): AiDecisionsApplicableIncidentSearch!

  """Postpone an existing suggested rule."""
  aiDecisionsPostponeSuggestion(
    """Account ID."""
    accountId: Int!

    """Suggestion ID."""
    suggestionId: ID!
  ): AiDecisionsRule!

  """Record feedback for a merge"""
  aiDecisionsRecordMergeFeedback(
    """Account ID."""
    accountId: Int!

    """Child issue ID."""
    childIssueId: ID!

    """Opinion type."""
    opinion: AiDecisionsOpinion!

    """Parent issue ID."""
    parentIssueId: ID!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsMergeFeedback!

  """Create an arbitrary expression simulation."""
  aiDecisionsSimulate(
    """Account ID."""
    accountId: Int!

    """Simulation blueprint to be created."""
    simulation: AiDecisionsSimulationBlueprint!
  ): AiDecisionsSimulation!

  """Update an existing implicit rule."""
  aiDecisionsUpdateImplicitRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsRule!

  """Update an existing rule."""
  aiDecisionsUpdateRule(
    """Account ID."""
    accountId: Int!

    """Rule blueprint to be created."""
    rule: AiDecisionsRuleBlueprint!

    """Rule ID."""
    ruleId: ID!
  ): AiDecisionsRule!

  """Acknowledge issue"""
  aiIssuesAckIssue(
    """account id"""
    accountId: Int!

    """issue id"""
    issueId: ID!
  ): AiIssuesIssueUserActionResponse!

  """Close incident"""
  aiIssuesCloseIncident(
    """account id"""
    accountId: Int!

    """Incident id"""
    incidentId: ID!
  ): AiIssuesIncidentUserActionResponse

  """Resolve issue"""
  aiIssuesResolveIssue(
    """account id"""
    accountId: Int!

    """issue id"""
    issueId: ID!
  ): AiIssuesIssueUserActionResponse!

  """Unacknowledge issue"""
  aiIssuesUnackIssue(
    """account id"""
    accountId: Int!

    """issue id"""
    issueId: ID!
  ): AiIssuesIssueUserActionResponse!

  """
  Set interval between issue being created and being activated (and user being notified)
  """
  aiIssuesUpdateGracePeriod(
    """Account id"""
    accountId: Int!

    """Grace period configuration"""
    gracePeriod: AiIssuesGracePeriodConfigurationInput!
  ): AiIssuesConfigurationOverrideResponse!

  """Update issue TTL"""
  aiIssuesUpdateIssueTtl(
    """Account id"""
    accountId: Int!

    """Issue TTL"""
    issueTtl: Seconds!
  ): AiIssuesConfigurationOverrideResponse!

  """Create a Channel"""
  aiNotificationsCreateChannel(
    """Account Id"""
    accountId: Int!

    """Channel object"""
    channel: AiNotificationsChannelInput!
  ): AiNotificationsChannelResponse!

  """Create a Destination"""
  aiNotificationsCreateDestination(
    """Account Id"""
    accountId: Int!

    """Destination object"""
    destination: AiNotificationsDestinationInput!
  ): AiNotificationsDestinationResponse!

  """Delete a Channel"""
  aiNotificationsDeleteChannel(
    """Account Id"""
    accountId: Int!

    """Id of the deleted channel"""
    channelId: ID!
  ): AiNotificationsDeleteResponse!

  """Delete a Destination"""
  aiNotificationsDeleteDestination(
    """Account Id"""
    accountId: Int!

    """Id of the deleted destination"""
    destinationId: ID!
  ): AiNotificationsDeleteResponse!

  """Test notifications"""
  aiNotificationsTestChannel(
    """Account Id"""
    accountId: Int!

    """Channel to test notification for"""
    channel: AiNotificationsChannelInput!

    """Dynamic variables"""
    variables: [AiNotificationsDynamicVariable!]
  ): AiNotificationsChannelTestResponse!

  """Test channel by channelId"""
  aiNotificationsTestChannelById(
    """Account Id"""
    accountId: Int!

    """Channel ID to test notification for"""
    channelId: ID!

    """Dynamic variables"""
    variables: [AiNotificationsDynamicVariable!]
  ): AiNotificationsChannelTestResponse!

  """Test connection"""
  aiNotificationsTestDestination(
    """Account Id"""
    accountId: Int!

    """Destination to test connection for"""
    destination: AiNotificationsDestinationInput!
  ): AiNotificationsDestinationTestResponse!

  """Test connection by destination id"""
  aiNotificationsTestDestinationById(
    """Account Id"""
    accountId: Int!

    """Destination ID to test"""
    destinationId: ID!

    """Update that will override existing properties"""
    update: AiNotificationsDestinationUpdate
  ): AiNotificationsDestinationTestResponse!

  """Update a Channel"""
  aiNotificationsUpdateChannel(
    """Account Id"""
    accountId: Int!

    """Channel object"""
    channel: AiNotificationsChannelUpdate!

    """Channel to update"""
    channelId: ID!
  ): AiNotificationsChannelResponse!

  """Update a Destination"""
  aiNotificationsUpdateDestination(
    """Account Id"""
    accountId: Int!

    """Update Destination fields"""
    destination: AiNotificationsDestinationUpdate!

    """Destination to update"""
    destinationId: ID!
  ): AiNotificationsDestinationResponse!

  """Create a list of new edges."""
  aiTopologyCollectorCreateEdges(
    """Account ID."""
    accountId: Int!

    """List of edge blueprints to be created."""
    edges: [AiTopologyCollectorEdgeBlueprint!]!
  ): AiTopologyCollectorOperationResult!

  """Create a list of new vertices."""
  aiTopologyCollectorCreateVertices(
    """Account ID."""
    accountId: Int!

    """List of vertex blueprints to be created."""
    vertices: [AiTopologyCollectorVertexBlueprint!]!
  ): AiTopologyCollectorOperationResult!

  """Delete an existing list of edges."""
  aiTopologyCollectorDeleteEdges(
    """Account ID."""
    accountId: Int!

    """List of edge IDs."""
    edgeIds: [ID!]!
  ): AiTopologyCollectorOperationResult!

  """Delete an existing list of vertices."""
  aiTopologyCollectorDeleteVertices(
    """Account ID."""
    accountId: Int!

    """List of vertex names."""
    vertexNames: [ID!]!
  ): AiTopologyCollectorOperationResult!

  """Create a new Workflow with issues filter, enrichments and destinations"""
  aiWorkflowsCreateWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """Create Workflow input object"""
    createWorkflowData: AiWorkflowsCreateWorkflowInput!
  ): AiWorkflowsCreateWorkflowResponse!

  """
  Delete a workflow and all it's sub entities: filter, enrichments and destinations
  """
  aiWorkflowsDeleteWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """If true, workflow channel will be deleted along with the workflow"""
    deleteChannels: Boolean! = true

    """Workflow's id for deletion"""
    id: ID!
  ): AiWorkflowsDeleteWorkflowResponse!

  """
  test a workflow and all it's sub entities: filter, enrichments and destinations
  """
  aiWorkflowsTestWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """Test Workflow input object"""
    testWorkflowData: AiWorkflowsTestWorkflowInput!
  ): AiWorkflowsTestWorkflowResponse!

  """Update Workflow with issues filter, enrichments and destinations"""
  aiWorkflowsUpdateWorkflow(
    """Workflow's account id"""
    accountId: Int!

    """
    If true, the channels that are no longer used by the update workflow will be deleted
    """
    deleteUnusedChannels: Boolean! = true

    """Update Workflow input object"""
    updateWorkflowData: AiWorkflowsUpdateWorkflowInput!
  ): AiWorkflowsUpdateWorkflowResponse!

  """Delete an Alerts condition."""
  alertsConditionDelete(
    """Account ID."""
    accountId: Int!

    """Alerts condition ID."""
    id: ID!
  ): AlertsConditionDeleteResponse

  """Create a muting rule for New Relic Alerts violations."""
  alertsMutingRuleCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the muting rule."""
    rule: AlertsMutingRuleInput!
  ): AlertsMutingRule

  """Delete a muting rule for New Relic Alerts violations."""
  alertsMutingRuleDelete(
    """Account ID."""
    accountId: Int!

    """Muting rule."""
    id: ID!
  ): AlertsMutingRuleDeleteResponse

  """Update a muting rule for New Relic Alerts violations."""
  alertsMutingRuleUpdate(
    """Account ID."""
    accountId: Int!

    """Muting rule ID."""
    id: ID!

    """The input options for updating a muting rule."""
    rule: AlertsMutingRuleUpdateInput!
  ): AlertsMutingRule

  """Creates a notification channel"""
  alertsNotificationChannelCreate(
    """Account ID."""
    accountId: Int!

    """Notification channel to create."""
    notificationChannel: AlertsNotificationChannelCreateConfiguration!
  ): AlertsNotificationChannelCreateResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiNotificationsCreateDestination` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/#create-destination) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  """Deletes a notification channel"""
  alertsNotificationChannelDelete(
    """Account ID."""
    accountId: Int!

    """Notification channel ID."""
    id: ID!
  ): AlertsNotificationChannelDeleteResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiNotificationsDeleteDestination` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/#delete-destination) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  """Updates an existing notification channel"""
  alertsNotificationChannelUpdate(
    """Account ID."""
    accountId: Int!

    """Notification channel ID."""
    id: ID!

    """Notification channel fields to update."""
    notificationChannel: AlertsNotificationChannelUpdateConfiguration!
  ): AlertsNotificationChannelUpdateResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiNotificationsUpdateDestination` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations/#update-destination) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  """Associates notification channels with a policy."""
  alertsNotificationChannelsAddToPolicy(
    """Account ID."""
    accountId: Int!

    """Notification channel IDs."""
    notificationChannelIds: [ID!]!

    """Policy ID."""
    policyId: ID!
  ): AlertsNotificationChannelsAddToPolicyResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiWorkflowsCreateWorkflow` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-workflows/#create-workflow) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  """Dissociates notification channels from a policy."""
  alertsNotificationChannelsRemoveFromPolicy(
    """Account ID."""
    accountId: Int!

    """Notification channel IDs."""
    notificationChannelIds: [ID!]!

    """Policy ID."""
    policyId: ID!
  ): AlertsNotificationChannelsRemoveFromPolicyResponse @deprecated(reason: "Support for notification channels is being discontinued as of **Dec 31, 2023**. Use the [`aiWorkflowsDeleteWorkflow` mutation](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-workflows/#delete-workflow) instead. For more information about the deprecation, [see the EOL announcement](https://forum.newrelic.com/s/hubtopic/aAX8W0000008dKOWAY/plan-to-upgrade-alert-notification-channels-to-workflows-and-destinations).")

  """Create a baseline NRQL condition."""
  alertsNrqlConditionBaselineCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the baseline NRQL condition."""
    condition: AlertsNrqlConditionBaselineInput!

    """Policy ID for the condition."""
    policyId: ID!
  ): AlertsNrqlBaselineCondition

  """Update a baseline NRQL condition."""
  alertsNrqlConditionBaselineUpdate(
    """Account ID."""
    accountId: Int!

    """Input settings for the baseline NRQL condition."""
    condition: AlertsNrqlConditionUpdateBaselineInput!

    """Alerts condition ID."""
    id: ID!
  ): AlertsNrqlBaselineCondition

  """Create an outlier NRQL condition."""
  alertsNrqlConditionOutlierCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the outlier NRQL condition."""
    condition: AlertsNrqlConditionOutlierInput!

    """Policy ID for the condition."""
    policyId: ID!
  ): AlertsNrqlOutlierCondition @deprecated(reason: "Outlier condition creation stops Dec 8th, 2021. All outlier conditions will be removed Mar 31, 2022.")

  """Update an outlier NRQL condition."""
  alertsNrqlConditionOutlierUpdate(
    """Account ID."""
    accountId: Int!

    """Input settings for the outlier NRQL condition."""
    condition: AlertsNrqlConditionUpdateOutlierInput!

    """Alerts condition ID."""
    id: ID!
  ): AlertsNrqlOutlierCondition @deprecated(reason: "We’re removing outlier conditions on Mar 31, 2022.")

  """Create a static NRQL condition."""
  alertsNrqlConditionStaticCreate(
    """Account ID."""
    accountId: Int!

    """Input settings for the static NRQL condition."""
    condition: AlertsNrqlConditionStaticInput!

    """Policy ID for the condition."""
    policyId: ID!
  ): AlertsNrqlStaticCondition

  """Update a static NRQL condition."""
  alertsNrqlConditionStaticUpdate(
    """Account ID."""
    accountId: Int!

    """Input settings for the static NRQL condition."""
    condition: AlertsNrqlConditionUpdateStaticInput!

    """Alerts condition ID."""
    id: ID!
  ): AlertsNrqlStaticCondition

  """Create an Alerts policy."""
  alertsPolicyCreate(
    """Account ID."""
    accountId: Int!

    """Policy to be created."""
    policy: AlertsPolicyInput!
  ): AlertsPolicy

  """
  Delete an Alerts policy. This archives all conditions associated to the policy.
  """
  alertsPolicyDelete(
    """Account ID."""
    accountId: Int!

    """Policy ID."""
    id: ID!
  ): AlertsPolicyDeleteResponse

  """Update an Alerts policy."""
  alertsPolicyUpdate(
    """Account ID."""
    accountId: Int!

    """Policy ID."""
    id: ID!

    """Fields on the policy to be updated."""
    policy: AlertsPolicyUpdateInput!
  ): AlertsPolicy

  """
  Create keys. You can create keys for multiple accounts at once. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).
  """
  apiAccessCreateKeys(
    """A list of the configurations for each key you want to create."""
    keys: ApiAccessCreateInput!
  ): ApiAccessCreateKeyResponse

  """A mutation to delete keys."""
  apiAccessDeleteKeys(
    """
    A list of each key `id` that you want to delete. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).
    """
    keys: ApiAccessDeleteInput!
  ): ApiAccessDeleteKeyResponse

  """
  Update keys. You can update keys for multiple accounts at once. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).
  """
  apiAccessUpdateKeys(
    """The configurations of each key you want to update."""
    keys: ApiAccessUpdateInput!
  ): ApiAccessUpdateKeyResponse

  """Change the settings of an ApmApplicationEntity."""
  apmApplicationEntityChangeSettings(
    """The guid of the ApmApplicationEntity to update."""
    guid: EntityGuid!

    """The desired settings of the ApmApplicationEntity."""
    settings: ApmApplicationEntitySettings!
  ): ApmApplicationEntitySettingsResult @deprecated(reason: "This mutation is deprecated. Use `agentApplicationSettingsUpdate` instead.")

  """Grant access for a group"""
  authorizationManagementGrantAccess(
    """The object representing the group and the access to add"""
    grantAccessOptions: AuthorizationManagementGrantAccess
  ): AuthorizationManagementGrantAccessPayload

  """Revoke access for a group"""
  authorizationManagementRevokeAccess(
    """The object representing the group and the access to remove"""
    revokeAccessOptions: AuthorizationManagementRevokeAccess
  ): AuthorizationManagementRevokeAccessPayload

  """
  Creates a new deployment record in NRDB and its associated deployment marker.
  """
  changeTrackingCreateDeployment(
    """
    Specify how you would like the API to handle validation failures.
    Currently, the following validations should be considered:
    - Text fields must be less than 4,096 characters and encoded as UTF-8. By default, they will be trimmed with an UTF-8 ellipses character (…) placed at the end.
    - Failures to update the legacy REST API for APM entities can be used to determine whether the mutation should proceed.
    """
    dataHandlingRules: ChangeTrackingDataHandlingRules

    """The deployment to create."""
    deployment: ChangeTrackingDeploymentInput!
  ): ChangeTrackingDeployment

  """
  Create or modify a cloud integration.
  
  For details and mutation examples visit
  [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
  """
  cloudConfigureIntegration(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud integrations you want to configure."""
    integrations: CloudIntegrationsInput!
  ): CloudConfigureIntegrationPayload

  """
  Disable a cloud integration. Stops collecting data for the specified integration.
  
  For details and mutation examples visit
  [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
  """
  cloudDisableIntegration(
    """Your New Relic account ID"""
    accountId: Int!

    """The integrations you want to disable"""
    integrations: CloudDisableIntegrationsInput
  ): CloudDisableIntegrationPayload

  """
  Link a cloud provider account to a New Relic Account.
  
  For details and mutation examples visit
  [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
  """
  cloudLinkAccount(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud provider account you want to link to your New Relic account."""
    accounts: CloudLinkCloudAccountsInput
  ): CloudLinkAccountPayload

  """
  Migrate one or more existing AWS GovCloud Accounts to use AssumeRole authentication.
  
  For details and mutation examples visit
  [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
  """
  cloudMigrateAwsGovCloudToAssumeRole(
    """Your New Relic account ID"""
    accountId: Int!

    """One or multiple ARNs for the IAM Role for the different accounts."""
    accounts: [CloudAwsGovCloudMigrateToAssumeroleInput!]!
  ): CloudMigrateAwsGovCloudToAssumeRolePayload

  """
  Rename one or more linked cloud provider accounts.
  
  For details and mutation examples visit
  [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
  """
  cloudRenameAccount(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud provider account you want to rename."""
    accounts: [CloudRenameAccountsInput]
  ): CloudRenameAccountPayload

  """
  Unlink one or more cloud provider accounts.
  Stops collecting data for all the associated integrations.
  
  For details and mutation examples visit
  [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
  """
  cloudUnlinkAccount(
    """Your New Relic account ID"""
    accountId: Int!

    """The cloud provider accounts you want to unlink."""
    accounts: [CloudUnlinkAccountsInput]
  ): CloudUnlinkAccountPayload

  """Add widgets to a `DashboardPage`"""
  dashboardAddWidgetsToPage(
    """
    Unique entity identifier of the `DashboardPage` where widgets will be added.
    """
    guid: EntityGuid!

    """Widgets input holding all required widgets data."""
    widgets: [DashboardWidgetInput!]!
  ): DashboardAddWidgetsToPageResult

  """Create a `DashboardEntity`"""
  dashboardCreate(
    """Account ID where the `DashboardEntity` will be created."""
    accountId: Int!

    """Dashboard input holding all required `DashboardEntity` data."""
    dashboard: DashboardInput!
  ): DashboardCreateResult

  """
  Creates a public URL where a `DashboardPage` can be accessed in the form of a static snapshot.
  """
  dashboardCreateSnapshotUrl(
    """
    Unique entity identifier of the `DashboardPage` to be accessed as a snapshot through a public URL.
    """
    guid: EntityGuid!

    """Optional input parameters for the generated snapshot."""
    params: DashboardSnapshotUrlInput
  ): String

  """Delete an existing `DashboardEntity`"""
  dashboardDelete(
    """
    Unique entity identifier of the `DashboardEntity` to be deleted. A dashboard guid must be specified. Dashboard page guids are not supported.
    """
    guid: EntityGuid!
  ): DashboardDeleteResult

  """Undelete a `DashboardEntity` that was previously deleted."""
  dashboardUndelete(
    """
    Unique entity identifier of the `DashboardEntity` to be undeleted. A dashboard guid must be specified. Dashboard page guids are not supported.
    """
    guid: EntityGuid!
  ): DashboardUndeleteResult

  """Update an existing `DashboardEntity`"""
  dashboardUpdate(
    """
    Dashboard input holding all required data from an existing `DashboardEntity`.
    """
    dashboard: DashboardInput!

    """Unique entity identifier of the `DashboardEntity` to be updated."""
    guid: EntityGuid!
  ): DashboardUpdateResult

  """Update a page in a dashboard."""
  dashboardUpdatePage(
    """Unique entity identifier of the Page to be updated."""
    guid: EntityGuid!

    """Page input holding all required data to update a page."""
    page: DashboardUpdatePageInput!
  ): DashboardUpdatePageResult

  """Update an existing set of `Widget`s in a `DashboardPage`"""
  dashboardUpdateWidgetsInPage(
    """
    Unique entity identifier of the `DashboardPage` where widgets will be updated.
    """
    guid: EntityGuid!

    """Widgets input holding all required widgets data."""
    widgets: [DashboardUpdateWidgetInput!]!
  ): DashboardUpdateWidgetsInPageResult

  """
  Revokes a `DashboardWidget` public live URL that was created in advance.
  """
  dashboardWidgetRevokeLiveUrl(
    """The unique identifier of the public live URL to be revoked."""
    uuid: ID!
  ): DashboardRevokeLiveUrlResult

  """Bulk copy account rules to list of accounts"""
  dataManagementCopyRetentions(
    """
    A list of IDs for the accounts that should have the source account retentions applied.
    """
    destinationAccountIds: [Int]!

    """The ID of the source account"""
    sourceAccountId: Int!
  ): DataManagementBulkCopyResult

  """Create a new event retention rule for a namespace on an account"""
  dataManagementCreateEventRetentionRule(
    """The ID of the account the event retention rule applies to"""
    accountId: Int!

    """The namespace the event retention rule applies to"""
    namespace: String!

    """Length of time for event data retention (in days)"""
    retentionInDays: Int!
  ): DataManagementRule

  """Create event retention rules for namespaces"""
  dataManagementCreateRetentionRules(
    """The ID of the account the new retention rules will apply to"""
    accountId: Int!

    """
    List of rule_input params (:namespace, :retention_in_days) for new rules to be created
    """
    retentionRules: [DataManagementRuleInput]
  ): [DataManagementRule]

  """
  Delete the event retention rule for a namespace on an account, if it exists
  """
  dataManagementDeleteEventRetentionRule(
    """The ID of the event retention rule's account"""
    accountId: Int!

    """The event retention rule's namespace"""
    namespace: String!
  ): DataManagementRule

  """Mutation to add and change a feature setting toggle for an account"""
  dataManagementUpdateFeatureSettings(
    """The ID of the account to apply this feature setting"""
    accountId: Int!

    """Arguments to update the feature setting on an account"""
    setting: DataManagementAccountFeatureSettingInput
  ): DataManagementFeatureSetting

  """
  Create one or more trace filter rules, as defined by the `CreateTraceFilterRulesInput`.
  """
  edgeCreateTraceFilterRules(
    """ID of the account in the account family the trace observer belongs to."""
    accountId: Int!

    """A grouping of trace filter rule configurations"""
    rules: EdgeCreateTraceFilterRulesInput!

    """ID of the trace observer to apply the trace filter(s) to."""
    traceObserverId: Int!
  ): EdgeCreateTraceFilterRuleResponses!

  """
  Create one or more trace observers, as defined by the `CreateTraceObserverInput`. Currently, only one trace observer can be created per provider region.
  """
  edgeCreateTraceObserver(
    """
    ID of the account in the account family the trace observer(s) belong to.
    """
    accountId: Int!

    """
    One or more `CreateTraceObserverInput` that describe the trace observer to be created.
    """
    traceObserverConfigs: [EdgeCreateTraceObserverInput!]!
  ): EdgeCreateTraceObserverResponses!

  """
  Delete one or more trace filter rules, as defined by the `DeleteTraceFilterRulesInput`.
  """
  edgeDeleteTraceFilterRules(
    """ID of the account in the account family the trace observer belongs to."""
    accountId: Int!

    """A grouping of trace filter rule configurations"""
    rules: EdgeDeleteTraceFilterRulesInput!

    """ID of the trace observer to remove the provided trace filter(s) from."""
    traceObserverId: Int!
  ): EdgeDeleteTraceFilterRuleResponses!
  edgeDeleteTraceObservers(
    """
    ID of the account in the account family the trace observer(s) belong to.
    """
    accountId: Int!

    """
    One or more `DeleteTraceObserverInput` that describe the trace observer to be deleted.
    """
    traceObserverConfigs: [EdgeDeleteTraceObserverInput!]!
  ): EdgeDeleteTraceObserverResponses!

  """
  Update one or more trace observers, as defined by the `UpdateTraceObserverInput`.
  """
  edgeUpdateTraceObservers(
    """
    ID of the account in the account family the trace observer(s) belong to.
    """
    accountId: Int!

    """
    One or more `UpdateTraceObserverInput` that describe the trace observer to be updated.
    """
    traceObserverConfigs: [EdgeUpdateTraceObserverInput!]!
  ): EdgeUpdateTraceObserverResponses!

  """Delete an entity"""
  entityDelete(
    """Set to true to skip safety checks and force-delete the entity"""
    forceDelete: Boolean! = false

    """List of guids to be deleted"""
    guids: [EntityGuid!]!
  ): EntityDeleteResult

  """
  Override the default golden metrics given an account or a collection guid. Only use one context
  """
  entityGoldenMetricsOverride(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to override the golden metrics"""
    domainType: DomainTypeInput!

    """The new golden metrics by the entity domain type and the context"""
    metrics: [EntityGoldenMetricInput!]!
  ): EntityGoldenMetricsDomainTypeScopedResponse!

  """
  Reset the default golden metrics given an account or a collection guid. Only use one context
  """
  entityGoldenMetricsReset(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to reset the golden metrics"""
    domainType: DomainTypeInput!
  ): EntityGoldenMetricsDomainTypeScopedResponse!

  """
  Override the default tags given an account or a collection guid. Only use one context
  """
  entityGoldenTagsOverride(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to override the golden tags"""
    domainType: DomainTypeInput!

    """The new golden tags by the entity domain type and the tags"""
    tags: [EntityGoldenTagInput!]!
  ): EntityGoldenTagsDomainTypeScopedResponse!

  """
  Reset the default tags given an account or a collection guid. Only use one context
  """
  entityGoldenTagsReset(
    """Context to scope the golden metrics"""
    context: EntityGoldenContextInput!

    """Entity Domain Type to reset the golden tags"""
    domainType: DomainTypeInput!
  ): EntityGoldenTagsDomainTypeScopedResponse!

  """Create a relationship between entities."""
  entityRelationshipUserDefinedCreateOrReplace(
    """The source entity guid of the relationship."""
    sourceEntityGuid: EntityGuid!

    """The target entity guid of the relationship."""
    targetEntityGuid: EntityGuid!

    """The type of the relationship."""
    type: EntityRelationshipEdgeType!
  ): EntityRelationshipUserDefinedCreateOrReplaceResult!

  """
  Delete a relationship between entities. If no type is provided, it will delete all relationships between source and target.
  """
  entityRelationshipUserDefinedDelete(
    """The source entity guid of the relationship."""
    sourceEntityGuid: EntityGuid!

    """The target entity guid of the relationship."""
    targetEntityGuid: EntityGuid!

    """
    The type of the relationship. If none provided, it will delete all relationships between source and target.
    """
    type: EntityRelationshipEdgeType
  ): EntityRelationshipUserDefinedDeleteResult!

  """Assigns a user to an error group"""
  errorsInboxAssignErrorGroup(
    """An input object that represents the new assignment."""
    assignment: ErrorsInboxAssignErrorGroupInput!

    """The id of the error group."""
    id: ID!
  ): ErrorsInboxAssignErrorGroupResponse

  """Removes a resource from an error group."""
  errorsInboxDeleteErrorGroupResource(
    """The id of the error group."""
    id: ID!

    """Id of the resource"""
    resourceId: ID!
  ): ErrorsInboxDeleteErrorGroupResourceResponse

  """Updates the states of error groups."""
  errorsInboxUpdateErrorGroupState(
    """DEPRECATED. Use `ids` field instead."""
    id: ID

    """The ids of the error groups."""
    ids: [ID!]

    """State that the error groups should transition to."""
    state: ErrorsInboxErrorGroupState!
  ): ErrorsInboxUpdateErrorGroupStateResponse

  """Create a new rule which will make metrics from event data."""
  eventsToMetricsCreateRule(
    """List of events to metrics rules to create."""
    rules: [EventsToMetricsCreateRuleInput]!
  ): EventsToMetricsCreateRuleResult

  """Delete an event-to-metric rule."""
  eventsToMetricsDeleteRule(
    """List of events to metrics rules to delete."""
    deletes: [EventsToMetricsDeleteRuleInput]!
  ): EventsToMetricsDeleteRuleResult

  """Enable or disable an event-to-metric rule."""
  eventsToMetricsUpdateRule(
    """List of events to metrics rules to update."""
    updates: [EventsToMetricsUpdateRuleInput]!
  ): EventsToMetricsUpdateRuleResult

  """Cancel a historic export"""
  historicalDataExportCancelExport(
    """The account id which created the export"""
    accountId: Int!

    """The id of the export to cancel"""
    id: String!
  ): HistoricalDataExportCustomerExportResponse

  """Create a historic export"""
  historicalDataExportCreateExport(
    """The account id to run the Export against"""
    accountId: Int!

    """The NRQL string to use for this Export"""
    nrql: Nrql
  ): HistoricalDataExportCustomerExportResponse

  """
  Consent accounts to usage of the Incident Intelligence product in the EU or FedRAMP
  """
  incidentIntelligenceEnvironmentConsentAccounts(
    """The account ids to mark with consent, will consent the parent accounts"""
    accountIds: [Int]!
  ): IncidentIntelligenceEnvironmentConsentAccounts

  """Consent all of the user's authorized accounts"""
  incidentIntelligenceEnvironmentConsentAuthorizedAccounts: IncidentIntelligenceEnvironmentConsentAuthorizedAccounts

  """
  Creates a new environment, each environment is attached to a parent account and an account. Note that only one environment per parent account is supported.
  """
  incidentIntelligenceEnvironmentCreateEnvironment(
    """
    The account ids of the accounts that should be manually associated with the environment, if empty or null then the accounts are determinted automatically
    """
    associatedAccountIds: [Int]

    """The account id to attach to the environment"""
    incidentIntelligenceAccountId: Int!

    """The environment name"""
    name: String
  ): IncidentIntelligenceEnvironmentCreateEnvironment @deprecated(reason: "Deprecated. Please concat support for existing cross-account environment changes")

  """Deletes an existing environment"""
  incidentIntelligenceEnvironmentDeleteEnvironment(
    """The account id to delete"""
    accountId: Int!
  ): IncidentIntelligenceEnvironmentDeleteEnvironment

  """
  Dissent accounts to usage of the Incident Intelligence product in the EU or FedRAMP (removes the consent marking)
  """
  incidentIntelligenceEnvironmentDissentAccounts(
    """
    The account ids to dissent, empty list will mark all of the current user parent-accounts
    """
    accountIds: [Int]!
  ): IncidentIntelligenceEnvironmentDissentAccounts

  """
  Creates a new install status.
  An install status is created on behalf of the newrelic-cli whenever the CLI has started an installation and completed an installation.
  
  Guided install: https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/
  newrelic-cli: https://github.com/newrelic/newrelic-cli
  """
  installationCreateInstallStatus(
    """The accountId associated with the install status."""
    accountId: Int!

    """The installation status."""
    installStatus: InstallationInstallStatusInput!
  ): InstallationInstallStatus!

  """
  Creates a new recipe event.
  - A recipe event is created on behalf of the newrelic-cli whenever the CLI attempts to install the infrastructure-agent, for example.
  - A recipe event is appended to any existing recipe events, if there are any present in the cache.
  
  Guided install: https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/
  newrelic-cli: https://github.com/newrelic/newrelic-cli
  """
  installationCreateRecipeEvent(
    """The accountId associated with the recipe event."""
    accountId: Int!

    """The installation status associated with the recipe event."""
    status: InstallationRecipeStatus!
  ): InstallationRecipeEvent!

  """
  Deletes an installation status and all recipe statuses given the accountId.
  """
  installationDeleteInstall(
    """The accountId associated with the installation."""
    accountId: Int!
  ): Boolean!

  """Creates a key transaction."""
  keyTransactionCreate(
    """
    The acceptable amount of the time spent in the backend before customers get frustrated (Apdex target).
    """
    apdexTarget: Float!

    """The GUID of the application."""
    applicationGuid: EntityGuid!

    """
    The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
    """
    browserApdexTarget: Float!

    """The name of the metric underlying this key transaction."""
    metricName: String!

    """The name of the key transaction."""
    name: String!
  ): KeyTransactionCreateResult

  """Deletes a key transaction (historical data is not removed)."""
  keyTransactionDelete(
    """The GUID of the key transaction to delete."""
    guid: EntityGuid!
  ): KeyTransactionDeleteResult

  """Update a key transaction."""
  keyTransactionUpdate(
    """
    The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).
    """
    apdexTarget: Float

    """
    The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
    """
    browserApdexTarget: Float

    """The GUID for the affected key transaction."""
    guid: EntityGuid!

    """The name of the key transaction."""
    name: String
  ): KeyTransactionUpdateResult

  """Create a new data partition rule."""
  logConfigurationsCreateDataPartitionRule(
    """The account id associated with the data partition rule."""
    accountId: Int!

    """The data partition rule to be created."""
    rule: LogConfigurationsCreateDataPartitionRuleInput!
  ): LogConfigurationsCreateDataPartitionRuleResponse

  """Create an obfuscation expression."""
  logConfigurationsCreateObfuscationExpression(
    """The account id associated with the obfuscation expression."""
    accountId: Int!

    """The obfuscation expression you want to create."""
    expression: LogConfigurationsCreateObfuscationExpressionInput!
  ): LogConfigurationsObfuscationExpression

  """Create an obfuscation rule."""
  logConfigurationsCreateObfuscationRule(
    """The account id associated with the obfuscation rule."""
    accountId: Int!

    """The obfuscation rule you want to create."""
    rule: LogConfigurationsCreateObfuscationRuleInput!
  ): LogConfigurationsObfuscationRule

  """Create a new parsing rule."""
  logConfigurationsCreateParsingRule(
    """The account id associated with the rule."""
    accountId: Int!

    """The rule to be created."""
    rule: LogConfigurationsParsingRuleConfiguration!
  ): LogConfigurationsCreateParsingRuleResponse

  """
  Delete an existing data partition rule.
  This operation will result in data to be allocated in the main NRDB storage (Log) if no other data partition rule exists intercepting the logs matching this rule.
  A deleted data partition rule can be recreated using the same name.
  """
  logConfigurationsDeleteDataPartitionRule(
    """The account id associated with the data partition rule."""
    accountId: Int!

    """The id of the data partition rule you want to mark as deleted."""
    id: ID!
  ): LogConfigurationsDeleteDataPartitionRuleResponse

  """Delete an obfuscation expression."""
  logConfigurationsDeleteObfuscationExpression(
    """The account id associated with the obfuscation expression."""
    accountId: Int!

    """The id of the obfuscation expression to mark as deleted."""
    id: ID!
  ): LogConfigurationsObfuscationExpression

  """Delete an obfuscation rule."""
  logConfigurationsDeleteObfuscationRule(
    """The account id associated with the obfuscation rule."""
    accountId: Int!

    """The id of the obfuscation rule to mark as deleted."""
    id: ID!
  ): LogConfigurationsObfuscationRule

  """Delete an existing parsing rule."""
  logConfigurationsDeleteParsingRule(
    """The account id associated with the rule."""
    accountId: Int!

    """The id of the rule you want to mark as deleted."""
    id: ID!
  ): LogConfigurationsDeleteParsingRuleResponse

  """Update an existing data partition rule."""
  logConfigurationsUpdateDataPartitionRule(
    """The account id associated with the data partition rule."""
    accountId: Int!

    """
    The data partition rule to be updated. Only the rule description or Matching criteria fields are allowed to be updated.
    """
    rule: LogConfigurationsUpdateDataPartitionRuleInput
  ): LogConfigurationsUpdateDataPartitionRuleResponse

  """Update an existing data partition rule."""
  logConfigurationsUpdateObfuscationExpression(
    """The account id associated with the obfuscation expression."""
    accountId: Int!

    """The obfuscation expression to be updated."""
    expression: LogConfigurationsUpdateObfuscationExpressionInput!
  ): LogConfigurationsObfuscationExpression

  """Update an existing data partition rule."""
  logConfigurationsUpdateObfuscationRule(
    """The account id associated with the obfuscation rule."""
    accountId: Int!

    """The obfuscation rule to be updated."""
    rule: LogConfigurationsUpdateObfuscationRuleInput!
  ): LogConfigurationsObfuscationRule

  """Update an existing parsing rule."""
  logConfigurationsUpdateParsingRule(
    """The account id associated with the rule."""
    accountId: Int!

    """The identifier of the rule to update."""
    id: ID!

    """The updated rule."""
    rule: LogConfigurationsParsingRuleConfiguration!
  ): LogConfigurationsUpdateParsingRuleResponse

  """Upsert pipeline configuration for an account."""
  logConfigurationsUpsertPipelineConfiguration(
    """The account id associated with the rule."""
    accountId: Int!

    """The updated pipeline configuration."""
    pipelineConfiguration: LogConfigurationsPipelineConfigurationInput!
  ): LogConfigurationsUpsertPipelineConfigurationResponse

  """Creates a metric normalization rule"""
  metricNormalizationCreateRule(
    """Account Id"""
    accountId: Int!

    """An input object that represents the rule to be created."""
    rule: MetricNormalizationCreateRuleInput!
  ): MetricNormalizationRuleMutationResponse

  """Disables a metric normalization rule"""
  metricNormalizationDisableRule(
    """Account Id"""
    accountId: Int!

    """Rule id"""
    ruleId: Int!
  ): MetricNormalizationRuleMutationResponse

  """edit a metric normalization rule"""
  metricNormalizationEditRule(
    """Account Id"""
    accountId: Int!

    """An input object that represents the rule to be created."""
    rule: MetricNormalizationEditRuleInput!
  ): MetricNormalizationRuleMutationResponse

  """Enables a metric normalization rule"""
  metricNormalizationEnableRule(
    """Account Id"""
    accountId: Int!

    """Rule id"""
    ruleId: Int!
  ): MetricNormalizationRuleMutationResponse

  """Remove a mobile device from the users list of devices"""
  mobilePushNotificationRemoveDevice(
    """The uuid of the device."""
    deviceId: String!
  ): MobilePushNotificationRemoveDeviceResult!

  """Send a test push notification to a users specific mobile device"""
  mobilePushNotificationSendTestPush(
    """The uuid of the device."""
    deviceId: String!
  ): MobilePushNotificationSendPushResult!

  """Send a test push notification to all of a users mobile devices"""
  mobilePushNotificationSendTestPushToAll: MobilePushNotificationSendPushResult!

  """
  Delete a NerdStorage collection.
  
  To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
  """
  nerdStorageDeleteCollection(
    """The collection to be deleted."""
    collection: String!

    """The data access level and ID for the selected scope."""
    scope: NerdStorageScopeInput!
    scopeByActor: Boolean
  ): NerdStorageDeleteResult

  """
  Delete a NerdStorage document.
  
  To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
  """
  nerdStorageDeleteDocument(
    """The NerdStorage collection that the document being deleted belongs to."""
    collection: String!

    """The documentId of the document to be deleted."""
    documentId: String!

    """The data access level and ID for the selected scope."""
    scope: NerdStorageScopeInput!
    scopeByActor: Boolean
  ): NerdStorageDeleteResult

  """Delete an existing secret for the selected scope."""
  nerdStorageVaultDeleteSecret(
    """The unique identifier of the secret."""
    key: String!

    """The NerdStorageVault data access level of the secret."""
    scope: NerdStorageVaultScope!
  ): NerdStorageVaultDeleteSecretResult!

  """Store or modify a secret."""
  nerdStorageVaultWriteSecret(
    """
    The type of scope the secret will be associated with.
    The mutation allows for only one scope type at a time to add a secret.
    """
    scope: NerdStorageVaultScope!

    """The secrets data"""
    secret: NerdStorageVaultWriteSecretInput!
  ): NerdStorageVaultWriteSecretResult!

  """
  Create a new NerdStorage document.
  
  To use the NerdStorage schema you must specify a Nerdpack ID using the NewRelic-Package-Id header in your request.
  """
  nerdStorageWriteDocument(
    """The NerdStorage collection to which the new document will be written."""
    collection: String!

    """The new NerdStorage document to be written."""
    document: NerdStorageDocument!

    """The documentId for the newly created NerdStorage document."""
    documentId: String!

    """The data access level and ID for the selected scope."""
    scope: NerdStorageScopeInput!
    scopeByActor: Boolean
  ): NerdStorageDocument

  """
  Adds accounts to the Nerdpack allow list. The accounts must belong to the user's authorized account list.
  """
  nerdpackAddAllowedAccounts(
    """Data of accounts to be added to the allow list."""
    allowList: NerdpackAllowListInput!

    """Nerdpack id."""
    nerdpackId: ID!
  ): NerdpackAllowListResult

  """Creates a Nerdpack with a unique and random uuid V5."""
  nerdpackCreate(
    """Nerdpack input data."""
    nerdpackData: NerdpackCreationInput
  ): NerdpackData!

  """
  Removes accounts from the Nerdpack allow list. The accounts must belong to the user's authorized account list.
  """
  nerdpackRemoveAllowedAccounts(
    """Data of accounts to be removed from the allow list."""
    allowList: NerdpackAllowListInput!

    """Nerdpack id."""
    nerdpackId: ID!
  ): NerdpackAllowListResult

  """
  Remove a specific nerdpack version tag. This operation can only be performed if:
  - User has untagging capabilities.
  - User has accepted the terms and conditions.
  - User's account is the Nerdpack owner, or is an authorized account, or is an admin account for the Nerdpack owner account.
  """
  nerdpackRemoveVersionTag(
    """Nerdpack id."""
    nerdpackId: ID!

    """Input data for nerdpack version tagging."""
    versionTag: NerdpackRemoveVersionTagInput!
  ): NerdpackRemovedTagResponse

  """
  Make a Nerdpack publication available to a list of accounts. Providing partial results.
  """
  nerdpackSubscribeAccounts(
    """Nerdpack id."""
    nerdpackId: ID!

    """Subscription data."""
    subscription: NerdpackSubscribeAccountsInput!
  ): NerdpackSubscribeResult

  """
  Tag a Nerdpack version. This operation can only be performed if:
  - User has tagging capabilities.
  - User has accepted the terms and conditions.
  - User's account is the Nerdpack owner, or is an authorized account, or is an admin account for the Nerdpack owner account.
  """
  nerdpackTagVersion(
    """Nerdpack id."""
    nerdpackId: ID!

    """Input data for nerdpack version tagging."""
    versionTag: NerdpackTagVersionInput!
  ): NerdpackVersion

  """
  Make a Nerdpack publication unavailable to a list of accounts. Providing partial results.
  """
  nerdpackUnsubscribeAccounts(
    """Nerdpack id."""
    nerdpackId: ID!

    """Subscription data."""
    subscription: NerdpackUnsubscribeAccountsInput!
  ): NerdpackUnsubscribeResult

  """Install an alert policy template on a given account for use in it"""
  nr1CatalogInstallAlertPolicyTemplate(
    """The id of the account to install the alert policy template on"""
    accountId: Int!

    """The id of the alert policy template to install on the account"""
    alertPolicyTemplateId: ID!
  ): Nr1CatalogInstallAlertPolicyTemplateResult

  """Install a dashboard template on a given account for use in it"""
  nr1CatalogInstallDashboardTemplate(
    """The id of the account to install the dashboard template on"""
    accountId: Int!

    """The id of the dashboard template to install on the account"""
    dashboardTemplateId: ID!
  ): Nr1CatalogInstallDashboardTemplateResult

  """
  Submit metadata for a Nerdpack that will be available in the New Relic One Catalog
  """
  nr1CatalogSubmitMetadata(
    """The Nerdpack's ID that will be associated with the metadata"""
    id: ID!

    """
    The metadata for the Nerdpack that will be available in the New Relic One Catalog
    """
    nerdpackMetadata: Nr1CatalogSubmitMetadataInput!
  ): Nr1CatalogSubmitMetadataResult

  """Create new drop rule(s)."""
  nrqlDropRulesCreate(
    """The account the targeted data report to."""
    accountId: Int!

    """The list of drop rules you want to create."""
    rules: [NrqlDropRulesCreateDropRuleInput]!
  ): NrqlDropRulesCreateDropRuleResult

  """Delete drop rule(s) by id."""
  nrqlDropRulesDelete(
    """Account the rule was created on."""
    accountId: Int!

    """The list of drop rules Ids you want to delete."""
    ruleIds: [ID]!
  ): NrqlDropRulesDeleteDropRuleResult

  """The new organization to create."""
  organizationCreate(
    """The customer id in which the new organization will be created."""
    customerId: ID

    """
    The attributes of managed account to create. This is only required if sharedAccount field is not provided.
    """
    newManagedAccount: OrganizationNewManagedAccountInput

    """The attributes of organization to create."""
    organization: OrganizationCreateOrganizationInput!

    """
    The attributes of the account that will be shared with the new organization. This is only required if newManagedAccount field is not provided
    """
    sharedAccount: OrganizationSharedAccountInput
  ): OrganizationCreateOrganizationResponse

  """The shared account to create"""
  organizationCreateSharedAccount(
    """The attributes for the account share."""
    sharedAccount: OrganizationCreateSharedAccountInput!
  ): OrganizationCreateSharedAccountResponse

  """The shared account to revoke"""
  organizationRevokeSharedAccount(
    """The attributes for the revoked account share."""
    sharedAccount: OrganizationRevokeSharedAccountInput!
  ): OrganizationRevokeSharedAccountResponse

  """The organization to update"""
  organizationUpdate(
    """The new attributes for the organization."""
    organization: OrganizationUpdateInput!

    """The id of the organization to update"""
    organizationId: ID
  ): OrganizationUpdateResponse

  """The shared account to update"""
  organizationUpdateSharedAccount(
    """The new attributes for the account share."""
    sharedAccount: OrganizationUpdateSharedAccountInput!
  ): OrganizationUpdateSharedAccountResponse

  """Link a Pixie project to a New Relic account using a Pixie API key"""
  pixieLinkPixieProject(
    """The New Relic account to link with Pixie"""
    accountId: Int!

    """The Pixie API key"""
    apiKey: SecureValue
  ): PixieLinkPixieProjectResult

  """Record the Pixie terms of service acceptance for a given account"""
  pixieRecordPixieTosAcceptance(
    """The New Relic account to link with Pixie"""
    accountId: Int!
  ): PixieRecordPixieTosAcceptanceResult

  """Unlink a Pixie project to a New Relic account"""
  pixieUnlinkPixieProject(
    """The New Relic account to link with Pixie"""
    accountId: Int!
  ): PixieLinkPixieProjectResult

  """Creates or updates repository entities."""
  referenceEntityCreateOrUpdateRepository(
    """The list of repositories to create or update."""
    repositories: [ReferenceEntityCreateRepositoryInput!]!

    """
    Flag to force a synchronous execution of the mutation, which means that the entity has been stored once the mutation returns. Default is 'false', which means the entity is queued for storage.
    """
    sync: Boolean
  ): ReferenceEntityCreateRepositoryResult

  """Creates a new SLI."""
  serviceLevelCreate(
    """The entity GUID which the SLI will be attached to."""
    entityGuid: EntityGuid!

    """The input object that represents the SLI that will be created."""
    indicator: ServiceLevelIndicatorCreateInput!
  ): ServiceLevelIndicator

  """Deletes an existing SLI by the GUID."""
  serviceLevelDelete(
    """The unique entity identifier of the SLI."""
    guid: EntityGuid

    """[DEPRECATED] Please, use the GUID input field to delete the SLI."""
    id: ID
  ): ServiceLevelIndicator

  """Updates an existing SLI by the GUID."""
  serviceLevelUpdate(
    """The unique entity identifier of the SLI."""
    guid: EntityGuid

    """[DEPRECATED] Please, use the GUID input field to update the SLI."""
    id: ID

    """The input object that represents the SLI that will be updated."""
    indicator: ServiceLevelIndicatorUpdateInput!
  ): ServiceLevelIndicator

  """Create new streaming rule"""
  streamingExportCreateRule(
    """The New Relic account to export data from"""
    accountId: Int!

    """AWS information needed for the data to be exported"""
    awsParameters: StreamingExportAwsInput

    """Azure information needed for the data to be exported"""
    azureParameters: StreamingExportAzureInput

    """Information about the data to be exported"""
    ruleParameters: StreamingExportRuleInput!
  ): StreamingExportRule

  """Delete a streaming rule"""
  streamingExportDeleteRule(
    """The id of the streaming rule to delete"""
    id: ID!
  ): StreamingExportRule

  """Disable an existing streaming rule"""
  streamingExportDisableRule(
    """The id of the streaming rule to disable"""
    id: ID!
  ): StreamingExportRule

  """Enable an existing streaming rule"""
  streamingExportEnableRule(
    """The id of the streaming rule to enable"""
    id: ID!
  ): StreamingExportRule

  """Update an existing streaming rule"""
  streamingExportUpdateRule(
    """AWS information needed for the streaming rule to be updated"""
    awsParameters: StreamingExportAwsInput

    """Azure information needed for the streaming rule to be updated"""
    azureParameters: StreamingExportAzureInput

    """The id of the streaming rule to update"""
    id: ID!

    """The information needed for the streaming rule to be updated"""
    ruleParameters: StreamingExportRuleInput!
  ): StreamingExportRule

  """Create a Synthetic Broken Links monitor"""
  syntheticsCreateBrokenLinksMonitor(
    """
    The account in which the Synthetics Broken Links monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Broken Links monitor
    """
    monitor: SyntheticsCreateBrokenLinksMonitorInput!
  ): SyntheticsBrokenLinksMonitorCreateMutationResult

  """Create a Synthetic Cert Check (Certificate check) monitor"""
  syntheticsCreateCertCheckMonitor(
    """The account in which the Synthetics Cert Check monitor will be created"""
    accountId: Int!

    """The input arguments required to create a Synthetics Cert Check monitor"""
    monitor: SyntheticsCreateCertCheckMonitorInput!
  ): SyntheticsCertCheckMonitorCreateMutationResult

  """Create a monitor downtime that runs daily"""
  syntheticsCreateDailyMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """
    Configuration options if the customer wants the monitor to end at a specific date
    """
    endRepeat: SyntheticsDateWindowEndConfig

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsDailyMonitorDowntimeMutationResult

  """Create a monitor downtime that runs monthly"""
  syntheticsCreateMonthlyMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """
    Configuration options if the customer wants the monitor to end at a specific date
    """
    endRepeat: SyntheticsDateWindowEndConfig

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """
    Configuration options for which days of the month a monitor downtime will occur
    """
    frequency: SyntheticsMonitorDowntimeMonthlyFrequency!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsMonthlyMonitorDowntimeMutationResult

  """Create a monitor downtime that runs once"""
  syntheticsCreateOnceMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsOnceMonitorDowntimeMutationResult

  """Create a Synthetics Private Location"""
  syntheticsCreatePrivateLocation(
    """The account that will be associated with the created private location"""
    accountId: Int!

    """The private location description"""
    description: String

    """The name of the private location"""
    name: String!

    """The private location requires a password to edit if value is true"""
    verifiedScriptExecution: Boolean!
  ): SyntheticsPrivateLocationMutationResult

  """Create a Synthetic Script Api monitor"""
  syntheticsCreateScriptApiMonitor(
    """The account in which the Synthetics Script Api monitor will be created"""
    accountId: Int!

    """The input arguments required to create a Synthetics Script Api monitor"""
    monitor: SyntheticsCreateScriptApiMonitorInput!
  ): SyntheticsScriptApiMonitorCreateMutationResult

  """Create a Synthetic Script Browser Monitor"""
  syntheticsCreateScriptBrowserMonitor(
    """
    The account in which the Synthetics Script Browser monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Script Browser monitor
    """
    monitor: SyntheticsCreateScriptBrowserMonitorInput!
  ): SyntheticsScriptBrowserMonitorCreateMutationResult

  """Queues a request to create a secure credential"""
  syntheticsCreateSecureCredential(
    """The account that will be associated with the created secure credential"""
    accountId: Int!

    """
    The description identifier for the Synthetics Secure Credential in New Relic
    """
    description: String

    """
    The unique key identifier for the Synthetics Secure Credential in New Relic
    """
    key: String!

    """The value identifier for the Synthetics Secure Credential in New Relic"""
    value: SecureValue!
  ): SyntheticsSecureCredentialMutationResult

  """Create a Synthetic Simple (Ping) monitor"""
  syntheticsCreateSimpleBrowserMonitor(
    """
    The account in which the Synthetics Simple Browser monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Simple Browser monitor
    """
    monitor: SyntheticsCreateSimpleBrowserMonitorInput!
  ): SyntheticsSimpleBrowserMonitorCreateMutationResult

  """Create a Synthetic Simple (Ping) monitor"""
  syntheticsCreateSimpleMonitor(
    """
    The account in which the Synthetics Simple (Ping) monitor will be created
    """
    accountId: Int!

    """
    The input arguments required to create a Synthetics Simple (Ping) monitor
    """
    monitor: SyntheticsCreateSimpleMonitorInput!
  ): SyntheticsSimpleBrowserMonitorCreateMutationResult

  """Create a Synthetic Step monitor"""
  syntheticsCreateStepMonitor(
    """The account in which the Synthetics Step monitor will be created"""
    accountId: Int!

    """The input arguments required to create a Synthetics Step Monitor"""
    monitor: SyntheticsCreateStepMonitorInput!
  ): SyntheticsStepMonitorCreateMutationResult

  """Create a monitor downtime that runs weekly"""
  syntheticsCreateWeeklyMonitorDowntime(
    """The account that will be associated with the created monitor downtime"""
    accountId: Int!

    """
    Configuration options if the customer wants the monitor to end at a specific date
    """
    endRepeat: SyntheticsDateWindowEndConfig

    """The date and time in which the monitor downtime will end"""
    endTime: NaiveDateTime!

    """Days of the week the monitor downtime will run"""
    maintenanceDays: [SyntheticsMonitorDowntimeWeekDays]!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """The name of the monitor downtime"""
    name: String!

    """The date and time in which the monitor downtime will begin"""
    startTime: NaiveDateTime!

    """The timezone the time values will be in"""
    timezone: String!
  ): SyntheticsWeeklyMonitorDowntimeMutationResult

  """Delete a Synthetic Monitor"""
  syntheticsDeleteMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!
  ): SyntheticsMonitorDeleteMutationResult

  """Delete a monitor downtime"""
  syntheticsDeleteMonitorDowntime(
    """The client identifier of the monitor downtime to be deleted"""
    guid: EntityGuid!
  ): SyntheticsMonitorDowntimeDeleteResult

  """Delete a Synthetics Private Location"""
  syntheticsDeletePrivateLocation(
    """The client identifier of the private location to be deleted"""
    guid: EntityGuid!
  ): SyntheticsPrivateLocationDeleteResult

  """Queues a request to delete an existing secure credential"""
  syntheticsDeleteSecureCredential(
    """
    The account that is associated with the secure credential to be deleted
    """
    accountId: Int!

    """
    The unique key identifier for the Synthetics Secure Credential in New Relic
    """
    key: String!
  ): SyntheticsSecureCredentialMutationResult

  """Edit a monitor downtime"""
  syntheticsEditMonitorDowntime(
    """
    Configuration options for a monitor downtime that runs daily (only 1 of these can be selected)
    """
    daily: SyntheticsMonitorDowntimeDailyConfig

    """The unique identifier for the Synthetic Monitor Downtime in New Relic"""
    guid: EntityGuid!

    """Monitor GUIDs this monitor downtime will affect"""
    monitorGuids: [EntityGuid]

    """
    Configuration options for a monitor downtime that runs monthly (only 1 of these can be selected)
    """
    monthly: SyntheticsMonitorDowntimeMonthlyConfig

    """The name for the monitor downtime"""
    name: String

    """
    Configuration options for a monitor downtime that runs once (only 1 of these can be selected)
    """
    once: SyntheticsMonitorDowntimeOnceConfig

    """
    Configuration options for a monitor downtime that runs weekly (only 1 of these can be selected)
    """
    weekly: SyntheticsMonitorDowntimeWeeklyConfig
  ): SyntheticsMonitorDowntimeMutationResult

  """Purge the job queue for a specified private location"""
  syntheticsPurgePrivateLocationQueue(
    """
    The unique client identifier for the Synthetics Private Location in New Relic
    """
    guid: EntityGuid!
  ): SyntheticsPrivateLocationPurgeQueueResult

  """Update a Synthetic Broken Links monitor"""
  syntheticsUpdateBrokenLinksMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Broken Links monitor
    """
    monitor: SyntheticsUpdateBrokenLinksMonitorInput!
  ): SyntheticsBrokenLinksMonitorUpdateMutationResult

  """Update a Synthetic Cert Check (Certificate check) monitor"""
  syntheticsUpdateCertCheckMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """The input arguments required to update a Synthetics Cert Check monitor"""
    monitor: SyntheticsUpdateCertCheckMonitorInput!
  ): SyntheticsCertCheckMonitorUpdateMutationResult

  """Update a Synthetics Private Location"""
  syntheticsUpdatePrivateLocation(
    """The private location description"""
    description: String

    """
    The unique client identifier for a Synthetics Private Location in New Relic
    """
    guid: EntityGuid!

    """Requires password to run scripts on this private location"""
    verifiedScriptExecution: Boolean
  ): SyntheticsPrivateLocationMutationResult

  """Update a Synthetic Script Api monitor"""
  syntheticsUpdateScriptApiMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """The input arguments required to update a Synthetics Script Api Monitor"""
    monitor: SyntheticsUpdateScriptApiMonitorInput!
  ): SyntheticsScriptApiMonitorUpdateMutationResult

  """Update a Synthetic Script Browser Monitor"""
  syntheticsUpdateScriptBrowserMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Script Browser monitor
    """
    monitor: SyntheticsUpdateScriptBrowserMonitorInput!
  ): SyntheticsScriptBrowserMonitorUpdateMutationResult

  """Queues a request to update an existing secure credential"""
  syntheticsUpdateSecureCredential(
    """
    The account that is associated with the secure credential to be updated
    """
    accountId: Int!

    """
    The description identifier for the Synthetics Secure Credential in New Relic
    """
    description: String

    """
    The unique key identifier for the Synthetics Secure Credential in New Relic
    """
    key: String!

    """The value identifier for the Synthetics Secure Credential in New Relic"""
    value: SecureValue
  ): SyntheticsSecureCredentialMutationResult

  """Update a Synthetic Simple Browser monitor"""
  syntheticsUpdateSimpleBrowserMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Simple Browser monitor
    """
    monitor: SyntheticsUpdateSimpleBrowserMonitorInput!
  ): SyntheticsSimpleBrowserMonitorUpdateMutationResult

  """Update a Synthetic Simple (Ping) monitor"""
  syntheticsUpdateSimpleMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """
    The input arguments required to update a Synthetics Simple (ping) Monitor
    """
    monitor: SyntheticsUpdateSimpleMonitorInput!
  ): SyntheticsSimpleMonitorUpdateMutationResult

  """Update a Synthetic Step monitor"""
  syntheticsUpdateStepMonitor(
    """The unique identifier for the Synthetic Monitor in New Relic"""
    guid: EntityGuid!

    """The input arguments required to update a Synthetics Step Monitor"""
    monitor: SyntheticsUpdateStepMonitorInput!
  ): SyntheticsStepMonitorUpdateMutationResult

  """
  Adds the provided tags to your specified entity, without deleting existing ones.
  The maximum number of tag-values per entity is 100; if the sum of existing and new tag-values if over the limit this mutation will fail.
  
  For details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).
  """
  taggingAddTagsToEntity(
    """The guid of the new entity."""
    guid: EntityGuid!

    """
    An array of key-values pairs to represent a tag. For example:  Team:TeamName.
    """
    tags: [TaggingTagInput!]!
  ): TaggingMutationResult

  """
  Delete specific tag keys from the entity.
  
  For details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).
  """
  taggingDeleteTagFromEntity(
    """The guid of the existing entity."""
    guid: EntityGuid!

    """An array of keys that have to be deleted. For example: ['Team']."""
    tagKeys: [String!]!
  ): TaggingMutationResult

  """
  Delete specific tag key-values from the entity.
  
  For details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).
  """
  taggingDeleteTagValuesFromEntity(
    """The guid of the existing entity."""
    guid: EntityGuid!

    """
    An array of key-values pairs to represent a tag. For example: Team:TeamName.
    """
    tagValues: [TaggingTagValueInput!]!
  ): TaggingMutationResult

  """
  Replaces the entity's entire set of tags with the provided tag set.
  The maximum number of tag-values per entity is 100; if more than 100 tag-values are provided this mutation will fail.
  
  For details and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).
  """
  taggingReplaceTagsOnEntity(
    """The guid of the existing entity."""
    guid: EntityGuid!

    """
    An array of key-values pairs to represent a tag. For example:  Team:TeamName.
    """
    tags: [TaggingTagInput!]!
  ): TaggingMutationResult

  """A mutation for adding user(s) to group(s)."""
  userManagementAddUsersToGroups(
    """The input object representing the group(s) and user(s) to update."""
    addUsersToGroupsOptions: UserManagementUsersGroupsInput
  ): UserManagementAddUsersToGroupsPayload

  """A mutation for creating a group in an authentication domain."""
  userManagementCreateGroup(
    """The input object representing the group to create"""
    createGroupOptions: UserManagementCreateGroup
  ): UserManagementCreateGroupPayload

  """A mutation for creating a user in an authentication domain."""
  userManagementCreateUser(
    """The input object representing the user to be created."""
    createUserOptions: UserManagementCreateUser!
  ): UserManagementCreateUserPayload

  """A mutation for deleting a group."""
  userManagementDeleteGroup(
    """The input object representing the group to remove"""
    groupOptions: UserManagementDeleteGroup
  ): UserManagementDeleteGroupPayload

  """A mutation for deleting a user."""
  userManagementDeleteUser(
    """The input object containing the id of the user to be deleted."""
    deleteUserOptions: UserManagementDeleteUser!
  ): UserManagementDeleteUserPayload

  """A mutation for removing user(s) from group(s)."""
  userManagementRemoveUsersFromGroups(
    """
    The input object representing the users to remove and the groups to remove them from.
    """
    removeUsersFromGroupsOptions: UserManagementUsersGroupsInput!
  ): UserManagementRemoveUsersFromGroupsPayload

  """A mutation for updating an existing group."""
  userManagementUpdateGroup(
    """The input object representing the group to update"""
    updateGroupOptions: UserManagementUpdateGroup
  ): UserManagementUpdateGroupPayload

  """A mutation for updating an existing user."""
  userManagementUpdateUser(
    """The input object representing the user to be updated."""
    updateUserOptions: UserManagementUpdateUser!
  ): UserManagementUpdateUserPayload

  """Updates the date the current user last read the news."""
  whatsNewSetLastReadDate(
    """
    The date, represented since the epoch in milliseconds, the current user last read the news.
    """
    date: EpochMilliseconds!
  ): EpochMilliseconds

  """Creates a new workload."""
  workloadCreate(
    """The New Relic account ID where you want to create the workload."""
    accountId: Int!

    """An input object that represents the workload to be created."""
    workload: WorkloadCreateInput!
  ): WorkloadCollection

  """Deletes an existing workload."""
  workloadDelete(
    """The GUID of the workload to delete."""
    guid: EntityGuid!
  ): WorkloadCollection

  """Duplicates an existing workload."""
  workloadDuplicate(
    """The New Relic Account ID where you want to create the new workload."""
    accountId: Int!

    """The GUID of the workload you want to duplicate."""
    sourceGuid: EntityGuid!

    """An input object with information about the new workload."""
    workload: WorkloadDuplicateInput
  ): WorkloadCollection

  """Updates an existing workload."""
  workloadUpdate(
    """The GUID of the workload you want to update."""
    guid: EntityGuid!

    """
    An input object with information to identify the workload to be updated and its new changes.
    """
    workload: WorkloadUpdateInput!
  ): WorkloadCollection
}

"""Example subset of incidents applicable for a selector"""
type AiDecisionsSelectorExamples {
  """IDs of incidents that can be applied to this selector"""
  incidents: [ID!]!

  """Incident selector"""
  select: AiDecisionsIncidentSelect!
}

"""An APM Application entity."""
type ApmApplicationEntity implements AlertableEntity & ApmBrowserApplicationEntity & Entity {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
  """
  alertViolations(
    """End of time window for violations."""
    endTime: EpochMilliseconds!

    """Start of time window for violations."""
    startTime: EpochMilliseconds!
  ): [EntityAlertViolation]

  """
  Summary statistics about the Browser App injected by an APM Application.
  """
  apmBrowserSummary: ApmBrowserApplicationSummaryData

  """Settings that are common across APM applications."""
  apmSettings: AgentApplicationSettingsApmBase

  """Summary statistics about the APM App."""
  apmSummary: ApmApplicationSummaryData

  """The ID of the APM Application."""
  applicationId: Int

  """List of APM application instances."""
  applicationInstances(
    """
    Time window start time in milliseconds since the unix epoch on which the agent reported data. Defaults to current time.
    """
    endTime: EpochMilliseconds

    """Use this field to filter application instances by host name."""
    host: String

    """
    Time window start time in milliseconds since the unix epoch on which the agent reported data. Defaults to 5 minutes before the current time.
    """
    startTime: EpochMilliseconds
  ): [AgentEnvironmentApplicationInstance!]

  """Paginated list of APM application instances."""
  applicationInstancesV2(
    """Use this field for application instance pagination"""
    cursor: String
  ): AgentEnvironmentApplicationInstancesResult!

  """Retrieve the deployment event(s). Ordered by timestamp DESC."""
  deploymentSearch(
    """Contains the set of filters to apply to the query."""
    filter: ChangeTrackingSearchFilter
  ): ChangeTrackingDeploymentSearchResult

  """Deployments of the APM Application."""
  deployments(
    """Time range to fetch deployments for. Defaults to the last day."""
    timeWindow: TimeWindowInput
  ): [ApmApplicationDeployment] @deprecated(reason: "This field is deprecated and no longer returns data. Please use `deploymentSearch`.")

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """An Exception that occurred in your Application."""
  exception(
    """A unique exception identifier."""
    occurrenceId: String!
  ): StackTraceApmException

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """
  Retrieves a flamegraph for the specific entity over the time period specified.
  """
  flamegraph(
    """The JVM host to get flamegraph stack trace events for"""
    hostName: String!

    """
    The start and end of the flamegraph events. Defaults to last 30 minutes
    """
    timeWindow: TimeWindowInput
  ): JavaFlightRecorderFlamegraph

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The programming language of the APM Application."""
  language: String

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """Retrieves the entity metric grouping issues."""
  metricGroupingIssues(
    """End time."""
    endTime: EpochMilliseconds

    """Metric normalization rule ids"""
    metricNormalizationRuleIds: [Int]

    """Start time."""
    startTime: EpochMilliseconds
  ): [MetricNormalizationRuleMetricGroupingIssue!]

  """Retrieves a rule."""
  metricNormalizationRule(
    """Rule Id"""
    id: Int!
  ): MetricNormalizationRule

  """Retrieves the rules for the application."""
  metricNormalizationRules(
    """Rule enabled"""
    enabled: Boolean
  ): [MetricNormalizationRule!]

  """The name of this entity."""
  name: String
  nerdStorage: NerdStorageEntityScope

  """
  Make an `Entity` scoped query to NRDB with a NRQL string.
  
  A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
  
  See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
  """
  nrdbQuery(
    """
    When true, the query will begin asynchronous resolution after the allotted `timeout`. Include `queryProgress` fields in your GraphQL query to receive the information you will need to poll the `nrdbQueryProgress` field for the results of your async NRQL query.
    
    See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
    """
    async: Boolean = false

    """
    The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query string.
    """
    nrql: Nrql!

    """Additional options for NRQL queries."""
    options: NrqlQueryOptions

    """
    The timeout we will apply to the NRQL Query. The value will be clamped to between 5 and 120 seconds and defaults to 5 seconds.
    
    For `async` queries, if the query is still incomplete after this amount of time, resolution will become asynchronous and return `queryProgress` data if requested.
    """
    timeout: Seconds
  ): NrdbResultContainer

  """
  Poll for the results of a previously-executed asychronous NRDB query.
  
  The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
  
  See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
  """
  nrdbQueryProgress(
    """
    A token for retrieving the results of a previously executed asynchronous query.
    """
    queryId: ID!
  ): NrdbResultContainer @deprecated(reason: "This field is experimental! It may change at any time.\n")

  """The url to the entity."""
  permalink: String

  """Recent violations on the entity."""
  recentAlertViolations(
    """The desired number of alert violations to be returned."""
    count: Int
  ): [EntityAlertViolation]

  """Related entities result with optional filtering."""
  relatedEntities(
    """The cursor to fetch paginated results."""
    cursor: String

    """Apply an optional filter to the related entities."""
    filter: EntityRelationshipEdgeFilter

    """
    A limit to apply to the number of relationships returned. Note: this option can only lower the default limits (2000 relationships).
    """
    limit: Int
  ): EntityRelationshipRelatedEntitiesResult

  """
  A list of the entities' relationships.
  
  For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
  """
  relationships(
    """
    Return relationships as they existed in the past. The duration of the time window queried is fixed at 75 minutes.
    """
    endTime: EpochMilliseconds

    """Apply an optional filter to the relationships."""
    filter: EntityRelationshipFilter
  ): [EntityRelationship] @deprecated(reason: "This field is deprecated! Please use `relatedEntities`.")

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The running versions of the language agent in the APM Application."""
  runningAgentVersions: ApmApplicationRunningAgentVersions

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """Configuration settings for the APM Application"""
  settings: ApmApplicationSettings

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The tags applied to the entity with their metadata."""
  tagsWithMetadata: [EntityTagWithMetadata]

  """Look up Distributed Tracing summary data for the selected `EntityGuid`"""
  tracingSummary(
    """The start and end of the tracing data. Defaults to the last 30 minutes"""
    timeWindow: TimeWindowInput
  ): DistributedTracingEntityTracingSummary

  """The entity's type"""
  type: String
}

"""AWS details about a streaming rule"""
type StreamingExportAwsDetails {
  """The AWS account to which the target firehose belongs"""
  awsAccountId: ID!

  """The name of the delivery stream to write events to"""
  deliveryStreamName: String!

  """The AWS region the delivery stream is located in"""
  region: String!

  """The role configured for New Relic to assume"""
  role: String!
}

"""Time range to apply to the golden metric NRQL query"""
input EntityGoldenNrqlTimeWindowInput {
  """Start time."""
  since: Nrql

  """End time."""
  until: Nrql
}

"""A deployment."""
input ChangeTrackingDeploymentInput {
  """A URL for the changelog or, if not linkable, a list of changes."""
  changelog: String

  """The commit identifier, for example, a Git commit SHA."""
  commit: String

  """A URL to the system that generated the deployment."""
  deepLink: String

  """The type of deployment, for example, ‘Blue green’ or ‘Rolling’."""
  deploymentType: ChangeTrackingDeploymentType

  """A description of the deployment."""
  description: String

  """The NR entity that was deployed."""
  entityGuid: EntityGuid!

  """An identifier used to correlate two or more events."""
  groupId: String

  """
  The start time of the deployment as the number of milliseconds since the Unix epoch. Should be within the boundary of the past or future 24 hours. Defaults to now.
  """
  timestamp: EpochMilliseconds

  """The username of the deployer or bot."""
  user: String

  """The version of the deployed software, for example, something like v1.1"""
  version: String!
}

"""Input type for FixedLessThanOrEqual expression"""
input AiDecisionsFixedLessThanOrEqualInput {
  """Value to be used in comparison."""
  compared: Float!

  """Incident selector to be used in comparison."""
  incident: AiDecisionsIncidentObjectInput!
}

"""container for authentication domains enabling cursor based pagination"""
type UserManagementAuthenticationDomains {
  """container for authentication_domains enabling cursor based pagination"""
  authenticationDomains: [UserManagementAuthenticationDomain!]!

  """
  an opaque cursor to supply with subsequent     requests to get the next page of results, null if there are no more pages
  """
  nextCursor: String

  """the total number of results"""
  totalCount: Int!
}

"""Information about the error group state type"""
type ErrorsInboxErrorGroupStateTypeResult {
  """Type of the error group state"""
  type: ErrorsInboxErrorGroupState
}

"""Neptune"""
input CloudAwsNeptuneIntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}

"""Input type for RelativeGreaterThanOrEqual expression"""
input AiDecisionsRelativeGreaterThanOrEqualInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""The script that a monitor runs"""
type SyntheticsMonitorScriptQueryResponse {
  """The script associated with the specified monitor"""
  text: String
}

"""General error categories."""
enum EventsToMetricsErrorReason {
  """Other errors."""
  GENERAL

  """Indicates some part of your submission was invalid."""
  INVALID_INPUT

  """The user attempting to submit this rule is not authorized to do so."""
  USER_NOT_AUTHORIZED
}

"""
Configuration for visualization type 'viz.pie'.  Learn more about [pie](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-dashboards-api/#pie) widget.
"""
input DashboardPieWidgetConfigurationInput {
  """NRQL queries."""
  nrqlQueries: [DashboardWidgetNrqlQueryInput!]
}

"""
A section of the entity search results. If there is a `nextCursor` present, there are more results available.
"""
type EntitySearchResult {
  """
  The entities contained in this section of the entity search results.
  
  For information on New Relic entities, visit [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
  
  To see some query examples of entity information,
  visit [our entity GraphQL API docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
  """
  entities: [EntityOutline]

  """
  The next cursor for fetching additional paginated entity search results.
  """
  nextCursor: String
}

"""Input type for RelativeJaroWinkler expression"""
input AiDecisionsRelativeJaroWinklerInput {
  """Left operand of comparison."""
  left: AiDecisionsIncidentObjectInput!

  """Minimum distance threshold."""
  minDistance: Float!

  """Right operand of comparison."""
  right: AiDecisionsIncidentObjectInput!
}

"""Supported rendering formats for data"""
enum Nr1CatalogRenderFormat {
  """Renders the output in Markdown"""
  MARKDOWN
}

"""Amazon Elastic Compute Cloud (EC2)"""
input CloudEc2IntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  Specify if the old legacy metadata and tag names have to be kept, it will consume more ingest data size
  """
  duplicateEc2Tags: Boolean

  """Specify if IP addresses of ec2 instance should be collected"""
  fetchIpAddresses: Boolean

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String
}

"""The input object that represents the SLI that will be created."""
input ServiceLevelIndicatorCreateInput {
  """The description of the SLI."""
  description: String

  """The events that define the SLI."""
  events: ServiceLevelEventsCreateInput!

  """The name of the SLI."""
  name: String!

  """A list of objective definitions."""
  objectives: [ServiceLevelObjectiveCreateInput!]

  """
  [DEPRECATED] The slug is deprecated and it will be removed from the schema as soon as possible.
  """
  slug: String
}

"""Represents the details in common between all types of news."""
interface WhatsNewContent {
  """The type of the news."""
  contentType: WhatsNewContentType!

  """Contains information about the context of the news."""
  context: [String!]

  """The ID of the news."""
  id: ID!

  """The date the news was published."""
  publishDate: EpochMilliseconds

  """The summary of the news."""
  summary: String

  """The title of the news."""
  title: String
}

"""The input object used to represent a rollup strategy."""
input WorkloadRemainingEntitiesRuleRollupInput {
  """The grouping to be applied to the remaining entities."""
  groupBy: WorkloadGroupRemainingEntitiesRuleBy!

  """The rollup strategy that is applied to a group of entities."""
  strategy: WorkloadRollupStrategy!

  """
  Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.
  """
  thresholdType: WorkloadRuleThresholdType

  """
  Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.
  """
  thresholdValue: Int
}

"""An organization's shared accounts, both given and received."""
type OrganizationAccountShares {
  """An organization's shared accounts, both given and received."""
  sharedAccounts: [OrganizationSharedAccount!]
}

"""The input object that represents the SLI that will be updated."""
input ServiceLevelIndicatorUpdateInput {
  """The description of the SLI."""
  description: String

  """The events that define the SLI."""
  events: ServiceLevelEventsUpdateInput

  """The name of the SLI."""
  name: String

  """A list of objective definitions."""
  objectives: [ServiceLevelObjectiveUpdateInput!]
}

"""The configuration of a cloud service integration for a linked account."""
interface CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The rolling time window units."""
enum ServiceLevelObjectiveRollingTimeWindowUnit {
  """Day."""
  DAY
}

"""NRQL type update enrichment input object"""
input AiWorkflowsNrqlUpdateEnrichmentInput {
  """configuration"""
  configuration: [AiWorkflowsNrqlConfigurationInput!]!

  """id"""
  id: ID

  """name"""
  name: String!
}

"""Database for MariaDB Integration"""
type CloudAzureMariadbIntegration implements CloudIntegration {
  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""The different rule actions."""
enum MetricNormalizationRuleAction {
  """Deny new metrics."""
  DENY_NEW_METRICS

  """Ignore matching metrics."""
  IGNORE

  """Replace metrics."""
  REPLACE
}

"""The monitor values that can be updated on a Step monitor"""
input SyntheticsUpdateStepMonitorInput {
  """The monitor advanced options"""
  advancedOptions: SyntheticsStepMonitorAdvancedOptionsInput

  """The monitor's Apdex target used to populate SLA reports"""
  apdexTarget: Float

  """The locations the monitor will run from"""
  locations: SyntheticsScriptedMonitorLocationsInput

  """The human readable identifier for the monitor"""
  name: String

  """The interval at which the monitor runs in minutes"""
  period: SyntheticsMonitorPeriod

  """The run state of the monitor"""
  status: SyntheticsMonitorStatus

  """The steps that make up the script the monitor will run"""
  steps: [SyntheticsStepInput]

  """The tags that will be associated with the monitor"""
  tags: [SyntheticsTag]
}

"""Information required to link a GCP account to a NewRelic account."""
input CloudGcpLinkAccountInput {
  """The linked account name."""
  name: String!

  """The GCP project identifier."""
  projectId: String!
}

"""Configuration for VictorOps notification channel."""
type AlertsVictorOpsNotificationChannelConfig {
  """Key."""
  key: SecureValue!

  """Route key."""
  routeKey: String!
}

"""Details about an entity type"""
type DomainType {
  """
  The domain of the entity.
  
  The domain must be a value matching /[A-Z][A-Z0-9_]{2,14}/.
  """
  domain: String!

  """
  The type of the entity.
  
  The type must be a value matching /[A-Z][A-Z0-9_]{2,49}/.
  
  Some examples are APPLICATION, HOST or CONTAINER.
  """
  type: String!
}

"""Possible search result types used to filter search results"""
enum Nr1CatalogSearchResultType {
  """Filter search results by alert policy templates"""
  ALERT_POLICY_TEMPLATE

  """Filter search results by dashboard templates"""
  DASHBOARD_TEMPLATE

  """Filter search results by data sources"""
  DATA_SOURCE

  """Filter search results by nerdpacks"""
  NERDPACK

  """Filter search results by quickstarts"""
  QUICKSTART
}

"""A filter for organization groups"""
input OrganizationOrganizationGroupFilterInput {
  """The id of the organization group"""
  id: OrganizationOrganizationGroupIdInputFilter

  """The name of the organization group"""
  name: OrganizationOrganizationGroupNameInputFilter

  """The ID of the organization"""
  organizationId: OrganizationOrganizationGroupOrganizationIdInputFilter
}

"""The input for updating an existing PagerDuty notification channel."""
input AlertsPagerDutyNotificationChannelUpdateInput {
  """API key."""
  apiKey: SecureValue

  """Notification channel name."""
  name: String
}

"""ELB (Classic) Integration"""
type CloudElbIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchExtendedInventory: Boolean

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""Filter users"""
input MultiTenantIdentityUserFilterInput {
  """Filter users by authentication domain"""
  authenticationDomainId: MultiTenantIdentityAuthenticationDomainIdInput!

  """Filter users by email address"""
  email: MultiTenantIdentityUserEmailInput

  """Filter users by id"""
  id: MultiTenantIdentityUserIdInput

  """Filter users by name"""
  name: MultiTenantIdentityUserNameInput

  """Filter users by pending upgrade request"""
  pendingUpgradeRequest: MultiTenantIdentityPendingUpgradeRequestInput
}

"""Incident state"""
enum AiIssuesIncidentState {
  """Incident is closed"""
  CLOSED

  """Incident is created"""
  CREATED
}

"""Issue state"""
enum AiIssuesIssueState {
  """Issue is activated"""
  ACTIVATED

  """Issue is closed"""
  CLOSED

  """Issue is created"""
  CREATED

  """Issue is deactivated"""
  DEACTIVATED
}

"""Array of responses, one for each trace filter rule deletion request"""
type EdgeDeleteTraceFilterRuleResponses {
  """
  Array of span attribute trace filter rule deletion responses, one for each id provided to `DeleteTraceFilterRulesInput`.
  """
  spanAttributeRules: [EdgeDeleteSpanAttributeRuleResponse!]!
}

"""Metadata associated with the alert in a quickstart"""
type Nr1CatalogQuickstartAlertMetadata implements Nr1CatalogQuickstartComponentMetadata {
  """A short form description for the alert."""
  description: String @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")

  """The human-readable name for the alert."""
  displayName: String @deprecated(reason: "This field is no longer supported. Please use Nr1CatalogQuickstartAlertCondition instead.")
}

"""X-Ray Integration"""
type CloudAwsXrayIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""An outline of a created alert condition"""
type Nr1CatalogAlertConditionOutline {
  """The template id of the created alert condition"""
  alertConditionTemplate: Nr1CatalogAlertConditionTemplate!

  """The id of the created alert condition"""
  id: ID!
}

"""Provides the available values of possible fields that can be sorted"""
enum OrganizationAccountShareSortKeyEnum {
  """Account id"""
  ACCOUNT_ID

  """Name of the target organization the account is shared with"""
  TARGET_ORGANIZATION_NAME
}

"""Array of responses, one for each trace observer creation request."""
type EdgeCreateTraceObserverResponses {
  """
  Array of trace observer creation responses, one for each `CreateTraceObserverInput`.
  """
  responses: [EdgeCreateTraceObserverResponse!]!
}

"""
The method that determines when we consider an aggregation window to be complete
so that we can evaluate the signal for violations. Default is `CADENCE`.
"""
enum AlertsSignalAggregationMethod {
  """
  `CADENCE` streams data points as the clocks at New Relic advance past the end
  of their window. This ensures a rigorous evaluation cadence, but does not take
  into account extraneous data latency.
  
  Use in conjunction with the `aggregationDelay` field.
  """
  CADENCE

  """
  `EVENT_FLOW` streams data points for evaluation as data for newer time windows
  arrive. Whenever data is received, any data points older than the specified
  delay will be evaluated.
  
  Use in conjunction with the `aggregationDelay` field.
  """
  EVENT_FLOW

  """
  `EVENT_TIMER` streams data points after the specified timer elapses since data
  last arrived for that window. Special measures are taken to make sure data
  points flow in order.
  
  Use in conjunction with the `aggregationTimer` field.
  """
  EVENT_TIMER
}

"""An object representing a stack trace segment"""
type StackTraceMobileCrashStackTraceFrame {
  """Frame filepath"""
  filepath: String

  """Formatted frame"""
  formatted: String!

  """Frame line number"""
  line: Int

  """Frame name"""
  name: String
}

"""Input for assignment mutation."""
input ErrorsInboxAssignErrorGroupInput {
  """Email address of the user that will be assigned."""
  userEmail: String

  """Id of the user that will be assigned."""
  userId: Int
}

"""An object that represents a tag key-value pair"""
input TaggingTagValueInput {
  """The tag key."""
  key: String!

  """The tag value."""
  value: String!
}

"""Provides fields to set general browser application settings."""
input AgentApplicationSettingsBrowserConfigInput {
  """The desired target for the APDEX measurement of this application."""
  apdexTarget: Float
}

"""Information required to link a Azure account to a NewRelic account."""
input CloudAzureLinkAccountInput {
  """The Azure account application identifier (used to fetch data)."""
  applicationId: String!

  """The Azure account application secret key."""
  clientSecret: SecureValue!

  """The linked account name."""
  name: String!

  """The Azure account subscription identifier."""
  subscriptionId: String!

  """The Azure account tenant identifier."""
  tenantId: String!
}

"""Listing of edges in a graph."""
type AiTopologyEdgeListing {
  """Number of edges returned by the query."""
  count: Int!

  """Next cursor."""
  cursor: String

  """List of edges."""
  edges: [AiTopologyEdge!]!
}

"""VPN Gateways"""
input CloudAzureVpngatewaysIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""Listing of vertices in a graph."""
type AiTopologyVertexListing {
  """Number of vertices returned by this query."""
  count: Int!

  """Next cursor."""
  cursor: String

  """List of vertices."""
  vertices: [AiTopologyVertex!]!
}

"""Represents the details of a rollup rule."""
type WorkloadRollupRuleDetails {
  """A list of entity search queries defined in the rule."""
  entitySearchQueries: [String!]

  """Indicates if the rule has individual entities."""
  hasIndividualEntities: Boolean!

  """The amount of not operational entities after evaluating the rule."""
  notOperationalEntities: Int!

  """The amount of operational entities after evaluating the rule."""
  operationalEntities: Int!

  """The resulting type of the rollup rule."""
  resultingGroupType: WorkloadResultingGroupType!

  """Type of threshold defined for the rule."""
  thresholdType: WorkloadRuleThresholdType

  """The amount of entities the status of which is unknown."""
  unknownStatusEntities: Int!
}

"""Response error interface"""
interface ErrorsInboxResponseError {
  """The description of the error"""
  description: String!
}

type HistoricalDataExportAccountStitchedFields {
  """Retrieve a single export by export id"""
  export(
    """The unique identifier for the requested export"""
    id: ID!
  ): HistoricalDataExportCustomerExportResponse

  """Retrieve all exports for an account"""
  exports: [HistoricalDataExportCustomerExportResponse!]
}

"""
A search for a subset of incidents that may be relevant for a given rule expression
"""
type AiDecisionsApplicableIncidentSearch {
  """Time search operation completed"""
  completedAt: EpochMilliseconds

  """Time search operation was created"""
  createdAt: EpochMilliseconds!

  """Error message if search operation failed"""
  errorMessage: String

  """ID of search operation"""
  id: ID!

  """Number of incidents scanned by the search operation"""
  incidentsScanned: Int!

  """Listing of incident selectors and potential applicable incidents"""
  results: [AiDecisionsSelectorExamples!]!

  """Time search operation was last updated"""
  updatedAt: EpochMilliseconds!
}

"""Suggestion object"""
type AiNotificationsSuggestion {
  """Suggestion label"""
  displayValue: String!

  """Should suggestion be the default selection"""
  icon: String

  """Suggestion key"""
  value: String!
}

"""A filter that can be applied to filter results."""
input AgentEnvironmentFilter {
  """
  A string to filter results that includes this string anywhere. Case insensitive.
  """
  contains: String

  """
  A string to filter out results that includes this string anywhere. Case insensitive.
  """
  doesNotContain: String

  """
  A string to filter results that are exactly as the string provided. Case sensitive.
  """
  equals: String

  """
  A string to filter results that starts with this string. Case insensitive.
  """
  startsWith: String
}

"""Values for relationship direction filter."""
enum EntityRelationshipEdgeDirection {
  """Traverse both inbound and outbound connections."""
  BOTH

  """Traverse inbound connections to the source of the relationship."""
  INBOUND

  """Traverse outbound connections to the target of the relationship."""
  OUTBOUND
}

"""
The status value. Any static status always overrides any other status values calculated automatically.
"""
enum WorkloadStatusValueInput {
  """The status of the workload is degraded."""
  DEGRADED

  """The status of the workload is disrupted."""
  DISRUPTED

  """The status of the workload is operational."""
  OPERATIONAL
}

interface AlertableEntityOutline {
  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity
}

"""Possible types for the install plan operating system"""
enum Nr1CatalogInstallPlanOperatingSystem {
  """Mac operating system"""
  DARWIN

  """Linux operating system"""
  LINUX

  """Windows operating system"""
  WINDOWS
}

"""The domain to search"""
enum EntitySearchQueryBuilderDomain {
  """Any APM entity"""
  APM

  """Any Browser entity"""
  BROWSER

  """Any External entity"""
  EXT

  """Any Infrastructure entity"""
  INFRA

  """Any Mobile entity"""
  MOBILE

  """Any Synthetics entity"""
  SYNTH
}

"""
Represents whether a span is a call to a datastore or an external service.
"""
enum DistributedTracingSpanClientType {
  """A span that represents a call to a datastore."""
  DATASTORE

  """A span that represents a call to an external service."""
  EXTERNAL
}

"""List of schema/suggestions constraints"""
input AiNotificationsConstraint {
  """key"""
  key: String!

  """value"""
  value: String!
}

"""Information about a dashboard in a quickstart"""
type Nr1CatalogQuickstartDashboard implements Nr1CatalogQuickstartComponent {
  """The unique identifier for the dashboard"""
  id: ID!

  """Metadata associated with the dashboard"""
  metadata: Nr1CatalogQuickstartDashboardMetadata!
}

"""Information about facets from a search"""
type Nr1CatalogSearchFacets {
  """Facet counts for each category"""
  categories: [Nr1CatalogCategoryFacet!]!

  """Facet counts for each component"""
  components: [Nr1CatalogComponentFacet!]!

  """Count of the number of featured results"""
  featured: Int!

  """Facet counts for each search result type"""
  types: [Nr1CatalogSearchResultTypeFacet!]!
}

"""Filter channel object"""
input AiNotificationsChannelFilter {
  """active"""
  active: Boolean

  """destinationId"""
  destinationId: ID

  """id"""
  id: ID

  """ids"""
  ids: [ID!]

  """name"""
  name: String

  """product"""
  product: AiNotificationsProduct

  """property"""
  property: AiNotificationsPropertyFilter

  """statuses"""
  statuses: [AiNotificationsChannelStatus!]

  """type"""
  type: AiNotificationsChannelType
}

"""Lambda Integration"""
type CloudLambdaIntegration implements CloudIntegration {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """The object creation date, in epoch (Unix) time"""
  createdAt: EpochSeconds!

  """
  Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
  """
  fetchTags: Boolean

  """The cloud service integration identifier."""
  id: Int

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int @deprecated(reason: "[DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval")

  """The parent linked account identifier."""
  linkedAccount: CloudLinkedAccount

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """The cloud service integration name."""
  name: String

  """The parent NewRelic account identifier."""
  nrAccountId: Int!

  """The cloud service used in the integration."""
  service: CloudService

  """
  Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagKey: String

  """
  Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  tagValue: String

  """The object last update date, in epoch (Unix) time"""
  updatedAt: EpochSeconds!
}

"""
This scalar represents a NRQL query string.

See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about NRQL syntax.
"""
scalar Nrql

"""Create workflow mutation response including errors"""
type AiWorkflowsCreateWorkflowResponse {
  """
  A list of errors that occurred while performing the create workflow action
  """
  errors: [AiWorkflowsCreateResponseError!]!

  """Successfully created workflow"""
  workflow: AiWorkflowsWorkflow
}

"""The input object representing the filter parameters for users"""
input UserManagementUserFilterInput {
  """Filter users by email address"""
  email: UserManagementEmailInput

  """Filter users by email verification state"""
  emailVerificationState: UserManagementEmailVerificationStateInput

  """Filter users by user ID"""
  id: UserManagementUserIdInput

  """Filter users by name"""
  name: UserManagementNameInput

  """Filter users by pending upgrade request"""
  pendingUpgradeRequest: UserManagementPendingUpgradeRequestInput

  """Filter users by type"""
  type: UserManagementTypeInput
}

"""PostgreSQL Flexible Server"""
input CloudAzurePostgresqlflexibleIntegrationInput {
  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int

  """
  Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
  """
  resourceGroups: [String]
}

"""An APM Application entity outline."""
type ApmApplicationEntityOutline implements AlertableEntityOutline & ApmBrowserApplicationEntityOutline & EntityOutline {
  account: AccountOutline

  """The New Relic account ID associated with this entity."""
  accountId: Int

  """The current alerting severity of the entity."""
  alertSeverity: EntityAlertSeverity

  """
  Summary statistics about the Browser App injected by an APM Application.
  """
  apmBrowserSummary: ApmBrowserApplicationSummaryData

  """Summary statistics about the APM App."""
  apmSummary: ApmApplicationSummaryData

  """The ID of the APM Application."""
  applicationId: Int

  """The entity's domain"""
  domain: String

  """A value representing the combination of the entity's domain and type."""
  entityType: EntityType

  """The date of last time the entity has updated any of its fields."""
  firstIndexedAt: EpochMilliseconds

  """The list of golden metrics for a specific entity"""
  goldenMetrics(
    """Context used to fetch the golden metrics"""
    context: EntityGoldenContextInput

    """Time range to apply to the golden metric NRQL query result field"""
    timeWindow: EntityGoldenNrqlTimeWindowInput
  ): EntityGoldenContextScopedGoldenMetrics

  """The list of golden tags for a specific entityType."""
  goldenTags(
    """Context used to fetch the golden tags"""
    context: EntityGoldenContextInput
  ): EntityGoldenContextScopedGoldenTags

  """A unique entity identifier."""
  guid: EntityGuid

  """The time the entity was indexed."""
  indexedAt: EpochMilliseconds

  """The programming language of the APM Application."""
  language: String

  """The last time the entity's reporting status changed."""
  lastReportingChangeAt: EpochMilliseconds

  """The name of this entity."""
  name: String

  """The url to the entity."""
  permalink: String

  """
  The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
  """
  reporting: Boolean

  """The running versions of the language agent in the APM Application."""
  runningAgentVersions: ApmApplicationRunningAgentVersions

  """The service level defined for the entity."""
  serviceLevel: ServiceLevelDefinition

  """Configuration settings for the APM Application"""
  settings: ApmApplicationSettings

  """
  The tags applied to the entity.
  
  For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
  """
  tags: [EntityTag]

  """The entity's type"""
  type: String
}

"""Filters by user name"""
input MultiTenantIdentityUserNameInput {
  """Part of a user name"""
  contains: String

  """A user name"""
  eq: String
}

"""Grace period config per priority"""
type AiIssuesGracePeriodConfig {
  """Grace period for notification in seconds per priority"""
  period: Seconds!

  """Priority for which grace period is defined (MEDIUM/LOW/HIGH/CRITICAL)"""
  priority: AiIssuesPriority!
}

"""An error object for recording the Pixie terms of service acceptance"""
type PixieRecordPixieTosAcceptanceError {
  """A message explaining what the error is about."""
  message: String

  """The type of error."""
  type: PixieRecordPixieTosAcceptanceErrorType
}

"""Result of update operation."""
type DashboardUpdateResult {
  """Dashboard update result."""
  entityResult: DashboardEntityResult

  """Expected errors while processing request."""
  errors: [DashboardUpdateError]
}

"""An object that represents the golden tags scoped by context"""
type EntityGoldenContextScopedGoldenTags {
  """Context for the golden tags"""
  context: EntityGoldenContext!

  """Tags for the domain and type"""
  tags: [EntityGoldenTag!]!
}

"""Possible modes for supported entity types"""
enum Nr1CatalogSupportedEntityTypesMode {
  """Indicates that all entity types are supported"""
  ALL

  """Indicates that no entity types are supported"""
  NONE

  """Indicates that a specific set of entity types are supported"""
  SPECIFIC
}

"""WAFV2"""
input CloudAwsWafv2IntegrationInput {
  """
  Specify each AWS region that includes the resources that you want to monitor.
  """
  awsRegions: [String]

  """
  [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
  """
  inventoryPollingInterval: Int

  """The linked account identifier."""
  linkedAccountId: Int!

  """The data polling interval in seconds."""
  metricsPollingInterval: Int
}